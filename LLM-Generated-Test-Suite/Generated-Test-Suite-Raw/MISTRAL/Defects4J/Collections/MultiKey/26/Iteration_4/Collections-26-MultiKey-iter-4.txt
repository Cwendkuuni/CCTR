```java
import org.junit.Test;
import org.junit.Before;
import org.junit.Assert;

import java.util.Arrays;

public class MultiKeyTest {

    private MultiKey<String> multiKey2;
    private MultiKey<String> multiKey3;
    private MultiKey<String> multiKey4;
    private MultiKey<String> multiKey5;
    private MultiKey<String> multiKeyArray;

    @Before
    public void setUp() {
        multiKey2 = new MultiKey<>("key1", "key2");
        multiKey3 = new MultiKey<>("key1", "key2", "key3");
        multiKey4 = new MultiKey<>("key1", "key2", "key3", "key4");
        multiKey5 = new MultiKey<>("key1", "key2", "key3", "key4", "key5");
        multiKeyArray = new MultiKey<>(new String[]{"key1", "key2", "key3"});
    }

    @Test
    public void testConstructor2Keys() {
        Assert.assertEquals(2, multiKey2.size());
        Assert.assertEquals("key1", multiKey2.getKey(0));
        Assert.assertEquals("key2", multiKey2.getKey(1));
    }

    @Test
    public void testConstructor3Keys() {
        Assert.assertEquals(3, multiKey3.size());
        Assert.assertEquals("key1", multiKey3.getKey(0));
        Assert.assertEquals("key2", multiKey3.getKey(1));
        Assert.assertEquals("key3", multiKey3.getKey(2));
    }

    @Test
    public void testConstructor4Keys() {
        Assert.assertEquals(4, multiKey4.size());
        Assert.assertEquals("key1", multiKey4.getKey(0));
        Assert.assertEquals("key2", multiKey4.getKey(1));
        Assert.assertEquals("key3", multiKey4.getKey(2));
        Assert.assertEquals("key4", multiKey4.getKey(3));
    }

    @Test
    public void testConstructor5Keys() {
        Assert.assertEquals(5, multiKey5.size());
        Assert.assertEquals("key1", multiKey5.getKey(0));
        Assert.assertEquals("key2", multiKey5.getKey(1));
        Assert.assertEquals("key3", multiKey5.getKey(2));
        Assert.assertEquals("key4", multiKey5.getKey(3));
        Assert.assertEquals("key5", multiKey5.getKey(4));
    }

    @Test
    public void testConstructorArrayKeys() {
        Assert.assertEquals(3, multiKeyArray.size());
        Assert.assertEquals("key1", multiKeyArray.getKey(0));
        Assert.assertEquals("key2", multiKeyArray.getKey(1));
        Assert.assertEquals("key3", multiKeyArray.getKey(2));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorArrayKeysNull() {
        new MultiKey<>(null);
    }

    @Test
    public void testGetKeys() {
        String[] keys = multiKey2.getKeys();
        Assert.assertArrayEquals(new String[]{"key1", "key2"}, keys);
    }

    @Test
    public void testGetKey() {
        Assert.assertEquals("key1", multiKey2.getKey(0));
        Assert.assertEquals("key2", multiKey2.getKey(1));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetKeyInvalidIndex() {
        multiKey2.getKey(2);
    }

    @Test
    public void testSize() {
        Assert.assertEquals(2, multiKey2.size());
        Assert.assertEquals(3, multiKey3.size());
        Assert.assertEquals(4, multiKey4.size());
        Assert.assertEquals(5, multiKey5.size());
        Assert.assertEquals(3, multiKeyArray.size());
    }

    @Test
    public void testEquals() {
        MultiKey<String> otherMultiKey2 = new MultiKey<>("key1", "key2");
        Assert.assertTrue(multiKey2.equals(otherMultiKey2));
        Assert.assertFalse(multiKey2.equals(multiKey3));
    }

    @Test
    public void testHashCode() {
        MultiKey<String> otherMultiKey2 = new MultiKey<>("key1", "key2");
        Assert.assertEquals(multiKey2.hashCode(), otherMultiKey2.hashCode());
    }

    @Test
    public void testToString() {
        Assert.assertEquals("MultiKey[key1, key2]", multiKey2.toString());
    }

    @Test
    public void testReadResolve() {
        MultiKey<String> deserializedMultiKey = (MultiKey<String>) multiKey2.readResolve();
        Assert.assertEquals(multiKey2.hashCode(), deserializedMultiKey.hashCode());
    }
}
```