```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.Comparator;
import java.util.Iterator;

public class FrequencyTest {

    private Frequency frequency;

    @Before
    public void setUp() {
        frequency = new Frequency();
    }

    @Test
    public void testDefaultConstructor() {
        assertNotNull(frequency);
    }

    @Test
    public void testConstructorWithComparator() {
        Comparator<Object> comparator = new Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                return ((Comparable) o1).compareTo(o2);
            }
        };
        Frequency freqWithComparator = new Frequency(comparator);
        assertNotNull(freqWithComparator);
    }

    @Test
    public void testToString() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        String result = frequency.toString();
        assertTrue(result.contains("Value \t Freq. \t Pct. \t Cum Pct. \n"));
        assertTrue(result.contains("1\t1\t"));
        assertTrue(result.contains("2\t2\t"));
    }

    @Test
    public void testAddValueObject() {
        frequency.addValue(1);
        assertEquals(1, frequency.getCount(1));
    }

    @Test
    public void testAddValueInt() {
        frequency.addValue(1);
        assertEquals(1, frequency.getCount(1));
    }

    @Test
    public void testAddValueInteger() {
        frequency.addValue(Integer.valueOf(1));
        assertEquals(1, frequency.getCount(1));
    }

    @Test
    public void testAddValueLong() {
        frequency.addValue(1L);
        assertEquals(1, frequency.getCount(1L));
    }

    @Test
    public void testAddValueChar() {
        frequency.addValue('a');
        assertEquals(1, frequency.getCount('a'));
    }

    @Test
    public void testClear() {
        frequency.addValue(1);
        frequency.clear();
        assertEquals(0, frequency.getSumFreq());
    }

    @Test
    public void testValuesIterator() {
        frequency.addValue(1);
        frequency.addValue(2);
        Iterator iterator = frequency.valuesIterator();
        assertTrue(iterator.hasNext());
        assertEquals(Long.valueOf(1), iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(Long.valueOf(2), iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testGetSumFreq() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(3, frequency.getSumFreq());
    }

    @Test
    public void testGetCountObject() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1, frequency.getCount(1));
        assertEquals(2, frequency.getCount(2));
        assertEquals(0, frequency.getCount(3));
    }

    @Test
    public void testGetCountInt() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1, frequency.getCount(1));
        assertEquals(2, frequency.getCount(2));
        assertEquals(0, frequency.getCount(3));
    }

    @Test
    public void testGetCountLong() {
        frequency.addValue(1L);
        frequency.addValue(2L);
        frequency.addValue(2L);
        assertEquals(1, frequency.getCount(1L));
        assertEquals(2, frequency.getCount(2L));
        assertEquals(0, frequency.getCount(3L));
    }

    @Test
    public void testGetCountChar() {
        frequency.addValue('a');
        frequency.addValue('b');
        frequency.addValue('b');
        assertEquals(1, frequency.getCount('a'));
        assertEquals(2, frequency.getCount('b'));
        assertEquals(0, frequency.getCount('c'));
    }

    @Test
    public void testGetPctObject() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1.0 / 3.0, frequency.getPct(1), 0.0001);
        assertEquals(2.0 / 3.0, frequency.getPct(2), 0.0001);
        assertEquals(Double.NaN, frequency.getPct(3), 0.0001);
    }

    @Test
    public void testGetPctInt() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1.0 / 3.0, frequency.getPct(1), 0.0001);
        assertEquals(2.0 / 3.0, frequency.getPct(2), 0.0001);
        assertEquals(Double.NaN, frequency.getPct(3), 0.0001);
    }

    @Test
    public void testGetPctLong() {
        frequency.addValue(1L);
        frequency.addValue(2L);
        frequency.addValue(2L);
        assertEquals(1.0 / 3.0, frequency.getPct(1L), 0.0001);
        assertEquals(2.0 / 3.0, frequency.getPct(2L), 0.0001);
        assertEquals(Double.NaN, frequency.getPct(3L), 0.0001);
    }

    @Test
    public void testGetPctChar() {
        frequency.addValue('a');
        frequency.addValue('b');
        frequency.addValue('b');
        assertEquals(1.0 / 3.0, frequency.getPct('a'), 0.0001);
        assertEquals(2.0 / 3.0, frequency.getPct('b'), 0.0001);
        assertEquals(Double.NaN, frequency.getPct('c'), 0.0001);
    }

    @Test
    public void testGetCumFreqObject() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1, frequency.getCumFreq(1));
        assertEquals(3, frequency.getCumFreq(2));
        assertEquals(0, frequency.getCumFreq(3));
    }

    @Test
    public void testGetCumFreqInt() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1, frequency.getCumFreq(1));
        assertEquals(3, frequency.getCumFreq(2));
        assertEquals(0, frequency.getCumFreq(3));
    }

    @Test
    public void testGetCumFreqLong() {
        frequency.addValue(1L);
        frequency.addValue(2L);
        frequency.addValue(2L);
        assertEquals(1, frequency.getCumFreq(1L));
        assertEquals(3, frequency.getCumFreq(2L));
        assertEquals(0, frequency.getCumFreq(3L));
    }

    @Test
    public void testGetCumFreqChar() {
        frequency.addValue('a');
        frequency.addValue('b');
        frequency.addValue('b');
        assertEquals(1, frequency.getCumFreq('a'));
        assertEquals(3, frequency.getCumFreq('b'));
        assertEquals(0, frequency.getCumFreq('c'));
    }

    @Test
    public void testGetCumPctObject() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1.0 / 3.0, frequency.getCumPct(1), 0.0001);
        assertEquals(1.0, frequency.getCumPct(2), 0.0001);
        assertEquals(Double.NaN, frequency.getCumPct(3), 0.0001);
    }

    @Test
    public void testGetCumPctInt() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(2);
        assertEquals(1.0 / 3.0, frequency.getCumPct(1), 0.0001);
        assertEquals(1.0, frequency.getCumPct(2), 0.0001);
        assertEquals(Double.NaN, frequency.getCumPct(3), 0.0001);
    }

    @Test
    public void testGetCumPctLong() {
        frequency.addValue(1L);
        frequency.addValue(2L);
        frequency.addValue(2L);
        assertEquals(1.0 / 3.0, frequency.getCumPct(1L), 0.0001);
        assertEquals(1.0, frequency.getCumPct(2L), 0.0001);
        assertEquals(Double.NaN, frequency.getCumPct(3L), 0.0001);
    }

    @Test
    public void testGetCumPctChar() {
        frequency.addValue('a');
        frequency.addValue('b');
        frequency.addValue('b');
        assertEquals(1.0 / 3.0, frequency.getCumPct('a'), 0.0001);
        assertEquals(1.0, frequency.getCumPct('b'), 0.0001);
        assertEquals(Double.NaN, frequency.getCumPct('c'), 0.0001);
    }
}
```