```java
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PatternOptionBuilder;
import org.apache.commons.cli.TypeHandler;
import org.junit.Test;
import static org.junit.Assert.*;

public class TypeHandlerTest {

    @Test
    public void testCreateValueString() throws ParseException {
        String str = "testString";
        Object result = TypeHandler.createValue(str, PatternOptionBuilder.STRING_VALUE);
        assertEquals(str, result);
    }

    @Test
    public void testCreateValueObject() throws ParseException {
        String classname = "java.util.Date";
        Object result = TypeHandler.createValue(classname, PatternOptionBuilder.OBJECT_VALUE);
        assertTrue(result instanceof Date);
    }

    @Test
    public void testCreateValueNumber() throws ParseException {
        String numberStr = "123.45";
        Object result = TypeHandler.createValue(numberStr, PatternOptionBuilder.NUMBER_VALUE);
        assertTrue(result instanceof Double);
        assertEquals(123.45, (Double) result, 0.001);

        numberStr = "123";
        result = TypeHandler.createValue(numberStr, PatternOptionBuilder.NUMBER_VALUE);
        assertTrue(result instanceof Long);
        assertEquals(123L, (Long) result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueNumberInvalid() throws ParseException {
        String numberStr = "invalidNumber";
        TypeHandler.createValue(numberStr, PatternOptionBuilder.NUMBER_VALUE);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateValueDate() throws ParseException {
        String dateStr = "2023-10-01";
        TypeHandler.createValue(dateStr, PatternOptionBuilder.DATE_VALUE);
    }

    @Test
    public void testCreateValueClass() throws ParseException {
        String classname = "java.util.Date";
        Object result = TypeHandler.createValue(classname, PatternOptionBuilder.CLASS_VALUE);
        assertEquals(Date.class, result);
    }

    @Test
    public void testCreateValueFile() throws ParseException {
        String filePath = "testFile.txt";
        Object result = TypeHandler.createValue(filePath, PatternOptionBuilder.FILE_VALUE);
        assertTrue(result instanceof File);
        assertEquals(new File(filePath), result);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateValueFiles() throws ParseException {
        String filePaths = "file1.txt,file2.txt";
        TypeHandler.createValue(filePaths, PatternOptionBuilder.FILES_VALUE);
    }

    @Test
    public void testCreateValueURL() throws ParseException {
        String urlStr = "http://example.com";
        Object result = TypeHandler.createValue(urlStr, PatternOptionBuilder.URL_VALUE);
        assertTrue(result instanceof URL);
        assertEquals(new URL(urlStr), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueURLInvalid() throws ParseException {
        String urlStr = "invalidURL";
        TypeHandler.createValue(urlStr, PatternOptionBuilder.URL_VALUE);
    }

    @Test
    public void testCreateObject() throws ParseException {
        String classname = "java.util.Date";
        Object result = TypeHandler.createObject(classname);
        assertTrue(result instanceof Date);
    }

    @Test(expected = ParseException.class)
    public void testCreateObjectInvalidClass() throws ParseException {
        String classname = "invalid.Class";
        TypeHandler.createObject(classname);
    }

    @Test
    public void testCreateNumber() throws ParseException {
        String numberStr = "123.45";
        Number result = TypeHandler.createNumber(numberStr);
        assertTrue(result instanceof Double);
        assertEquals(123.45, result.doubleValue(), 0.001);

        numberStr = "123";
        result = TypeHandler.createNumber(numberStr);
        assertTrue(result instanceof Long);
        assertEquals(123L, result.longValue());
    }

    @Test(expected = ParseException.class)
    public void testCreateNumberInvalid() throws ParseException {
        String numberStr = "invalidNumber";
        TypeHandler.createNumber(numberStr);
    }

    @Test
    public void testCreateClass() throws ParseException {
        String classname = "java.util.Date";
        Class<?> result = TypeHandler.createClass(classname);
        assertEquals(Date.class, result);
    }

    @Test(expected = ParseException.class)
    public void testCreateClassInvalid() throws ParseException {
        String classname = "invalid.Class";
        TypeHandler.createClass(classname);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateDate() {
        String dateStr = "2023-10-01";
        TypeHandler.createDate(dateStr);
    }

    @Test
    public void testCreateURL() throws ParseException {
        String urlStr = "http://example.com";
        URL result = TypeHandler.createURL(urlStr);
        assertEquals(new URL(urlStr), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateURLInvalid() throws ParseException {
        String urlStr = "invalidURL";
        TypeHandler.createURL(urlStr);
    }

    @Test
    public void testCreateFile() {
        String filePath = "testFile.txt";
        File result = TypeHandler.createFile(filePath);
        assertEquals(new File(filePath), result);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateFiles() {
        String filePaths = "file1.txt,file2.txt";
        TypeHandler.createFiles(filePaths);
    }
}
```