```java
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class PosixParserTest {

    private PosixParser parser;
    private Options options;

    @Before
    public void setUp() {
        parser = new PosixParser();
        options = new Options();
        options.addOption("a", false, "Option a");
        options.addOption("b", true, "Option b");
        options.addOption("c", false, "Option c");
    }

    @Test
    public void testFlattenWithValidOptions() {
        String[] arguments = {"-a", "-b", "value", "-c"};
        String[] expected = {"-a", "-b", "value", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithInvalidOption() {
        String[] arguments = {"-a", "-d", "-c"};
        String[] expected = {"-a", "-d", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithStopAtNonOption() {
        String[] arguments = {"-a", "value", "-c"};
        String[] expected = {"-a", "value", "-c"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithSpecialTokens() {
        String[] arguments = {"--", "-a", "--b=value", "-c"};
        String[] expected = {"--", "-a", "--b", "value", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithBursting() {
        String[] arguments = {"-abc"};
        String[] expected = {"-a", "-b", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithBurstingAndStopAtNonOption() {
        String[] arguments = {"-abd"};
        String[] expected = {"-a", "-b", "--", "d"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGobble() {
        List<String> tokens = new ArrayList<>();
        tokens.add("-a");
        parser.gobble(tokens.iterator());
        assertEquals(1, tokens.size());
    }

    @Test
    public void testProcessWithCurrentOption() {
        parser.currentOption = options.getOption("b");
        parser.process("value");
        List<String> tokens = parser.tokens;
        assertEquals(1, tokens.size());
        assertEquals("value", tokens.get(0));
        assertNull(parser.currentOption);
    }

    @Test
    public void testProcessWithoutCurrentOption() {
        parser.process("value");
        List<String> tokens = parser.tokens;
        assertEquals(2, tokens.size());
        assertEquals("--", tokens.get(0));
        assertEquals("value", tokens.get(1));
        assertTrue(parser.eatTheRest);
    }

    @Test
    public void testProcessOptionTokenWithValidOption() {
        parser.processOptionToken("-a", false);
        List<String> tokens = parser.tokens;
        assertEquals(1, tokens.size());
        assertEquals("-a", tokens.get(0));
        assertEquals(options.getOption("a"), parser.currentOption);
    }

    @Test
    public void testProcessOptionTokenWithInvalidOptionAndStopAtNonOption() {
        parser.processOptionToken("-d", true);
        List<String> tokens = parser.tokens;
        assertEquals(1, tokens.size());
        assertEquals("-d", tokens.get(0));
        assertTrue(parser.eatTheRest);
    }

    @Test
    public void testBurstTokenWithValidOptions() {
        parser.burstToken("-abc", false);
        List<String> tokens = parser.tokens;
        assertEquals(3, tokens.size());
        assertEquals("-a", tokens.get(0));
        assertEquals("-b", tokens.get(1));
        assertEquals("-c", tokens.get(2));
    }

    @Test
    public void testBurstTokenWithInvalidOptionAndStopAtNonOption() {
        parser.burstToken("-abd", true);
        List<String> tokens = parser.tokens;
        assertEquals(3, tokens.size());
        assertEquals("-a", tokens.get(0));
        assertEquals("-b", tokens.get(1));
        assertEquals("--d", tokens.get(2));
        assertTrue(parser.eatTheRest);
    }
}
```