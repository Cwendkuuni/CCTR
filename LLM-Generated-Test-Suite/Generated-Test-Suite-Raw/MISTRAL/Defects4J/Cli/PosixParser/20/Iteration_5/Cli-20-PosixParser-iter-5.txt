```java
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class PosixParserTest {

    private PosixParser parser;
    private Options options;

    @Before
    public void setUp() {
        parser = new PosixParser();
        options = new Options();
        options.addOption(Option.builder("a").hasArg().build());
        options.addOption(Option.builder("b").hasArg().build());
        options.addOption(Option.builder("c").build());
    }

    @Test
    public void testInit() {
        parser.init();
        assertEquals(false, parser.eatTheRest);
        assertEquals(0, parser.tokens.size());
        assertNull(parser.currentOption);
    }

    @Test
    public void testFlattenWithLongOption() {
        String[] arguments = {"--foo=bar", "--baz"};
        String[] expected = {"--foo", "bar", "--baz"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithSingleHyphen() {
        String[] arguments = {"-"};
        String[] expected = {"-"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithShortOption() {
        String[] arguments = {"-a", "value"};
        String[] expected = {"-a", "value"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithBursting() {
        String[] arguments = {"-abc"};
        String[] expected = {"-a", "-b", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithStopAtNonOption() {
        String[] arguments = {"-a", "value", "nonOption"};
        String[] expected = {"-a", "value", "--", "nonOption"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGobble() {
        List<String> tokens = new ArrayList<>();
        tokens.add("token1");
        parser.tokens = tokens;
        parser.eatTheRest = true;
        parser.gobble(Arrays.asList("token2", "token3").iterator());
        assertEquals(Arrays.asList("token1", "token2", "token3"), parser.tokens);
    }

    @Test
    public void testProcessWithCurrentOption() {
        parser.currentOption = options.getOption("a");
        parser.process("value");
        assertEquals(Arrays.asList("value"), parser.tokens);
        assertNull(parser.currentOption);
    }

    @Test
    public void testProcessWithoutCurrentOption() {
        parser.process("value");
        assertEquals(Arrays.asList("--", "value"), parser.tokens);
        assertEquals(true, parser.eatTheRest);
    }

    @Test
    public void testProcessOptionTokenWithValidOption() {
        parser.options = options;
        parser.processOptionToken("-a", false);
        assertEquals(Arrays.asList("-a"), parser.tokens);
        assertEquals("a", parser.currentOption.getOpt());
    }

    @Test
    public void testProcessOptionTokenWithInvalidOptionAndStopAtNonOption() {
        parser.options = options;
        parser.processOptionToken("-x", true);
        assertEquals(Arrays.asList("-x"), parser.tokens);
        assertEquals(true, parser.eatTheRest);
    }

    @Test
    public void testBurstTokenWithValidOptions() {
        parser.options = options;
        parser.burstToken("-abc", false);
        assertEquals(Arrays.asList("-a", "-b", "-c"), parser.tokens);
    }

    @Test
    public void testBurstTokenWithInvalidOptionAndStopAtNonOption() {
        parser.options = options;
        parser.burstToken("-ax", true);
        assertEquals(Arrays.asList("-a", "--", "x"), parser.tokens);
        assertEquals(true, parser.eatTheRest);
    }
}
```