```java
import org.apache.commons.cli.Options;
import org.apache.commons.cli.Option;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class PosixParserTest {

    private PosixParser parser;
    private Options options;

    @Before
    public void setUp() {
        parser = new PosixParser();
        options = new Options();
        options.addOption(new Option("a", "alpha"));
        options.addOption(new Option("b", "beta"));
        options.addOption(new Option("c", "charlie"));
    }

    @Test
    public void testFlattenWithValidOptions() {
        String[] arguments = {"-a", "-b", "-c"};
        String[] expected = {"-a", "-b", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithInvalidOption() {
        String[] arguments = {"-a", "-d", "-c"};
        String[] expected = {"-a", "-d", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithStopAtNonOption() {
        String[] arguments = {"-a", "value", "-c"};
        String[] expected = {"-a", "--", "value", "-c"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithLongOption() {
        String[] arguments = {"--alpha", "--beta=value"};
        String[] expected = {"--alpha", "--beta", "value"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithSingleHyphen() {
        String[] arguments = {"-a", "-", "-c"};
        String[] expected = {"-a", "-", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithBurstToken() {
        String[] arguments = {"-abc"};
        String[] expected = {"-a", "-b", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testFlattenWithBurstTokenAndStopAtNonOption() {
        String[] arguments = {"-abd"};
        String[] expected = {"-a", "-b", "--", "d"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGobble() {
        List<String> tokens = Arrays.asList("token1", "token2", "token3");
        parser.tokens.addAll(tokens);
        parser.gobble(tokens.iterator());
        assertEquals(6, parser.tokens.size());
    }

    @Test
    public void testProcessWithCurrentOption() {
        parser.currentOption = options.getOption("a");
        parser.process("value");
        assertEquals(2, parser.tokens.size());
        assertEquals("value", parser.tokens.get(0));
        assertNull(parser.currentOption);
    }

    @Test
    public void testProcessWithoutCurrentOption() {
        parser.process("value");
        assertEquals(2, parser.tokens.size());
        assertEquals("--", parser.tokens.get(0));
        assertEquals("value", parser.tokens.get(1));
        assertTrue(parser.eatTheRest);
    }

    @Test
    public void testProcessOptionTokenWithValidOption() {
        parser.processOptionToken("-a", false);
        assertEquals(1, parser.tokens.size());
        assertEquals("-a", parser.tokens.get(0));
        assertEquals(options.getOption("a"), parser.currentOption);
    }

    @Test
    public void testProcessOptionTokenWithInvalidOptionAndStopAtNonOption() {
        parser.processOptionToken("-d", true);
        assertEquals(1, parser.tokens.size());
        assertEquals("-d", parser.tokens.get(0));
        assertTrue(parser.eatTheRest);
    }

    @Test
    public void testBurstTokenWithValidOptions() {
        parser.burstToken("-abc", false);
        assertEquals(3, parser.tokens.size());
        assertEquals("-a", parser.tokens.get(0));
        assertEquals("-b", parser.tokens.get(1));
        assertEquals("-c", parser.tokens.get(2));
    }

    @Test
    public void testBurstTokenWithInvalidOptionAndStopAtNonOption() {
        parser.burstToken("-abd", true);
        assertEquals(3, parser.tokens.size());
        assertEquals("-a", parser.tokens.get(0));
        assertEquals("-b", parser.tokens.get(1));
        assertEquals("--", parser.tokens.get(2));
        assertTrue(parser.eatTheRest);
    }
}
```