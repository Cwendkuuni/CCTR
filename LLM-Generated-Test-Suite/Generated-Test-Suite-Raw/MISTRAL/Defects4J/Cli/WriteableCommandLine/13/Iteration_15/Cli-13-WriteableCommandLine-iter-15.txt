```java
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class WriteableCommandLineTest {

    private WriteableCommandLine commandLine;
    private Option option;

    @Before
    public void setUp() {
        commandLine = mock(WriteableCommandLine.class);
        option = mock(Option.class);
    }

    @Test
    public void testAddOption() {
        commandLine.addOption(option);
        verify(commandLine).addOption(option);
    }

    @Test
    public void testAddValue() {
        Object value = new Object();
        commandLine.addValue(option, value);
        verify(commandLine).addValue(option, value);
    }

    @Test
    public void testSetDefaultValues() {
        List<Object> defaultValues = new ArrayList<>();
        commandLine.setDefaultValues(option, defaultValues);
        verify(commandLine).setDefaultValues(option, defaultValues);
    }

    @Test
    public void testAddSwitch() {
        boolean value = true;
        commandLine.addSwitch(option, value);
        verify(commandLine).addSwitch(option, value);
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchThrowsException() {
        doThrow(new IllegalStateException()).when(commandLine).addSwitch(option, true);
        commandLine.addSwitch(option, true);
    }

    @Test
    public void testSetDefaultSwitch() {
        Boolean defaultSwitch = true;
        commandLine.setDefaultSwitch(option, defaultSwitch);
        verify(commandLine).setDefaultSwitch(option, defaultSwitch);
    }

    @Test
    public void testAddProperty() {
        String property = "property";
        String value = "value";
        commandLine.addProperty(property, value);
        verify(commandLine).addProperty(property, value);
    }

    @Test
    public void testLooksLikeOption() {
        String argument = "-option";
        when(commandLine.looksLikeOption(argument)).thenReturn(true);
        assertTrue(commandLine.looksLikeOption(argument));
    }

    @Test
    public void testLooksLikeOptionFalse() {
        String argument = "argument";
        when(commandLine.looksLikeOption(argument)).thenReturn(false);
        assertFalse(commandLine.looksLikeOption(argument));
    }
}
```