```java
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;

public class OptionsTest {

    private Options options;
    private OptionGroup optionGroup;
    private Option option;

    @Before
    public void setUp() {
        options = new Options();
        optionGroup = new OptionGroup();
        option = new Option("a", "alpha", false, "alpha option");
    }

    @Test
    public void testAddOptionGroup() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        assertTrue(options.getOptionGroups().contains(optionGroup));
        assertFalse(option.isRequired());
        assertTrue(options.shortOpts.containsKey("a"));
        assertTrue(options.optionGroups.containsKey("a"));
    }

    @Test
    public void testGetOptionGroups() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(1, optionGroups.size());
        assertTrue(optionGroups.contains(optionGroup));
    }

    @Test
    public void testAddOptionWithShortName() {
        options.addOption("b", "beta option");

        assertTrue(options.shortOpts.containsKey("b"));
        assertFalse(options.longOpts.containsKey("beta"));
    }

    @Test
    public void testAddOptionWithShortNameAndArg() {
        options.addOption("c", true, "charlie option");

        assertTrue(options.shortOpts.containsKey("c"));
        assertFalse(options.longOpts.containsKey("charlie"));
    }

    @Test
    public void testAddOptionWithShortAndLongName() {
        options.addOption("d", "delta", false, "delta option");

        assertTrue(options.shortOpts.containsKey("d"));
        assertTrue(options.longOpts.containsKey("delta"));
    }

    @Test
    public void testAddOptionInstance() {
        Option opt = new Option("e", "epsilon", false, "epsilon option");
        options.addOption(opt);

        assertTrue(options.shortOpts.containsKey("e"));
        assertTrue(options.longOpts.containsKey("epsilon"));
    }

    @Test
    public void testGetOptions() {
        options.addOption("f", "foxtrot", false, "foxtrot option");

        Collection<Option> opts = options.getOptions();
        assertEquals(1, opts.size());
        assertTrue(opts.contains(options.getOption("f")));
    }

    @Test
    public void testGetRequiredOptions() {
        Option opt = new Option("g", "golf", false, "golf option");
        opt.setRequired(true);
        options.addOption(opt);

        List requiredOpts = options.getRequiredOptions();
        assertEquals(1, requiredOpts.size());
        assertTrue(requiredOpts.contains("g"));
    }

    @Test
    public void testGetOption() {
        options.addOption("h", "hotel", false, "hotel option");

        Option opt = options.getOption("h");
        assertNotNull(opt);
        assertEquals("h", opt.getOpt());
        assertEquals("hotel", opt.getLongOpt());
    }

    @Test
    public void testGetMatchingOptions() {
        options.addOption("i", "india", false, "india option");
        options.addOption("j", "juliet", false, "juliet option");

        List<String> matchingOpts = options.getMatchingOptions("i");
        assertEquals(1, matchingOpts.size());
        assertTrue(matchingOpts.contains("india"));
    }

    @Test
    public void testHasOption() {
        options.addOption("k", "kilo", false, "kilo option");

        assertTrue(options.hasOption("k"));
        assertTrue(options.hasOption("kilo"));
    }

    @Test
    public void testHasLongOption() {
        options.addOption("l", "lima", false, "lima option");

        assertTrue(options.hasLongOption("lima"));
    }

    @Test
    public void testHasShortOption() {
        options.addOption("m", "mike", false, "mike option");

        assertTrue(options.hasShortOption("m"));
    }

    @Test
    public void testGetOptionGroup() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        OptionGroup group = options.getOptionGroup(option);
        assertNotNull(group);
        assertEquals(optionGroup, group);
    }

    @Test
    public void testToString() {
        options.addOption("n", "november", false, "november option");

        String str = options.toString();
        assertTrue(str.contains("n"));
        assertTrue(str.contains("november"));
    }
}
```