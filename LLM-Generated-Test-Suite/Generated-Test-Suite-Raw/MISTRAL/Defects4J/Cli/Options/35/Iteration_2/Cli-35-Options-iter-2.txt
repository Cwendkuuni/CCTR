```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;

public class OptionsTest {

    private Options options;
    private Option option1;
    private Option option2;
    private OptionGroup group;

    @Before
    public void setUp() {
        options = new Options();
        option1 = new Option("a", "alpha", false, "Alpha option");
        option2 = new Option("b", "beta", true, "Beta option");
        group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
    }

    @Test
    public void testAddOptionGroup() {
        options.addOptionGroup(group);
        assertTrue(options.getOptionGroups().contains(group));
        assertFalse(option1.isRequired());
        assertFalse(option2.isRequired());
    }

    @Test
    public void testGetOptionGroups() {
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    public void testAddOptionShort() {
        options.addOption("c", "Charlie option");
        assertTrue(options.hasShortOption("c"));
        assertFalse(options.hasLongOption("charlie"));
    }

    @Test
    public void testAddOptionShortWithArg() {
        options.addOption("d", true, "Delta option");
        assertTrue(options.hasShortOption("d"));
        assertFalse(options.hasLongOption("delta"));
    }

    @Test
    public void testAddOptionShortAndLong() {
        options.addOption("e", "echo", false, "Echo option");
        assertTrue(options.hasShortOption("e"));
        assertTrue(options.hasLongOption("echo"));
    }

    @Test
    public void testAddOptionInstance() {
        Option opt = new Option("f", "foxtrot", true, "Foxtrot option");
        options.addOption(opt);
        assertTrue(options.hasShortOption("f"));
        assertTrue(options.hasLongOption("foxtrot"));
    }

    @Test
    public void testGetOptions() {
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
        assertTrue(options.getOptions().contains(option1));
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    public void testGetRequiredOptions() {
        Option requiredOpt = new Option("r", "required", true, "Required option");
        requiredOpt.setRequired(true);
        options.addOption(requiredOpt);
        assertEquals(1, options.getRequiredOptions().size());
        assertTrue(options.getRequiredOptions().contains("r"));
    }

    @Test
    public void testGetOption() {
        options.addOption(option1);
        assertEquals(option1, options.getOption("a"));
        assertEquals(option1, options.getOption("alpha"));
    }

    @Test
    public void testGetMatchingOptions() {
        options.addOption("g", "gamma", false, "Gamma option");
        options.addOption("h", "hotel", false, "Hotel option");
        assertEquals(1, options.getMatchingOptions("gam").size());
        assertTrue(options.getMatchingOptions("gam").contains("gamma"));
    }

    @Test
    public void testHasOption() {
        options.addOption(option1);
        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("alpha"));
        assertFalse(options.hasOption("b"));
    }

    @Test
    public void testHasLongOption() {
        options.addOption(option1);
        assertTrue(options.hasLongOption("alpha"));
        assertFalse(options.hasLongOption("beta"));
    }

    @Test
    public void testHasShortOption() {
        options.addOption(option1);
        assertTrue(options.hasShortOption("a"));
        assertFalse(options.hasShortOption("b"));
    }

    @Test
    public void testGetOptionGroup() {
        options.addOptionGroup(group);
        assertEquals(group, options.getOptionGroup(option1));
        assertEquals(group, options.getOptionGroup(option2));
    }

    @Test
    public void testToString() {
        options.addOption(option1);
        options.addOption(option2);
        String result = options.toString();
        assertTrue(result.contains("a"));
        assertTrue(result.contains("alpha"));
        assertTrue(result.contains("b"));
        assertTrue(result.contains("beta"));
    }
}
```