```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class OptionsTest {

    private Options options;
    private OptionGroup optionGroup;
    private Option option;

    @Before
    public void setUp() {
        options = new Options();
        optionGroup = new OptionGroup();
        option = new Option("o", "option", false, "test option");
    }

    @Test
    public void testAddOptionGroup() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        assertTrue(options.getOptionGroups().contains(optionGroup));
        assertFalse(option.isRequired());
        assertTrue(options.shortOpts.containsKey("o"));
        assertTrue(options.optionGroups.containsKey("o"));
    }

    @Test
    public void testGetOptionGroups() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup));
    }

    @Test
    public void testAddOptionWithShortName() {
        options.addOption("s", "short option");

        assertTrue(options.shortOpts.containsKey("s"));
        assertFalse(options.longOpts.containsKey("short option"));
    }

    @Test
    public void testAddOptionWithShortNameAndArg() {
        options.addOption("s", true, "short option with arg");

        assertTrue(options.shortOpts.containsKey("s"));
        assertFalse(options.longOpts.containsKey("short option with arg"));
    }

    @Test
    public void testAddOptionWithShortAndLongName() {
        options.addOption("s", "long", false, "short and long option");

        assertTrue(options.shortOpts.containsKey("s"));
        assertTrue(options.longOpts.containsKey("long"));
    }

    @Test
    public void testAddOptionInstance() {
        Option opt = new Option("o", "option", false, "test option");
        options.addOption(opt);

        assertTrue(options.shortOpts.containsKey("o"));
        assertTrue(options.longOpts.containsKey("option"));
    }

    @Test
    public void testGetOptions() {
        options.addOption("s", "short option");
        options.addOption("l", "long", false, "long option");

        Collection<Option> opts = options.getOptions();
        assertEquals(2, opts.size());
    }

    @Test
    public void testGetRequiredOptions() {
        Option requiredOpt = new Option("r", "required", true, "required option");
        options.addOption(requiredOpt);

        List requiredOpts = options.getRequiredOptions();
        assertTrue(requiredOpts.contains("r"));
    }

    @Test
    public void testGetOption() {
        options.addOption("s", "short option");
        options.addOption("l", "long", false, "long option");

        Option opt = options.getOption("s");
        assertNotNull(opt);
        assertEquals("s", opt.getOpt());

        opt = options.getOption("long");
        assertNotNull(opt);
        assertEquals("long", opt.getLongOpt());
    }

    @Test
    public void testGetMatchingOptions() {
        options.addOption("l", "long", false, "long option");
        options.addOption("la", "longa", false, "longa option");

        List<String> matchingOpts = options.getMatchingOptions("lo");
        assertEquals(2, matchingOpts.size());
        assertTrue(matchingOpts.contains("long"));
        assertTrue(matchingOpts.contains("longa"));
    }

    @Test
    public void testHasOption() {
        options.addOption("s", "short option");
        options.addOption("l", "long", false, "long option");

        assertTrue(options.hasOption("s"));
        assertTrue(options.hasOption("long"));
        assertFalse(options.hasOption("nonexistent"));
    }

    @Test
    public void testHasLongOption() {
        options.addOption("l", "long", false, "long option");

        assertTrue(options.hasLongOption("long"));
        assertFalse(options.hasLongOption("nonexistent"));
    }

    @Test
    public void testHasShortOption() {
        options.addOption("s", "short option");

        assertTrue(options.hasShortOption("s"));
        assertFalse(options.hasShortOption("nonexistent"));
    }

    @Test
    public void testGetOptionGroup() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        OptionGroup group = options.getOptionGroup(option);
        assertNotNull(group);
        assertEquals(optionGroup, group);
    }

    @Test
    public void testToString() {
        options.addOption("s", "short option");
        options.addOption("l", "long", false, "long option");

        String str = options.toString();
        assertTrue(str.contains("short"));
        assertTrue(str.contains("long"));
    }
}
```