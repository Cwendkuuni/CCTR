```java
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;

public class OptionsTest {

    private Options options;
    private OptionGroup optionGroup;
    private Option option;

    @Before
    public void setUp() {
        options = new Options();
        optionGroup = new OptionGroup();
        option = new Option("t", "test", false, "test option");
    }

    @Test
    public void testAddOptionGroup() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        assertTrue(options.getOptionGroups().contains(optionGroup));
        assertFalse(option.isRequired());
        assertTrue(options.shortOpts.containsKey("t"));
        assertTrue(options.longOpts.containsKey("test"));
    }

    @Test
    public void testGetOptionGroups() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(1, optionGroups.size());
        assertTrue(optionGroups.contains(optionGroup));
    }

    @Test
    public void testAddOptionWithShortName() {
        options.addOption("h", "help");

        assertTrue(options.shortOpts.containsKey("h"));
        assertFalse(options.longOpts.containsKey("help"));
    }

    @Test
    public void testAddOptionWithShortNameAndArg() {
        options.addOption("f", true, "file");

        assertTrue(options.shortOpts.containsKey("f"));
        assertFalse(options.longOpts.containsKey("file"));
    }

    @Test
    public void testAddOptionWithShortAndLongName() {
        options.addOption("v", "verbose", false, "verbose mode");

        assertTrue(options.shortOpts.containsKey("v"));
        assertTrue(options.longOpts.containsKey("verbose"));
    }

    @Test
    public void testAddOptionInstance() {
        Option opt = new Option("d", "debug", false, "debug mode");
        options.addOption(opt);

        assertTrue(options.shortOpts.containsKey("d"));
        assertTrue(options.longOpts.containsKey("debug"));
    }

    @Test
    public void testGetOptions() {
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");

        Collection<Option> opts = options.getOptions();
        assertEquals(2, opts.size());
    }

    @Test
    public void testGetRequiredOptions() {
        Option requiredOpt = new Option("r", "required", true, "required option");
        options.addOption(requiredOpt);

        List requiredOpts = options.getRequiredOptions();
        assertEquals(1, requiredOpts.size());
        assertTrue(requiredOpts.contains("r"));
    }

    @Test
    public void testGetOption() {
        options.addOption("x", "extra", false, "extra option");

        Option opt = options.getOption("x");
        assertNotNull(opt);
        assertEquals("x", opt.getOpt());

        opt = options.getOption("extra");
        assertNotNull(opt);
        assertEquals("extra", opt.getLongOpt());
    }

    @Test
    public void testGetMatchingOptions() {
        options.addOption("l", "log", false, "log option");
        options.addOption("l", "logfile", false, "log file option");

        List<String> matchingOpts = options.getMatchingOptions("log");
        assertEquals(2, matchingOpts.size());
        assertTrue(matchingOpts.contains("log"));
        assertTrue(matchingOpts.contains("logfile"));
    }

    @Test
    public void testHasOption() {
        options.addOption("s", "silent", false, "silent mode");

        assertTrue(options.hasOption("s"));
        assertTrue(options.hasOption("silent"));
        assertFalse(options.hasOption("verbose"));
    }

    @Test
    public void testHasLongOption() {
        options.addOption("s", "silent", false, "silent mode");

        assertTrue(options.hasLongOption("silent"));
        assertFalse(options.hasLongOption("verbose"));
    }

    @Test
    public void testHasShortOption() {
        options.addOption("s", "silent", false, "silent mode");

        assertTrue(options.hasShortOption("s"));
        assertFalse(options.hasShortOption("v"));
    }

    @Test
    public void testGetOptionGroup() {
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);

        OptionGroup group = options.getOptionGroup(option);
        assertNotNull(group);
        assertEquals(optionGroup, group);
    }

    @Test
    public void testToString() {
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");

        String str = options.toString();
        assertTrue(str.contains("alpha"));
        assertTrue(str.contains("beta"));
    }
}
```