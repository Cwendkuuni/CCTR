```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;

public class OptionsTest {

    private Options options;
    private OptionGroup optionGroup;
    private Option option1;
    private Option option2;

    @Before
    public void setUp() {
        options = new Options();
        optionGroup = new OptionGroup();
        option1 = new Option("a", "alpha", false, "alpha option");
        option2 = new Option("b", "beta", true, "beta option");
    }

    @Test
    public void testAddOptionGroup() {
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        options.addOptionGroup(optionGroup);

        assertTrue(options.getOptionGroups().contains(optionGroup));
        assertFalse(option1.isRequired());
        assertFalse(option2.isRequired());
    }

    @Test
    public void testGetOptionGroups() {
        optionGroup.addOption(option1);
        options.addOptionGroup(optionGroup);

        assertEquals(1, options.getOptionGroups().size());
        assertTrue(options.getOptionGroups().contains(optionGroup));
    }

    @Test
    public void testAddOptionWithShortName() {
        options.addOption("a", "alpha option");

        assertTrue(options.hasOption("a"));
        assertFalse(options.hasLongOption("alpha"));
    }

    @Test
    public void testAddOptionWithShortNameAndArg() {
        options.addOption("b", true, "beta option");

        assertTrue(options.hasOption("b"));
        assertFalse(options.hasLongOption("beta"));
    }

    @Test
    public void testAddOptionWithShortAndLongName() {
        options.addOption("c", "charlie", false, "charlie option");

        assertTrue(options.hasOption("c"));
        assertTrue(options.hasLongOption("charlie"));
    }

    @Test
    public void testAddOptionInstance() {
        Option option = new Option("d", "delta", false, "delta option");
        options.addOption(option);

        assertTrue(options.hasOption("d"));
        assertTrue(options.hasLongOption("delta"));
    }

    @Test
    public void testGetOptions() {
        options.addOption("a", "alpha option");
        options.addOption("b", true, "beta option");

        assertEquals(2, options.getOptions().size());
    }

    @Test
    public void testGetRequiredOptions() {
        Option requiredOption = new Option("r", "required", true, "required option");
        requiredOption.setRequired(true);
        options.addOption(requiredOption);

        assertEquals(1, options.getRequiredOptions().size());
        assertTrue(options.getRequiredOptions().contains("r"));
    }

    @Test
    public void testGetOption() {
        options.addOption("a", "alpha option");
        options.addOption("b", "beta", true, "beta option");

        assertEquals(option1, options.getOption("a"));
        assertEquals(option2, options.getOption("beta"));
    }

    @Test
    public void testGetMatchingOptions() {
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");

        assertEquals(1, options.getMatchingOptions("alp").size());
        assertTrue(options.getMatchingOptions("alp").contains("alpha"));

        assertEquals(2, options.getMatchingOptions("be").size());
        assertTrue(options.getMatchingOptions("be").contains("beta"));
    }

    @Test
    public void testHasOption() {
        options.addOption("a", "alpha option");
        options.addOption("b", "beta", true, "beta option");

        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("beta"));
        assertFalse(options.hasOption("c"));
    }

    @Test
    public void testHasLongOption() {
        options.addOption("a", "alpha", false, "alpha option");

        assertTrue(options.hasLongOption("alpha"));
        assertFalse(options.hasLongOption("beta"));
    }

    @Test
    public void testHasShortOption() {
        options.addOption("a", "alpha option");

        assertTrue(options.hasShortOption("a"));
        assertFalse(options.hasShortOption("b"));
    }

    @Test
    public void testGetOptionGroup() {
        optionGroup.addOption(option1);
        options.addOptionGroup(optionGroup);

        assertEquals(optionGroup, options.getOptionGroup(option1));
    }

    @Test
    public void testToString() {
        options.addOption("a", "alpha option");
        options.addOption("b", "beta", true, "beta option");

        String result = options.toString();
        assertTrue(result.contains("a"));
        assertTrue(result.contains("alpha"));
        assertTrue(result.contains("b"));
        assertTrue(result.contains("beta"));
    }
}
```