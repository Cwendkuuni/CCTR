```java
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.junit.Before;
import org.junit.Test;

import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.*;

public class CommandLineTest {

    private CommandLine commandLine;
    private Option optionA;
    private Option optionB;

    @Before
    public void setUp() {
        commandLine = new CommandLine();
        optionA = new Option("a", "optionA");
        optionB = new Option("b", "optionB");
        optionB.setArgs(1);
        optionB.addValue("valueB");
    }

    @Test
    public void testHasOptionString() {
        commandLine.addOption(optionA);
        assertTrue(commandLine.hasOption("a"));
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    public void testHasOptionChar() {
        commandLine.addOption(optionA);
        assertTrue(commandLine.hasOption('a'));
        assertFalse(commandLine.hasOption('b'));
    }

    @Test
    public void testGetOptionObjectString() {
        commandLine.addOption(optionB);
        assertEquals("valueB", commandLine.getOptionObject("b"));
        assertNull(commandLine.getOptionObject("a"));
    }

    @Test
    public void testGetOptionObjectChar() {
        commandLine.addOption(optionB);
        assertEquals("valueB", commandLine.getOptionObject('b'));
        assertNull(commandLine.getOptionObject('a'));
    }

    @Test
    public void testGetOptionValueString() {
        commandLine.addOption(optionB);
        assertEquals("valueB", commandLine.getOptionValue("b"));
        assertNull(commandLine.getOptionValue("a"));
    }

    @Test
    public void testGetOptionValueChar() {
        commandLine.addOption(optionB);
        assertEquals("valueB", commandLine.getOptionValue('b'));
        assertNull(commandLine.getOptionValue('a'));
    }

    @Test
    public void testGetOptionValuesString() {
        commandLine.addOption(optionB);
        assertArrayEquals(new String[]{"valueB"}, commandLine.getOptionValues("b"));
        assertNull(commandLine.getOptionValues("a"));
    }

    @Test
    public void testGetOptionValuesChar() {
        commandLine.addOption(optionB);
        assertArrayEquals(new String[]{"valueB"}, commandLine.getOptionValues('b'));
        assertNull(commandLine.getOptionValues('a'));
    }

    @Test
    public void testGetOptionValueWithDefaultString() {
        commandLine.addOption(optionB);
        assertEquals("valueB", commandLine.getOptionValue("b", "default"));
        assertEquals("default", commandLine.getOptionValue("a", "default"));
    }

    @Test
    public void testGetOptionValueWithDefaultChar() {
        commandLine.addOption(optionB);
        assertEquals("valueB", commandLine.getOptionValue('b', "default"));
        assertEquals("default", commandLine.getOptionValue('a', "default"));
    }

    @Test
    public void testGetArgs() {
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        assertArrayEquals(new String[]{"arg1", "arg2"}, commandLine.getArgs());
    }

    @Test
    public void testGetArgList() {
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
        assertEquals("arg1", argList.get(0));
        assertEquals("arg2", argList.get(1));
    }

    @Test
    public void testIterator() {
        commandLine.addOption(optionA);
        commandLine.addOption(optionB);
        Iterator<Option> iterator = commandLine.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(optionA, iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(optionB, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testGetOptions() {
        commandLine.addOption(optionA);
        commandLine.addOption(optionB);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
        assertEquals(optionA, options[0]);
        assertEquals(optionB, options[1]);
    }
}
```