```java
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.junit.Before;
import org.junit.Test;

import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.*;

public class CommandLineTest {

    private CommandLine commandLine;

    @Before
    public void setUp() {
        commandLine = new CommandLine();
    }

    @Test
    public void testHasOptionString() {
        commandLine.addOption(new Option("a", "alpha"));
        assertTrue(commandLine.hasOption("a"));
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    public void testHasOptionChar() {
        commandLine.addOption(new Option("a", "alpha"));
        assertTrue(commandLine.hasOption('a'));
        assertFalse(commandLine.hasOption('b'));
    }

    @Test
    public void testGetOptionObjectString() {
        Option option = new Option("a", "alpha");
        option.setType(String.class);
        commandLine.addOption(option);
        commandLine.addArg("value");

        assertNull(commandLine.getOptionObject("b"));
        assertEquals("value", commandLine.getOptionObject("a"));
    }

    @Test
    public void testGetOptionObjectChar() {
        Option option = new Option("a", "alpha");
        option.setType(String.class);
        commandLine.addOption(option);
        commandLine.addArg("value");

        assertNull(commandLine.getOptionObject('b'));
        assertEquals("value", commandLine.getOptionObject('a'));
    }

    @Test
    public void testGetOptionValueString() {
        Option option = new Option("a", "alpha");
        option.addValueForTesting("value");
        commandLine.addOption(option);

        assertNull(commandLine.getOptionValue("b"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    public void testGetOptionValueChar() {
        Option option = new Option("a", "alpha");
        option.addValueForTesting("value");
        commandLine.addOption(option);

        assertNull(commandLine.getOptionValue('b'));
        assertEquals("value", commandLine.getOptionValue('a'));
    }

    @Test
    public void testGetOptionValuesString() {
        Option option = new Option("a", "alpha");
        option.addValueForTesting("value1");
        option.addValueForTesting("value2");
        commandLine.addOption(option);

        assertNull(commandLine.getOptionValues("b"));
        assertArrayEquals(new String[]{"value1", "value2"}, commandLine.getOptionValues("a"));
    }

    @Test
    public void testGetOptionValuesChar() {
        Option option = new Option("a", "alpha");
        option.addValueForTesting("value1");
        option.addValueForTesting("value2");
        commandLine.addOption(option);

        assertNull(commandLine.getOptionValues('b'));
        assertArrayEquals(new String[]{"value1", "value2"}, commandLine.getOptionValues('a'));
    }

    @Test
    public void testGetOptionValueStringDefault() {
        Option option = new Option("a", "alpha");
        option.addValueForTesting("value");
        commandLine.addOption(option);

        assertEquals("default", commandLine.getOptionValue("b", "default"));
        assertEquals("value", commandLine.getOptionValue("a", "default"));
    }

    @Test
    public void testGetOptionValueCharDefault() {
        Option option = new Option("a", "alpha");
        option.addValueForTesting("value");
        commandLine.addOption(option);

        assertEquals("default", commandLine.getOptionValue('b', "default"));
        assertEquals("value", commandLine.getOptionValue('a', "default"));
    }

    @Test
    public void testGetArgs() {
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");

        assertArrayEquals(new String[]{"arg1", "arg2"}, commandLine.getArgs());
    }

    @Test
    public void testGetArgList() {
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");

        List<String> args = commandLine.getArgList();
        assertEquals(2, args.size());
        assertEquals("arg1", args.get(0));
        assertEquals("arg2", args.get(1));
    }

    @Test
    public void testIterator() {
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);

        Iterator<Option> iterator = commandLine.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(option1, iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(option2, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testGetOptions() {
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);

        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
        assertEquals(option1, options[0]);
        assertEquals(option2, options[1]);
    }
}
```