```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;

public class CommandLineTest {

    private CommandLine commandLine;
    private Option option;

    @Before
    public void setUp() {
        commandLine = new CommandLine();
        option = new Option("t", "test", true, "test option");
    }

    @Test
    public void testHasOptionString() {
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("t"));
        assertFalse(commandLine.hasOption("x"));
    }

    @Test
    public void testHasOptionChar() {
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption('t'));
        assertFalse(commandLine.hasOption('x'));
    }

    @Test
    public void testGetOptionObjectString() {
        commandLine.addOption(option);
        assertNull(commandLine.getOptionObject("x"));
        assertNotNull(commandLine.getOptionObject("t"));
    }

    @Test
    public void testGetOptionObjectChar() {
        commandLine.addOption(option);
        assertNull(commandLine.getOptionObject('x'));
        assertNotNull(commandLine.getOptionObject('t'));
    }

    @Test
    public void testGetOptionValueString() {
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValue("x"));
        assertNull(commandLine.getOptionValue("t"));
    }

    @Test
    public void testGetOptionValueChar() {
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValue('x'));
        assertNull(commandLine.getOptionValue('t'));
    }

    @Test
    public void testGetOptionValuesString() {
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValues("x"));
        assertNull(commandLine.getOptionValues("t"));
    }

    @Test
    public void testGetOptionValuesChar() {
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValues('x'));
        assertNull(commandLine.getOptionValues('t'));
    }

    @Test
    public void testGetOptionValueStringDefaultValue() {
        commandLine.addOption(option);
        assertEquals("default", commandLine.getOptionValue("x", "default"));
        assertEquals(null, commandLine.getOptionValue("t", "default"));
    }

    @Test
    public void testGetOptionValueCharDefaultValue() {
        commandLine.addOption(option);
        assertEquals("default", commandLine.getOptionValue('x', "default"));
        assertEquals(null, commandLine.getOptionValue('t', "default"));
    }

    @Test
    public void testGetArgs() {
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        assertArrayEquals(new String[]{"arg1", "arg2"}, commandLine.getArgs());
    }

    @Test
    public void testGetArgList() {
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        assertEquals(2, commandLine.getArgList().size());
        assertTrue(commandLine.getArgList().contains("arg1"));
        assertTrue(commandLine.getArgList().contains("arg2"));
    }

    @Test
    public void testIterator() {
        commandLine.addOption(option);
        assertTrue(commandLine.iterator().hasNext());
        assertEquals(option, commandLine.iterator().next());
    }

    @Test
    public void testGetOptions() {
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
        assertEquals(option, options[0]);
    }
}
```