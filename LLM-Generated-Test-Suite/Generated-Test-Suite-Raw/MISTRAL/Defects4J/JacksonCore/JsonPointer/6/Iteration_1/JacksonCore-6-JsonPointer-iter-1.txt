```java
package com.fasterxml.jackson.core;

import static org.junit.Assert.*;
import org.junit.Test;

public class JsonPointerTest {

    @Test
    public void testCompileEmptyPointer() {
        JsonPointer pointer = JsonPointer.compile("");
        assertEquals(JsonPointer.EMPTY, pointer);
    }

    @Test
    public void testCompileNullPointer() {
        JsonPointer pointer = JsonPointer.compile(null);
        assertEquals(JsonPointer.EMPTY, pointer);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCompileInvalidPointer() {
        JsonPointer.compile("invalidPointer");
    }

    @Test
    public void testCompileValidPointer() {
        JsonPointer pointer = JsonPointer.compile("/foo");
        assertNotNull(pointer);
        assertEquals("/foo", pointer.toString());
    }

    @Test
    public void testValueOf() {
        JsonPointer pointer = JsonPointer.valueOf("/foo");
        assertNotNull(pointer);
        assertEquals("/foo", pointer.toString());
    }

    @Test
    public void testMatches() {
        JsonPointer pointer = JsonPointer.compile("/foo");
        assertFalse(pointer.matches());

        JsonPointer emptyPointer = JsonPointer.compile("");
        assertTrue(emptyPointer.matches());
    }

    @Test
    public void testGetMatchingProperty() {
        JsonPointer pointer = JsonPointer.compile("/foo");
        assertEquals("foo", pointer.getMatchingProperty());
    }

    @Test
    public void testGetMatchingIndex() {
        JsonPointer pointer = JsonPointer.compile("/0");
        assertEquals(0, pointer.getMatchingIndex());
    }

    @Test
    public void testMayMatchProperty() {
        JsonPointer pointer = JsonPointer.compile("/foo");
        assertTrue(pointer.mayMatchProperty());

        JsonPointer emptyPointer = JsonPointer.compile("");
        assertFalse(emptyPointer.mayMatchProperty());
    }

    @Test
    public void testMayMatchElement() {
        JsonPointer pointer = JsonPointer.compile("/0");
        assertTrue(pointer.mayMatchElement());

        JsonPointer emptyPointer = JsonPointer.compile("");
        assertFalse(emptyPointer.mayMatchElement());
    }

    @Test
    public void testMatchProperty() {
        JsonPointer pointer = JsonPointer.compile("/foo/bar");
        JsonPointer nextSegment = pointer.matchProperty("foo");
        assertNotNull(nextSegment);
        assertEquals("/bar", nextSegment.toString());

        JsonPointer mismatchSegment = pointer.matchProperty("baz");
        assertNull(mismatchSegment);
    }

    @Test
    public void testMatchElement() {
        JsonPointer pointer = JsonPointer.compile("/0/1");
        JsonPointer nextSegment = pointer.matchElement(0);
        assertNotNull(nextSegment);
        assertEquals("/1", nextSegment.toString());

        JsonPointer mismatchSegment = pointer.matchElement(1);
        assertNull(mismatchSegment);
    }

    @Test
    public void testTail() {
        JsonPointer pointer = JsonPointer.compile("/foo/bar");
        JsonPointer tail = pointer.tail();
        assertNotNull(tail);
        assertEquals("/bar", tail.toString());

        JsonPointer emptyPointer = JsonPointer.compile("");
        assertNull(emptyPointer.tail());
    }

    @Test
    public void testToString() {
        JsonPointer pointer = JsonPointer.compile("/foo/bar");
        assertEquals("/foo/bar", pointer.toString());
    }

    @Test
    public void testHashCode() {
        JsonPointer pointer1 = JsonPointer.compile("/foo/bar");
        JsonPointer pointer2 = JsonPointer.compile("/foo/bar");
        assertEquals(pointer1.hashCode(), pointer2.hashCode());
    }

    @Test
    public void testEquals() {
        JsonPointer pointer1 = JsonPointer.compile("/foo/bar");
        JsonPointer pointer2 = JsonPointer.compile("/foo/bar");
        assertTrue(pointer1.equals(pointer2));

        JsonPointer pointer3 = JsonPointer.compile("/baz");
        assertFalse(pointer1.equals(pointer3));
    }

    @Test
    public void testParseIndex() {
        assertEquals(0, JsonPointer._parseIndex("0"));
        assertEquals(123, JsonPointer._parseIndex("123"));
        assertEquals(-1, JsonPointer._parseIndex("abc"));
        assertEquals(-1, JsonPointer._parseIndex("0123")); // No leading zeroes allowed
        assertEquals(-1, JsonPointer._parseIndex("12345678901")); // Too long
    }

    @Test
    public void testParseTail() {
        JsonPointer pointer = JsonPointer._parseTail("/foo/bar");
        assertNotNull(pointer);
        assertEquals("/foo/bar", pointer.toString());

        JsonPointer emptyPointer = JsonPointer._parseTail("/");
        assertEquals(JsonPointer.EMPTY, emptyPointer);
    }

    @Test
    public void testParseQuotedTail() {
        JsonPointer pointer = JsonPointer._parseQuotedTail("/foo~1bar", 5);
        assertNotNull(pointer);
        assertEquals("/foo/bar", pointer.toString());
    }

    @Test
    public void testAppendEscape() {
        StringBuilder sb = new StringBuilder();
        JsonPointer._appendEscape(sb, '0');
        assertEquals("~", sb.toString());

        sb = new StringBuilder();
        JsonPointer._appendEscape(sb, '1');
        assertEquals("/", sb.toString());

        sb = new StringBuilder();
        JsonPointer._appendEscape(sb, '2');
        assertEquals("~2", sb.toString());
    }
}
```