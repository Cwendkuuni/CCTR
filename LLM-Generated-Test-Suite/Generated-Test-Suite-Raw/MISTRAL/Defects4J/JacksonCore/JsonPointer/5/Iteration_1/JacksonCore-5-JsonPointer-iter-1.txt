```java
package com.fasterxml.jackson.core;

import static org.junit.Assert.*;
import org.junit.Test;

public class JsonPointerTest {

    @Test
    public void testEmptyPointer() {
        JsonPointer pointer = JsonPointer.EMPTY;
        assertTrue(pointer.matches());
        assertEquals("", pointer.getMatchingProperty());
        assertEquals(-1, pointer.getMatchingIndex());
        assertFalse(pointer.mayMatchProperty());
        assertFalse(pointer.mayMatchElement());
        assertNull(pointer.matchProperty("any"));
        assertNull(pointer.matchElement(0));
        assertNull(pointer.tail());
        assertEquals("", pointer.toString());
    }

    @Test
    public void testCompileValidPointer() {
        JsonPointer pointer = JsonPointer.compile("/foo");
        assertFalse(pointer.matches());
        assertEquals("foo", pointer.getMatchingProperty());
        assertEquals(-1, pointer.getMatchingIndex());
        assertTrue(pointer.mayMatchProperty());
        assertFalse(pointer.mayMatchElement());
        assertNotNull(pointer.matchProperty("foo"));
        assertNull(pointer.matchElement(0));
        assertNull(pointer.tail());
        assertEquals("/foo", pointer.toString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCompileInvalidPointer() {
        JsonPointer.compile("foo");
    }

    @Test
    public void testValueOf() {
        JsonPointer pointer = JsonPointer.valueOf("/bar");
        assertFalse(pointer.matches());
        assertEquals("bar", pointer.getMatchingProperty());
        assertEquals(-1, pointer.getMatchingIndex());
        assertTrue(pointer.mayMatchProperty());
        assertFalse(pointer.mayMatchElement());
        assertNotNull(pointer.matchProperty("bar"));
        assertNull(pointer.matchElement(0));
        assertNull(pointer.tail());
        assertEquals("/bar", pointer.toString());
    }

    @Test
    public void testMatchProperty() {
        JsonPointer pointer = JsonPointer.compile("/baz/qux");
        JsonPointer next = pointer.matchProperty("baz");
        assertNotNull(next);
        assertEquals("qux", next.getMatchingProperty());
        assertNull(next.tail());
    }

    @Test
    public void testMatchElement() {
        JsonPointer pointer = JsonPointer.compile("/0/1");
        JsonPointer next = pointer.matchElement(0);
        assertNotNull(next);
        assertEquals(1, next.getMatchingIndex());
        assertNull(next.tail());
    }

    @Test
    public void testTail() {
        JsonPointer pointer = JsonPointer.compile("/a/b/c");
        JsonPointer tail = pointer.tail();
        assertNotNull(tail);
        assertEquals("/b/c", tail.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        JsonPointer pointer1 = JsonPointer.compile("/x/y");
        JsonPointer pointer2 = JsonPointer.compile("/x/y");
        JsonPointer pointer3 = JsonPointer.compile("/x/z");

        assertEquals(pointer1, pointer2);
        assertEquals(pointer1.hashCode(), pointer2.hashCode());
        assertNotEquals(pointer1, pointer3);
        assertNotEquals(pointer1.hashCode(), pointer3.hashCode());
    }

    @Test
    public void testParseIndex() {
        assertEquals(0, JsonPointer._parseIndex("0"));
        assertEquals(123, JsonPointer._parseIndex("123"));
        assertEquals(-1, JsonPointer._parseIndex("abc"));
        assertEquals(-1, JsonPointer._parseIndex("12345678901")); // too long
    }

    @Test
    public void testParseTail() {
        JsonPointer pointer = JsonPointer._parseTail("/a/b/c");
        assertEquals("/a/b/c", pointer.toString());
        assertEquals("a", pointer.getMatchingProperty());
        JsonPointer tail = pointer.tail();
        assertEquals("/b/c", tail.toString());
    }

    @Test
    public void testParseQuotedTail() {
        JsonPointer pointer = JsonPointer._parseQuotedTail("/a~1b", 2);
        assertEquals("/a/b", pointer.toString());
        assertEquals("a", pointer.getMatchingProperty());
        JsonPointer tail = pointer.tail();
        assertEquals("/b", tail.toString());
    }

    @Test
    public void testAppendEscape() {
        StringBuilder sb = new StringBuilder();
        JsonPointer._appendEscape(sb, '0');
        assertEquals("~", sb.toString());

        sb = new StringBuilder();
        JsonPointer._appendEscape(sb, '1');
        assertEquals("/", sb.toString());

        sb = new StringBuilder();
        JsonPointer._appendEscape(sb, '2');
        assertEquals("~2", sb.toString());
    }
}
```