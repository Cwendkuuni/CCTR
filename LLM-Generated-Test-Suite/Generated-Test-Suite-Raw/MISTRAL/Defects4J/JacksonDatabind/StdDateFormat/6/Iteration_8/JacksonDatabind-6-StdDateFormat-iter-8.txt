```java
package com.fasterxml.jackson.databind.util;

import static org.junit.Assert.*;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

import org.junit.Before;
import org.junit.Test;

public class StdDateFormatTest {

    private StdDateFormat stdDateFormat;

    @Before
    public void setUp() {
        stdDateFormat = new StdDateFormat();
    }

    @Test
    public void testDefaultConstructor() {
        assertNotNull(stdDateFormat);
        assertEquals(Locale.US, stdDateFormat._locale);
    }

    @Test
    public void testConstructorWithTimeZone() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        StdDateFormat dateFormat = new StdDateFormat(tz);
        assertEquals(tz, dateFormat._timezone);
        assertEquals(Locale.US, dateFormat._locale);
    }

    @Test
    public void testConstructorWithTimeZoneAndLocale() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        Locale locale = Locale.FRANCE;
        StdDateFormat dateFormat = new StdDateFormat(tz, locale);
        assertEquals(tz, dateFormat._timezone);
        assertEquals(locale, dateFormat._locale);
    }

    @Test
    public void testWithTimeZone() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        StdDateFormat newDateFormat = stdDateFormat.withTimeZone(tz);
        assertEquals(tz, newDateFormat._timezone);
    }

    @Test
    public void testWithLocale() {
        Locale locale = Locale.FRANCE;
        StdDateFormat newDateFormat = stdDateFormat.withLocale(locale);
        assertEquals(locale, newDateFormat._locale);
    }

    @Test
    public void testClone() {
        StdDateFormat clonedDateFormat = stdDateFormat.clone();
        assertNotSame(stdDateFormat, clonedDateFormat);
        assertEquals(stdDateFormat._timezone, clonedDateFormat._timezone);
        assertEquals(stdDateFormat._locale, clonedDateFormat._locale);
    }

    @Test
    public void testGetBlueprintISO8601Format() {
        DateFormat format = StdDateFormat.getBlueprintISO8601Format();
        assertNotNull(format);
        assertTrue(format instanceof SimpleDateFormat);
    }

    @Test
    public void testGetISO8601FormatWithTimeZone() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        DateFormat format = StdDateFormat.getISO8601Format(tz);
        assertNotNull(format);
        assertTrue(format instanceof SimpleDateFormat);
        assertEquals(tz, format.getTimeZone());
    }

    @Test
    public void testGetISO8601FormatWithTimeZoneAndLocale() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        Locale locale = Locale.FRANCE;
        DateFormat format = StdDateFormat.getISO8601Format(tz, locale);
        assertNotNull(format);
        assertTrue(format instanceof SimpleDateFormat);
        assertEquals(tz, format.getTimeZone());
        assertEquals(locale, ((SimpleDateFormat) format).getDateFormatSymbols().getLocale());
    }

    @Test
    public void testGetBlueprintRFC1123Format() {
        DateFormat format = StdDateFormat.getBlueprintRFC1123Format();
        assertNotNull(format);
        assertTrue(format instanceof SimpleDateFormat);
    }

    @Test
    public void testGetRFC1123FormatWithTimeZoneAndLocale() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        Locale locale = Locale.FRANCE;
        DateFormat format = StdDateFormat.getRFC1123Format(tz, locale);
        assertNotNull(format);
        assertTrue(format instanceof SimpleDateFormat);
        assertEquals(tz, format.getTimeZone());
        assertEquals(locale, ((SimpleDateFormat) format).getDateFormatSymbols().getLocale());
    }

    @Test
    public void testSetTimeZone() {
        TimeZone tz = TimeZone.getTimeZone("UTC");
        stdDateFormat.setTimeZone(tz);
        assertEquals(tz, stdDateFormat._timezone);
    }

    @Test
    public void testParse() throws ParseException {
        String dateStr = "2023-10-05T14:48:00.000Z";
        Date date = stdDateFormat.parse(dateStr);
        assertNotNull(date);
    }

    @Test
    public void testParseWithParsePosition() {
        String dateStr = "2023-10-05T14:48:00.000Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = stdDateFormat.parse(dateStr, pos);
        assertNotNull(date);
        assertEquals(dateStr.length(), pos.getIndex());
    }

    @Test
    public void testFormat() {
        Date date = new Date();
        StringBuffer buffer = new StringBuffer();
        FieldPosition fieldPosition = new FieldPosition(0);
        StringBuffer formattedDate = stdDateFormat.format(date, buffer, fieldPosition);
        assertNotNull(formattedDate);
        assertTrue(formattedDate.length() > 0);
    }

    @Test
    public void testToString() {
        String str = stdDateFormat.toString();
        assertNotNull(str);
        assertTrue(str.contains("DateFormat"));
        assertTrue(str.contains("timezone"));
        assertTrue(str.contains("locale"));
    }

    @Test
    public void testLooksLikeISO8601() {
        assertTrue(stdDateFormat.looksLikeISO8601("2023-10-05T14:48:00.000Z"));
        assertFalse(stdDateFormat.looksLikeISO8601("Thu, 01 Jan 1970 00:00:00 GMT"));
    }

    @Test
    public void testParseAsISO8601() {
        String dateStr = "2023-10-05T14:48:00.000Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = stdDateFormat.parseAsISO8601(dateStr, pos);
        assertNotNull(date);
        assertEquals(dateStr.length(), pos.getIndex());
    }

    @Test
    public void testParseAsRFC1123() {
        String dateStr = "Thu, 01 Jan 1970 00:00:00 GMT";
        ParsePosition pos = new ParsePosition(0);
        Date date = stdDateFormat.parseAsRFC1123(dateStr, pos);
        assertNotNull(date);
        assertEquals(dateStr.length(), pos.getIndex());
    }

    @Test
    public void testHasTimeZone() {
        assertTrue(StdDateFormat.hasTimeZone("2023-10-05T14:48:00.000+0000"));
        assertFalse(StdDateFormat.hasTimeZone("2023-10-05T14:48:00.000Z"));
    }

    @Test
    public void testCloneFormat() {
        DateFormat df = StdDateFormat._cloneFormat(StdDateFormat.DATE_FORMAT_ISO8601, StdDateFormat.DATE_FORMAT_STR_ISO8601, TimeZone.getTimeZone("UTC"), Locale.US);
        assertNotNull(df);
        assertTrue(df instanceof SimpleDateFormat);
    }
}
```