```java
package org.apache.commons.csv;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class CSVPrinterTest {

    private CSVFormat format;
    private Appendable out;
    private CSVPrinter printer;

    @Before
    public void setUp() {
        format = CSVFormat.DEFAULT;
        out = new StringWriter();
        printer = new CSVPrinter(out, format);
    }

    @Test
    public void testConstructor() {
        assertNotNull(printer);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorNullOut() {
        new CSVPrinter(null, format);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorNullFormat() {
        new CSVPrinter(out, null);
    }

    @Test
    public void testClose() throws IOException {
        printer.close();
        verify(out, times(1)).close();
    }

    @Test
    public void testFlush() throws IOException {
        printer.flush();
        verify(out, times(1)).flush();
    }

    @Test
    public void testPrint() throws IOException {
        printer.print("test");
        printer.println();
        assertEquals("test\r\n", out.toString());
    }

    @Test
    public void testPrintNull() throws IOException {
        printer.print(null);
        printer.println();
        assertEquals("\r\n", out.toString());
    }

    @Test
    public void testPrintComment() throws IOException {
        printer.printComment("This is a comment");
        assertEquals("# This is a comment\r\n", out.toString());
    }

    @Test
    public void testPrintCommentDisabled() throws IOException {
        format = format.withCommentStart(null);
        printer = new CSVPrinter(out, format);
        printer.printComment("This is a comment");
        assertEquals("", out.toString());
    }

    @Test
    public void testPrintRecord() throws IOException {
        printer.printRecord("value1", "value2");
        assertEquals("value1,value2\r\n", out.toString());
    }

    @Test
    public void testPrintRecordIterable() throws IOException {
        List<String> values = Arrays.asList("value1", "value2");
        printer.printRecord(values);
        assertEquals("value1,value2\r\n", out.toString());
    }

    @Test
    public void testPrintRecords() throws IOException {
        List<String> values = Arrays.asList("value1", "value2");
        printer.printRecords(values);
        assertEquals("value1\r\nvalue2\r\n", out.toString());
    }

    @Test
    public void testPrintRecordsArray() throws IOException {
        String[] values = {"value1", "value2"};
        printer.printRecords(values);
        assertEquals("value1\r\nvalue2\r\n", out.toString());
    }

    @Test
    public void testPrintRecordsResultSet() throws IOException, SQLException {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getMetaData()).thenReturn(mock(java.sql.ResultSetMetaData.class));
        when(resultSet.getMetaData().getColumnCount()).thenReturn(2);
        when(resultSet.next()).thenReturn(true, false);
        when(resultSet.getString(1)).thenReturn("value1");
        when(resultSet.getString(2)).thenReturn("value2");

        printer.printRecords(resultSet);
        assertEquals("value1,value2\r\n", out.toString());
    }

    @Test
    public void testGetOut() {
        assertEquals(out, printer.getOut());
    }
}
```