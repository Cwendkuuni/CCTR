```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.junit.Before;
import org.junit.Test;

public class CSVPrinterTest {

    private CSVPrinter printer;
    private StringWriter writer;
    private CSVFormat format;

    @Before
    public void setUp() throws IOException {
        writer = new StringWriter();
        format = CSVFormat.DEFAULT;
        printer = new CSVPrinter(writer, format);
    }

    @Test
    public void testPrint() throws IOException {
        printer.print("value1");
        printer.println();
        printer.print("value2");
        printer.close();

        assertEquals("value1\r\nvalue2\r\n", writer.toString());
    }

    @Test
    public void testPrintNull() throws IOException {
        printer.print(null);
        printer.close();

        assertEquals("\r\n", writer.toString());
    }

    @Test
    public void testPrintRecord() throws IOException {
        printer.printRecord("value1", "value2");
        printer.close();

        assertEquals("value1,value2\r\n", writer.toString());
    }

    @Test
    public void testPrintRecords() throws IOException {
        List<String> records = Arrays.asList("value1", "value2");
        printer.printRecords(records);
        printer.close();

        assertEquals("value1\r\nvalue2\r\n", writer.toString());
    }

    @Test
    public void testPrintRecordsArray() throws IOException {
        Object[] records = {"value1", "value2"};
        printer.printRecords(records);
        printer.close();

        assertEquals("value1\r\nvalue2\r\n", writer.toString());
    }

    @Test
    public void testPrintComment() throws IOException {
        printer.printComment("This is a comment");
        printer.close();

        assertEquals("# This is a comment\r\n", writer.toString());
    }

    @Test
    public void testPrintCommentDisabled() throws IOException {
        format = format.withCommentMarker(null);
        printer = new CSVPrinter(writer, format);
        printer.printComment("This is a comment");
        printer.close();

        assertEquals("", writer.toString());
    }

    @Test
    public void testPrintRecordWithEscaping() throws IOException {
        format = format.withEscape('\\');
        printer = new CSVPrinter(writer, format);
        printer.printRecord("value1", "value,2");
        printer.close();

        assertEquals("value1,value\\,2\r\n", writer.toString());
    }

    @Test
    public void testPrintRecordWithQuoting() throws IOException {
        format = format.withQuote('"');
        printer = new CSVPrinter(writer, format);
        printer.printRecord("value1", "value,2");
        printer.close();

        assertEquals("\"value1\",\"value,2\"\r\n", writer.toString());
    }

    @Test
    public void testPrintRecordsResultSet() throws IOException, SQLException {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getMetaData()).thenReturn(mock(java.sql.ResultSetMetaData.class));
        when(resultSet.getMetaData().getColumnCount()).thenReturn(2);
        when(resultSet.next()).thenReturn(true, false);
        when(resultSet.getString(1)).thenReturn("value1");
        when(resultSet.getString(2)).thenReturn("value2");

        printer.printRecords(resultSet);
        printer.close();

        assertEquals("value1,value2\r\n", writer.toString());
    }

    @Test
    public void testClose() throws IOException {
        printer.close();
        verify(writer).close();
    }

    @Test
    public void testFlush() throws IOException {
        printer.flush();
        verify(writer).flush();
    }

    @Test
    public void testGetOut() {
        assertEquals(writer, printer.getOut());
    }
}
```