```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVParserTest {

    private CSVParser parser;
    private static final String CSV_STRING = "name,age\nJohn,30\nJane,25";
    private static final String CSV_FILE_PATH = "test.csv";
    private static final String CSV_URL = "http://example.com/test.csv";

    @Before
    public void setUp() throws IOException {
        // Create a temporary CSV file for testing
        File file = new File(CSV_FILE_PATH);
        file.createNewFile();
        file.deleteOnExit();
    }

    @After
    public void tearDown() throws IOException {
        if (parser != null) {
            parser.close();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        parser = CSVParser.parse(new File(CSV_FILE_PATH), CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testParseString() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL(CSV_URL);
        parser = CSVParser.parse(url, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testClose() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test
    public void testGetCurrentLineNumber() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        assertEquals(1, parser.getCurrentLineNumber());
    }

    @Test
    public void testGetHeaderMap() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT.withHeader());
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertNotNull(headerMap);
        assertEquals(2, headerMap.size());
        assertEquals(Integer.valueOf(0), headerMap.get("name"));
        assertEquals(Integer.valueOf(1), headerMap.get("age"));
    }

    @Test
    public void testGetRecordNumber() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        assertEquals(0, parser.getRecordNumber());
        parser.iterator().next();
        assertEquals(1, parser.getRecordNumber());
    }

    @Test
    public void testGetRecords() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testIterator() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        Iterator<CSVRecord> iterator = parser.iterator();
        assertTrue(iterator.hasNext());
        CSVRecord record = iterator.next();
        assertNotNull(record);
        assertEquals("John", record.get(0));
        assertEquals("30", record.get(1));
    }

    @Test
    public void testNextRecord() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        CSVRecord record = parser.nextRecord();
        assertNotNull(record);
        assertEquals("John", record.get(0));
        assertEquals("30", record.get(1));
    }
}
```