```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVParserTest {

    private CSVParser parser;

    @Before
    public void setUp() throws IOException {
        String csvData = "name,age,city\nJohn,30,New York\nJane,25,Los Angeles";
        parser = CSVParser.parse(csvData, CSVFormat.DEFAULT);
    }

    @After
    public void tearDown() throws IOException {
        if (parser != null) {
            parser.close();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        File file = new File("test.csv");
        CSVParser fileParser = CSVParser.parse(file, CSVFormat.DEFAULT);
        assertNotNull(fileParser);
        fileParser.close();
    }

    @Test
    public void testParseString() throws IOException {
        String csvData = "name,age,city\nJohn,30,New York\nJane,25,Los Angeles";
        CSVParser stringParser = CSVParser.parse(csvData, CSVFormat.DEFAULT);
        assertNotNull(stringParser);
        stringParser.close();
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL("file:///path/to/test.csv");
        CSVParser urlParser = CSVParser.parse(url, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
        assertNotNull(urlParser);
        urlParser.close();
    }

    @Test
    public void testGetRecords() throws IOException {
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
        assertEquals("John", records.get(0).get("name"));
        assertEquals("30", records.get(0).get("age"));
        assertEquals("New York", records.get(0).get("city"));
        assertEquals("Jane", records.get(1).get("name"));
        assertEquals("25", records.get(1).get("age"));
        assertEquals("Los Angeles", records.get(1).get("city"));
    }

    @Test
    public void testGetHeaderMap() {
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertNotNull(headerMap);
        assertEquals(3, headerMap.size());
        assertEquals(Integer.valueOf(0), headerMap.get("name"));
        assertEquals(Integer.valueOf(1), headerMap.get("age"));
        assertEquals(Integer.valueOf(2), headerMap.get("city"));
    }

    @Test
    public void testGetCurrentLineNumber() {
        assertEquals(1, parser.getCurrentLineNumber());
    }

    @Test
    public void testGetRecordNumber() {
        assertEquals(0, parser.getRecordNumber());
        parser.nextRecord();
        assertEquals(1, parser.getRecordNumber());
    }

    @Test
    public void testNextRecord() throws IOException {
        CSVRecord record = parser.nextRecord();
        assertNotNull(record);
        assertEquals("John", record.get("name"));
        assertEquals("30", record.get("age"));
        assertEquals("New York", record.get("city"));

        record = parser.nextRecord();
        assertNotNull(record);
        assertEquals("Jane", record.get("name"));
        assertEquals("25", record.get("age"));
        assertEquals("Los Angeles", record.get("city"));

        record = parser.nextRecord();
        assertNull(record);
    }

    @Test
    public void testIterator() {
        Iterator<CSVRecord> iterator = parser.iterator();
        assertTrue(iterator.hasNext());
        CSVRecord record = iterator.next();
        assertEquals("John", record.get("name"));
        assertEquals("30", record.get("age"));
        assertEquals("New York", record.get("city"));

        assertTrue(iterator.hasNext());
        record = iterator.next();
        assertEquals("Jane", record.get("name"));
        assertEquals("25", record.get("age"));
        assertEquals("Los Angeles", record.get("city"));

        assertFalse(iterator.hasNext());
    }

    @Test
    public void testIsClosed() throws IOException {
        assertFalse(parser.isClosed());
        parser.close();
        assertTrue(parser.isClosed());
    }
}
```