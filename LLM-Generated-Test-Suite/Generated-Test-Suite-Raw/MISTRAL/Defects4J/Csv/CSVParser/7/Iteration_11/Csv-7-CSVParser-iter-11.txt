```java
import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

public class CSVParserTest {

    @Test
    public void testParseFile() throws IOException {
        File file = new File("src/test/resources/test.csv");
        CSVParser parser = CSVParser.parse(file, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertNotNull(records);
        assertEquals(3, records.size());
        parser.close();
    }

    @Test
    public void testParseString() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertNotNull(records);
        assertEquals(2, records.size());
        parser.close();
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL("file:src/test/resources/test.csv");
        CSVParser parser = CSVParser.parse(url, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertNotNull(records);
        assertEquals(3, records.size());
        parser.close();
    }

    @Test
    public void testGetCurrentLineNumber() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        assertEquals(1, parser.getCurrentLineNumber());
        parser.nextRecord();
        assertEquals(2, parser.getCurrentLineNumber());
        parser.close();
    }

    @Test
    public void testGetHeaderMap() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT.withFirstRecordAsHeader());
        assertNotNull(parser.getHeaderMap());
        assertEquals(2, parser.getHeaderMap().size());
        parser.close();
    }

    @Test
    public void testGetRecordNumber() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        assertEquals(0, parser.getRecordNumber());
        parser.nextRecord();
        assertEquals(1, parser.getRecordNumber());
        parser.close();
    }

    @Test
    public void testGetRecords() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertNotNull(records);
        assertEquals(2, records.size());
        parser.close();
    }

    @Test
    public void testIterator() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        int count = 0;
        for (CSVRecord record : parser) {
            count++;
        }
        assertEquals(2, count);
        parser.close();
    }

    @Test
    public void testNextRecord() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        CSVRecord record = parser.nextRecord();
        assertNotNull(record);
        assertEquals("John", record.get(0));
        assertEquals("30", record.get(1));
        parser.close();
    }

    @Test
    public void testClose() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        CSVParser parser = CSVParser.parse(csvString, CSVFormat.DEFAULT);
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseFileNullFile() throws IOException {
        CSVParser.parse(null, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseFileNullFormat() throws IOException {
        File file = new File("src/test/resources/test.csv");
        CSVParser.parse(file, null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseStringNullString() throws IOException {
        CSVParser.parse(null, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseStringNullFormat() throws IOException {
        CSVParser.parse("name,age\nJohn,30\nJane,25", null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseURLNullURL() throws IOException {
        CSVParser.parse(null, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseURLNullCharset() throws IOException {
        URL url = new URL("file:src/test/resources/test.csv");
        CSVParser.parse(url, null, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseURLNullFormat() throws IOException {
        URL url = new URL("file:src/test/resources/test.csv");
        CSVParser.parse(url, StandardCharsets.UTF_8, null);
    }
}
```