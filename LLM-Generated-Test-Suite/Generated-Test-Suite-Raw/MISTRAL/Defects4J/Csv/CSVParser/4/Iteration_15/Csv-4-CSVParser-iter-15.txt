```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVParserTest {

    private CSVParser parser;
    private static final String TEST_CSV_STRING = "name,age\nJohn,30\nJane,25";
    private static final String TEST_CSV_FILE_PATH = "test.csv";
    private static final String TEST_CSV_URL = "http://example.com/test.csv";

    @Before
    public void setUp() throws IOException {
        parser = CSVParser.parse(TEST_CSV_STRING, CSVFormat.DEFAULT);
    }

    @After
    public void tearDown() throws IOException {
        if (parser != null) {
            parser.close();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        File file = new File(TEST_CSV_FILE_PATH);
        CSVParser fileParser = CSVParser.parse(file, CSVFormat.DEFAULT);
        assertNotNull(fileParser);
        fileParser.close();
    }

    @Test
    public void testParseString() throws IOException {
        CSVParser stringParser = CSVParser.parse(TEST_CSV_STRING, CSVFormat.DEFAULT);
        assertNotNull(stringParser);
        stringParser.close();
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL(TEST_CSV_URL);
        CSVParser urlParser = CSVParser.parse(url, Charset.defaultCharset(), CSVFormat.DEFAULT);
        assertNotNull(urlParser);
        urlParser.close();
    }

    @Test
    public void testGetRecords() throws IOException {
        List<CSVRecord> records = parser.getRecords();
        assertNotNull(records);
        assertEquals(2, records.size());
    }

    @Test
    public void testGetHeaderMap() {
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertNotNull(headerMap);
        assertEquals(2, headerMap.size());
        assertEquals(Integer.valueOf(0), headerMap.get("name"));
        assertEquals(Integer.valueOf(1), headerMap.get("age"));
    }

    @Test
    public void testGetCurrentLineNumber() {
        long lineNumber = parser.getCurrentLineNumber();
        assertEquals(1, lineNumber);
    }

    @Test
    public void testGetRecordNumber() {
        long recordNumber = parser.getRecordNumber();
        assertEquals(0, recordNumber);
    }

    @Test
    public void testIterator() {
        Iterator<CSVRecord> iterator = parser.iterator();
        assertTrue(iterator.hasNext());
        CSVRecord record = iterator.next();
        assertNotNull(record);
        assertEquals("John", record.get("name"));
        assertEquals("30", record.get("age"));
    }

    @Test
    public void testNextRecord() throws IOException {
        CSVRecord record = parser.nextRecord();
        assertNotNull(record);
        assertEquals("John", record.get("name"));
        assertEquals("30", record.get("age"));
    }

    @Test
    public void testIsClosed() throws IOException {
        assertFalse(parser.isClosed());
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test(expected = IOException.class)
    public void testClose() throws IOException {
        parser.close();
        parser.close(); // Should not throw an exception
    }
}
```