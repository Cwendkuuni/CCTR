```java
import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CSVParserTest {

    private CSVParser parser;
    private static final String CSV_STRING = "name,age\nJohn,30\nJane,25";
    private static final String CSV_FILE_PATH = "test.csv";

    @Before
    public void setUp() throws Exception {
        // Create a temporary CSV file for testing
        File csvFile = new File(CSV_FILE_PATH);
        csvFile.createNewFile();
    }

    @After
    public void tearDown() throws Exception {
        // Delete the temporary CSV file after testing
        File csvFile = new File(CSV_FILE_PATH);
        if (csvFile.exists()) {
            csvFile.delete();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        File csvFile = new File(CSV_FILE_PATH);
        parser = CSVParser.parse(csvFile, CSVFormat.DEFAULT);
        assertNotNull(parser);
        parser.close();
    }

    @Test
    public void testParseString() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        assertNotNull(parser);
        parser.close();
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL("file:///" + new File(CSV_FILE_PATH).getAbsolutePath());
        parser = CSVParser.parse(url, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
        assertNotNull(parser);
        parser.close();
    }

    @Test
    public void testGetRecords() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
        parser.close();
    }

    @Test
    public void testGetHeaderMap() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT.withHeader());
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertEquals(2, headerMap.size());
        assertTrue(headerMap.containsKey("name"));
        assertTrue(headerMap.containsKey("age"));
        parser.close();
    }

    @Test
    public void testGetCurrentLineNumber() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        assertEquals(1, parser.getCurrentLineNumber());
        parser.close();
    }

    @Test
    public void testGetRecordNumber() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        assertEquals(0, parser.getRecordNumber());
        parser.close();
    }

    @Test
    public void testIterator() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        int count = 0;
        for (CSVRecord record : parser) {
            count++;
        }
        assertEquals(2, count);
        parser.close();
    }

    @Test
    public void testNextRecord() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        CSVRecord record = parser.nextRecord();
        assertNotNull(record);
        assertEquals("John", record.get(0));
        assertEquals("30", record.get(1));
        parser.close();
    }

    @Test
    public void testClose() throws IOException {
        parser = CSVParser.parse(CSV_STRING, CSVFormat.DEFAULT);
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test(expected = IOException.class)
    public void testParseInvalidFile() throws IOException {
        File invalidFile = new File("invalid.csv");
        parser = CSVParser.parse(invalidFile, CSVFormat.DEFAULT);
    }

    @Test(expected = IOException.class)
    public void testParseInvalidURL() throws IOException {
        URL invalidURL = new URL("file:///invalid.csv");
        parser = CSVParser.parse(invalidURL, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseNullFormat() throws IOException {
        parser = CSVParser.parse(CSV_STRING, null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseNullFile() throws IOException {
        parser = CSVParser.parse(null, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseNullURL() throws IOException {
        parser = CSVParser.parse(null, StandardCharsets.UTF_8, CSVFormat.DEFAULT);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseNullCharset() throws IOException {
        URL url = new URL("file:///" + new File(CSV_FILE_PATH).getAbsolutePath());
        parser = CSVParser.parse(url, null, CSVFormat.DEFAULT);
    }
}
```