```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVParserTest {

    private CSVParser parser;
    private File testFile;
    private String testString;
    private URL testURL;
    private Charset testCharset;

    @Before
    public void setUp() throws Exception {
        testFile = new File("src/test/resources/test.csv");
        testString = "name,age\nJohn,30\nJane,25";
        testURL = new URL("file:///src/test/resources/test.csv");
        testCharset = Charset.forName("UTF-8");
    }

    @After
    public void tearDown() throws Exception {
        if (parser != null) {
            parser.close();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        parser = CSVParser.parse(testFile, CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testParseString() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testParseURL() throws IOException {
        parser = CSVParser.parse(testURL, testCharset, CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testConstructor() throws IOException {
        parser = new CSVParser(new StringReader(testString), CSVFormat.DEFAULT);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testClose() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test
    public void testGetCurrentLineNumber() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        assertEquals(1, parser.getCurrentLineNumber());
    }

    @Test
    public void testGetHeaderMap() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertEquals(2, headerMap.size());
        assertTrue(headerMap.containsKey("name"));
        assertTrue(headerMap.containsKey("age"));
    }

    @Test
    public void testGetRecordNumber() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        assertEquals(0, parser.getRecordNumber());
        parser.iterator().next();
        assertEquals(1, parser.getRecordNumber());
    }

    @Test
    public void testGetRecords() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testIterator() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        Iterator<CSVRecord> iterator = parser.iterator();
        assertTrue(iterator.hasNext());
        CSVRecord record = iterator.next();
        assertEquals("John", record.get("name"));
        assertEquals("30", record.get("age"));
        assertTrue(iterator.hasNext());
        record = iterator.next();
        assertEquals("Jane", record.get("name"));
        assertEquals("25", record.get("age"));
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testNextRecord() throws IOException {
        parser = CSVParser.parse(testString, CSVFormat.DEFAULT);
        CSVRecord record = parser.nextRecord();
        assertEquals("John", record.get("name"));
        assertEquals("30", record.get("age"));
        record = parser.nextRecord();
        assertEquals("Jane", record.get("name"));
        assertEquals("25", record.get("age"));
        assertNull(parser.nextRecord());
    }
}
```