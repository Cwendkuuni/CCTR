```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVParserTest {

    private CSVParser parser;
    private CSVFormat format;

    @Before
    public void setUp() {
        format = CSVFormat.DEFAULT;
    }

    @After
    public void tearDown() throws IOException {
        if (parser != null) {
            parser.close();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        File file = new File("src/test/resources/test.csv");
        parser = CSVParser.parse(file, format);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertFalse(records.isEmpty());
    }

    @Test
    public void testParseString() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL("file:src/test/resources/test.csv");
        parser = CSVParser.parse(url, Charset.defaultCharset(), format);
        assertNotNull(parser);
        List<CSVRecord> records = parser.getRecords();
        assertFalse(records.isEmpty());
    }

    @Test
    public void testClose() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test
    public void testGetCurrentLineNumber() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        assertEquals(1, parser.getCurrentLineNumber());
    }

    @Test
    public void testGetHeaderMap() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format.withHeader());
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertEquals(2, headerMap.size());
        assertTrue(headerMap.containsKey("name"));
        assertTrue(headerMap.containsKey("age"));
    }

    @Test
    public void testGetRecordNumber() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        assertEquals(0, parser.getRecordNumber());
        parser.iterator().next();
        assertEquals(1, parser.getRecordNumber());
    }

    @Test
    public void testGetRecords() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(2, records.size());
    }

    @Test
    public void testIterator() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        Iterator<CSVRecord> iterator = parser.iterator();
        assertTrue(iterator.hasNext());
        CSVRecord record = iterator.next();
        assertEquals("John", record.get(0));
        assertEquals("30", record.get(1));
        assertTrue(iterator.hasNext());
        record = iterator.next();
        assertEquals("Jane", record.get(0));
        assertEquals("25", record.get(1));
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testNextRecord() throws IOException {
        String csvString = "name,age\nJohn,30\nJane,25";
        parser = CSVParser.parse(csvString, format);
        CSVRecord record = parser.nextRecord();
        assertEquals("John", record.get(0));
        assertEquals("30", record.get(1));
        record = parser.nextRecord();
        assertEquals("Jane", record.get(0));
        assertEquals("25", record.get(1));
        assertNull(parser.nextRecord());
    }
}
```