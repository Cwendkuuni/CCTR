```java
package org.apache.commons.csv;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.IOException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class LexerTest {

    @Mock
    private CSVFormat format;

    @Mock
    private ExtendedBufferedReader in;

    private Lexer lexer;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(format.getDelimiter()).thenReturn(',');
        when(format.getEscape()).thenReturn('\\');
        when(format.getQuoteChar()).thenReturn('"');
        when(format.getCommentStart()).thenReturn('#');
        when(format.getIgnoreSurroundingSpaces()).thenReturn(true);
        when(format.getIgnoreEmptyLines()).thenReturn(true);
        lexer = new Lexer(format, in) {
            @Override
            Token nextToken(Token reusableToken) throws IOException {
                return null;
            }
        };
    }

    @Test
    public void testGetLineNumber() throws IOException {
        when(in.getLineNumber()).thenReturn(42L);
        assertEquals(42L, lexer.getLineNumber());
    }

    @Test
    public void testReadEscape() throws IOException {
        when(in.read()).thenReturn((int) 'n').thenReturn((int) 'r').thenReturn((int) 't').thenReturn((int) 'b').thenReturn((int) 'f');
        assertEquals(LF, lexer.readEscape());
        assertEquals(CR, lexer.readEscape());
        assertEquals(TAB, lexer.readEscape());
        assertEquals(BACKSPACE, lexer.readEscape());
        assertEquals(FF, lexer.readEscape());
    }

    @Test(expected = IOException.class)
    public void testReadEscapeEOF() throws IOException {
        when(in.read()).thenReturn(END_OF_STREAM);
        lexer.readEscape();
    }

    @Test
    public void testTrimTrailingSpaces() {
        StringBuilder buffer = new StringBuilder("test   ");
        lexer.trimTrailingSpaces(buffer);
        assertEquals("test", buffer.toString());
    }

    @Test
    public void testReadEndOfLine() throws IOException {
        when(in.lookAhead()).thenReturn(LF);
        assertTrue(lexer.readEndOfLine(CR));
        assertTrue(lexer.readEndOfLine(LF));
        assertFalse(lexer.readEndOfLine('a'));
    }

    @Test
    public void testIsWhitespace() {
        assertTrue(lexer.isWhitespace(' '));
        assertFalse(lexer.isWhitespace(','));
    }

    @Test
    public void testIsStartOfLine() {
        assertTrue(lexer.isStartOfLine(LF));
        assertTrue(lexer.isStartOfLine(CR));
        assertTrue(lexer.isStartOfLine(UNDEFINED));
        assertFalse(lexer.isStartOfLine('a'));
    }

    @Test
    public void testIsEndOfFile() {
        assertTrue(lexer.isEndOfFile(END_OF_STREAM));
        assertFalse(lexer.isEndOfFile('a'));
    }

    @Test
    public void testIsDelimiter() {
        assertTrue(lexer.isDelimiter(','));
        assertFalse(lexer.isDelimiter(';'));
    }

    @Test
    public void testIsEscape() {
        assertTrue(lexer.isEscape('\\'));
        assertFalse(lexer.isEscape('/'));
    }

    @Test
    public void testIsQuoteChar() {
        assertTrue(lexer.isQuoteChar('"'));
        assertFalse(lexer.isQuoteChar('\''));
    }

    @Test
    public void testIsCommentStart() {
        assertTrue(lexer.isCommentStart('#'));
        assertFalse(lexer.isCommentStart('!'));
    }
}
```