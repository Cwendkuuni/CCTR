```java
package org.apache.commons.csv;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LexerTest {

    private Lexer lexer;
    private CSVFormat format;
    private ExtendedBufferedReader in;

    @Before
    public void setUp() {
        format = Mockito.mock(CSVFormat.class);
        in = Mockito.mock(ExtendedBufferedReader.class);
        lexer = new Lexer(format, in) {
            @Override
            Token nextToken(Token reusableToken) throws IOException {
                return null;
            }
        };
    }

    @Test
    public void testGetLineNumber() {
        when(in.getLineNumber()).thenReturn(42L);
        assertEquals(42L, lexer.getLineNumber());
    }

    @Test
    public void testReadEscape() throws IOException {
        when(in.read()).thenReturn((int) 'n');
        assertEquals(LF, lexer.readEscape());

        when(in.read()).thenReturn((int) 'r');
        assertEquals(CR, lexer.readEscape());

        when(in.read()).thenReturn((int) 't');
        assertEquals(TAB, lexer.readEscape());

        when(in.read()).thenReturn((int) 'b');
        assertEquals(BACKSPACE, lexer.readEscape());

        when(in.read()).thenReturn((int) 'f');
        assertEquals(FF, lexer.readEscape());

        when(in.read()).thenReturn(CR);
        assertEquals(CR, lexer.readEscape());

        when(in.read()).thenReturn(LF);
        assertEquals(LF, lexer.readEscape());

        when(in.read()).thenReturn(FF);
        assertEquals(FF, lexer.readEscape());

        when(in.read()).thenReturn(TAB);
        assertEquals(TAB, lexer.readEscape());

        when(in.read()).thenReturn(BACKSPACE);
        assertEquals(BACKSPACE, lexer.readEscape());

        when(in.read()).thenReturn(END_OF_STREAM);
        try {
            lexer.readEscape();
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("EOF whilst processing escape sequence", e.getMessage());
        }

        when(in.read()).thenReturn((int) 'x');
        assertEquals('x', lexer.readEscape());
    }

    @Test
    public void testTrimTrailingSpaces() {
        StringBuilder buffer = new StringBuilder("test   ");
        lexer.trimTrailingSpaces(buffer);
        assertEquals("test", buffer.toString());

        buffer = new StringBuilder("   test   ");
        lexer.trimTrailingSpaces(buffer);
        assertEquals("   test", buffer.toString());

        buffer = new StringBuilder("test");
        lexer.trimTrailingSpaces(buffer);
        assertEquals("test", buffer.toString());
    }

    @Test
    public void testReadEndOfLine() throws IOException {
        when(in.lookAhead()).thenReturn(LF);
        when(in.read()).thenReturn(LF);
        assertTrue(lexer.readEndOfLine(CR));

        when(in.lookAhead()).thenReturn(CR);
        when(in.read()).thenReturn(CR);
        assertTrue(lexer.readEndOfLine(CR));

        when(in.lookAhead()).thenReturn(LF);
        when(in.read()).thenReturn(LF);
        assertTrue(lexer.readEndOfLine(LF));

        when(in.lookAhead()).thenReturn(CR);
        when(in.read()).thenReturn(CR);
        assertTrue(lexer.readEndOfLine(LF));

        when(in.lookAhead()).thenReturn('x');
        assertFalse(lexer.readEndOfLine('x'));
    }

    @Test
    public void testIsWhitespace() {
        when(format.getDelimiter()).thenReturn(',');
        assertTrue(lexer.isWhitespace(' '));
        assertTrue(lexer.isWhitespace('\t'));
        assertFalse(lexer.isWhitespace(','));
    }

    @Test
    public void testIsStartOfLine() {
        assertTrue(lexer.isStartOfLine(LF));
        assertTrue(lexer.isStartOfLine(CR));
        assertTrue(lexer.isStartOfLine(UNDEFINED));
        assertFalse(lexer.isStartOfLine('x'));
    }

    @Test
    public void testIsEndOfFile() {
        assertTrue(lexer.isEndOfFile(END_OF_STREAM));
        assertFalse(lexer.isEndOfFile('x'));
    }

    @Test
    public void testIsDelimiter() {
        when(format.getDelimiter()).thenReturn(',');
        assertTrue(lexer.isDelimiter(','));
        assertFalse(lexer.isDelimiter(';'));
    }

    @Test
    public void testIsEscape() {
        when(format.getEscape()).thenReturn('\\');
        assertTrue(lexer.isEscape('\\'));
        assertFalse(lexer.isEscape('/'));
    }

    @Test
    public void testIsQuoteChar() {
        when(format.getQuoteChar()).thenReturn('"');
        assertTrue(lexer.isQuoteChar('"'));
        assertFalse(lexer.isQuoteChar('\''));
    }

    @Test
    public void testIsCommentStart() {
        when(format.getCommentStart()).thenReturn('#');
        assertTrue(lexer.isCommentStart('#'));
        assertFalse(lexer.isCommentStart('%'));
    }
}
```