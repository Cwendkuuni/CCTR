```java
package org.apache.commons.compress.archivers.zip;

import org.junit.Before;
import org.junit.Test;
import java.math.BigInteger;
import java.util.zip.ZipException;
import static org.junit.Assert.*;

public class X7875_NewUnixTest {

    private X7875_NewUnix x7875NewUnix;

    @Before
    public void setUp() {
        x7875NewUnix = new X7875_NewUnix();
    }

    @Test
    public void testGetHeaderId() {
        assertEquals(new ZipShort(0x7875), x7875NewUnix.getHeaderId());
    }

    @Test
    public void testGetUID() {
        assertEquals(1000, x7875NewUnix.getUID());
    }

    @Test
    public void testGetGID() {
        assertEquals(1000, x7875NewUnix.getGID());
    }

    @Test
    public void testSetUID() {
        x7875NewUnix.setUID(1234);
        assertEquals(1234, x7875NewUnix.getUID());
    }

    @Test
    public void testSetGID() {
        x7875NewUnix.setGID(5678);
        assertEquals(5678, x7875NewUnix.getGID());
    }

    @Test
    public void testGetLocalFileDataLength() {
        x7875NewUnix.setUID(1234);
        x7875NewUnix.setGID(5678);
        assertEquals(new ZipShort(10), x7875NewUnix.getLocalFileDataLength());
    }

    @Test
    public void testGetCentralDirectoryLength() {
        x7875NewUnix.setUID(1234);
        x7875NewUnix.setGID(5678);
        assertEquals(new ZipShort(10), x7875NewUnix.getCentralDirectoryLength());
    }

    @Test
    public void testGetLocalFileDataData() {
        x7875NewUnix.setUID(1234);
        x7875NewUnix.setGID(5678);
        byte[] data = x7875NewUnix.getLocalFileDataData();
        assertEquals(10, data.length);
        assertEquals(1, data[0]);
        assertEquals(4, data[1]);
        assertEquals(4, data[2]);
    }

    @Test
    public void testGetCentralDirectoryData() {
        byte[] data = x7875NewUnix.getCentralDirectoryData();
        assertEquals(0, data.length);
    }

    @Test
    public void testParseFromLocalFileData() throws ZipException {
        byte[] data = {1, 4, 0, 0, 0, 123, 4, 0, 0, 0, 56};
        x7875NewUnix.parseFromLocalFileData(data, 0, data.length);
        assertEquals(123, x7875NewUnix.getUID());
        assertEquals(56, x7875NewUnix.getGID());
    }

    @Test
    public void testParseFromCentralDirectoryData() throws ZipException {
        byte[] data = {};
        x7875NewUnix.parseFromCentralDirectoryData(data, 0, data.length);
        // No assertions needed as the method does nothing
    }

    @Test
    public void testToString() {
        String expected = "0x7875 Zip Extra Field: UID=1000 GID=1000";
        assertEquals(expected, x7875NewUnix.toString());
    }

    @Test
    public void testClone() throws CloneNotSupportedException {
        X7875_NewUnix clone = (X7875_NewUnix) x7875NewUnix.clone();
        assertNotSame(x7875NewUnix, clone);
        assertEquals(x7875NewUnix, clone);
    }

    @Test
    public void testEquals() {
        X7875_NewUnix other = new X7875_NewUnix();
        assertTrue(x7875NewUnix.equals(other));
        other.setUID(1234);
        assertFalse(x7875NewUnix.equals(other));
    }

    @Test
    public void testHashCode() {
        X7875_NewUnix other = new X7875_NewUnix();
        assertEquals(x7875NewUnix.hashCode(), other.hashCode());
        other.setUID(1234);
        assertNotEquals(x7875NewUnix.hashCode(), other.hashCode());
    }

    @Test
    public void testTrimLeadingZeroesForceMinLength() {
        byte[] array = {0, 0, 0, 1, 2, 3};
        byte[] trimmedArray = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
        assertEquals(4, trimmedArray.length);
        assertEquals(1, trimmedArray[0]);
        assertEquals(2, trimmedArray[1]);
        assertEquals(3, trimmedArray[2]);
    }
}
```