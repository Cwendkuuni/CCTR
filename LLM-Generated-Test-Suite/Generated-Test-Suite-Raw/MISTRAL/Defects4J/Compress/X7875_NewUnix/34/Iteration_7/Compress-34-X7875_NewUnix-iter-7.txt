```java
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

import java.math.BigInteger;
import java.util.zip.ZipException;

public class X7875_NewUnixTest {

    private X7875_NewUnix x7875NewUnix;

    @Before
    public void setUp() {
        x7875NewUnix = new X7875_NewUnix();
    }

    @Test
    public void testGetHeaderId() {
        ZipShort expectedHeaderId = new ZipShort(0x7875);
        Assert.assertEquals(expectedHeaderId, x7875NewUnix.getHeaderId());
    }

    @Test
    public void testGetUID() {
        long expectedUID = 1000;
        Assert.assertEquals(expectedUID, x7875NewUnix.getUID());
    }

    @Test
    public void testGetGID() {
        long expectedGID = 1000;
        Assert.assertEquals(expectedGID, x7875NewUnix.getGID());
    }

    @Test
    public void testSetUID() {
        long uid = 123456789L;
        x7875NewUnix.setUID(uid);
        Assert.assertEquals(uid, x7875NewUnix.getUID());
    }

    @Test
    public void testSetGID() {
        long gid = 987654321L;
        x7875NewUnix.setGID(gid);
        Assert.assertEquals(gid, x7875NewUnix.getGID());
    }

    @Test
    public void testGetLocalFileDataLength() {
        ZipShort expectedLength = new ZipShort(7); // 3 (version + uidSize + gidSize) + 2 (uid) + 2 (gid)
        Assert.assertEquals(expectedLength, x7875NewUnix.getLocalFileDataLength());
    }

    @Test
    public void testGetCentralDirectoryLength() {
        ZipShort expectedLength = new ZipShort(7); // 3 (version + uidSize + gidSize) + 2 (uid) + 2 (gid)
        Assert.assertEquals(expectedLength, x7875NewUnix.getCentralDirectoryLength());
    }

    @Test
    public void testGetLocalFileDataData() {
        byte[] expectedData = new byte[]{1, 2, 0xE8, 0x03, 2, 0xE8, 0x03}; // version, uidSize, uid, gidSize, gid
        Assert.assertArrayEquals(expectedData, x7875NewUnix.getLocalFileDataData());
    }

    @Test
    public void testGetCentralDirectoryData() {
        byte[] expectedData = new byte[0];
        Assert.assertArrayEquals(expectedData, x7875NewUnix.getCentralDirectoryData());
    }

    @Test
    public void testParseFromLocalFileData() throws ZipException {
        byte[] data = new byte[]{1, 2, 0xE8, 0x03, 2, 0xE8, 0x03}; // version, uidSize, uid, gidSize, gid
        x7875NewUnix.parseFromLocalFileData(data, 0, data.length);
        Assert.assertEquals(1000, x7875NewUnix.getUID());
        Assert.assertEquals(1000, x7875NewUnix.getGID());
    }

    @Test
    public void testParseFromCentralDirectoryData() throws ZipException {
        byte[] data = new byte[0];
        x7875NewUnix.parseFromCentralDirectoryData(data, 0, data.length);
        // No assertions needed as the method does nothing
    }

    @Test
    public void testToString() {
        String expectedString = "0x7875 Zip Extra Field: UID=1000 GID=1000";
        Assert.assertEquals(expectedString, x7875NewUnix.toString());
    }

    @Test
    public void testClone() throws CloneNotSupportedException {
        X7875_NewUnix clone = (X7875_NewUnix) x7875NewUnix.clone();
        Assert.assertEquals(x7875NewUnix, clone);
    }

    @Test
    public void testEquals() {
        X7875_NewUnix other = new X7875_NewUnix();
        Assert.assertEquals(x7875NewUnix, other);
    }

    @Test
    public void testHashCode() {
        X7875_NewUnix other = new X7875_NewUnix();
        Assert.assertEquals(x7875NewUnix.hashCode(), other.hashCode());
    }

    @Test
    public void testTrimLeadingZeroesForceMinLength() {
        byte[] input = new byte[]{0, 0, 0, 1};
        byte[] expectedOutput = new byte[]{1};
        Assert.assertArrayEquals(expectedOutput, X7875_NewUnix.trimLeadingZeroesForceMinLength(input));
    }
}
```