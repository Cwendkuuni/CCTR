```java
package org.apache.commons.compress.compressors.deflate;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

import org.junit.Before;
import org.junit.Test;

public class DeflateCompressorInputStreamTest {

    private byte[] compressedData;
    private byte[] originalData;

    @Before
    public void setUp() throws IOException {
        originalData = "Hello, World!".getBytes();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Deflater deflater = new Deflater();
        DeflaterOutputStream dos = new DeflaterOutputStream(baos, deflater);
        dos.write(originalData);
        dos.close();
        compressedData = baos.toByteArray();
    }

    @Test
    public void testConstructorWithInputStream() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream);
        assertNotNull(deflateStream);
    }

    @Test
    public void testConstructorWithInputStreamAndParameters() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateParameters parameters = new DeflateParameters();
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream, parameters);
        assertNotNull(deflateStream);
    }

    @Test
    public void testRead() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        int data;
        while ((data = deflateStream.read()) != -1) {
            baos.write(data);
        }
        byte[] decompressedData = baos.toByteArray();
        assertArrayEquals(originalData, decompressedData);
    }

    @Test
    public void testReadWithBuffer() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream);

        byte[] buffer = new byte[1024];
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        int bytesRead;
        while ((bytesRead = deflateStream.read(buffer, 0, buffer.length)) != -1) {
            baos.write(buffer, 0, bytesRead);
        }
        byte[] decompressedData = baos.toByteArray();
        assertArrayEquals(originalData, decompressedData);
    }

    @Test
    public void testSkip() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream);

        long skipped = deflateStream.skip(5);
        assertEquals(5, skipped);
    }

    @Test
    public void testAvailable() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream);

        int available = deflateStream.available();
        assertTrue(available > 0);
    }

    @Test
    public void testClose() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateStream = new DeflateCompressorInputStream(inputStream);

        deflateStream.close();
        assertTrue(deflateStream.in.read() == -1);
    }
}
```