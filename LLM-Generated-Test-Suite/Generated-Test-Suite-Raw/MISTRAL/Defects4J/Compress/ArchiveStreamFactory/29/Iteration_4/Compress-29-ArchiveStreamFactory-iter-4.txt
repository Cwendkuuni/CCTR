```java
package org.apache.commons.compress.archivers;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.Before;
import org.junit.Test;

public class ArchiveStreamFactoryTest {

    private ArchiveStreamFactory factory;

    @Before
    public void setUp() {
        factory = new ArchiveStreamFactory();
    }

    @Test
    public void testConstructorWithDefaultEncoding() {
        assertNull(factory.getEntryEncoding());
    }

    @Test
    public void testConstructorWithSpecifiedEncoding() {
        ArchiveStreamFactory factoryWithEncoding = new ArchiveStreamFactory("UTF-8");
        assertEquals("UTF-8", factoryWithEncoding.getEntryEncoding());
    }

    @Test(expected = IllegalStateException.class)
    public void testSetEntryEncodingWithConstructorEncoding() {
        ArchiveStreamFactory factoryWithEncoding = new ArchiveStreamFactory("UTF-8");
        factoryWithEncoding.setEntryEncoding("ISO-8859-1");
    }

    @Test
    public void testSetEntryEncoding() {
        factory.setEntryEncoding("UTF-8");
        assertEquals("UTF-8", factory.getEntryEncoding());
    }

    @Test
    public void testCreateArchiveInputStream() throws Exception {
        InputStream in = new ByteArrayInputStream(new byte[0]);

        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.AR, in));
        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.ARJ, in));
        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, in));
        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.TAR, in));
        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.JAR, in));
        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.CPIO, in));
        assertNotNull(factory.createArchiveInputStream(ArchiveStreamFactory.DUMP, in));

        try {
            factory.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z, in);
            fail("Expected StreamingNotSupportedException");
        } catch (StreamingNotSupportedException e) {
            // expected
        }

        try {
            factory.createArchiveInputStream("unknown", in);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            // expected
        }
    }

    @Test
    public void testCreateArchiveOutputStream() throws Exception {
        OutputStream out = new ByteArrayOutputStream();

        assertNotNull(factory.createArchiveOutputStream(ArchiveStreamFactory.AR, out));
        assertNotNull(factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, out));
        assertNotNull(factory.createArchiveOutputStream(ArchiveStreamFactory.TAR, out));
        assertNotNull(factory.createArchiveOutputStream(ArchiveStreamFactory.JAR, out));
        assertNotNull(factory.createArchiveOutputStream(ArchiveStreamFactory.CPIO, out));

        try {
            factory.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z, out);
            fail("Expected StreamingNotSupportedException");
        } catch (StreamingNotSupportedException e) {
            // expected
        }

        try {
            factory.createArchiveOutputStream("unknown", out);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            // expected
        }
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetect() throws Exception {
        InputStream in = new ByteArrayInputStream(new byte[0]);

        try {
            factory.createArchiveInputStream(in);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            // expected
        }
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectZip() throws Exception {
        byte[] zipSignature = {0x50, 0x4B, 0x03, 0x04}; // ZIP signature
        InputStream in = new ByteArrayInputStream(zipSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof ZipArchiveInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectJar() throws Exception {
        byte[] jarSignature = {0x50, 0x4B, 0x03, 0x04}; // JAR signature (same as ZIP)
        InputStream in = new ByteArrayInputStream(jarSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof JarArchiveInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectAr() throws Exception {
        byte[] arSignature = {0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A}; // AR signature
        InputStream in = new ByteArrayInputStream(arSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof ArArchiveInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectCpio() throws Exception {
        byte[] cpioSignature = {0x30, 0x37, 0x30, 0x37, 0x30, 0x31}; // CPIO signature
        InputStream in = new ByteArrayInputStream(cpioSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof CpioArchiveInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectArj() throws Exception {
        byte[] arjSignature = {0x60, 0xEA}; // ARJ signature
        InputStream in = new ByteArrayInputStream(arjSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof ArjArchiveInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectSevenZ() throws Exception {
        byte[] sevenZSignature = {0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C}; // 7z signature
        InputStream in = new ByteArrayInputStream(sevenZSignature);

        try {
            factory.createArchiveInputStream(in);
            fail("Expected StreamingNotSupportedException");
        } catch (StreamingNotSupportedException e) {
            // expected
        }
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectDump() throws Exception {
        byte[] dumpSignature = new byte[32]; // DUMP signature (32 bytes)
        InputStream in = new ByteArrayInputStream(dumpSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof DumpArchiveInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamAutoDetectTar() throws Exception {
        byte[] tarSignature = new byte[512]; // TAR signature (512 bytes)
        InputStream in = new ByteArrayInputStream(tarSignature);

        ArchiveInputStream ais = factory.createArchiveInputStream(in);
        assertTrue(ais instanceof TarArchiveInputStream);
    }
}
```