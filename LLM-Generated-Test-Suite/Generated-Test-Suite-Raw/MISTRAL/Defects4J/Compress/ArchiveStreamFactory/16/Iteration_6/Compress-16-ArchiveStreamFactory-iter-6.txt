```java
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Test;

public class ArchiveStreamFactoryTest {

    @Test
    public void testCreateArchiveInputStreamWithValidArchiverName() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);

        ArchiveInputStream arStream = factory.createArchiveInputStream(ArchiveStreamFactory.AR, in);
        assertTrue(arStream instanceof ArArchiveInputStream);

        ArchiveInputStream zipStream = factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, in);
        assertTrue(zipStream instanceof ZipArchiveInputStream);

        ArchiveInputStream tarStream = factory.createArchiveInputStream(ArchiveStreamFactory.TAR, in);
        assertTrue(tarStream instanceof TarArchiveInputStream);

        ArchiveInputStream jarStream = factory.createArchiveInputStream(ArchiveStreamFactory.JAR, in);
        assertTrue(jarStream instanceof JarArchiveInputStream);

        ArchiveInputStream cpioStream = factory.createArchiveInputStream(ArchiveStreamFactory.CPIO, in);
        assertTrue(cpioStream instanceof CpioArchiveInputStream);

        ArchiveInputStream dumpStream = factory.createArchiveInputStream(ArchiveStreamFactory.DUMP, in);
        assertTrue(dumpStream instanceof DumpArchiveInputStream);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNullArchiverName() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        factory.createArchiveInputStream(null, in);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNullInputStream() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, null);
    }

    @Test(expected = ArchiveException.class)
    public void testCreateArchiveInputStreamWithUnknownArchiverName() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        factory.createArchiveInputStream("unknown", in);
    }

    @Test
    public void testCreateArchiveOutputStreamWithValidArchiverName() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        OutputStream out = new ByteArrayOutputStream();

        ArchiveOutputStream arStream = factory.createArchiveOutputStream(ArchiveStreamFactory.AR, out);
        assertTrue(arStream instanceof ArArchiveOutputStream);

        ArchiveOutputStream zipStream = factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, out);
        assertTrue(zipStream instanceof ZipArchiveOutputStream);

        ArchiveOutputStream tarStream = factory.createArchiveOutputStream(ArchiveStreamFactory.TAR, out);
        assertTrue(tarStream instanceof TarArchiveOutputStream);

        ArchiveOutputStream jarStream = factory.createArchiveOutputStream(ArchiveStreamFactory.JAR, out);
        assertTrue(jarStream instanceof JarArchiveOutputStream);

        ArchiveOutputStream cpioStream = factory.createArchiveOutputStream(ArchiveStreamFactory.CPIO, out);
        assertTrue(cpioStream instanceof CpioArchiveOutputStream);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveOutputStreamWithNullArchiverName() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        OutputStream out = new ByteArrayOutputStream();
        factory.createArchiveOutputStream(null, out);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveOutputStreamWithNullOutputStream() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, null);
    }

    @Test(expected = ArchiveException.class)
    public void testCreateArchiveOutputStreamWithUnknownArchiverName() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        OutputStream out = new ByteArrayOutputStream();
        factory.createArchiveOutputStream("unknown", out);
    }

    @Test
    public void testCreateArchiveInputStreamWithAutoDetection() throws ArchiveException, IOException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();

        // Create a ZIP archive input stream
        byte[] zipData = createZipData();
        InputStream in = new ByteArrayInputStream(zipData);
        ArchiveInputStream stream = factory.createArchiveInputStream(in);
        assertTrue(stream instanceof ZipArchiveInputStream);

        // Create a TAR archive input stream
        byte[] tarData = createTarData();
        in = new ByteArrayInputStream(tarData);
        stream = factory.createArchiveInputStream(in);
        assertTrue(stream instanceof TarArchiveInputStream);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNullInputStream() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.createArchiveInputStream(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNonMarkSupportedStream() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]) {
            @Override
            public boolean markSupported() {
                return false;
            }
        };
        factory.createArchiveInputStream(in);
    }

    @Test(expected = ArchiveException.class)
    public void testCreateArchiveInputStreamWithUnknownSignature() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        factory.createArchiveInputStream(in);
    }

    private byte[] createZipData() throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipOut = new ZipArchiveOutputStream(out);
        zipOut.close();
        return out.toByteArray();
    }

    private byte[] createTarData() throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        TarArchiveOutputStream tarOut = new TarArchiveOutputStream(out);
        tarOut.close();
        return out.toByteArray();
    }
}
```