```java
package org.apache.commons.compress.archivers;

import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.Assert;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class ArchiveStreamFactoryTest {

    private ArchiveStreamFactory factory;

    @Before
    public void setUp() {
        factory = new ArchiveStreamFactory();
    }

    @After
    public void tearDown() {
        factory = null;
    }

    @Test
    public void testCreateArchiveInputStreamWithNullArchiverName() {
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            factory.createArchiveInputStream(null, in);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertEquals("Archivername must not be null.", e.getMessage());
        } catch (ArchiveException e) {
            Assert.fail("Unexpected ArchiveException");
        }
    }

    @Test
    public void testCreateArchiveInputStreamWithNullInputStream() {
        try {
            factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, null);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertEquals("InputStream must not be null.", e.getMessage());
        } catch (ArchiveException e) {
            Assert.fail("Unexpected ArchiveException");
        }
    }

    @Test
    public void testCreateArchiveInputStreamWithUnknownArchiverName() {
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            factory.createArchiveInputStream("unknown", in);
            Assert.fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            Assert.assertEquals("Archiver: unknown not found.", e.getMessage());
        }
    }

    @Test
    public void testCreateArchiveInputStreamWithKnownArchiverNames() throws ArchiveException {
        InputStream in = new ByteArrayInputStream(new byte[0]);
        Assert.assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.AR, in) instanceof ArArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, in) instanceof ZipArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.TAR, in) instanceof TarArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.JAR, in) instanceof JarArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.CPIO, in) instanceof CpioArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.DUMP, in) instanceof DumpArchiveInputStream);
    }

    @Test
    public void testCreateArchiveOutputStreamWithNullArchiverName() {
        OutputStream out = new ByteArrayOutputStream();
        try {
            factory.createArchiveOutputStream(null, out);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertEquals("Archivername must not be null.", e.getMessage());
        } catch (ArchiveException e) {
            Assert.fail("Unexpected ArchiveException");
        }
    }

    @Test
    public void testCreateArchiveOutputStreamWithNullOutputStream() {
        try {
            factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, null);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertEquals("OutputStream must not be null.", e.getMessage());
        } catch (ArchiveException e) {
            Assert.fail("Unexpected ArchiveException");
        }
    }

    @Test
    public void testCreateArchiveOutputStreamWithUnknownArchiverName() {
        OutputStream out = new ByteArrayOutputStream();
        try {
            factory.createArchiveOutputStream("unknown", out);
            Assert.fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            Assert.assertEquals("Archiver: unknown not found.", e.getMessage());
        }
    }

    @Test
    public void testCreateArchiveOutputStreamWithKnownArchiverNames() throws ArchiveException {
        OutputStream out = new ByteArrayOutputStream();
        Assert.assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.AR, out) instanceof ArArchiveOutputStream);
        Assert.assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, out) instanceof ZipArchiveOutputStream);
        Assert.assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.TAR, out) instanceof TarArchiveOutputStream);
        Assert.assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.JAR, out) instanceof JarArchiveOutputStream);
        Assert.assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.CPIO, out) instanceof CpioArchiveOutputStream);
    }

    @Test
    public void testCreateArchiveInputStreamWithNullInputStream() {
        try {
            factory.createArchiveInputStream(null);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertEquals("Stream must not be null.", e.getMessage());
        } catch (ArchiveException e) {
            Assert.fail("Unexpected ArchiveException");
        }
    }

    @Test
    public void testCreateArchiveInputStreamWithNonMarkSupportedInputStream() {
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            factory.createArchiveInputStream(in);
            Assert.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assert.assertEquals("Mark is not supported.", e.getMessage());
        } catch (ArchiveException e) {
            Assert.fail("Unexpected ArchiveException");
        }
    }

    @Test
    public void testCreateArchiveInputStreamWithUnknownSignature() {
        InputStream in = new ByteArrayInputStream(new byte[0]) {
            @Override
            public boolean markSupported() {
                return true;
            }
        };
        try {
            factory.createArchiveInputStream(in);
            Assert.fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            Assert.assertEquals("No Archiver found for the stream signature", e.getMessage());
        }
    }

    @Test
    public void testCreateArchiveInputStreamWithKnownSignatures() throws ArchiveException, IOException {
        InputStream in = new ByteArrayInputStream(new byte[0]) {
            @Override
            public boolean markSupported() {
                return true;
            }
        };

        // Mocking the signature matching for testing purposes
        byte[] zipSignature = new byte[12];
        byte[] jarSignature = new byte[12];
        byte[] arSignature = new byte[12];
        byte[] cpioSignature = new byte[12];
        byte[] dumpSignature = new byte[32];
        byte[] tarSignature = new byte[512];

        // Simulate the signature matching
        ZipArchiveInputStream.matches(zipSignature, zipSignature.length);
        JarArchiveInputStream.matches(jarSignature, jarSignature.length);
        ArArchiveInputStream.matches(arSignature, arSignature.length);
        CpioArchiveInputStream.matches(cpioSignature, cpioSignature.length);
        DumpArchiveInputStream.matches(dumpSignature, dumpSignature.length);
        TarArchiveInputStream.matches(tarSignature, tarSignature.length);

        // Test the creation of archive input streams
        Assert.assertTrue(factory.createArchiveInputStream(in) instanceof ZipArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(in) instanceof JarArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(in) instanceof ArArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(in) instanceof CpioArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(in) instanceof DumpArchiveInputStream);
        Assert.assertTrue(factory.createArchiveInputStream(in) instanceof TarArchiveInputStream);
    }
}
```