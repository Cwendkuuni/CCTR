```java
package org.jsoup.safety;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.safety.Whitelist;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class CleanerTest {

    private Cleaner cleaner;
    private Whitelist whitelist;

    @Before
    public void setUp() {
        whitelist = Whitelist.basic();
        cleaner = new Cleaner(whitelist);
    }

    @Test
    public void testCleanValidDocument() {
        String html = "<div><p>Hello, World!</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals("Hello, World!", cleanDocument.body().text());
    }

    @Test
    public void testCleanInvalidDocument() {
        String html = "<div><script>alert('xss')</script></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertFalse(cleanDocument.body().html().contains("script"));
    }

    @Test
    public void testIsValidValidDocument() {
        String html = "<div><p>Hello, World!</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        assertTrue(cleaner.isValid(dirtyDocument));
    }

    @Test
    public void testIsValidInvalidDocument() {
        String html = "<div><script>alert('xss')</script></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        assertFalse(cleaner.isValid(dirtyDocument));
    }

    @Test
    public void testCleanDocumentWithTextNode() {
        String html = "<div>Some text</div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals("Some text", cleanDocument.body().text());
    }

    @Test
    public void testCleanDocumentWithDataNode() {
        String html = "<div><script type=\"text/template\">Template content</script></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertFalse(cleanDocument.body().html().contains("script"));
    }

    @Test
    public void testCleanDocumentWithUnsafeAttributes() {
        String html = "<div onclick=\"alert('xss')\">Click me</div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertFalse(cleanDocument.body().html().contains("onclick"));
    }

    @Test
    public void testCleanDocumentWithEnforcedAttributes() {
        whitelist.addAttributes("div", "data-safe", "safe-value");
        String html = "<div>Content</div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        Element div = cleanDocument.selectFirst("div");
        assertEquals("safe-value", div.attr("data-safe"));
    }

    @Test
    public void testCleanDocumentWithNestedElements() {
        String html = "<div><p>Nested <span>content</span></p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals("Nested content", cleanDocument.body().text());
    }

    @Test
    public void testCleanDocumentWithFrameset() {
        String html = "<frameset><frame src=\"frame.html\"></frameset>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertTrue(cleanDocument.body().html().isEmpty());
    }
}
```