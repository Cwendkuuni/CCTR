```java
package org.jsoup.safety;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.safety.Whitelist;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class CleanerTest {

    private Cleaner cleaner;
    private Whitelist whitelist;

    @Before
    public void setUp() {
        whitelist = Whitelist.basic();
        cleaner = new Cleaner(whitelist);
    }

    @Test
    public void testCleanValidDocument() {
        String html = "<div><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals("Hello World", cleanDocument.select("p").text());
    }

    @Test
    public void testCleanInvalidDocument() {
        String html = "<div><script>alert('xss')</script><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals(0, cleanDocument.select("script").size());
        assertEquals("Hello World", cleanDocument.select("p").text());
    }

    @Test
    public void testIsValidDocument() {
        String html = "<div><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        assertTrue(cleaner.isValid(dirtyDocument));
    }

    @Test
    public void testIsInvalidDocument() {
        String html = "<div><script>alert('xss')</script><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        assertFalse(cleaner.isValid(dirtyDocument));
    }

    @Test
    public void testCleanDocumentWithTextNode() {
        String html = "<div>Hello World</div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals("Hello World", cleanDocument.body().text());
    }

    @Test
    public void testCleanDocumentWithDataNode() {
        String html = "<div><script type=\"text/template\">Hello World</script></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertEquals(0, cleanDocument.select("script").size());
    }

    @Test
    public void testCleanDocumentWithAttributes() {
        String html = "<div id=\"test\" class=\"example\"><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        Element div = cleanDocument.select("div").first();
        assertNotNull(div);
        assertEquals("test", div.attr("id"));
        assertEquals("example", div.attr("class"));
    }

    @Test
    public void testCleanDocumentWithUnsafeAttributes() {
        String html = "<div onclick=\"alert('xss')\"><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        Element div = cleanDocument.select("div").first();
        assertNotNull(div);
        assertFalse(div.hasAttr("onclick"));
    }

    @Test
    public void testCleanDocumentWithEnforcedAttributes() {
        whitelist.addAttributes("div", "data-enforced", "enforced-value");
        String html = "<div><p>Hello World</p></div>";
        Document dirtyDocument = Jsoup.parseBodyFragment(html);

        Document cleanDocument = cleaner.clean(dirtyDocument);

        Element div = cleanDocument.select("div").first();
        assertNotNull(div);
        assertEquals("enforced-value", div.attr("data-enforced"));
    }
}
```