```java
package org.jsoup.nodes;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

public class EntitiesTest {

    private Entities entities;

    @Before
    public void setUp() {
        entities = new Entities();
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("unknown"));
    }

    @Test
    public void testIsBaseNamedEntity() {
        assertTrue(Entities.isBaseNamedEntity("lt"));
        assertTrue(Entities.isBaseNamedEntity("amp"));
        assertFalse(Entities.isBaseNamedEntity("unknown"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("unknown"));
    }

    @Test
    public void testEscape() {
        Document.OutputSettings outputSettings = new Document.OutputSettings();
        outputSettings.escapeMode(Entities.EscapeMode.base);

        assertEquals("&lt;&gt;&amp;&quot;&nbsp;", Entities.escape("&<>&\"\u00A0", outputSettings));
    }

    @Test
    public void testUnescape() {
        assertEquals("&<>\u00A0", Entities.unescape("&amp;&lt;&gt;&nbsp;"));
        assertEquals("&<>\u00A0", Entities.unescape("&amp;&lt;&gt;&nbsp;", true));
    }

    @Test
    public void testCanEncode() {
        assertTrue(Entities.canEncode(Entities.CoreCharset.ascii, 'a', null));
        assertFalse(Entities.canEncode(Entities.CoreCharset.ascii, '\u00A0', null));
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, '\u00A0', null));
    }

    @Test
    public void testLoadEntities() {
        Map<String, Character> entitiesMap = new HashMap<>();
        entitiesMap.put("lt", '<');
        entitiesMap.put("gt", '>');
        entitiesMap.put("amp", '&');

        assertEquals(entitiesMap, Entities.loadEntities("entities-base.properties"));
    }

    @Test
    public void testToCharacterKey() {
        Map<String, Character> inputMap = new HashMap<>();
        inputMap.put("lt", '<');
        inputMap.put("gt", '>');
        inputMap.put("amp", '&');

        Map<Character, String> expectedMap = new HashMap<>();
        expectedMap.put('<', "lt");
        expectedMap.put('>', "gt");
        expectedMap.put('&', "amp");

        assertEquals(expectedMap, Entities.toCharacterKey(inputMap));
    }
}
```