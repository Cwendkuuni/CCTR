```java
package org.jsoup.nodes;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

public class EntitiesTest {

    private Entities entities;

    @Before
    public void setUp() {
        entities = new Entities();
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("unknown"));
    }

    @Test
    public void testIsBaseNamedEntity() {
        assertTrue(Entities.isBaseNamedEntity("lt"));
        assertTrue(Entities.isBaseNamedEntity("amp"));
        assertFalse(Entities.isBaseNamedEntity("unknown"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("unknown"));
    }

    @Test
    public void testEscape() {
        Document.OutputSettings outputSettings = new Document.OutputSettings();
        outputSettings.escapeMode(Entities.EscapeMode.base);

        assertEquals("&lt;div&gt;&amp;&quot;&#xa0;&#x20;", Entities.escape("<div>&\"\u00A0 ", outputSettings));
    }

    @Test
    public void testUnescape() {
        assertEquals("<div>&\"\u00A0 ", Entities.unescape("&lt;div&gt;&amp;&quot;&#xa0;&#x20;"));
        assertEquals("<div>&\"\u00A0 ", Entities.unescape("&lt;div&gt;&amp;&quot;&#xa0;&#x20;", true));
    }

    @Test
    public void testCanEncode() {
        assertTrue(Entities.canEncode(Entities.CoreCharset.ascii, 'a', null));
        assertFalse(Entities.canEncode(Entities.CoreCharset.ascii, '\u00A0', null));
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, '\u00A0', null));
    }

    @Test
    public void testLoadEntities() {
        Map<String, Character> entitiesMap = new HashMap<>();
        entitiesMap.put("lt", '<');
        entitiesMap.put("amp", '&');

        Map<String, Character> loadedEntities = Entities.loadEntities("entities-base.properties");
        assertTrue(loadedEntities.containsKey("lt"));
        assertTrue(loadedEntities.containsKey("amp"));
    }

    @Test
    public void testToCharacterKey() {
        Map<String, Character> entitiesMap = new HashMap<>();
        entitiesMap.put("lt", '<');
        entitiesMap.put("amp", '&');

        Map<Character, String> characterKeyMap = Entities.toCharacterKey(entitiesMap);
        assertTrue(characterKeyMap.containsKey('<'));
        assertTrue(characterKeyMap.containsKey('&'));
    }
}
```