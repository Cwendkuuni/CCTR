```java
package org.jsoup.nodes;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.CharsetEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.MissingResourceException;

import static org.junit.Assert.*;

public class EntitiesTest {

    private static final Map<String, Character> full;
    private static final Map<Character, String> xhtmlByVal;
    private static final Map<String, Character> base;
    private static final Map<Character, String> baseByVal;
    private static final Map<Character, String> fullByVal;

    static {
        xhtmlByVal = new HashMap<>();
        base = loadEntities("entities-base.properties");  // most common / default
        baseByVal = toCharacterKey(base);
        full = loadEntities("entities-full.properties"); // extended and overblown.
        fullByVal = toCharacterKey(full);

        for (Object[] entity : xhtmlArray) {
            Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());
            xhtmlByVal.put(c, ((String) entity[0]));
        }
    }

    private static final Object[][] xhtmlArray = {
            {"quot", 0x00022},
            {"amp", 0x00026},
            {"lt", 0x0003C},
            {"gt", 0x0003E}
    };

    @Before
    public void setUp() {
        // Initialize any necessary objects or data here
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("unknown"));
    }

    @Test
    public void testIsBaseNamedEntity() {
        assertTrue(Entities.isBaseNamedEntity("lt"));
        assertTrue(Entities.isBaseNamedEntity("amp"));
        assertFalse(Entities.isBaseNamedEntity("unknown"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("unknown"));
    }

    @Test
    public void testEscape() {
        Document.OutputSettings out = new Document.OutputSettings();
        out.escapeMode(Entities.EscapeMode.base);

        assertEquals("&lt;div&gt;", Entities.escape("<div>", out));
        assertEquals("&amp;", Entities.escape("&", out));
        assertEquals("&quot;", Entities.escape("\"", out));
    }

    @Test
    public void testUnescape() {
        assertEquals("<div>", Entities.unescape("&lt;div&gt;"));
        assertEquals("&", Entities.unescape("&amp;"));
        assertEquals("\"", Entities.unescape("&quot;"));
    }

    @Test
    public void testUnescapeStrict() {
        assertEquals("<div>", Entities.unescape("&lt;div&gt;", true));
        assertEquals("&", Entities.unescape("&amp;", true));
        assertEquals("\"", Entities.unescape("&quot;", true));
    }

    @Test
    public void testCanEncode() {
        CharsetEncoder encoder = java.nio.charset.Charset.forName("US-ASCII").newEncoder();
        assertTrue(Entities.canEncode(Entities.CoreCharset.ascii, 'a', encoder));
        assertFalse(Entities.canEncode(Entities.CoreCharset.ascii, 'é', encoder));

        encoder = java.nio.charset.Charset.forName("UTF-8").newEncoder();
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, 'a', encoder));
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, 'é', encoder));
    }

    @Test
    public void testLoadEntities() {
        Map<String, Character> entities = loadEntities("entities-base.properties");
        assertNotNull(entities);
        assertTrue(entities.containsKey("lt"));
        assertTrue(entities.containsKey("amp"));
    }

    @Test
    public void testToCharacterKey() {
        Map<String, Character> inputMap = new HashMap<>();
        inputMap.put("lt", '<');
        inputMap.put("amp", '&');

        Map<Character, String> outputMap = toCharacterKey(inputMap);
        assertEquals("<", outputMap.get('<'));
        assertEquals("&", outputMap.get('&'));
    }

    private static Map<String, Character> loadEntities(String filename) {
        Properties properties = new Properties();
        Map<String, Character> entities = new HashMap<>();
        try {
            InputStream in = Entities.class.getResourceAsStream(filename);
            properties.load(in);
            in.close();
        } catch (IOException e) {
            throw new MissingResourceException("Error loading entities resource: " + e.getMessage(), "Entities", filename);
        }

        for (Map.Entry entry : properties.entrySet()) {
            Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));
            String name = (String) entry.getKey();
            entities.put(name, val);
        }
        return entities;
    }

    private static Map<Character, String> toCharacterKey(Map<String, Character> inMap) {
        Map<Character, String> outMap = new HashMap<>();
        for (Map.Entry<String, Character> entry : inMap.entrySet()) {
            Character character = entry.getValue();
            String name = entry.getKey();

            if (outMap.containsKey(character)) {
                // dupe, prefer the lower case version
                if (name.toLowerCase().equals(name))
                    outMap.put(character, name);
            } else {
                outMap.put(character, name);
            }
        }
        return outMap;
    }
}
```