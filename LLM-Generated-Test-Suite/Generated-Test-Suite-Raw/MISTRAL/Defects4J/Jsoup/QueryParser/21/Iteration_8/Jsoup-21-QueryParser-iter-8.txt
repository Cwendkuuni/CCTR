```java
package org.jsoup.select;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.helper.StringUtil;
import org.jsoup.helper.Validate;
import org.jsoup.parser.TokenQueue;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Selector;

import static org.junit.Assert.*;

public class QueryParserTest {

    private QueryParser queryParser;

    @Before
    public void setUp() {
        queryParser = new QueryParser("div");
    }

    @Test
    public void testParseStatic() {
        Evaluator evaluator = QueryParser.parse("div");
        assertNotNull(evaluator);
    }

    @Test
    public void testParse() {
        Evaluator evaluator = queryParser.parse();
        assertNotNull(evaluator);
    }

    @Test
    public void testCombinator() {
        queryParser = new QueryParser("div > span");
        queryParser.parse();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof CombiningEvaluator.And);
    }

    @Test
    public void testConsumeSubQuery() {
        queryParser = new QueryParser("div > span");
        String subQuery = queryParser.consumeSubQuery();
        assertEquals("span", subQuery);
    }

    @Test
    public void testFindElementsById() {
        queryParser = new QueryParser("#id");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Id);
    }

    @Test
    public void testFindElementsByClass() {
        queryParser = new QueryParser(".class");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Class);
    }

    @Test
    public void testFindElementsByTag() {
        queryParser = new QueryParser("div");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Tag);
    }

    @Test
    public void testFindElementsByAttribute() {
        queryParser = new QueryParser("[attr=value]");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AttributeWithValue);
    }

    @Test
    public void testFindElementsAllElements() {
        queryParser = new QueryParser("*");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AllElements);
    }

    @Test
    public void testFindElementsIndexLessThan() {
        queryParser = new QueryParser(":lt(5)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexLessThan);
    }

    @Test
    public void testFindElementsIndexGreaterThan() {
        queryParser = new QueryParser(":gt(5)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexGreaterThan);
    }

    @Test
    public void testFindElementsIndexEquals() {
        queryParser = new QueryParser(":eq(5)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexEquals);
    }

    @Test
    public void testFindElementsHas() {
        queryParser = new QueryParser(":has(div)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Has);
    }

    @Test
    public void testFindElementsContains() {
        queryParser = new QueryParser(":contains(text)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsText);
    }

    @Test
    public void testFindElementsContainsOwn() {
        queryParser = new QueryParser(":containsOwn(text)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsOwnText);
    }

    @Test
    public void testFindElementsMatches() {
        queryParser = new QueryParser(":matches(regex)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Matches);
    }

    @Test
    public void testFindElementsMatchesOwn() {
        queryParser = new QueryParser(":matchesOwn(regex)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.MatchesOwn);
    }

    @Test
    public void testFindElementsNot() {
        queryParser = new QueryParser(":not(selector)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Not);
    }

    @Test(expected = Selector.SelectorParseException.class)
    public void testFindElementsUnhandled() {
        queryParser = new QueryParser(":unhandled");
        queryParser.findElements();
    }

    @Test
    public void testById() {
        queryParser = new QueryParser("#id");
        queryParser.byId();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Id);
    }

    @Test
    public void testByClass() {
        queryParser = new QueryParser(".class");
        queryParser.byClass();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Class);
    }

    @Test
    public void testByTag() {
        queryParser = new QueryParser("div");
        queryParser.byTag();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Tag);
    }

    @Test
    public void testByAttribute() {
        queryParser = new QueryParser("[attr=value]");
        queryParser.byAttribute();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AttributeWithValue);
    }

    @Test
    public void testAllElements() {
        queryParser = new QueryParser("*");
        queryParser.allElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AllElements);
    }

    @Test
    public void testIndexLessThan() {
        queryParser = new QueryParser(":lt(5)");
        queryParser.indexLessThan();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexLessThan);
    }

    @Test
    public void testIndexGreaterThan() {
        queryParser = new QueryParser(":gt(5)");
        queryParser.indexGreaterThan();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexGreaterThan);
    }

    @Test
    public void testIndexEquals() {
        queryParser = new QueryParser(":eq(5)");
        queryParser.indexEquals();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexEquals);
    }

    @Test
    public void testConsumeIndex() {
        queryParser = new QueryParser(":eq(5)");
        int index = queryParser.consumeIndex();
        assertEquals(5, index);
    }

    @Test
    public void testHas() {
        queryParser = new QueryParser(":has(div)");
        queryParser.has();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Has);
    }

    @Test
    public void testContains() {
        queryParser = new QueryParser(":contains(text)");
        queryParser.contains(false);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsText);
    }

    @Test
    public void testContainsOwn() {
        queryParser = new QueryParser(":containsOwn(text)");
        queryParser.contains(true);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsOwnText);
    }

    @Test
    public void testMatches() {
        queryParser = new QueryParser(":matches(regex)");
        queryParser.matches(false);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Matches);
    }

    @Test
    public void testMatchesOwn() {
        queryParser = new QueryParser(":matchesOwn(regex)");
        queryParser.matches(true);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.MatchesOwn);
    }

    @Test
    public void testNot() {
        queryParser = new QueryParser(":not(selector)");
        queryParser.not();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Not);
    }
}
```