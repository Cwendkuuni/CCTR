```java
package org.jsoup.select;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.helper.StringUtil;
import org.jsoup.helper.Validate;
import org.jsoup.parser.TokenQueue;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Selector;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

import static org.junit.Assert.*;

public class QueryParserTest {

    private QueryParser queryParser;

    @Before
    public void setUp() {
        queryParser = new QueryParser("div > p");
    }

    @Test
    public void testParseStatic() {
        Evaluator evaluator = QueryParser.parse("div > p");
        assertNotNull(evaluator);
    }

    @Test
    public void testParse() {
        Evaluator evaluator = queryParser.parse();
        assertNotNull(evaluator);
    }

    @Test
    public void testCombinator() {
        queryParser.combinator('>');
        assertEquals(1, queryParser.evals.size());
    }

    @Test
    public void testConsumeSubQuery() {
        String subQuery = queryParser.consumeSubQuery();
        assertEquals("p", subQuery);
    }

    @Test
    public void testFindElements() {
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
    }

    @Test
    public void testById() {
        queryParser = new QueryParser("#id");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Id);
    }

    @Test
    public void testByClass() {
        queryParser = new QueryParser(".class");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Class);
    }

    @Test
    public void testByTag() {
        queryParser = new QueryParser("div");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Tag);
    }

    @Test
    public void testByAttribute() {
        queryParser = new QueryParser("[attr=value]");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AttributeWithValue);
    }

    @Test
    public void testAllElements() {
        queryParser = new QueryParser("*");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AllElements);
    }

    @Test
    public void testIndexLessThan() {
        queryParser = new QueryParser(":lt(5)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexLessThan);
    }

    @Test
    public void testIndexGreaterThan() {
        queryParser = new QueryParser(":gt(5)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexGreaterThan);
    }

    @Test
    public void testIndexEquals() {
        queryParser = new QueryParser(":eq(5)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexEquals);
    }

    @Test
    public void testHas() {
        queryParser = new QueryParser(":has(div)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Has);
    }

    @Test
    public void testContains() {
        queryParser = new QueryParser(":contains(text)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsText);
    }

    @Test
    public void testMatches() {
        queryParser = new QueryParser(":matches(regex)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Matches);
    }

    @Test
    public void testNot() {
        queryParser = new QueryParser(":not(div)");
        queryParser.findElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Not);
    }

    @Test(expected = Selector.SelectorParseException.class)
    public void testUnknownCombinator() {
        queryParser.combinator('?');
    }

    @Test(expected = Selector.SelectorParseException.class)
    public void testInvalidQuery() {
        queryParser = new QueryParser("invalid query");
        queryParser.findElements();
    }
}
```