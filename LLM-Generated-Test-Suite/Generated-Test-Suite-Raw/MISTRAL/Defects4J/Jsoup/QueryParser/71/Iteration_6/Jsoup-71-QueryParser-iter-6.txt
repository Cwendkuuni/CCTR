```java
package org.jsoup.select;

import org.jsoup.helper.StringUtil;
import org.jsoup.helper.Validate;
import org.jsoup.parser.TokenQueue;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class QueryParserTest {

    private QueryParser queryParser;
    private TokenQueue tokenQueue;

    @Before
    public void setUp() {
        queryParser = spy(new QueryParser("div"));
        tokenQueue = mock(TokenQueue.class);
        queryParser.tq = tokenQueue;
    }

    @Test
    public void testParse() {
        Evaluator evaluator = QueryParser.parse("div");
        assertNotNull(evaluator);
    }

    @Test
    public void testParseWithInvalidQuery() {
        try {
            QueryParser.parse("invalid query");
            fail("Expected SelectorParseException");
        } catch (Selector.SelectorParseException e) {
            assertEquals("Could not parse query 'invalid query': unexpected token at 'invalid query'", e.getMessage());
        }
    }

    @Test
    public void testParseWithCombinator() {
        when(tokenQueue.matchesAny(QueryParser.combinators)).thenReturn(true);
        when(tokenQueue.consume()).thenReturn(' ');
        when(tokenQueue.isEmpty()).thenReturn(true);

        Evaluator evaluator = queryParser.parse();
        assertNotNull(evaluator);
    }

    @Test
    public void testCombinator() {
        when(tokenQueue.consume()).thenReturn(' ');
        when(tokenQueue.isEmpty()).thenReturn(true);

        queryParser.combinator(' ');
        verify(queryParser).parse(anyString());
    }

    @Test
    public void testConsumeSubQuery() {
        when(tokenQueue.matches("(")).thenReturn(true);
        when(tokenQueue.chompBalanced('(', ')')).thenReturn("subquery");
        when(tokenQueue.isEmpty()).thenReturn(true);

        String subQuery = queryParser.consumeSubQuery();
        assertEquals("(subquery)", subQuery);
    }

    @Test
    public void testFindElements() {
        when(tokenQueue.matchChomp("#")).thenReturn(true);
        when(tokenQueue.consumeCssIdentifier()).thenReturn("id");

        queryParser.findElements();
        verify(queryParser).byId();
    }

    @Test
    public void testById() {
        when(tokenQueue.consumeCssIdentifier()).thenReturn("id");

        queryParser.byId();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Id);
    }

    @Test
    public void testByClass() {
        when(tokenQueue.consumeCssIdentifier()).thenReturn("class");

        queryParser.byClass();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Class);
    }

    @Test
    public void testByTag() {
        when(tokenQueue.consumeElementSelector()).thenReturn("tag");

        queryParser.byTag();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Tag);
    }

    @Test
    public void testByAttribute() {
        when(tokenQueue.chompBalanced('[', ']')).thenReturn("attr=value");
        TokenQueue contentQueue = mock(TokenQueue.class);
        when(contentQueue.consumeToAny(QueryParser.AttributeEvals)).thenReturn("attr");
        when(contentQueue.matchChomp("=")).thenReturn(true);
        when(contentQueue.remainder()).thenReturn("value");

        queryParser.byAttribute();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AttributeWithValue);
    }

    @Test
    public void testAllElements() {
        queryParser.allElements();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.AllElements);
    }

    @Test
    public void testIndexLessThan() {
        when(tokenQueue.chompTo(")")).thenReturn("5");

        queryParser.indexLessThan();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexLessThan);
    }

    @Test
    public void testIndexGreaterThan() {
        when(tokenQueue.chompTo(")")).thenReturn("5");

        queryParser.indexGreaterThan();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexGreaterThan);
    }

    @Test
    public void testIndexEquals() {
        when(tokenQueue.chompTo(")")).thenReturn("5");

        queryParser.indexEquals();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IndexEquals);
    }

    @Test
    public void testCssNthChild() {
        when(tokenQueue.chompTo(")")).thenReturn("2n+1");

        queryParser.cssNthChild(false, false);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.IsNthChild);
    }

    @Test
    public void testConsumeIndex() {
        when(tokenQueue.chompTo(")")).thenReturn("5");

        int index = queryParser.consumeIndex();
        assertEquals(5, index);
    }

    @Test
    public void testHas() {
        when(tokenQueue.chompBalanced('(', ')')).thenReturn("subquery");

        queryParser.has();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Has);
    }

    @Test
    public void testContains() {
        when(tokenQueue.chompBalanced('(', ')')).thenReturn("text");

        queryParser.contains(false);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsText);
    }

    @Test
    public void testContainsData() {
        when(tokenQueue.chompBalanced('(', ')')).thenReturn("data");

        queryParser.containsData();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.ContainsData);
    }

    @Test
    public void testMatches() {
        when(tokenQueue.chompBalanced('(', ')')).thenReturn("regex");

        queryParser.matches(false);
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof Evaluator.Matches);
    }

    @Test
    public void testNot() {
        when(tokenQueue.chompBalanced('(', ')')).thenReturn("subquery");

        queryParser.not();
        assertEquals(1, queryParser.evals.size());
        assertTrue(queryParser.evals.get(0) instanceof StructuralEvaluator.Not);
    }
}
```