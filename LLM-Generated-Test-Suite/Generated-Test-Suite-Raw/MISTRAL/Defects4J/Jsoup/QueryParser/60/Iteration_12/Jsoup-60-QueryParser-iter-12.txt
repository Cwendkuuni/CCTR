```java
package org.jsoup.select;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.helper.StringUtil;
import org.jsoup.helper.Validate;
import org.jsoup.parser.TokenQueue;
import org.jsoup.select.Evaluator;
import org.jsoup.select.QueryParser;
import org.jsoup.select.Selector;

import static org.junit.Assert.*;

public class QueryParserTest {

    private QueryParser queryParser;

    @Before
    public void setUp() {
        queryParser = new QueryParser("div");
    }

    @Test
    public void testParse() {
        Evaluator evaluator = QueryParser.parse("div");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.Tag);
    }

    @Test
    public void testParseWithCombinator() {
        Evaluator evaluator = QueryParser.parse("div > span");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof CombiningEvaluator.And);
    }

    @Test
    public void testParseWithMultipleCombinators() {
        Evaluator evaluator = QueryParser.parse("div > span + p");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof CombiningEvaluator.And);
    }

    @Test
    public void testParseWithId() {
        Evaluator evaluator = QueryParser.parse("#id");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.Id);
    }

    @Test
    public void testParseWithClass() {
        Evaluator evaluator = QueryParser.parse(".class");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.Class);
    }

    @Test
    public void testParseWithTag() {
        Evaluator evaluator = QueryParser.parse("div");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.Tag);
    }

    @Test
    public void testParseWithAttribute() {
        Evaluator evaluator = QueryParser.parse("[attr=value]");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.AttributeWithValue);
    }

    @Test
    public void testParseWithAllElements() {
        Evaluator evaluator = QueryParser.parse("*");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.AllElements);
    }

    @Test
    public void testParseWithIndexLessThan() {
        Evaluator evaluator = QueryParser.parse(":lt(5)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IndexLessThan);
    }

    @Test
    public void testParseWithIndexGreaterThan() {
        Evaluator evaluator = QueryParser.parse(":gt(5)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IndexGreaterThan);
    }

    @Test
    public void testParseWithIndexEquals() {
        Evaluator evaluator = QueryParser.parse(":eq(5)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IndexEquals);
    }

    @Test
    public void testParseWithCssNthChild() {
        Evaluator evaluator = QueryParser.parse(":nth-child(2n+1)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsNthChild);
    }

    @Test
    public void testParseWithCssNthLastChild() {
        Evaluator evaluator = QueryParser.parse(":nth-last-child(2n+1)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsNthLastChild);
    }

    @Test
    public void testParseWithCssNthOfType() {
        Evaluator evaluator = QueryParser.parse(":nth-of-type(2n+1)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsNthOfType);
    }

    @Test
    public void testParseWithCssNthLastOfType() {
        Evaluator evaluator = QueryParser.parse(":nth-last-of-type(2n+1)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsNthLastOfType);
    }

    @Test
    public void testParseWithFirstChild() {
        Evaluator evaluator = QueryParser.parse(":first-child");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsFirstChild);
    }

    @Test
    public void testParseWithLastChild() {
        Evaluator evaluator = QueryParser.parse(":last-child");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsLastChild);
    }

    @Test
    public void testParseWithFirstOfType() {
        Evaluator evaluator = QueryParser.parse(":first-of-type");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsFirstOfType);
    }

    @Test
    public void testParseWithLastOfType() {
        Evaluator evaluator = QueryParser.parse(":last-of-type");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsLastOfType);
    }

    @Test
    public void testParseWithOnlyChild() {
        Evaluator evaluator = QueryParser.parse(":only-child");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsOnlyChild);
    }

    @Test
    public void testParseWithOnlyOfType() {
        Evaluator evaluator = QueryParser.parse(":only-of-type");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsOnlyOfType);
    }

    @Test
    public void testParseWithEmpty() {
        Evaluator evaluator = QueryParser.parse(":empty");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsEmpty);
    }

    @Test
    public void testParseWithRoot() {
        Evaluator evaluator = QueryParser.parse(":root");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.IsRoot);
    }

    @Test
    public void testParseWithHas() {
        Evaluator evaluator = QueryParser.parse(":has(div)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof StructuralEvaluator.Has);
    }

    @Test
    public void testParseWithContains() {
        Evaluator evaluator = QueryParser.parse(":contains(text)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.ContainsText);
    }

    @Test
    public void testParseWithContainsOwn() {
        Evaluator evaluator = QueryParser.parse(":containsOwn(text)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.ContainsOwnText);
    }

    @Test
    public void testParseWithContainsData() {
        Evaluator evaluator = QueryParser.parse(":containsData(text)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.ContainsData);
    }

    @Test
    public void testParseWithMatches() {
        Evaluator evaluator = QueryParser.parse(":matches(regex)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.Matches);
    }

    @Test
    public void testParseWithMatchesOwn() {
        Evaluator evaluator = QueryParser.parse(":matchesOwn(regex)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof Evaluator.MatchesOwn);
    }

    @Test
    public void testParseWithNot() {
        Evaluator evaluator = QueryParser.parse(":not(div)");
        assertNotNull(evaluator);
        assertTrue(evaluator instanceof StructuralEvaluator.Not);
    }

    @Test(expected = Selector.SelectorParseException.class)
    public void testParseWithInvalidQuery() {
        QueryParser.parse("invalid query");
    }
}
```