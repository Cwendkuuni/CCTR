```java
package org.jsoup.parser;

import org.junit.Before;
import org.junit.Test;
import org.jsoup.nodes.Attributes;

import static org.junit.Assert.*;

public class TokenTest {

    private Token.Doctype doctype;
    private Token.StartTag startTag;
    private Token.EndTag endTag;
    private Token.Comment comment;
    private Token.Character character;
    private Token.EOF eof;

    @Before
    public void setUp() {
        doctype = new Token.Doctype();
        startTag = new Token.StartTag();
        endTag = new Token.EndTag();
        comment = new Token.Comment();
        character = new Token.Character();
        eof = new Token.EOF();
    }

    @Test
    public void testTokenType() {
        assertEquals("Doctype", doctype.tokenType());
        assertEquals("StartTag", startTag.tokenType());
        assertEquals("EndTag", endTag.tokenType());
        assertEquals("Comment", comment.tokenType());
        assertEquals("Character", character.tokenType());
        assertEquals("EOF", eof.tokenType());
    }

    @Test
    public void testDoctypeReset() {
        doctype.name.append("html");
        doctype.publicIdentifier.append("public");
        doctype.systemIdentifier.append("system");
        doctype.forceQuirks = true;

        doctype.reset();

        assertEquals("", doctype.getName());
        assertEquals("", doctype.getPublicIdentifier());
        assertEquals("", doctype.getSystemIdentifier());
        assertFalse(doctype.isForceQuirks());
    }

    @Test
    public void testStartTagReset() {
        startTag.tagName = "div";
        startTag.normalName = "div";
        startTag.selfClosing = true;
        startTag.attributes = new Attributes();

        startTag.reset();

        assertNull(startTag.tagName);
        assertNull(startTag.normalName);
        assertFalse(startTag.selfClosing);
        assertNotNull(startTag.attributes);
    }

    @Test
    public void testEndTagReset() {
        endTag.tagName = "div";
        endTag.normalName = "div";

        endTag.reset();

        assertNull(endTag.tagName);
        assertNull(endTag.normalName);
    }

    @Test
    public void testCommentReset() {
        comment.data.append("comment");
        comment.bogus = true;

        comment.reset();

        assertEquals("", comment.getData());
        assertFalse(comment.bogus);
    }

    @Test
    public void testCharacterReset() {
        character.data = "character";

        character.reset();

        assertNull(character.getData());
    }

    @Test
    public void testEOFReset() {
        eof.reset();
        // EOF reset does nothing, so just ensure it doesn't throw an exception
    }

    @Test
    public void testNewAttribute() {
        startTag.pendingAttributeName = "id";
        startTag.pendingAttributeValueS = "1";
        startTag.hasPendingAttributeValue = true;

        startTag.newAttribute();

        assertEquals("1", startTag.getAttributes().get("id"));
    }

    @Test
    public void testFinaliseTag() {
        startTag.pendingAttributeName = "class";
        startTag.pendingAttributeValueS = "test";
        startTag.hasPendingAttributeValue = true;

        startTag.finaliseTag();

        assertEquals("test", startTag.getAttributes().get("class"));
    }

    @Test
    public void testName() {
        startTag.tagName = "div";
        assertEquals("div", startTag.name());
    }

    @Test
    public void testNormalName() {
        startTag.tagName = "Div";
        startTag.normalName = "div";
        assertEquals("div", startTag.normalName());
    }

    @Test
    public void testIsSelfClosing() {
        startTag.selfClosing = true;
        assertTrue(startTag.isSelfClosing());
    }

    @Test
    public void testGetAttributes() {
        startTag.attributes = new Attributes();
        assertNotNull(startTag.getAttributes());
    }

    @Test
    public void testAppendTagNameString() {
        startTag.appendTagName("div");
        assertEquals("div", startTag.tagName);
    }

    @Test
    public void testAppendTagNameChar() {
        startTag.appendTagName('d');
        startTag.appendTagName('i');
        startTag.appendTagName('v');
        assertEquals("div", startTag.tagName);
    }

    @Test
    public void testAppendAttributeNameString() {
        startTag.appendAttributeName("id");
        assertEquals("id", startTag.pendingAttributeName);
    }

    @Test
    public void testAppendAttributeNameChar() {
        startTag.appendAttributeName('i');
        startTag.appendAttributeName('d');
        assertEquals("id", startTag.pendingAttributeName);
    }

    @Test
    public void testAppendAttributeValueString() {
        startTag.appendAttributeValue("value");
        assertEquals("value", startTag.pendingAttributeValueS);
    }

    @Test
    public void testAppendAttributeValueChar() {
        startTag.appendAttributeValue('v');
        startTag.appendAttributeValue('a');
        startTag.appendAttributeValue('l');
        startTag.appendAttributeValue('u');
        startTag.appendAttributeValue('e');
        assertEquals("value", startTag.pendingAttributeValue.toString());
    }

    @Test
    public void testAppendAttributeValueCharArray() {
        startTag.appendAttributeValue(new char[]{'v', 'a', 'l', 'u', 'e'});
        assertEquals("value", startTag.pendingAttributeValue.toString());
    }

    @Test
    public void testAppendAttributeValueIntArray() {
        startTag.appendAttributeValue(new int[]{'v', 'a', 'l', 'u', 'e'});
        assertEquals("value", startTag.pendingAttributeValue.toString());
    }

    @Test
    public void testSetEmptyAttributeValue() {
        startTag.setEmptyAttributeValue();
        assertTrue(startTag.hasEmptyAttributeValue);
    }

    @Test
    public void testIsDoctype() {
        assertTrue(doctype.isDoctype());
        assertFalse(startTag.isDoctype());
    }

    @Test
    public void testAsDoctype() {
        assertSame(doctype, doctype.asDoctype());
    }

    @Test
    public void testIsStartTag() {
        assertTrue(startTag.isStartTag());
        assertFalse(endTag.isStartTag());
    }

    @Test
    public void testAsStartTag() {
        assertSame(startTag, startTag.asStartTag());
    }

    @Test
    public void testIsEndTag() {
        assertTrue(endTag.isEndTag());
        assertFalse(startTag.isEndTag());
    }

    @Test
    public void testAsEndTag() {
        assertSame(endTag, endTag.asEndTag());
    }

    @Test
    public void testIsComment() {
        assertTrue(comment.isComment());
        assertFalse(startTag.isComment());
    }

    @Test
    public void testAsComment() {
        assertSame(comment, comment.asComment());
    }

    @Test
    public void testIsCharacter() {
        assertTrue(character.isCharacter());
        assertFalse(startTag.isCharacter());
    }

    @Test
    public void testAsCharacter() {
        assertSame(character, character.asCharacter());
    }

    @Test
    public void testIsEOF() {
        assertTrue(eof.isEOF());
        assertFalse(startTag.isEOF());
    }
}
```