```java
package org.jsoup.parser;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

public class TokenTest {

    private Token.Doctype doctype;
    private Token.StartTag startTag;
    private Token.EndTag endTag;
    private Token.Comment comment;
    private Token.Character character;
    private Token.CData cdata;
    private Token.EOF eof;

    @Before
    public void setUp() {
        doctype = new Token.Doctype();
        startTag = new Token.StartTag();
        endTag = new Token.EndTag();
        comment = new Token.Comment();
        character = new Token.Character();
        cdata = new Token.CData("cdata");
        eof = new Token.EOF();
    }

    @After
    public void tearDown() {
        doctype = null;
        startTag = null;
        endTag = null;
        comment = null;
        character = null;
        cdata = null;
        eof = null;
    }

    @Test
    public void testTokenType() {
        assertEquals("Doctype", doctype.tokenType());
        assertEquals("StartTag", startTag.tokenType());
        assertEquals("EndTag", endTag.tokenType());
        assertEquals("Comment", comment.tokenType());
        assertEquals("Character", character.tokenType());
        assertEquals("CData", cdata.tokenType());
        assertEquals("EOF", eof.tokenType());
    }

    @Test
    public void testReset() {
        doctype.name.append("html");
        doctype.reset();
        assertEquals(0, doctype.name.length());

        startTag.name("div");
        startTag.reset();
        assertNull(startTag.tagName);

        endTag.name("div");
        endTag.reset();
        assertNull(endTag.tagName);

        comment.data.append("comment");
        comment.reset();
        assertEquals(0, comment.data.length());

        character.data("text");
        character.reset();
        assertNull(character.data);

        cdata.reset();
        assertNull(cdata.data);

        eof.reset();
        // EOF reset does nothing, so no assertion needed
    }

    @Test
    public void testDoctype() {
        doctype.name.append("html");
        assertEquals("html", doctype.getName());

        doctype.pubSysKey = "public";
        assertEquals("public", doctype.getPubSysKey());

        doctype.publicIdentifier.append("publicIdentifier");
        assertEquals("publicIdentifier", doctype.getPublicIdentifier());

        doctype.systemIdentifier.append("systemIdentifier");
        assertEquals("systemIdentifier", doctype.getSystemIdentifier());

        doctype.forceQuirks = true;
        assertTrue(doctype.isForceQuirks());
    }

    @Test
    public void testTag() {
        startTag.name("div");
        assertEquals("div", startTag.name());
        assertEquals("div", startTag.normalName());

        startTag.appendTagName("span");
        assertEquals("divspan", startTag.name());

        startTag.appendAttributeName("id");
        startTag.appendAttributeValue("1");
        startTag.newAttribute();
        assertEquals("id", startTag.getAttributes().get("id"));

        startTag.setEmptyAttributeValue();
        startTag.newAttribute();
        assertEquals("", startTag.getAttributes().get("id"));

        startTag.finaliseTag();
        assertEquals(2, startTag.getAttributes().size());
    }

    @Test
    public void testStartTag() {
        startTag.nameAttr("div", new Attributes());
        assertEquals("div", startTag.name());
        assertEquals("<div>", startTag.toString());
    }

    @Test
    public void testEndTag() {
        endTag.name("div");
        assertEquals("</div>", endTag.toString());
    }

    @Test
    public void testComment() {
        comment.data.append("comment");
        assertEquals("comment", comment.getData());
        assertEquals("<!--comment-->", comment.toString());
    }

    @Test
    public void testCharacter() {
        character.data("text");
        assertEquals("text", character.getData());
        assertEquals("text", character.toString());
    }

    @Test
    public void testCData() {
        assertEquals("<![CDATA[cdata]]>", cdata.toString());
    }

    @Test
    public void testEOF() {
        assertTrue(eof.isEOF());
    }

    @Test
    public void testTokenTypeChecks() {
        assertTrue(doctype.isDoctype());
        assertTrue(startTag.isStartTag());
        assertTrue(endTag.isEndTag());
        assertTrue(comment.isComment());
        assertTrue(character.isCharacter());
        assertTrue(cdata.isCData());
        assertTrue(eof.isEOF());
    }
}
```