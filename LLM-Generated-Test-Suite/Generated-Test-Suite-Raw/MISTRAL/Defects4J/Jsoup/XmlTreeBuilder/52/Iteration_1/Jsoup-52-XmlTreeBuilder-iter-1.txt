```java
package org.jsoup.parser;

import org.jsoup.helper.Validate;
import org.jsoup.nodes.*;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;

public class XmlTreeBuilderTest {

    private XmlTreeBuilder xmlTreeBuilder;
    private ParseErrorList errors;
    private String baseUri = "http://example.com";

    @Before
    public void setUp() {
        xmlTreeBuilder = new XmlTreeBuilder();
        errors = new ParseErrorList();
    }

    @Test
    public void testInitialiseParse() {
        String input = "<root></root>";
        xmlTreeBuilder.initialiseParse(input, baseUri, errors);
        assertEquals(1, xmlTreeBuilder.stack.size());
        assertEquals(Document.OutputSettings.Syntax.xml, xmlTreeBuilder.doc.outputSettings().syntax());
    }

    @Test
    public void testProcessStartTag() {
        Token.StartTag startTag = new Token.StartTag().name("root");
        xmlTreeBuilder.process(startTag);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof Element);
    }

    @Test
    public void testProcessEndTag() {
        Token.StartTag startTag = new Token.StartTag().name("root");
        xmlTreeBuilder.process(startTag);
        Token.EndTag endTag = new Token.EndTag().name("root");
        xmlTreeBuilder.process(endTag);
        assertEquals(0, xmlTreeBuilder.stack.size());
    }

    @Test
    public void testProcessComment() {
        Token.Comment commentToken = new Token.Comment().data("This is a comment");
        xmlTreeBuilder.process(commentToken);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof Comment);
    }

    @Test
    public void testProcessCharacter() {
        Token.Character characterToken = new Token.Character().data("Some text");
        xmlTreeBuilder.process(characterToken);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof TextNode);
    }

    @Test
    public void testProcessDoctype() {
        Token.Doctype doctypeToken = new Token.Doctype().name("html");
        xmlTreeBuilder.process(doctypeToken);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof DocumentType);
    }

    @Test
    public void testProcessEOF() {
        Token eofToken = new Token.EOF();
        xmlTreeBuilder.process(eofToken);
        // No specific assertion as EOF does not modify the document
    }

    @Test(expected = IllegalArgumentException.class)
    public void testProcessUnexpectedToken() {
        Token unexpectedToken = new Token.Tag();
        xmlTreeBuilder.process(unexpectedToken);
    }

    @Test
    public void testInsertNode() {
        Element element = new Element(Tag.valueOf("div"), baseUri);
        xmlTreeBuilder.insertNode(element);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof Element);
    }

    @Test
    public void testInsertStartTag() {
        Token.StartTag startTag = new Token.StartTag().name("root");
        Element element = xmlTreeBuilder.insert(startTag);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof Element);
        assertEquals("root", element.tagName());
    }

    @Test
    public void testInsertComment() {
        Token.Comment commentToken = new Token.Comment().data("This is a comment");
        xmlTreeBuilder.insert(commentToken);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof Comment);
    }

    @Test
    public void testInsertCharacter() {
        Token.Character characterToken = new Token.Character().data("Some text");
        xmlTreeBuilder.insert(characterToken);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof TextNode);
    }

    @Test
    public void testInsertDoctype() {
        Token.Doctype doctypeToken = new Token.Doctype().name("html");
        xmlTreeBuilder.insert(doctypeToken);
        assertEquals(1, xmlTreeBuilder.doc.childNodes().size());
        assertTrue(xmlTreeBuilder.doc.childNodes().get(0) instanceof DocumentType);
    }

    @Test
    public void testPopStackToClose() {
        Token.StartTag startTag1 = new Token.StartTag().name("root");
        Token.StartTag startTag2 = new Token.StartTag().name("child");
        xmlTreeBuilder.process(startTag1);
        xmlTreeBuilder.process(startTag2);
        Token.EndTag endTag = new Token.EndTag().name("root");
        xmlTreeBuilder.process(endTag);
        assertEquals(0, xmlTreeBuilder.stack.size());
    }

    @Test
    public void testParseFragment() {
        String inputFragment = "<root><child>Text</child></root>";
        List<Node> nodes = xmlTreeBuilder.parseFragment(inputFragment, baseUri, errors);
        assertEquals(1, nodes.size());
        assertTrue(nodes.get(0) instanceof Element);
        assertEquals("root", nodes.get(0).nodeName());
    }
}
```