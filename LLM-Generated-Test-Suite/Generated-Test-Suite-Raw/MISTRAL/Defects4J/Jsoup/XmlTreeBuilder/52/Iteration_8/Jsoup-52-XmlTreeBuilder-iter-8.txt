```java
package org.jsoup.parser;

import org.jsoup.helper.Validate;
import org.jsoup.nodes.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class XmlTreeBuilderTest {

    private XmlTreeBuilder xmlTreeBuilder;

    @Mock
    private Token token;

    @Mock
    private Token.StartTag startTag;

    @Mock
    private Token.EndTag endTag;

    @Mock
    private Token.Comment commentToken;

    @Mock
    private Token.Character characterToken;

    @Mock
    private Token.Doctype doctypeToken;

    @Mock
    private ParseErrorList errors;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        xmlTreeBuilder = new XmlTreeBuilder();
    }

    @Test
    public void testInitialiseParse() {
        String input = "<xml></xml>";
        String baseUri = "http://example.com";

        xmlTreeBuilder.initialiseParse(input, baseUri, errors);

        assertEquals(Document.OutputSettings.Syntax.xml, xmlTreeBuilder.doc.outputSettings().syntax());
        assertTrue(xmlTreeBuilder.stack.contains(xmlTreeBuilder.doc));
    }

    @Test
    public void testProcessStartTag() {
        when(token.type).thenReturn(Token.TokenType.StartTag);
        when(token.asStartTag()).thenReturn(startTag);

        assertTrue(xmlTreeBuilder.process(token));

        verify(token).asStartTag();
    }

    @Test
    public void testProcessEndTag() {
        when(token.type).thenReturn(Token.TokenType.EndTag);
        when(token.asEndTag()).thenReturn(endTag);

        assertTrue(xmlTreeBuilder.process(token));

        verify(token).asEndTag();
    }

    @Test
    public void testProcessComment() {
        when(token.type).thenReturn(Token.TokenType.Comment);
        when(token.asComment()).thenReturn(commentToken);

        assertTrue(xmlTreeBuilder.process(token));

        verify(token).asComment();
    }

    @Test
    public void testProcessCharacter() {
        when(token.type).thenReturn(Token.TokenType.Character);
        when(token.asCharacter()).thenReturn(characterToken);

        assertTrue(xmlTreeBuilder.process(token));

        verify(token).asCharacter();
    }

    @Test
    public void testProcessDoctype() {
        when(token.type).thenReturn(Token.TokenType.Doctype);
        when(token.asDoctype()).thenReturn(doctypeToken);

        assertTrue(xmlTreeBuilder.process(token));

        verify(token).asDoctype();
    }

    @Test
    public void testProcessEOF() {
        when(token.type).thenReturn(Token.TokenType.EOF);

        assertTrue(xmlTreeBuilder.process(token));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testProcessUnexpectedToken() {
        when(token.type).thenReturn(Token.TokenType.Character); // Simulate unexpected token

        xmlTreeBuilder.process(token);
    }

    @Test
    public void testInsertNode() {
        Node node = mock(Node.class);
        Element element = mock(Element.class);
        when(xmlTreeBuilder.currentElement()).thenReturn(element);

        xmlTreeBuilder.insertNode(node);

        verify(element).appendChild(node);
    }

    @Test
    public void testInsertStartTag() {
        when(startTag.name()).thenReturn("tag");
        when(startTag.isSelfClosing()).thenReturn(false);

        Element element = xmlTreeBuilder.insert(startTag);

        assertNotNull(element);
        assertEquals("tag", element.tagName());
        assertTrue(xmlTreeBuilder.stack.contains(element));
    }

    @Test
    public void testInsertSelfClosingStartTag() {
        when(startTag.name()).thenReturn("tag");
        when(startTag.isSelfClosing()).thenReturn(true);

        Element element = xmlTreeBuilder.insert(startTag);

        assertNotNull(element);
        assertEquals("tag", element.tagName());
        assertFalse(xmlTreeBuilder.stack.contains(element));
    }

    @Test
    public void testInsertComment() {
        when(commentToken.getData()).thenReturn("comment");
        when(commentToken.bogus).thenReturn(false);

        xmlTreeBuilder.insert(commentToken);

        verify(xmlTreeBuilder).insertNode(any(Comment.class));
    }

    @Test
    public void testInsertBogusComment() {
        when(commentToken.getData()).thenReturn("!declaration");
        when(commentToken.bogus).thenReturn(true);

        xmlTreeBuilder.insert(commentToken);

        verify(xmlTreeBuilder).insertNode(any(XmlDeclaration.class));
    }

    @Test
    public void testInsertCharacter() {
        when(characterToken.getData()).thenReturn("text");

        xmlTreeBuilder.insert(characterToken);

        verify(xmlTreeBuilder).insertNode(any(TextNode.class));
    }

    @Test
    public void testInsertDoctype() {
        when(doctypeToken.getName()).thenReturn("doctype");

        xmlTreeBuilder.insert(doctypeToken);

        verify(xmlTreeBuilder).insertNode(any(DocumentType.class));
    }

    @Test
    public void testPopStackToClose() {
        Element element1 = mock(Element.class);
        Element element2 = mock(Element.class);
        when(element1.nodeName()).thenReturn("tag1");
        when(element2.nodeName()).thenReturn("tag2");
        when(endTag.name()).thenReturn("tag1");

        xmlTreeBuilder.stack.add(element1);
        xmlTreeBuilder.stack.add(element2);

        xmlTreeBuilder.popStackToClose(endTag);

        assertEquals(1, xmlTreeBuilder.stack.size());
        assertEquals(element1, xmlTreeBuilder.stack.get(0));
    }

    @Test
    public void testPopStackToCloseNotFound() {
        Element element1 = mock(Element.class);
        Element element2 = mock(Element.class);
        when(element1.nodeName()).thenReturn("tag1");
        when(element2.nodeName()).thenReturn("tag2");
        when(endTag.name()).thenReturn("tag3");

        xmlTreeBuilder.stack.add(element1);
        xmlTreeBuilder.stack.add(element2);

        xmlTreeBuilder.popStackToClose(endTag);

        assertEquals(2, xmlTreeBuilder.stack.size());
    }

    @Test
    public void testParseFragment() {
        String inputFragment = "<xml></xml>";
        String baseUri = "http://example.com";

        List<Node> nodes = xmlTreeBuilder.parseFragment(inputFragment, baseUri, errors);

        assertNotNull(nodes);
        assertEquals(1, nodes.size());
    }
}
```