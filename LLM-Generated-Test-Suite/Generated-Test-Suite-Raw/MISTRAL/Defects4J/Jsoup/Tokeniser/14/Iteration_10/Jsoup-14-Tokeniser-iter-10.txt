```java
package org.jsoup.parser;

import org.jsoup.helper.Validate;
import org.jsoup.nodes.Entities;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class TokeniserTest {

    private Tokeniser tokeniser;
    private CharacterReader mockReader;

    @Before
    public void setUp() {
        mockReader = new MockCharacterReader();
        tokeniser = new Tokeniser(mockReader);
    }

    @Test
    public void testRead() {
        // Mock the reader to simulate input
        mockReader.setInput("<html>");

        Token token = tokeniser.read();
        assertNotNull(token);
        assertTrue(token instanceof Token.StartTag);
        assertEquals("html", ((Token.StartTag) token).tagName);
    }

    @Test
    public void testEmitToken() {
        Token token = new Token.StartTag("div");
        tokeniser.emit(token);

        assertTrue(tokeniser.isEmitPending);
        assertEquals(token, tokeniser.emitPending);
    }

    @Test
    public void testEmitString() {
        tokeniser.emit("Hello");
        assertEquals("Hello", tokeniser.charBuffer.toString());
    }

    @Test
    public void testEmitChar() {
        tokeniser.emit('H');
        assertEquals("H", tokeniser.charBuffer.toString());
    }

    @Test
    public void testGetState() {
        assertEquals(TokeniserState.Data, tokeniser.getState());
    }

    @Test
    public void testTransition() {
        tokeniser.transition(TokeniserState.TagOpen);
        assertEquals(TokeniserState.TagOpen, tokeniser.getState());
    }

    @Test
    public void testAdvanceTransition() {
        tokeniser.advanceTransition(TokeniserState.TagOpen);
        assertEquals(TokeniserState.TagOpen, tokeniser.getState());
        assertEquals(1, mockReader.getPosition());
    }

    @Test
    public void testAcknowledgeSelfClosingFlag() {
        tokeniser.acknowledgeSelfClosingFlag();
        assertTrue(tokeniser.selfClosingFlagAcknowledged);
    }

    @Test
    public void testConsumeCharacterReference() {
        mockReader.setInput("&#x3C;");
        Character result = tokeniser.consumeCharacterReference(null, false);
        assertEquals(Character.valueOf('<'), result);
    }

    @Test
    public void testCreateTagPending() {
        Token.Tag tag = tokeniser.createTagPending(true);
        assertTrue(tag instanceof Token.StartTag);
    }

    @Test
    public void testEmitTagPending() {
        tokeniser.createTagPending(true);
        tokeniser.emitTagPending();
        assertTrue(tokeniser.isEmitPending);
    }

    @Test
    public void testCreateCommentPending() {
        tokeniser.createCommentPending();
        assertNotNull(tokeniser.commentPending);
    }

    @Test
    public void testEmitCommentPending() {
        tokeniser.createCommentPending();
        tokeniser.emitCommentPending();
        assertTrue(tokeniser.isEmitPending);
    }

    @Test
    public void testCreateDoctypePending() {
        tokeniser.createDoctypePending();
        assertNotNull(tokeniser.doctypePending);
    }

    @Test
    public void testEmitDoctypePending() {
        tokeniser.createDoctypePending();
        tokeniser.emitDoctypePending();
        assertTrue(tokeniser.isEmitPending);
    }

    @Test
    public void testCreateTempBuffer() {
        tokeniser.createTempBuffer();
        assertNotNull(tokeniser.dataBuffer);
    }

    @Test
    public void testIsAppropriateEndTagToken() {
        tokeniser.createTagPending(true);
        tokeniser.tagPending.tagName = "div";
        tokeniser.emitTagPending();

        tokeniser.createTagPending(false);
        tokeniser.tagPending.tagName = "div";

        assertTrue(tokeniser.isAppropriateEndTagToken());
    }

    @Test
    public void testIsTrackErrors() {
        assertTrue(tokeniser.isTrackErrors());
    }

    @Test
    public void testSetTrackErrors() {
        tokeniser.setTrackErrors(false);
        assertFalse(tokeniser.isTrackErrors());
    }

    @Test
    public void testError() {
        tokeniser.error(TokeniserState.Data);
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testEofError() {
        tokeniser.eofError(TokeniserState.Data);
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testCharacterReferenceError() {
        tokeniser.characterReferenceError();
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testErrorWithMessage() {
        tokeniser.error("Test error");
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testCurrentNodeInHtmlNS() {
        assertTrue(tokeniser.currentNodeInHtmlNS());
    }

    // Mock CharacterReader for testing purposes
    private class MockCharacterReader extends CharacterReader {
        private String input;
        private int position = 0;

        public void setInput(String input) {
            this.input = input;
            this.position = 0;
        }

        @Override
        public boolean isEmpty() {
            return position >= input.length();
        }

        @Override
        public char current() {
            return input.charAt(position);
        }

        @Override
        public void advance() {
            position++;
        }

        @Override
        public boolean matchesAny(char... seq) {
            for (char c : seq) {
                if (current() == c) return true;
            }
            return false;
        }

        @Override
        public boolean matchConsume(String seq) {
            if (input.startsWith(seq, position)) {
                position += seq.length();
                return true;
            }
            return false;
        }

        @Override
        public boolean matchConsumeIgnoreCase(String seq) {
            if (input.regionMatches(true, position, seq, 0, seq.length())) {
                position += seq.length();
                return true;
            }
            return false;
        }

        @Override
        public String consumeTo(String seq) {
            int end = input.indexOf(seq, position);
            if (end == -1) return "";
            String result = input.substring(position, end);
            position = end;
            return result;
        }

        @Override
        public String consumeToAny(String... seqs) {
            int min = input.length();
            for (String seq : seqs) {
                int end = input.indexOf(seq, position);
                if (end != -1 && end < min) {
                    min = end;
                }
            }
            if (min == input.length()) return "";
            String result = input.substring(position, min);
            position = min;
            return result;
        }

        @Override
        public String consumeLetterSequence() {
            int start = position;
            while (position < input.length() && Character.isLetter(input.charAt(position))) {
                position++;
            }
            return input.substring(start, position);
        }

        @Override
        public String consumeDigitSequence() {
            int start = position;
            while (position < input.length() && Character.isDigit(input.charAt(position))) {
                position++;
            }
            return input.substring(start, position);
        }

        @Override
        public String consumeHexSequence() {
            int start = position;
            while (position < input.length() && isHexDigit(input.charAt(position))) {
                position++;
            }
            return input.substring(start, position);
        }

        @Override
        public void unconsume() {
            if (position > 0) position--;
        }

        @Override
        public void mark() {
            // No-op for this mock
        }

        @Override
        public void rewindToMark() {
            // No-op for this mock
        }

        @Override
        public int pos() {
            return position;
        }

        public int getPosition() {
            return position;
        }

        private boolean isHexDigit(char c) {
            return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
        }
    }
}
```