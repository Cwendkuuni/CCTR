```java
package org.jsoup.parser;

import org.jsoup.helper.Validate;
import org.jsoup.nodes.Entities;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TokeniserTest {

    private Tokeniser tokeniser;
    private CharacterReader reader;

    @Before
    public void setUp() {
        reader = mock(CharacterReader.class);
        tokeniser = new Tokeniser(reader);
    }

    @Test
    public void testRead() {
        Token token = mock(Token.class);
        tokeniser.emit(token);
        Token result = tokeniser.read();
        assertEquals(token, result);
    }

    @Test
    public void testEmitToken() {
        Token token = mock(Token.class);
        tokeniser.emit(token);
        assertTrue(tokeniser.isEmitPending);
        assertEquals(token, tokeniser.emitPending);
    }

    @Test
    public void testEmitString() {
        tokeniser.emit("test");
        assertEquals("test", tokeniser.charBuffer.toString());
    }

    @Test
    public void testEmitChar() {
        tokeniser.emit('a');
        assertEquals("a", tokeniser.charBuffer.toString());
    }

    @Test
    public void testGetState() {
        TokeniserState state = mock(TokeniserState.class);
        tokeniser.transition(state);
        assertEquals(state, tokeniser.getState());
    }

    @Test
    public void testTransition() {
        TokeniserState state = mock(TokeniserState.class);
        tokeniser.transition(state);
        assertEquals(state, tokeniser.state);
    }

    @Test
    public void testAdvanceTransition() {
        TokeniserState state = mock(TokeniserState.class);
        tokeniser.advanceTransition(state);
        verify(reader).advance();
        assertEquals(state, tokeniser.state);
    }

    @Test
    public void testAcknowledgeSelfClosingFlag() {
        tokeniser.acknowledgeSelfClosingFlag();
        assertTrue(tokeniser.selfClosingFlagAcknowledged);
    }

    @Test
    public void testConsumeCharacterReference() {
        when(reader.isEmpty()).thenReturn(false);
        when(reader.current()).thenReturn('&');
        when(reader.matchConsume("#")).thenReturn(true);
        when(reader.matchConsumeIgnoreCase("X")).thenReturn(false);
        when(reader.consumeDigitSequence()).thenReturn("65");
        when(reader.matchConsume(";")).thenReturn(true);

        Character result = tokeniser.consumeCharacterReference(null, false);
        assertEquals(Character.valueOf('A'), result);
    }

    @Test
    public void testCreateTagPending() {
        Token.Tag tag = tokeniser.createTagPending(true);
        assertTrue(tag instanceof Token.StartTag);
    }

    @Test
    public void testEmitTagPending() {
        Token.Tag tag = tokeniser.createTagPending(true);
        tokeniser.emitTagPending();
        assertTrue(tokeniser.isEmitPending);
        assertEquals(tag, tokeniser.emitPending);
    }

    @Test
    public void testCreateCommentPending() {
        tokeniser.createCommentPending();
        assertNotNull(tokeniser.commentPending);
    }

    @Test
    public void testEmitCommentPending() {
        tokeniser.createCommentPending();
        tokeniser.emitCommentPending();
        assertTrue(tokeniser.isEmitPending);
        assertEquals(tokeniser.commentPending, tokeniser.emitPending);
    }

    @Test
    public void testCreateDoctypePending() {
        tokeniser.createDoctypePending();
        assertNotNull(tokeniser.doctypePending);
    }

    @Test
    public void testEmitDoctypePending() {
        tokeniser.createDoctypePending();
        tokeniser.emitDoctypePending();
        assertTrue(tokeniser.isEmitPending);
        assertEquals(tokeniser.doctypePending, tokeniser.emitPending);
    }

    @Test
    public void testCreateTempBuffer() {
        tokeniser.createTempBuffer();
        assertNotNull(tokeniser.dataBuffer);
    }

    @Test
    public void testIsAppropriateEndTagToken() {
        Token.StartTag startTag = new Token.StartTag();
        startTag.tagName = "div";
        tokeniser.lastStartTag = startTag;

        Token.EndTag endTag = new Token.EndTag();
        endTag.tagName = "div";
        tokeniser.tagPending = endTag;

        assertTrue(tokeniser.isAppropriateEndTagToken());
    }

    @Test
    public void testIsTrackErrors() {
        assertTrue(tokeniser.isTrackErrors());
    }

    @Test
    public void testSetTrackErrors() {
        tokeniser.setTrackErrors(false);
        assertFalse(tokeniser.isTrackErrors());
    }

    @Test
    public void testError() {
        TokeniserState state = mock(TokeniserState.class);
        tokeniser.error(state);
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testEofError() {
        TokeniserState state = mock(TokeniserState.class);
        tokeniser.eofError(state);
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testCharacterReferenceError() {
        tokeniser.characterReferenceError();
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testErrorWithMessage() {
        tokeniser.error("Test error");
        assertEquals(1, tokeniser.errors.size());
    }

    @Test
    public void testCurrentNodeInHtmlNS() {
        assertTrue(tokeniser.currentNodeInHtmlNS());
    }
}
```