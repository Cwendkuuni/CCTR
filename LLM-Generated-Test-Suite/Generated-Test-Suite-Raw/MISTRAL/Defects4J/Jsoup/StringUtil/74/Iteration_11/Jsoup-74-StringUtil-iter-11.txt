```java
package org.jsoup.helper;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.Assert;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public class StringUtilTest {

    @Before
    public void setUp() {
        // Set up any necessary preconditions
    }

    @After
    public void tearDown() {
        // Clean up any necessary postconditions
    }

    @Test
    public void testJoinCollection() {
        Collection<String> strings = Arrays.asList("a", "b", "c");
        String result = StringUtil.join(strings, ",");
        Assert.assertEquals("a,b,c", result);
    }

    @Test
    public void testJoinIterator() {
        List<String> strings = Arrays.asList("a", "b", "c");
        Iterator<String> iterator = strings.iterator();
        String result = StringUtil.join(iterator, ",");
        Assert.assertEquals("a,b,c", result);
    }

    @Test
    public void testJoinArray() {
        String[] strings = {"a", "b", "c"};
        String result = StringUtil.join(strings, ",");
        Assert.assertEquals("a,b,c", result);
    }

    @Test
    public void testPadding() {
        Assert.assertEquals("", StringUtil.padding(0));
        Assert.assertEquals(" ", StringUtil.padding(1));
        Assert.assertEquals("  ", StringUtil.padding(2));
        Assert.assertEquals("                    ", StringUtil.padding(20));
        Assert.assertEquals("                     ", StringUtil.padding(21));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testPaddingNegative() {
        StringUtil.padding(-1);
    }

    @Test
    public void testIsBlank() {
        Assert.assertTrue(StringUtil.isBlank(null));
        Assert.assertTrue(StringUtil.isBlank(""));
        Assert.assertTrue(StringUtil.isBlank(" "));
        Assert.assertTrue(StringUtil.isBlank("\t\n\r\f"));
        Assert.assertFalse(StringUtil.isBlank("a"));
        Assert.assertFalse(StringUtil.isBlank(" a "));
    }

    @Test
    public void testIsNumeric() {
        Assert.assertFalse(StringUtil.isNumeric(null));
        Assert.assertFalse(StringUtil.isNumeric(""));
        Assert.assertFalse(StringUtil.isNumeric("a"));
        Assert.assertFalse(StringUtil.isNumeric("1a"));
        Assert.assertTrue(StringUtil.isNumeric("123"));
    }

    @Test
    public void testIsWhitespace() {
        Assert.assertTrue(StringUtil.isWhitespace(' '));
        Assert.assertTrue(StringUtil.isWhitespace('\t'));
        Assert.assertTrue(StringUtil.isWhitespace('\n'));
        Assert.assertTrue(StringUtil.isWhitespace('\f'));
        Assert.assertTrue(StringUtil.isWhitespace('\r'));
        Assert.assertFalse(StringUtil.isWhitespace('a'));
    }

    @Test
    public void testIsActuallyWhitespace() {
        Assert.assertTrue(StringUtil.isActuallyWhitespace(' '));
        Assert.assertTrue(StringUtil.isActuallyWhitespace('\t'));
        Assert.assertTrue(StringUtil.isActuallyWhitespace('\n'));
        Assert.assertTrue(StringUtil.isActuallyWhitespace('\f'));
        Assert.assertTrue(StringUtil.isActuallyWhitespace('\r'));
        Assert.assertTrue(StringUtil.isActuallyWhitespace(160));
        Assert.assertFalse(StringUtil.isActuallyWhitespace('a'));
    }

    @Test
    public void testNormaliseWhitespace() {
        Assert.assertEquals("a b c", StringUtil.normaliseWhitespace("a  b\tc\n"));
        Assert.assertEquals("a b c", StringUtil.normaliseWhitespace(" a b c "));
        Assert.assertEquals("a b c", StringUtil.normaliseWhitespace("a\tb\nc"));
    }

    @Test
    public void testAppendNormalisedWhitespace() {
        StringBuilder sb = new StringBuilder();
        StringUtil.appendNormalisedWhitespace(sb, "a  b\tc\n", false);
        Assert.assertEquals("a b c", sb.toString());

        sb = new StringBuilder();
        StringUtil.appendNormalisedWhitespace(sb, " a b c ", true);
        Assert.assertEquals("a b c", sb.toString());
    }

    @Test
    public void testIn() {
        Assert.assertTrue(StringUtil.in("a", "a", "b", "c"));
        Assert.assertFalse(StringUtil.in("d", "a", "b", "c"));
    }

    @Test
    public void testInSorted() {
        String[] sortedArray = {"a", "b", "c"};
        Assert.assertTrue(StringUtil.inSorted("b", sortedArray));
        Assert.assertFalse(StringUtil.inSorted("d", sortedArray));
    }

    @Test
    public void testResolveURL() throws MalformedURLException {
        URL base = new URL("http://example.com/path/");
        URL result = StringUtil.resolve(base, "file");
        Assert.assertEquals(new URL("http://example.com/path/file"), result);

        result = StringUtil.resolve(base, "?query");
        Assert.assertEquals(new URL("http://example.com/path/?query"), result);

        result = StringUtil.resolve(base, "./file");
        Assert.assertEquals(new URL("http://example.com/file"), result);
    }

    @Test
    public void testResolveString() {
        String base = "http://example.com/path/";
        String result = StringUtil.resolve(base, "file");
        Assert.assertEquals("http://example.com/path/file", result);

        result = StringUtil.resolve(base, "?query");
        Assert.assertEquals("http://example.com/path/?query", result);

        result = StringUtil.resolve(base, "./file");
        Assert.assertEquals("http://example.com/file", result);
    }

    @Test
    public void testStringBuilder() {
        StringBuilder sb = StringUtil.stringBuilder();
        Assert.assertNotNull(sb);
        Assert.assertEquals(0, sb.length());
    }
}
```