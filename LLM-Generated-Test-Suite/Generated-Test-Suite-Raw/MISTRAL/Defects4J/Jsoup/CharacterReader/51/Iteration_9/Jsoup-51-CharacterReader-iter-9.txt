```java
package org.jsoup.parser;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class CharacterReaderTest {

    private CharacterReader reader;

    @Before
    public void setUp() {
        reader = new CharacterReader("Hello World!");
    }

    @Test
    public void testPos() {
        assertEquals(0, reader.pos());
        reader.consume();
        assertEquals(1, reader.pos());
    }

    @Test
    public void testIsEmpty() {
        assertFalse(reader.isEmpty());
        reader = new CharacterReader("");
        assertTrue(reader.isEmpty());
    }

    @Test
    public void testCurrent() {
        assertEquals('H', reader.current());
        reader.consume();
        assertEquals('e', reader.current());
    }

    @Test
    public void testConsume() {
        assertEquals('H', reader.consume());
        assertEquals('e', reader.consume());
    }

    @Test
    public void testUnconsume() {
        reader.consume();
        reader.unconsume();
        assertEquals('H', reader.current());
    }

    @Test
    public void testAdvance() {
        reader.advance();
        assertEquals('e', reader.current());
    }

    @Test
    public void testMark() {
        reader.mark();
        reader.consume();
        reader.rewindToMark();
        assertEquals('H', reader.current());
    }

    @Test
    public void testRewindToMark() {
        reader.mark();
        reader.consume();
        reader.rewindToMark();
        assertEquals('H', reader.current());
    }

    @Test
    public void testConsumeAsString() {
        assertEquals("H", reader.consumeAsString());
        assertEquals("e", reader.consumeAsString());
    }

    @Test
    public void testNextIndexOfChar() {
        assertEquals(2, reader.nextIndexOf('l'));
        assertEquals(-1, reader.nextIndexOf('z'));
    }

    @Test
    public void testNextIndexOfCharSequence() {
        assertEquals(6, reader.nextIndexOf("World"));
        assertEquals(-1, reader.nextIndexOf("Foo"));
    }

    @Test
    public void testConsumeToChar() {
        assertEquals("Hello ", reader.consumeTo('W'));
        assertEquals("orld!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeToString() {
        assertEquals("Hello ", reader.consumeTo("World"));
        assertEquals("orld!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeToAny() {
        assertEquals("Hello ", reader.consumeToAny('W', 'o'));
        assertEquals("rld!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeToAnySorted() {
        assertEquals("Hello ", reader.consumeToAnySorted('W', 'o'));
        assertEquals("rld!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeData() {
        reader = new CharacterReader("Hello <World>");
        assertEquals("Hello ", reader.consumeData());
        assertEquals("<World>", reader.consumeToEnd());
    }

    @Test
    public void testConsumeTagName() {
        reader = new CharacterReader("Hello World>");
        assertEquals("Hello", reader.consumeTagName());
        assertEquals(" World>", reader.consumeToEnd());
    }

    @Test
    public void testConsumeToEnd() {
        assertEquals("Hello World!", reader.consumeToEnd());
        assertTrue(reader.isEmpty());
    }

    @Test
    public void testConsumeLetterSequence() {
        assertEquals("Hello", reader.consumeLetterSequence());
        assertEquals(" World!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeLetterThenDigitSequence() {
        reader = new CharacterReader("Hello123 World!");
        assertEquals("Hello123", reader.consumeLetterThenDigitSequence());
        assertEquals(" World!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeHexSequence() {
        reader = new CharacterReader("123ABCdef World!");
        assertEquals("123ABCdef", reader.consumeHexSequence());
        assertEquals(" World!", reader.consumeToEnd());
    }

    @Test
    public void testConsumeDigitSequence() {
        reader = new CharacterReader("123 World!");
        assertEquals("123", reader.consumeDigitSequence());
        assertEquals(" World!", reader.consumeToEnd());
    }

    @Test
    public void testMatchesChar() {
        assertTrue(reader.matches('H'));
        assertFalse(reader.matches('W'));
    }

    @Test
    public void testMatchesString() {
        assertTrue(reader.matches("Hello"));
        assertFalse(reader.matches("World"));
    }

    @Test
    public void testMatchesIgnoreCase() {
        assertTrue(reader.matchesIgnoreCase("hello"));
        assertFalse(reader.matchesIgnoreCase("world"));
    }

    @Test
    public void testMatchesAny() {
        assertTrue(reader.matchesAny('H', 'W'));
        assertFalse(reader.matchesAny('X', 'Y'));
    }

    @Test
    public void testMatchesAnySorted() {
        char[] sortedChars = {'H', 'W'};
        assertTrue(reader.matchesAnySorted(sortedChars));
        sortedChars = new char[]{'X', 'Y'};
        assertFalse(reader.matchesAnySorted(sortedChars));
    }

    @Test
    public void testMatchesLetter() {
        assertTrue(reader.matchesLetter());
        reader = new CharacterReader("123");
        assertFalse(reader.matchesLetter());
    }

    @Test
    public void testMatchesDigit() {
        reader = new CharacterReader("123");
        assertTrue(reader.matchesDigit());
        reader = new CharacterReader("Hello");
        assertFalse(reader.matchesDigit());
    }

    @Test
    public void testMatchConsume() {
        assertTrue(reader.matchConsume("Hello"));
        assertEquals(" World!", reader.consumeToEnd());
    }

    @Test
    public void testMatchConsumeIgnoreCase() {
        assertTrue(reader.matchConsumeIgnoreCase("hello"));
        assertEquals(" World!", reader.consumeToEnd());
    }

    @Test
    public void testContainsIgnoreCase() {
        assertTrue(reader.containsIgnoreCase("world"));
        assertFalse(reader.containsIgnoreCase("foo"));
    }

    @Test
    public void testToString() {
        assertEquals("Hello World!", reader.toString());
        reader.consume();
        assertEquals("ello World!", reader.toString());
    }

    @Test
    public void testCacheString() {
        String cached = reader.cacheString(0, 5);
        assertEquals("Hello", cached);
        String cachedAgain = reader.cacheString(0, 5);
        assertSame(cached, cachedAgain);
    }

    @Test
    public void testRangeEquals() {
        assertTrue(reader.rangeEquals(0, 5, "Hello"));
        assertFalse(reader.rangeEquals(0, 5, "World"));
    }
}
```