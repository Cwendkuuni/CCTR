```java
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.text.Format;
import java.text.MessageFormat;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat extendedMessageFormat;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        extendedMessageFormat = new ExtendedMessageFormat("Test pattern {0}", registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern {0}");
        assertEquals("Test pattern {0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern {0}", locale);
        assertEquals("Test pattern {0}", emf.toPattern());
        assertEquals(locale, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern {0}", registry);
        assertEquals("Test pattern {0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern {0}", locale, registry);
        assertEquals("Test pattern {0}", emf.toPattern());
        assertEquals(locale, emf.getLocale());
    }

    @Test
    public void testToPattern() {
        assertEquals("Test pattern {0}", extendedMessageFormat.toPattern());
    }

    @Test
    public void testApplyPattern() {
        extendedMessageFormat.applyPattern("New pattern {0}");
        assertEquals("New pattern {0}", extendedMessageFormat.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        extendedMessageFormat.setFormat(0, new MessageFormat(""));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        extendedMessageFormat.setFormatByArgumentIndex(0, new MessageFormat(""));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        extendedMessageFormat.setFormats(new Format[]{new MessageFormat("")});
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        extendedMessageFormat.setFormatsByArgumentIndex(new Format[]{new MessageFormat("")});
    }

    @Test
    public void testGetFormat() {
        registry.put("testFormat", new FormatFactory() {
            @Override
            public Format getFormat(String name, String arguments, Locale locale) {
                return new MessageFormat("Test Format");
            }
        });
        Format format = extendedMessageFormat.getFormat("testFormat");
        assertNotNull(format);
        assertTrue(format instanceof MessageFormat);
    }

    @Test
    public void testReadArgumentIndex() {
        ParsePosition pos = new ParsePosition(0);
        int index = extendedMessageFormat.readArgumentIndex("{0}", pos);
        assertEquals(0, index);
    }

    @Test
    public void testParseFormatDescription() {
        ParsePosition pos = new ParsePosition(0);
        String description = extendedMessageFormat.parseFormatDescription("{0,testFormat}", pos);
        assertEquals("testFormat", description);
    }

    @Test
    public void testInsertFormats() {
        ArrayList<String> customPatterns = new ArrayList<>();
        customPatterns.add("testFormat");
        String pattern = extendedMessageFormat.insertFormats("{0}", customPatterns);
        assertEquals("{0,testFormat}", pattern);
    }

    @Test
    public void testSeekNonWs() {
        ParsePosition pos = new ParsePosition(0);
        extendedMessageFormat.seekNonWs("  test", pos);
        assertEquals(2, pos.getIndex());
    }

    @Test
    public void testNext() {
        ParsePosition pos = new ParsePosition(0);
        extendedMessageFormat.next(pos);
        assertEquals(1, pos.getIndex());
    }

    @Test
    public void testAppendQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        StringBuffer sb = new StringBuffer();
        extendedMessageFormat.appendQuotedString("'test'", pos, sb, false);
        assertEquals("test", sb.toString());
    }

    @Test
    public void testGetQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        extendedMessageFormat.getQuotedString("'test'", pos, false);
        assertEquals(6, pos.getIndex());
    }

    @Test
    public void testContainsElements() {
        ArrayList<String> list = new ArrayList<>();
        list.add("test");
        assertTrue(extendedMessageFormat.containsElements(list));

        list.clear();
        assertFalse(extendedMessageFormat.containsElements(list));
    }
}
```