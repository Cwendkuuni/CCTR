```java
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.StringWriter;

public class LookupTranslatorTest {

    private LookupTranslator translator;

    @Before
    public void setUp() {
        CharSequence[][] lookup = {
            {"a", "1"},
            {"b", "2"},
            {"ab", "3"},
            {"ba", "4"}
        };
        translator = new LookupTranslator(lookup);
    }

    @Test
    public void testTranslateSingleChar() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("a", 0, out);
        assertEquals(1, result);
        assertEquals("1", out.toString());
    }

    @Test
    public void testTranslateMultipleChars() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("ab", 0, out);
        assertEquals(2, result);
        assertEquals("3", out.toString());
    }

    @Test
    public void testTranslateNoMatch() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("c", 0, out);
        assertEquals(0, result);
        assertEquals("", out.toString());
    }

    @Test
    public void testTranslateGreedyMatch() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("aba", 0, out);
        assertEquals(2, result);
        assertEquals("3", out.toString());
    }

    @Test
    public void testTranslatePartialMatch() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("abab", 0, out);
        assertEquals(2, result);
        assertEquals("3", out.toString());
    }

    @Test
    public void testTranslateEmptyInput() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("", 0, out);
        assertEquals(0, result);
        assertEquals("", out.toString());
    }

    @Test
    public void testTranslateOutOfBounds() throws IOException {
        StringWriter out = new StringWriter();
        int result = translator.translate("a", 1, out);
        assertEquals(0, result);
        assertEquals("", out.toString());
    }

    @Test
    public void testTranslateNullLookup() {
        LookupTranslator nullTranslator = new LookupTranslator((CharSequence[][]) null);
        assertNotNull(nullTranslator);
        assertEquals(Integer.MAX_VALUE, nullTranslator.shortest);
        assertEquals(0, nullTranslator.longest);
    }

    @Test
    public void testTranslateEmptyLookup() {
        LookupTranslator emptyTranslator = new LookupTranslator(new CharSequence[][]{});
        assertNotNull(emptyTranslator);
        assertEquals(Integer.MAX_VALUE, emptyTranslator.shortest);
        assertEquals(0, emptyTranslator.longest);
    }
}
```