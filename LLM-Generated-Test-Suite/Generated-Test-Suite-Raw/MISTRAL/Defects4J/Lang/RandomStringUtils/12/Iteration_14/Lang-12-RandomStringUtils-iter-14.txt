```java
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.util.Random;

public class RandomStringUtilsTest {

    private static final int TEST_COUNT = 10;
    private static final int LARGE_COUNT = 1000;
    private static final String ALPHABET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String ALPHANUMERIC = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private static final String NUMERIC = "0123456789";

    @Before
    public void setUp() {
        // Setup code if needed
    }

    @After
    public void tearDown() {
        // Tear down code if needed
    }

    @Test
    public void testRandom() {
        String result = RandomStringUtils.random(TEST_COUNT);
        assertEquals(TEST_COUNT, result.length());
    }

    @Test
    public void testRandomAscii() {
        String result = RandomStringUtils.randomAscii(TEST_COUNT);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(c >= 32 && c <= 126);
        }
    }

    @Test
    public void testRandomAlphabetic() {
        String result = RandomStringUtils.randomAlphabetic(TEST_COUNT);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetter(c));
        }
    }

    @Test
    public void testRandomAlphanumeric() {
        String result = RandomStringUtils.randomAlphanumeric(TEST_COUNT);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetterOrDigit(c));
        }
    }

    @Test
    public void testRandomNumeric() {
        String result = RandomStringUtils.randomNumeric(TEST_COUNT);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isDigit(c));
        }
    }

    @Test
    public void testRandomWithLettersAndNumbers() {
        String result = RandomStringUtils.random(TEST_COUNT, true, true);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetterOrDigit(c));
        }
    }

    @Test
    public void testRandomWithStartEndLettersNumbers() {
        String result = RandomStringUtils.random(TEST_COUNT, 32, 127, true, true);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(c >= 32 && c <= 126);
        }
    }

    @Test
    public void testRandomWithStartEndLettersNumbersChars() {
        String result = RandomStringUtils.random(TEST_COUNT, 32, 127, true, true, ALPHANUMERIC.toCharArray());
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(ALPHANUMERIC.indexOf(c) != -1);
        }
    }

    @Test
    public void testRandomWithStartEndLettersNumbersCharsRandom() {
        Random random = new Random(12345);
        String result = RandomStringUtils.random(TEST_COUNT, 32, 127, true, true, ALPHANUMERIC.toCharArray(), random);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(ALPHANUMERIC.indexOf(c) != -1);
        }
    }

    @Test
    public void testRandomWithCharsString() {
        String result = RandomStringUtils.random(TEST_COUNT, ALPHABET);
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(ALPHABET.indexOf(c) != -1);
        }
    }

    @Test
    public void testRandomWithCharsArray() {
        String result = RandomStringUtils.random(TEST_COUNT, ALPHABET.toCharArray());
        assertEquals(TEST_COUNT, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(ALPHABET.indexOf(c) != -1);
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithNegativeCount() {
        RandomStringUtils.random(-1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithEmptyChars() {
        RandomStringUtils.random(TEST_COUNT, "");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithEmptyCharsArray() {
        RandomStringUtils.random(TEST_COUNT, new char[0]);
    }

    @Test
    public void testRandomLargeCount() {
        String result = RandomStringUtils.random(LARGE_COUNT);
        assertEquals(LARGE_COUNT, result.length());
    }
}
```