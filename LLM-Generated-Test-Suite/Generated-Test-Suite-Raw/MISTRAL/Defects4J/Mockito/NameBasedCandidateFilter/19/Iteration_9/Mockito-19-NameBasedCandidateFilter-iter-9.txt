```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.internal.configuration.injection.filter.MockCandidateFilter;
import org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;
import org.mockito.internal.configuration.injection.filter.OngoingInjecter;
import org.mockito.internal.util.MockUtil;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class NameBasedCandidateFilterTest {

    private NameBasedCandidateFilter nameBasedCandidateFilter;
    private MockCandidateFilter mockCandidateFilter;
    private MockUtil mockUtil;

    @Before
    public void setUp() {
        mockCandidateFilter = mock(MockCandidateFilter.class);
        mockUtil = mock(MockUtil.class);
        nameBasedCandidateFilter = new NameBasedCandidateFilter(mockCandidateFilter);
    }

    @Test
    public void testFilterCandidateWithSingleMock() throws NoSuchFieldException {
        Collection<Object> mocks = new ArrayList<>();
        Object mock = new Object();
        mocks.add(mock);
        Field field = TestClass.class.getDeclaredField("fieldName");
        Object fieldInstance = new Object();

        OngoingInjecter ongoingInjecter = mock(OngoingInjecter.class);
        when(mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenReturn(ongoingInjecter);

        OngoingInjecter result = nameBasedCandidateFilter.filterCandidate(mocks, field, fieldInstance);

        assertEquals(ongoingInjecter, result);
        verify(mockCandidateFilter).filterCandidate(mocks, field, fieldInstance);
    }

    @Test
    public void testFilterCandidateWithMultipleMocksAndMatchingName() throws NoSuchFieldException {
        Collection<Object> mocks = new ArrayList<>();
        Object mock1 = new Object();
        Object mock2 = new Object();
        mocks.add(mock1);
        mocks.add(mock2);
        Field field = TestClass.class.getDeclaredField("fieldName");
        Object fieldInstance = new Object();

        when(mockUtil.getMockName(mock1)).thenReturn("fieldName");
        when(mockUtil.getMockName(mock2)).thenReturn("otherName");

        OngoingInjecter ongoingInjecter = mock(OngoingInjecter.class);
        List<Object> mockNameMatches = new ArrayList<>();
        mockNameMatches.add(mock1);
        when(mockCandidateFilter.filterCandidate(mockNameMatches, field, fieldInstance)).thenReturn(ongoingInjecter);

        OngoingInjecter result = nameBasedCandidateFilter.filterCandidate(mocks, field, fieldInstance);

        assertEquals(ongoingInjecter, result);
        verify(mockCandidateFilter).filterCandidate(mockNameMatches, field, fieldInstance);
    }

    @Test
    public void testFilterCandidateWithMultipleMocksAndNoMatchingName() throws NoSuchFieldException {
        Collection<Object> mocks = new ArrayList<>();
        Object mock1 = new Object();
        Object mock2 = new Object();
        mocks.add(mock1);
        mocks.add(mock2);
        Field field = TestClass.class.getDeclaredField("fieldName");
        Object fieldInstance = new Object();

        when(mockUtil.getMockName(mock1)).thenReturn("otherName1");
        when(mockUtil.getMockName(mock2)).thenReturn("otherName2");

        OngoingInjecter ongoingInjecter = mock(OngoingInjecter.class);
        when(mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenReturn(ongoingInjecter);

        OngoingInjecter result = nameBasedCandidateFilter.filterCandidate(mocks, field, fieldInstance);

        assertEquals(ongoingInjecter, result);
        verify(mockCandidateFilter).filterCandidate(mocks, field, fieldInstance);
    }

    private static class TestClass {
        public String fieldName;
    }
}
```