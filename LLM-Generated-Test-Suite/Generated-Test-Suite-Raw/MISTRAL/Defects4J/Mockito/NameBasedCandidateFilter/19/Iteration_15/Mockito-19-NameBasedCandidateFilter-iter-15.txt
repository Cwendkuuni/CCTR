```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.internal.configuration.injection.filter.MockCandidateFilter;
import org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;
import org.mockito.internal.util.MockUtil;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class NameBasedCandidateFilterTest {

    @Mock
    private MockCandidateFilter nextFilter;

    @Mock
    private Field field;

    @Mock
    private MockUtil mockUtil;

    private NameBasedCandidateFilter nameBasedCandidateFilter;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        nameBasedCandidateFilter = new NameBasedCandidateFilter(nextFilter);
    }

    @Test
    public void testFilterCandidateWithSingleMock() throws Exception {
        Collection<Object> mocks = new ArrayList<>();
        Object mock = new Object();
        mocks.add(mock);

        when(field.getName()).thenReturn("mockField");
        when(mockUtil.getMockName(mock)).thenReturn("mockField");

        nameBasedCandidateFilter.filterCandidate(mocks, field, mock);

        verify(nextFilter).filterCandidate(mocks, field, mock);
    }

    @Test
    public void testFilterCandidateWithMultipleMocksNoMatch() throws Exception {
        Collection<Object> mocks = new ArrayList<>();
        Object mock1 = new Object();
        Object mock2 = new Object();
        mocks.add(mock1);
        mocks.add(mock2);

        when(field.getName()).thenReturn("mockField");
        when(mockUtil.getMockName(mock1)).thenReturn("mockField1");
        when(mockUtil.getMockName(mock2)).thenReturn("mockField2");

        nameBasedCandidateFilter.filterCandidate(mocks, field, mock1);

        verify(nextFilter).filterCandidate(mocks, field, mock1);
    }

    @Test
    public void testFilterCandidateWithMultipleMocksWithMatch() throws Exception {
        Collection<Object> mocks = new ArrayList<>();
        Object mock1 = new Object();
        Object mock2 = new Object();
        mocks.add(mock1);
        mocks.add(mock2);

        when(field.getName()).thenReturn("mockField");
        when(mockUtil.getMockName(mock1)).thenReturn("mockField");
        when(mockUtil.getMockName(mock2)).thenReturn("mockField2");

        List<Object> mockNameMatches = new ArrayList<>();
        mockNameMatches.add(mock1);

        nameBasedCandidateFilter.filterCandidate(mocks, field, mock1);

        verify(nextFilter).filterCandidate(mockNameMatches, field, mock1);
    }

    @Test
    public void testFilterCandidateWithMultipleMocksAllMatch() throws Exception {
        Collection<Object> mocks = new ArrayList<>();
        Object mock1 = new Object();
        Object mock2 = new Object();
        mocks.add(mock1);
        mocks.add(mock2);

        when(field.getName()).thenReturn("mockField");
        when(mockUtil.getMockName(mock1)).thenReturn("mockField");
        when(mockUtil.getMockName(mock2)).thenReturn("mockField");

        List<Object> mockNameMatches = new ArrayList<>();
        mockNameMatches.add(mock1);
        mockNameMatches.add(mock2);

        nameBasedCandidateFilter.filterCandidate(mocks, field, mock1);

        verify(nextFilter).filterCandidate(mockNameMatches, field, mock1);
    }
}
```