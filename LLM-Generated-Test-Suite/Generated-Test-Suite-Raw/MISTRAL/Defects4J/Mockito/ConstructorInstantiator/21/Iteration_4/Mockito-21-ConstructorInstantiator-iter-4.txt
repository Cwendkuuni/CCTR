```java
package org.mockito.internal.creation.instance;

import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.creation.instance.ConstructorInstantiator;
import org.mockito.internal.creation.instance.Instantiator;
import org.mockito.internal.creation.instance.InstantationException;

import static org.junit.Assert.*;

public class ConstructorInstantiatorTest {

    private ConstructorInstantiator constructorInstantiator;
    private Object outerClassInstance;

    @Before
    public void setUp() {
        outerClassInstance = new Object();
        constructorInstantiator = new ConstructorInstantiator(outerClassInstance);
    }

    @Test
    public void testNewInstanceWithNoArgConstructor() {
        class NoArgClass {
            public NoArgClass() {}
        }

        NoArgClass instance = constructorInstantiator.newInstance(NoArgClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNewInstanceWithNoArgConstructorThrowsException() {
        class NoArgClass {
            public NoArgClass(String arg) {}
        }

        constructorInstantiator.newInstance(NoArgClass.class);
    }

    @Test
    public void testNewInstanceWithOuterClass() {
        class OuterClass {
            public OuterClass(Object outer) {}
        }

        OuterClass instance = constructorInstantiator.newInstance(OuterClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNewInstanceWithOuterClassThrowsException() {
        class OuterClass {
            public OuterClass(String outer) {}
        }

        constructorInstantiator.newInstance(OuterClass.class);
    }

    @Test
    public void testWithOuterClass() {
        class OuterClass {
            public OuterClass(Object outer) {}
        }

        OuterClass instance = constructorInstantiator.newInstance(OuterClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testWithOuterClassThrowsException() {
        class OuterClass {
            public OuterClass(String outer) {}
        }

        constructorInstantiator.newInstance(OuterClass.class);
    }

    @Test
    public void testNoArgConstructor() {
        class NoArgClass {
            public NoArgClass() {}
        }

        NoArgClass instance = ConstructorInstantiator.noArgConstructor(NoArgClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNoArgConstructorThrowsException() {
        class NoArgClass {
            public NoArgClass(String arg) {}
        }

        ConstructorInstantiator.noArgConstructor(NoArgClass.class);
    }

    @Test
    public void testParamsException() {
        class NoArgClass {
            public NoArgClass(String arg) {}
        }

        try {
            ConstructorInstantiator.noArgConstructor(NoArgClass.class);
            fail("Expected InstantationException to be thrown");
        } catch (InstantationException e) {
            assertEquals("Unable to create mock instance of 'NoArgClass'.\nPlease ensure it has parameter-less constructor.", e.getMessage());
        }
    }
}
```