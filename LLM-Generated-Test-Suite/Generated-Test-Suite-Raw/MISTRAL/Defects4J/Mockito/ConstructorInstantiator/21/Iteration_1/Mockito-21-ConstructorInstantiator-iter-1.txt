```java
package org.mockito.internal.creation.instance;

import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.creation.instance.ConstructorInstantiator;
import org.mockito.internal.creation.instance.Instantiator;
import org.mockito.internal.creation.instance.InstantationException;

import static org.junit.Assert.*;

public class ConstructorInstantiatorTest {

    private ConstructorInstantiator constructorInstantiator;
    private Object outerClassInstance;

    @Before
    public void setUp() {
        outerClassInstance = new Object();
        constructorInstantiator = new ConstructorInstantiator(outerClassInstance);
    }

    @Test
    public void testNewInstanceWithNoOuterClass() {
        Class<NoArgConstructorClass> cls = NoArgConstructorClass.class;
        NoArgConstructorClass instance = constructorInstantiator.newInstance(cls);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNewInstanceWithNoOuterClassThrowsException() {
        Class<NoArgConstructorClassWithException> cls = NoArgConstructorClassWithException.class;
        constructorInstantiator.newInstance(cls);
    }

    @Test
    public void testNewInstanceWithOuterClass() {
        Class<OuterClassConstructorClass> cls = OuterClassConstructorClass.class;
        OuterClassConstructorClass instance = constructorInstantiator.newInstance(cls);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNewInstanceWithOuterClassThrowsException() {
        Class<OuterClassConstructorClassWithException> cls = OuterClassConstructorClassWithException.class;
        constructorInstantiator.newInstance(cls);
    }

    @Test
    public void testNoArgConstructor() {
        Class<NoArgConstructorClass> cls = NoArgConstructorClass.class;
        NoArgConstructorClass instance = ConstructorInstantiator.noArgConstructor(cls);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNoArgConstructorThrowsException() {
        Class<NoArgConstructorClassWithException> cls = NoArgConstructorClassWithException.class;
        ConstructorInstantiator.noArgConstructor(cls);
    }

    @Test
    public void testWithOuterClass() {
        Class<OuterClassConstructorClass> cls = OuterClassConstructorClass.class;
        OuterClassConstructorClass instance = constructorInstantiator.withOuterClass(cls);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testWithOuterClassThrowsException() {
        Class<OuterClassConstructorClassWithException> cls = OuterClassConstructorClassWithException.class;
        constructorInstantiator.withOuterClass(cls);
    }

    public static class NoArgConstructorClass {
        public NoArgConstructorClass() {}
    }

    public static class NoArgConstructorClassWithException {
        public NoArgConstructorClassWithException() throws Exception {
            throw new Exception("Test exception");
        }
    }

    public static class OuterClassConstructorClass {
        public OuterClassConstructorClass(Object outerClassInstance) {}
    }

    public static class OuterClassConstructorClassWithException {
        public OuterClassConstructorClassWithException(Object outerClassInstance) throws Exception {
            throw new Exception("Test exception");
        }
    }
}
```