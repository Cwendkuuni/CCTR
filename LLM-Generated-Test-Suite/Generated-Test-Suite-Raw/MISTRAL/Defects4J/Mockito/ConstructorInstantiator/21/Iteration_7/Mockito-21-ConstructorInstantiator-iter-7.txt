```java
package org.mockito.internal.creation.instance;

import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.creation.instance.ConstructorInstantiator;
import org.mockito.internal.creation.instance.Instantiator;
import org.mockito.internal.creation.instance.InstantationException;

import static org.junit.Assert.*;

public class ConstructorInstantiatorTest {

    private ConstructorInstantiator constructorInstantiator;
    private ConstructorInstantiator constructorInstantiatorWithOuterClass;
    private Object outerClassInstance;

    @Before
    public void setUp() {
        constructorInstantiator = new ConstructorInstantiator(null);
        outerClassInstance = new Object();
        constructorInstantiatorWithOuterClass = new ConstructorInstantiator(outerClassInstance);
    }

    @Test
    public void testNewInstanceWithNoArgConstructor() {
        class TestClass {
            public TestClass() {}
        }

        TestClass instance = constructorInstantiator.newInstance(TestClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNewInstanceWithNoArgConstructorThrowsException() {
        class TestClass {
            public TestClass(String arg) {}
        }

        constructorInstantiator.newInstance(TestClass.class);
    }

    @Test
    public void testNewInstanceWithOuterClass() {
        class OuterClass {
            public class InnerClass {
                public InnerClass(OuterClass outer) {}
            }
        }

        OuterClass outer = new OuterClass();
        ConstructorInstantiator instantiator = new ConstructorInstantiator(outer);
        OuterClass.InnerClass instance = instantiator.newInstance(OuterClass.InnerClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNewInstanceWithOuterClassThrowsException() {
        class OuterClass {
            public class InnerClass {
                public InnerClass(String arg) {}
            }
        }

        OuterClass outer = new OuterClass();
        ConstructorInstantiator instantiator = new ConstructorInstantiator(outer);
        instantiator.newInstance(OuterClass.InnerClass.class);
    }

    @Test
    public void testParamsException() {
        Exception cause = new Exception("Test cause");
        InstantationException exception = ConstructorInstantiator.paramsException(String.class, cause);
        assertEquals("Unable to create mock instance of 'String'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.", exception.getMessage());
        assertEquals(cause, exception.getCause());
    }

    @Test
    public void testNoArgConstructor() {
        class TestClass {
            public TestClass() {}
        }

        TestClass instance = ConstructorInstantiator.noArgConstructor(TestClass.class);
        assertNotNull(instance);
    }

    @Test(expected = InstantationException.class)
    public void testNoArgConstructorThrowsException() {
        class TestClass {
            public TestClass(String arg) {}
        }

        ConstructorInstantiator.noArgConstructor(TestClass.class);
    }
}
```