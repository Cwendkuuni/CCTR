```java
package org.mockito.internal.util;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

public class TimerTest {

    private Timer timer;
    private static final long DURATION_MILLIS = 1000;

    @Before
    public void setUp() {
        timer = new Timer(DURATION_MILLIS);
    }

    @Test
    public void testTimerInitialization() {
        assertNotNull(timer);
        assertEquals(DURATION_MILLIS, timer.durationMillis);
        assertEquals(-1, timer.startTime);
    }

    @Test
    public void testStart() {
        timer.start();
        long currentTime = System.currentTimeMillis();
        assertTrue(Math.abs(timer.startTime - currentTime) < 100); // Allow some leeway for system time
    }

    @Test
    public void testIsCountingBeforeStart() {
        try {
            timer.isCounting();
            fail("Expected AssertionError");
        } catch (AssertionError e) {
            // Expected
        }
    }

    @Test
    public void testIsCountingAfterStart() throws InterruptedException {
        timer.start();
        assertTrue(timer.isCounting());

        // Wait for the duration to pass
        Thread.sleep(DURATION_MILLIS + 100); // Adding some buffer time
        assertFalse(timer.isCounting());
    }

    @Test
    public void testIsCountingExactDuration() throws InterruptedException {
        timer.start();
        assertTrue(timer.isCounting());

        // Wait for exactly the duration
        Thread.sleep(DURATION_MILLIS);
        assertTrue(timer.isCounting()); // Should still be counting right at the duration

        // Wait a bit more to ensure it stops counting
        Thread.sleep(100);
        assertFalse(timer.isCounting());
    }
}
```