Certainly! Below is a complete JUnit 4 test suite to comprehensively test the `MockCandidateFilter` interface. Since the interface does not have a concrete implementation, I will create a mock implementation for the purpose of testing.

```java
package org.mockito.internal.configuration.injection.filter;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;

public class MockCandidateFilterTest {

    @Mock
    private Collection<Object> mocks;

    @Mock
    private Field fieldToBeInjected;

    @Mock
    private Object fieldInstance;

    private MockCandidateFilter mockCandidateFilter;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockCandidateFilter = new MockCandidateFilter() {
            @Override
            public OngoingInjecter filterCandidate(Collection<Object> mocks, Field fieldToBeInjected, Object fieldInstance) {
                // Mock implementation for testing
                return new OngoingInjecter() {
                    @Override
                    public void inject() {
                        // Mock inject method
                    }
                };
            }
        };
    }

    @Test
    public void testFilterCandidate() {
        // Arrange
        when(mocks.size()).thenReturn(1);
        when(fieldToBeInjected.getName()).thenReturn("mockField");

        // Act
        OngoingInjecter injecter = mockCandidateFilter.filterCandidate(mocks, fieldToBeInjected, fieldInstance);

        // Assert
        assertNotNull(injecter);
        verify(mocks).size();
        verify(fieldToBeInjected).getName();
    }

    @Test(expected = NullPointerException.class)
    public void testFilterCandidateWithNullMocks() {
        // Act
        mockCandidateFilter.filterCandidate(null, fieldToBeInjected, fieldInstance);
    }

    @Test(expected = NullPointerException.class)
    public void testFilterCandidateWithNullField() {
        // Act
        mockCandidateFilter.filterCandidate(mocks, null, fieldInstance);
    }

    @Test(expected = NullPointerException.class)
    public void testFilterCandidateWithNullFieldInstance() {
        // Act
        mockCandidateFilter.filterCandidate(mocks, fieldToBeInjected, null);
    }

    // Additional tests can be added here to cover more scenarios
}
```

### Explanation:
1. **Mocking Dependencies**: The test suite uses Mockito to mock the dependencies (`Collection<Object>`, `Field`, and `Object`).
2. **Mock Implementation**: A mock implementation of `MockCandidateFilter` is created to return a mock `OngoingInjecter`.
3. **Test Methods**:
   - `testFilterCandidate`: Tests the `filterCandidate` method to ensure it returns a non-null `OngoingInjecter` and verifies interactions with mocks.
   - `testFilterCandidateWithNullMocks`, `testFilterCandidateWithNullField`, and `testFilterCandidateWithNullFieldInstance`: Test the method with null inputs to ensure it handles null values appropriately (expecting `NullPointerException`).

This test suite provides a basic structure for testing the `MockCandidateFilter` interface. You can expand it with more test cases as needed to cover additional scenarios.