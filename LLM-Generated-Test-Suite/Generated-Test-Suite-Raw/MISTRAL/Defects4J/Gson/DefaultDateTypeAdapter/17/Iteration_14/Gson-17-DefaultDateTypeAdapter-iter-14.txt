```java
package com.google.gson;

import static org.junit.Assert.*;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.junit.Before;
import org.junit.Test;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

public class DefaultDateTypeAdapterTest {

    private DefaultDateTypeAdapter adapter;
    private DateFormat enUsFormat;
    private DateFormat localFormat;

    @Before
    public void setUp() {
        enUsFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US);
        localFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);
        adapter = new DefaultDateTypeAdapter(Date.class, enUsFormat, localFormat);
    }

    @Test
    public void testWriteNullDate() throws IOException {
        StringWriter writer = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(writer);
        adapter.write(jsonWriter, null);
        assertEquals("null", writer.toString());
    }

    @Test
    public void testWriteDate() throws IOException {
        Date date = new Date();
        StringWriter writer = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(writer);
        adapter.write(jsonWriter, date);
        String expected = enUsFormat.format(date);
        assertEquals(expected, writer.toString());
    }

    @Test
    public void testReadDate() throws IOException {
        Date date = new Date();
        String dateString = enUsFormat.format(date);
        StringReader reader = new StringReader("\"" + dateString + "\"");
        JsonReader jsonReader = new JsonReader(reader);
        Date result = adapter.read(jsonReader);
        assertEquals(date, result);
    }

    @Test(expected = JsonParseException.class)
    public void testReadNonStringDate() throws IOException {
        StringReader reader = new StringReader("12345");
        JsonReader jsonReader = new JsonReader(reader);
        adapter.read(jsonReader);
    }

    @Test
    public void testReadTimestamp() throws IOException {
        Date date = new Date();
        String dateString = enUsFormat.format(date);
        StringReader reader = new StringReader("\"" + dateString + "\"");
        JsonReader jsonReader = new JsonReader(reader);
        adapter = new DefaultDateTypeAdapter(Timestamp.class, enUsFormat, localFormat);
        Timestamp result = (Timestamp) adapter.read(jsonReader);
        assertEquals(date.getTime(), result.getTime());
    }

    @Test
    public void testReadSqlDate() throws IOException {
        Date date = new Date();
        String dateString = enUsFormat.format(date);
        StringReader reader = new StringReader("\"" + dateString + "\"");
        JsonReader jsonReader = new JsonReader(reader);
        adapter = new DefaultDateTypeAdapter(java.sql.Date.class, enUsFormat, localFormat);
        java.sql.Date result = (java.sql.Date) adapter.read(jsonReader);
        assertEquals(date.getTime(), result.getTime());
    }

    @Test
    public void testToString() {
        String expected = "DefaultDateTypeAdapter(SimpleDateFormat)";
        assertEquals(expected, adapter.toString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidDateType() {
        new DefaultDateTypeAdapter(String.class, enUsFormat, localFormat);
    }

    @Test
    public void testCustomDatePattern() throws IOException {
        String pattern = "yyyy-MM-dd";
        DateFormat customEnUsFormat = new SimpleDateFormat(pattern, Locale.US);
        DateFormat customLocalFormat = new SimpleDateFormat(pattern);
        adapter = new DefaultDateTypeAdapter(Date.class, customEnUsFormat, customLocalFormat);

        Date date = new Date();
        StringWriter writer = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(writer);
        adapter.write(jsonWriter, date);
        String expected = customEnUsFormat.format(date);
        assertEquals(expected, writer.toString());
    }

    @Test
    public void testCustomDateStyle() throws IOException {
        int style = DateFormat.SHORT;
        DateFormat customEnUsFormat = DateFormat.getDateInstance(style, Locale.US);
        DateFormat customLocalFormat = DateFormat.getDateInstance(style);
        adapter = new DefaultDateTypeAdapter(Date.class, customEnUsFormat, customLocalFormat);

        Date date = new Date();
        StringWriter writer = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(writer);
        adapter.write(jsonWriter, date);
        String expected = customEnUsFormat.format(date);
        assertEquals(expected, writer.toString());
    }
}
```