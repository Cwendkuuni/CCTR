Certainly! Below is a comprehensive JUnit 4 test suite for the `ISO8601Utils` class. This test suite covers all the methods in the class, including edge cases and various scenarios.

```java
package com.google.gson.internal.bind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.TimeZone;

public class ISO8601UtilsTest {

    @Test
    public void testFormatDate() {
        Date date = new Date(1609459200000L); // 2021-01-01T00:00:00Z
        String formattedDate = ISO8601Utils.format(date);
        assertEquals("2021-01-01T00:00:00Z", formattedDate);
    }

    @Test
    public void testFormatDateWithMillis() {
        Date date = new Date(1609459200123L); // 2021-01-01T00:00:00.123Z
        String formattedDate = ISO8601Utils.format(date, true);
        assertEquals("2021-01-01T00:00:00.123Z", formattedDate);
    }

    @Test
    public void testFormatDateWithTimeZone() {
        Date date = new Date(1609459200000L); // 2021-01-01T00:00:00Z
        TimeZone tz = TimeZone.getTimeZone("GMT+02:00");
        String formattedDate = ISO8601Utils.format(date, false, tz);
        assertEquals("2021-01-01T02:00:00+02:00", formattedDate);
    }

    @Test
    public void testParseDate() throws ParseException {
        String dateStr = "2021-01-01T00:00:00Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(1609459200000L, date.getTime());
    }

    @Test
    public void testParseDateWithMillis() throws ParseException {
        String dateStr = "2021-01-01T00:00:00.123Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(1609459200123L, date.getTime());
    }

    @Test
    public void testParseDateWithTimeZone() throws ParseException {
        String dateStr = "2021-01-01T02:00:00+02:00";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(1609459200000L, date.getTime());
    }

    @Test
    public void testParseDateWithoutTime() throws ParseException {
        String dateStr = "2021-01-01";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(1609459200000L, date.getTime());
    }

    @Test(expected = ParseException.class)
    public void testParseInvalidDate() throws ParseException {
        String dateStr = "invalid-date";
        ParsePosition pos = new ParsePosition(0);
        ISO8601Utils.parse(dateStr, pos);
    }

    @Test
    public void testCheckOffset() {
        assertTrue(ISO8601Utils.checkOffset("2021-01-01", 4, '-'));
        assertFalse(ISO8601Utils.checkOffset("2021-01-01", 4, 'T'));
    }

    @Test
    public void testParseInt() {
        assertEquals(2021, ISO8601Utils.parseInt("2021-01-01", 0, 4));
        assertEquals(1, ISO8601Utils.parseInt("2021-01-01", 5, 7));
        assertEquals(1, ISO8601Utils.parseInt("2021-01-01", 8, 10));
    }

    @Test(expected = NumberFormatException.class)
    public void testParseIntInvalid() {
        ISO8601Utils.parseInt("2021-01-01", 0, 5);
    }

    @Test
    public void testPadInt() {
        StringBuilder buffer = new StringBuilder();
        ISO8601Utils.padInt(buffer, 5, 2);
        assertEquals("05", buffer.toString());

        buffer = new StringBuilder();
        ISO8601Utils.padInt(buffer, 123, 5);
        assertEquals("00123", buffer.toString());
    }

    @Test
    public void testIndexOfNonDigit() {
        assertEquals(4, ISO8601Utils.indexOfNonDigit("2021-01-01", 0));
        assertEquals(2, ISO8601Utils.indexOfNonDigit("2021-01-01", 5));
    }
}
```

This test suite includes tests for formatting dates with and without milliseconds, parsing dates in various formats, handling invalid dates, and testing utility methods like `checkOffset`, `parseInt`, `padInt`, and `indexOfNonDigit`. Each test method is designed to verify the correctness of the corresponding method in the `ISO8601Utils` class.