```java
package com.google.gson.internal.bind.util;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public class ISO8601UtilsTest {

    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");

    @Before
    public void setUp() {
        // Set up any necessary preconditions
    }

    @After
    public void tearDown() {
        // Clean up any necessary postconditions
    }

    @Test
    public void testFormatDate() {
        Date date = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 12, 34, 56).getTime();
        String formattedDate = ISO8601Utils.format(date);
        assertEquals("2023-10-10T12:34:56Z", formattedDate);
    }

    @Test
    public void testFormatDateWithMillis() {
        Date date = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 12, 34, 56, 789).getTime();
        String formattedDate = ISO8601Utils.format(date, true);
        assertEquals("2023-10-10T12:34:56.789Z", formattedDate);
    }

    @Test
    public void testFormatDateWithTimeZone() {
        Date date = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 12, 34, 56).getTime();
        TimeZone tz = TimeZone.getTimeZone("GMT+02:00");
        String formattedDate = ISO8601Utils.format(date, false, tz);
        assertEquals("2023-10-10T12:34:56+02:00", formattedDate);
    }

    @Test
    public void testParseDate() throws ParseException {
        String dateString = "2023-10-10T12:34:56Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateString, pos);

        Calendar calendar = new GregorianCalendar(TIMEZONE_UTC);
        calendar.setTime(date);

        assertEquals(2023, calendar.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, calendar.get(Calendar.MONTH));
        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(34, calendar.get(Calendar.MINUTE));
        assertEquals(56, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }

    @Test
    public void testParseDateWithMillis() throws ParseException {
        String dateString = "2023-10-10T12:34:56.789Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateString, pos);

        Calendar calendar = new GregorianCalendar(TIMEZONE_UTC);
        calendar.setTime(date);

        assertEquals(2023, calendar.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, calendar.get(Calendar.MONTH));
        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(34, calendar.get(Calendar.MINUTE));
        assertEquals(56, calendar.get(Calendar.SECOND));
        assertEquals(789, calendar.get(Calendar.MILLISECOND));
    }

    @Test
    public void testParseDateWithTimeZone() throws ParseException {
        String dateString = "2023-10-10T12:34:56+02:00";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateString, pos);

        Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone("GMT+02:00"));
        calendar.setTime(date);

        assertEquals(2023, calendar.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, calendar.get(Calendar.MONTH));
        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(34, calendar.get(Calendar.MINUTE));
        assertEquals(56, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }

    @Test(expected = ParseException.class)
    public void testParseInvalidDate() throws ParseException {
        String dateString = "invalid-date";
        ParsePosition pos = new ParsePosition(0);
        ISO8601Utils.parse(dateString, pos);
    }

    @Test
    public void testCheckOffset() {
        assertTrue(ISO8601Utils.checkOffset("2023-10-10T12:34:56Z", 4, '-'));
        assertFalse(ISO8601Utils.checkOffset("2023-10-10T12:34:56Z", 4, 'T'));
    }

    @Test
    public void testParseInt() {
        assertEquals(2023, ISO8601Utils.parseInt("2023-10-10T12:34:56Z", 0, 4));
        assertEquals(10, ISO8601Utils.parseInt("2023-10-10T12:34:56Z", 5, 7));
    }

    @Test
    public void testPadInt() {
        StringBuilder buffer = new StringBuilder();
        ISO8601Utils.padInt(buffer, 5, 2);
        assertEquals("05", buffer.toString());

        buffer = new StringBuilder();
        ISO8601Utils.padInt(buffer, 123, 5);
        assertEquals("00123", buffer.toString());
    }

    @Test
    public void testIndexOfNonDigit() {
        assertEquals(4, ISO8601Utils.indexOfNonDigit("2023-10-10T12:34:56Z", 0));
        assertEquals(7, ISO8601Utils.indexOfNonDigit("2023-10-10T12:34:56Z", 5));
    }
}
```