```java
package com.google.gson.internal.bind.util;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public class ISO8601UtilsTest {

    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");

    @Before
    public void setUp() {
        // Set up any necessary preconditions
    }

    @After
    public void tearDown() {
        // Clean up any necessary postconditions
    }

    @Test
    public void testFormatDate() {
        Date date = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 14, 30, 0).getTime();
        String expected = "2023-10-10T14:30:00Z";
        String result = ISO8601Utils.format(date);
        assertEquals(expected, result);
    }

    @Test
    public void testFormatDateWithMillis() {
        Date date = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 14, 30, 0, 123).getTime();
        String expected = "2023-10-10T14:30:00.123Z";
        String result = ISO8601Utils.format(date, true);
        assertEquals(expected, result);
    }

    @Test
    public void testFormatDateWithTimeZone() {
        Date date = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 14, 30, 0).getTime();
        TimeZone tz = TimeZone.getTimeZone("GMT+02:00");
        String expected = "2023-10-10T14:30:00+02:00";
        String result = ISO8601Utils.format(date, false, tz);
        assertEquals(expected, result);
    }

    @Test
    public void testParseDate() throws ParseException {
        String dateStr = "2023-10-10T14:30:00Z";
        ParsePosition pos = new ParsePosition(0);
        Date expected = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 14, 30, 0).getTime();
        Date result = ISO8601Utils.parse(dateStr, pos);
        assertEquals(expected, result);
    }

    @Test
    public void testParseDateWithMillis() throws ParseException {
        String dateStr = "2023-10-10T14:30:00.123Z";
        ParsePosition pos = new ParsePosition(0);
        Date expected = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 14, 30, 0, 123).getTime();
        Date result = ISO8601Utils.parse(dateStr, pos);
        assertEquals(expected, result);
    }

    @Test
    public void testParseDateWithTimeZone() throws ParseException {
        String dateStr = "2023-10-10T14:30:00+02:00";
        ParsePosition pos = new ParsePosition(0);
        Date expected = new GregorianCalendar(2023, Calendar.OCTOBER, 10, 14, 30, 0).getTime();
        Date result = ISO8601Utils.parse(dateStr, pos);
        assertEquals(expected, result);
    }

    @Test(expected = ParseException.class)
    public void testParseInvalidDate() throws ParseException {
        String dateStr = "invalid-date";
        ParsePosition pos = new ParsePosition(0);
        ISO8601Utils.parse(dateStr, pos);
    }

    @Test
    public void testCheckOffset() {
        assertTrue(ISO8601Utils.checkOffset("2023-10-10T14:30:00Z", 4, '-'));
        assertFalse(ISO8601Utils.checkOffset("2023-10-10T14:30:00Z", 4, 'T'));
    }

    @Test
    public void testParseInt() {
        assertEquals(2023, ISO8601Utils.parseInt("2023-10-10T14:30:00Z", 0, 4));
    }

    @Test
    public void testPadInt() {
        StringBuilder buffer = new StringBuilder();
        ISO8601Utils.padInt(buffer, 5, 2);
        assertEquals("05", buffer.toString());
    }

    @Test
    public void testIndexOfNonDigit() {
        assertEquals(4, ISO8601Utils.indexOfNonDigit("2023-10-10T14:30:00Z", 0));
    }
}
```