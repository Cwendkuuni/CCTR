```java
package corina.formats;

import corina.ui.*;
import corina.*;
import corina.util.*;
import org.junit.Before;
import org.junit.Test;
import java.io.*;
import static org.junit.Assert.*;

public class TucsonSimpleTest {

    private TucsonSimple tucsonSimple;
    private Sample sample;
    private BufferedWriter writer;
    private BufferedReader reader;

    @Before
    public void setUp() throws Exception {
        tucsonSimple = new TucsonSimple();
        sample = new Sample();
        writer = new BufferedWriter(new StringWriter());
        reader = new BufferedReader(new StringReader(""));
    }

    @Test
    public void testToString() {
        String expected = I18n.getText("format.tucsonsimple");
        assertEquals(expected, tucsonSimple.toString());
    }

    @Test
    public void testGetDefaultExtension() {
        assertEquals(".RWL", tucsonSimple.getDefaultExtension());
    }

    @Test(expected = WrongFiletypeException.class)
    public void testLoad() throws IOException {
        tucsonSimple.load(reader);
    }

    @Test
    public void testMake6digitCode() {
        sample.meta.put("id", "123456789");
        assertEquals("123456", tucsonSimple.make6digitCode(sample));

        sample.meta.put("id", "12345");
        assertEquals("12345 ", tucsonSimple.make6digitCode(sample));

        sample.meta.remove("id");
        assertEquals("000000", tucsonSimple.make6digitCode(sample));
    }

    @Test
    public void testSaveRowHeader() throws IOException {
        sample.range = new Range(new Year(1900), new Year(2000));
        String code = "123456";
        int yearWidth = 6;
        Year year = new Year(1950);

        tucsonSimple.saveRowHeader(writer, sample, code, yearWidth, year);
        writer.flush();

        String expected = "123456 1950";
        assertEquals(expected, ((StringWriter) writer.getWriter()).toString().trim());
    }

    @Test
    public void testSaveData() throws IOException {
        sample.range = new Range(new Year(1900), new Year(2000));
        sample.data.put(0, 100);
        sample.data.put(1, 200);

        tucsonSimple.saveData(sample, writer);
        writer.flush();

        String expected = "000000 1900   100   200   999";
        assertEquals(expected, ((StringWriter) writer.getWriter()).toString().trim());
    }

    @Test
    public void testComputeRange() {
        sample.range = new Range(new Year(-1000), new Year(2000));
        Range expected = new Range(new Year(1001), new Year(2000));
        assertEquals(expected, tucsonSimple.computeRange(sample));

        sample.range = new Range(new Year(1), new Year(2000));
        expected = new Range(new Year(1), new Year(2000));
        assertEquals(expected, tucsonSimple.computeRange(sample));

        sample.range = new Range(new Year(-8000), new Year(2000));
        expected = new Range(new Year(1), new Year(2000));
        assertEquals(expected, tucsonSimple.computeRange(sample));
    }

    @Test
    public void testSave() throws IOException {
        sample.range = new Range(new Year(1900), new Year(2000));
        sample.data.put(0, 100);
        sample.data.put(1, 200);

        tucsonSimple.save(sample, writer);
        writer.flush();

        String expected = "000000 1900   100   200   999";
        assertEquals(expected, ((StringWriter) writer.getWriter()).toString().trim());
    }
}
```