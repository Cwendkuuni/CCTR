```java
package de.beiri22.stringincrementor.helper;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class IndexedStringTest {

    private IndexedString indexedString;

    @Before
    public void setUp() {
        indexedString = new IndexedString("example string");
    }

    @Test
    public void testConstructor() {
        assertEquals("example string", new String(indexedString.values));
        assertNotNull(indexedString.index);
    }

    @Test
    public void testCount() {
        assertEquals(1, indexedString.count('e'));
        assertEquals(1, indexedString.count('x'));
        assertEquals(2, indexedString.count(' '));
        assertEquals(0, indexedString.count('z'));
    }

    @Test
    public void testIndexOf() {
        assertEquals(0, indexedString.indexOf("example".toCharArray()));
        assertEquals(8, indexedString.indexOf("string".toCharArray()));
        assertEquals(-1, indexedString.indexOf("nonexistent".toCharArray()));
        assertEquals(1, indexedString.indexOf("xample".toCharArray()));
        assertEquals(9, indexedString.indexOf("tring".toCharArray()));
    }

    @Test
    public void testIndexOfWithEmptyTarget() {
        assertEquals(-1, indexedString.indexOf(new char[0]));
    }

    @Test
    public void testIndexOfWithTargetLongerThanValues() {
        assertEquals(-1, indexedString.indexOf("example string with more characters".toCharArray()));
    }

    @Test
    public void testIndexOfWithTargetEqualToValues() {
        assertEquals(0, indexedString.indexOf("example string".toCharArray()));
    }

    @Test
    public void testIndexOfWithSpecialCharacters() {
        IndexedString specialChars = new IndexedString("special!@#$%^&*()");
        assertEquals(0, specialChars.indexOf("special".toCharArray()));
        assertEquals(7, specialChars.indexOf("!@#$%^&*()".toCharArray()));
        assertEquals(-1, specialChars.indexOf("nonexistent".toCharArray()));
    }

    @Test
    public void testIndexOfWithRepeatedCharacters() {
        IndexedString repeatedChars = new IndexedString("aaaaaa");
        assertEquals(0, repeatedChars.indexOf("aaaaaa".toCharArray()));
        assertEquals(1, repeatedChars.indexOf("aaaaa".toCharArray()));
        assertEquals(2, repeatedChars.indexOf("aaaa".toCharArray()));
        assertEquals(-1, repeatedChars.indexOf("aaaaaaa".toCharArray()));
    }
}
```