```java
package de.progra.charting;

import de.progra.charting.model.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.text.DecimalFormat;

public class CoordSystemUtilitiesTest {

    private CoordSystemUtilities coordSystemUtilities;
    private CoordSystem mockCoordSystem;
    private ChartDataModelConstraints mockConstraints;
    private ChartDataModelConstraints mockConstraints2;
    private ChartDataModel mockModel;

    @Before
    public void setUp() {
        mockCoordSystem = new CoordSystem() {
            @Override
            public String getYAxisUnit() {
                return "units";
            }

            @Override
            public String getXAxisUnit() {
                return "units";
            }

            @Override
            public Font getFont() {
                return new Font("Arial", Font.PLAIN, 12);
            }

            @Override
            public FontRenderContext getFontRenderContext() {
                return new FontRenderContext(null, true, true);
            }

            @Override
            public Rectangle2D getBounds() {
                return new Rectangle2D.Double(0, 0, 100, 100);
            }

            @Override
            public int getRightMargin() {
                return 10;
            }

            @Override
            public int getTopMargin() {
                return 10;
            }

            @Override
            public AffineTransform getTransform(int index) {
                return new AffineTransform();
            }

            @Override
            public DecimalFormat getXDecimalFormat() {
                return new DecimalFormat("#.##");
            }

            @Override
            public DecimalFormat getYDecimalFormat() {
                return new DecimalFormat("#.##");
            }

            @Override
            public boolean isPaintLabels() {
                return true;
            }

            @Override
            public boolean isPaintOnlyTick() {
                return false;
            }

            @Override
            public boolean isPaintAltTick() {
                return false;
            }

            @Override
            public CoordSystem getSecondYAxis() {
                return null;
            }
        };

        mockConstraints = new ChartDataModelConstraints() {
            @Override
            public double getMinimumColumnValue() {
                return -10;
            }

            @Override
            public double getMaximumColumnValue() {
                return 10;
            }

            @Override
            public Number getMinimumValue() {
                return -10;
            }

            @Override
            public Number getMaximumValue() {
                return 10;
            }
        };

        mockConstraints2 = new ChartDataModelConstraints() {
            @Override
            public double getMinimumColumnValue() {
                return -10;
            }

            @Override
            public double getMaximumColumnValue() {
                return 10;
            }

            @Override
            public Number getMinimumValue() {
                return -10;
            }

            @Override
            public Number getMaximumValue() {
                return 10;
            }
        };

        mockModel = new ChartDataModel() {
            @Override
            public Object getColumnValueAt(int columnIndex) {
                return "Value";
            }
        };

        coordSystemUtilities = new CoordSystemUtilities(mockCoordSystem, mockConstraints, mockConstraints2, mockModel);
    }

    @Test
    public void testComputeLeftMargin() {
        int leftMargin = coordSystemUtilities.computeLeftMargin();
        assertTrue(leftMargin >= 20);
    }

    @Test
    public void testComputeRightMargin() {
        int rightMargin = coordSystemUtilities.computeRightMargin();
        assertTrue(rightMargin >= 15);
    }

    @Test
    public void testComputeTopMargin() {
        int topMargin = coordSystemUtilities.computeTopMargin();
        assertTrue(topMargin >= 15);
    }

    @Test
    public void testComputeBottomMargin() {
        int bottomMargin = coordSystemUtilities.computeBottomMargin();
        assertTrue(bottomMargin >= 20);
    }

    @Test
    public void testComputeXAxisLabelHeight() {
        int height = coordSystemUtilities.computeXAxisLabelHeight();
        assertTrue(height > 0);
    }

    @Test
    public void testComputeYAxisLabelWidth() {
        int width = coordSystemUtilities.computeYAxisLabelWidth();
        assertTrue(width > 0);
    }

    @Test
    public void testDrawNumericalXAxisTicks() {
        // This test is more of a placeholder as drawing methods are hard to test without a graphical context
        // You might want to use a mocking framework to verify interactions with Graphics2D
    }

    @Test
    public void testDrawXAxisTicks() {
        // This test is more of a placeholder as drawing methods are hard to test without a graphical context
        // You might want to use a mocking framework to verify interactions with Graphics2D
    }

    @Test
    public void testDrawYAxisTicks() {
        // This test is more of a placeholder as drawing methods are hard to test without a graphical context
        // You might want to use a mocking framework to verify interactions with Graphics2D
    }

    @Test
    public void testGetXAxisLine2D() {
        Line2D line = coordSystemUtilities.getXAxisLine2D();
        assertNotNull(line);
    }

    @Test
    public void testGetYAxisLine2D() {
        Line2D line = coordSystemUtilities.getYAxisLine2D();
        assertNotNull(line);
    }

    @Test
    public void testGetSecondYAxisLine2D() {
        Line2D line = coordSystemUtilities.getSecondYAxisLine2D();
        assertNotNull(line);
    }
}
```