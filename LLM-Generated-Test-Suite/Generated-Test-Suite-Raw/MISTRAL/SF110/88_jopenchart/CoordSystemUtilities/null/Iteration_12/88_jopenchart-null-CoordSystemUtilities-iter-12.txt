```java
package de.progra.charting;

import de.progra.charting.model.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.font.FontRenderContext;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Color;
import java.text.DecimalFormat;

public class CoordSystemUtilitiesTest {

    private CoordSystemUtilities utilities;
    private CoordSystem mockCoordSystem;
    private ChartDataModelConstraints mockConstraints;
    private ChartDataModelConstraints mockConstraints2;
    private ChartDataModel mockModel;

    @Before
    public void setUp() {
        mockCoordSystem = new CoordSystem();
        mockConstraints = new ChartDataModelConstraints();
        mockConstraints2 = new ChartDataModelConstraints();
        mockModel = new ChartDataModel();

        utilities = new CoordSystemUtilities(mockCoordSystem, mockConstraints, mockConstraints2, mockModel);
    }

    @Test
    public void testComputeLeftMargin() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setYAxisUnit("units");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setBounds(new Rectangle2D.Double(0, 0, 100, 100));
        mockCoordSystem.setRightMargin(10);

        int leftMargin = utilities.computeLeftMargin();
        assertTrue(leftMargin >= 20);
    }

    @Test
    public void testComputeRightMargin() {
        // Mock necessary values
        mockCoordSystem.setXAxisUnit("units");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int rightMargin = utilities.computeRightMargin();
        assertTrue(rightMargin >= 15);
    }

    @Test
    public void testComputeTopMargin() {
        // Mock necessary values
        mockCoordSystem.setYAxisUnit("units");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int topMargin = utilities.computeTopMargin();
        assertTrue(topMargin >= 15);
    }

    @Test
    public void testComputeBottomMargin() {
        // Mock necessary values
        mockConstraints.setMinimumValue(0.0);
        mockConstraints.setMaximumValue(10.0);
        mockCoordSystem.setXAxisUnit("units");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setBounds(new Rectangle2D.Double(0, 0, 100, 100));
        mockCoordSystem.setTopMargin(10);

        int bottomMargin = utilities.computeBottomMargin();
        assertTrue(bottomMargin >= 20);
    }

    @Test
    public void testComputeXAxisLabelHeight() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(0.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setXDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int height = utilities.computeXAxisLabelHeight();
        assertTrue(height > 0);
    }

    @Test
    public void testComputeYAxisLabelWidth() {
        // Mock necessary values
        mockConstraints.setMinimumValue(0.0);
        mockConstraints.setMaximumValue(10.0);
        mockCoordSystem.setYDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int width = utilities.computeYAxisLabelWidth();
        assertTrue(width > 0);
    }

    @Test
    public void testDrawNumericalXAxisTicks() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(0.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setXDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setPaintLabels(true);

        Graphics2D g = new Graphics2D() {
            @Override
            public void draw(Line2D line) {}

            @Override
            public void drawString(String str, float x, float y) {}

            @Override
            public void setFont(Font font) {}
        };

        utilities.drawNumericalXAxisTicks(g);
        // Assertions can be added based on the expected behavior
    }

    @Test
    public void testDrawXAxisTicks() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(0.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setXDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setPaintLabels(true);

        Graphics2D g = new Graphics2D() {
            @Override
            public void draw(Line2D line) {}

            @Override
            public void drawString(String str, float x, float y) {}

            @Override
            public void setFont(Font font) {}
        };

        utilities.drawXAxisTicks(g);
        // Assertions can be added based on the expected behavior
    }

    @Test
    public void testDrawYAxisTicks() {
        // Mock necessary values
        mockConstraints.setMinimumValue(0.0);
        mockConstraints.setMaximumValue(10.0);
        mockCoordSystem.setYDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setPaintLabels(true);

        Graphics2D g = new Graphics2D() {
            @Override
            public void draw(Line2D line) {}

            @Override
            public void drawString(String str, float x, float y) {}

            @Override
            public void setFont(Font font) {}

            @Override
            public void setColor(Color c) {}
        };

        utilities.drawYAxisTicks(g);
        // Assertions can be added based on the expected behavior
    }

    @Test
    public void testGetXAxisLine2D() {
        // Mock necessary values
        mockConstraints.setMinimumValue(0.0);
        mockConstraints.setMaximumValue(10.0);
        mockConstraints.setMinimumColumnValue(0.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setTransform(new AffineTransform());

        Line2D line = utilities.getXAxisLine2D();
        assertNotNull(line);
    }

    @Test
    public void testGetYAxisLine2D() {
        // Mock necessary values
        mockConstraints.setMinimumValue(0.0);
        mockConstraints.setMaximumValue(10.0);
        mockConstraints.setMinimumColumnValue(0.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setTransform(new AffineTransform());

        Line2D line = utilities.getYAxisLine2D();
        assertNotNull(line);
    }

    @Test
    public void testGetSecondYAxisLine2D() {
        // Mock necessary values
        mockConstraints2.setMinimumValue(0.0);
        mockConstraints2.setMaximumValue(10.0);
        mockConstraints2.setMinimumColumnValue(0.0);
        mockConstraints2.setMaximumColumnValue(10.0);
        mockCoordSystem.setTransform(new AffineTransform());

        Line2D line = utilities.getSecondYAxisLine2D();
        assertNotNull(line);
    }
}
```