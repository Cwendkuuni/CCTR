```java
package de.progra.charting;

import de.progra.charting.model.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.text.DecimalFormat;
import java.awt.Graphics2D;
import java.awt.Color;

public class CoordSystemUtilitiesTest {

    private CoordSystemUtilities coordSystemUtilities;
    private CoordSystem mockCoordSystem;
    private ChartDataModelConstraints mockConstraints;
    private ChartDataModelConstraints mockConstraints2;
    private ChartDataModel mockModel;

    @Before
    public void setUp() {
        mockCoordSystem = new CoordSystem();
        mockConstraints = new ChartDataModelConstraints();
        mockConstraints2 = new ChartDataModelConstraints();
        mockModel = new ChartDataModel();

        coordSystemUtilities = new CoordSystemUtilities(mockCoordSystem, mockConstraints, mockConstraints2, mockModel);
    }

    @Test
    public void testComputeLeftMargin() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setYAxisUnit("Unit");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setBounds(new Rectangle2D.Double(0, 0, 100, 100));
        mockCoordSystem.setRightMargin(10);

        int leftMargin = coordSystemUtilities.computeLeftMargin();
        assertTrue(leftMargin >= 20);
    }

    @Test
    public void testComputeRightMargin() {
        // Mock necessary values
        mockCoordSystem.setXAxisUnit("Unit");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int rightMargin = coordSystemUtilities.computeRightMargin();
        assertTrue(rightMargin >= 15);
    }

    @Test
    public void testComputeTopMargin() {
        // Mock necessary values
        mockCoordSystem.setYAxisUnit("Unit");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int topMargin = coordSystemUtilities.computeTopMargin();
        assertTrue(topMargin >= 15);
    }

    @Test
    public void testComputeBottomMargin() {
        // Mock necessary values
        mockConstraints.setMinimumValue(Double.valueOf(-10.0));
        mockConstraints.setMaximumValue(Double.valueOf(10.0));
        mockCoordSystem.setXAxisUnit("Unit");
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setBounds(new Rectangle2D.Double(0, 0, 100, 100));
        mockCoordSystem.setTopMargin(10);

        int bottomMargin = coordSystemUtilities.computeBottomMargin();
        assertTrue(bottomMargin >= 20);
    }

    @Test
    public void testComputeXAxisLabelHeight() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setXDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int height = coordSystemUtilities.computeXAxisLabelHeight();
        assertTrue(height > 0);
    }

    @Test
    public void testComputeYAxisLabelWidth() {
        // Mock necessary values
        mockConstraints.setMinimumValue(Double.valueOf(-10.0));
        mockConstraints.setMaximumValue(Double.valueOf(10.0));
        mockCoordSystem.setYDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));

        int width = coordSystemUtilities.computeYAxisLabelWidth();
        assertTrue(width > 0);
    }

    @Test
    public void testDrawNumericalXAxisTicks() {
        // Mock necessary values
        Graphics2D g = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB).createGraphics();
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setTransform(0, new AffineTransform());
        mockCoordSystem.setXDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setPaintLabels(true);

        coordSystemUtilities.drawNumericalXAxisTicks(g);
        // Add assertions based on the expected outcome
    }

    @Test
    public void testDrawXAxisTicks() {
        // Mock necessary values
        Graphics2D g = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB).createGraphics();
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockCoordSystem.setTransform(0, new AffineTransform());
        mockCoordSystem.setXDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setPaintLabels(true);

        coordSystemUtilities.drawXAxisTicks(g);
        // Add assertions based on the expected outcome
    }

    @Test
    public void testDrawYAxisTicks() {
        // Mock necessary values
        Graphics2D g = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB).createGraphics();
        mockConstraints.setMinimumValue(Double.valueOf(-10.0));
        mockConstraints.setMaximumValue(Double.valueOf(10.0));
        mockCoordSystem.setTransform(0, new AffineTransform());
        mockCoordSystem.setYDecimalFormat(new DecimalFormat("#.##"));
        mockCoordSystem.setFont(new Font("Arial", Font.PLAIN, 12));
        mockCoordSystem.setFontRenderContext(new FontRenderContext(null, true, true));
        mockCoordSystem.setPaintLabels(true);

        coordSystemUtilities.drawYAxisTicks(g);
        // Add assertions based on the expected outcome
    }

    @Test
    public void testGetXAxisLine2D() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockConstraints.setMinimumValue(Double.valueOf(-10.0));
        mockConstraints.setMaximumValue(Double.valueOf(10.0));
        mockCoordSystem.setTransform(0, new AffineTransform());

        Line2D xAxisLine = coordSystemUtilities.getXAxisLine2D();
        assertNotNull(xAxisLine);
    }

    @Test
    public void testGetYAxisLine2D() {
        // Mock necessary values
        mockConstraints.setMinimumColumnValue(-10.0);
        mockConstraints.setMaximumColumnValue(10.0);
        mockConstraints.setMinimumValue(Double.valueOf(-10.0));
        mockConstraints.setMaximumValue(Double.valueOf(10.0));
        mockCoordSystem.setTransform(0, new AffineTransform());

        Line2D yAxisLine = coordSystemUtilities.getYAxisLine2D();
        assertNotNull(yAxisLine);
    }

    @Test
    public void testGetSecondYAxisLine2D() {
        // Mock necessary values
        mockConstraints2.setMaximumColumnValue(10.0);
        mockConstraints2.setMinimumValue(Double.valueOf(-10.0));
        mockConstraints2.setMaximumValue(Double.valueOf(10.0));
        mockCoordSystem.setTransform(1, new AffineTransform());

        Line2D secondYAxisLine = coordSystemUtilities.getSecondYAxisLine2D();
        assertNotNull(secondYAxisLine);
    }
}
```