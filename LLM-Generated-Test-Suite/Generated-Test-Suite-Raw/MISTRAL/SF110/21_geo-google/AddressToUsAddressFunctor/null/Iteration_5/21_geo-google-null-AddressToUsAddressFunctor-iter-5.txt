```java
package geo.google.mapping;

import geo.google.datamodel.*;
import geo.google.*;
import org.apache.commons.collections.*;
import oasis.names.tc.ciq.xsdschema.xal._2.*;
import java.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class AddressToUsAddressFunctorTest {

    private AddressToUsAddressFunctor functor;

    @Before
    public void setUp() {
        functor = AddressToUsAddressFunctor.getInstance();
    }

    @Test
    public void testGetInstance() {
        assertNotNull(functor);
    }

    @Test
    public void testExecuteWithNullAddress() {
        GeoUsAddress result = functor.execute(null);
        assertNotNull(result);
        assertNull(result.getCountry());
        assertNull(result.getState());
        assertNull(result.getCounty());
        assertNull(result.getCity());
        assertNull(result.getPostalCode());
        assertNull(result.getAddressLine1());
        assertNull(result.getAddressLine2());
        assertNull(result.getCoordinate());
        assertNull(result.getAccuracy());
    }

    @Test
    public void testExecuteWithEmptyAddress() {
        GeoAddress addr = new GeoAddress();
        GeoUsAddress result = functor.execute(addr);
        assertNotNull(result);
        assertNull(result.getCountry());
        assertNull(result.getState());
        assertNull(result.getCounty());
        assertNull(result.getCity());
        assertNull(result.getPostalCode());
        assertNull(result.getAddressLine1());
        assertNull(result.getAddressLine2());
        assertNull(result.getCoordinate());
        assertNull(result.getAccuracy());
    }

    @Test
    public void testExecuteWithFullAddress() {
        GeoAddress addr = createFullGeoAddress();
        GeoUsAddress result = functor.execute(addr);
        assertNotNull(result);
        assertEquals("USA", result.getCountry());
        assertEquals("California", result.getState());
        assertEquals("Santa Clara", result.getCounty());
        assertEquals("Mountain View", result.getCity());
        assertEquals("94043", result.getPostalCode());
        assertEquals("1600 Amphitheatre Parkway", result.getAddressLine1());
        assertEquals("Suite 100", result.getAddressLine2());
        assertEquals(new GeoCoordinate(37.4224764, -122.0842499), result.getCoordinate());
        assertEquals(GeoAccuracy.EXACT, result.getAccuracy());
    }

    @Test
    public void testExecuteWithPartialAddress() {
        GeoAddress addr = createPartialGeoAddress();
        GeoUsAddress result = functor.execute(addr);
        assertNotNull(result);
        assertEquals("USA", result.getCountry());
        assertEquals("California", result.getState());
        assertNull(result.getCounty());
        assertEquals("Mountain View", result.getCity());
        assertEquals("94043", result.getPostalCode());
        assertEquals("1600 Amphitheatre Parkway", result.getAddressLine1());
        assertNull(result.getAddressLine2());
        assertNull(result.getCoordinate());
        assertNull(result.getAccuracy());
    }

    private GeoAddress createFullGeoAddress() {
        GeoAddress addr = new GeoAddress();
        AddressDetails addressDetails = new AddressDetails();
        AddressDetails.Country country = new AddressDetails.Country();
        country.getCountryNameCode().add(new AddressDetails.Country.CountryNameCode("USA"));
        AdministrativeArea adminArea = new AdministrativeArea();
        adminArea.getAdministrativeAreaName().add(new AdministrativeArea.AdministrativeAreaName("California"));
        AdministrativeArea.SubAdministrativeArea subAdminArea = new AdministrativeArea.SubAdministrativeArea();
        subAdminArea.getSubAdministrativeAreaName().add(new AdministrativeArea.SubAdministrativeArea.SubAdministrativeAreaName("Santa Clara"));
        Locality locality = new Locality();
        locality.getLocalityName().add(new Locality.LocalityName("Mountain View"));
        PostalCode postalCode = new PostalCode();
        postalCode.getPostalCodeNumber().add(new PostalCode.PostalCodeNumber("94043"));
        locality.setPostalCode(postalCode);
        Thoroughfare thoroughfare = new Thoroughfare();
        thoroughfare.getThoroughfareName().add(new ThoroughfareNameType("1600 Amphitheatre Parkway"));
        thoroughfare.getThoroughfareName().add(new ThoroughfareNameType("Suite 100"));
        locality.setThoroughfare(thoroughfare);
        subAdminArea.setLocality(locality);
        adminArea.setSubAdministrativeArea(subAdminArea);
        country.setAdministrativeArea(adminArea);
        addressDetails.setCountry(country);
        addr.setAddressDetails(addressDetails);
        addr.setCoordinate(new GeoCoordinate(37.4224764, -122.0842499));
        addr.setAccuracy(GeoAccuracy.EXACT);
        return addr;
    }

    private GeoAddress createPartialGeoAddress() {
        GeoAddress addr = new GeoAddress();
        AddressDetails addressDetails = new AddressDetails();
        AddressDetails.Country country = new AddressDetails.Country();
        country.getCountryNameCode().add(new AddressDetails.Country.CountryNameCode("USA"));
        AdministrativeArea adminArea = new AdministrativeArea();
        adminArea.getAdministrativeAreaName().add(new AdministrativeArea.AdministrativeAreaName("California"));
        Locality locality = new Locality();
        locality.getLocalityName().add(new Locality.LocalityName("Mountain View"));
        PostalCode postalCode = new PostalCode();
        postalCode.getPostalCodeNumber().add(new PostalCode.PostalCodeNumber("94043"));
        locality.setPostalCode(postalCode);
        Thoroughfare thoroughfare = new Thoroughfare();
        thoroughfare.getThoroughfareName().add(new ThoroughfareNameType("1600 Amphitheatre Parkway"));
        locality.setThoroughfare(thoroughfare);
        adminArea.setLocality(locality);
        country.setAdministrativeArea(adminArea);
        addressDetails.setCountry(country);
        addr.setAddressDetails(addressDetails);
        return addr;
    }
}
```