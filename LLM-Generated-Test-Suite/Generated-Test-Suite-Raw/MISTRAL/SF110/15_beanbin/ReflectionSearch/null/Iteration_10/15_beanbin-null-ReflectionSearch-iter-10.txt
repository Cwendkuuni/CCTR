```java
package net.sourceforge.beanbin.reflect;

import net.sourceforge.beanbin.search.*;
import net.sourceforge.beanbin.*;
import net.sourceforge.beanbin.query.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.annotation.*;
import java.lang.reflect.*;
import java.util.*;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = TestClass.class;
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotation() {
        assertTrue(reflectionSearch.hasAnnotation("@TestAnnotation"));
        assertFalse(reflectionSearch.hasAnnotation("@NonExistentAnnotation"));
    }

    @Test
    public void testHasWildcard() throws Exception {
        Method hasWildcardMethod = ReflectionSearch.class.getDeclaredMethod("hasWildcard", String.class);
        hasWildcardMethod.setAccessible(true);

        assertTrue((boolean) hasWildcardMethod.invoke(reflectionSearch, "*Test*"));
        assertFalse((boolean) hasWildcardMethod.invoke(reflectionSearch, "Test"));
    }

    @Test
    public void testMethodsThatHave() throws BeanBinException {
        reflectionSearch.methodsThatHave("testMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("testMethod")));
    }

    @Test
    public void testMethodsThatDontHave() throws BeanBinException {
        reflectionSearch.methodsThatDontHave("testMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertFalse(methods.stream().anyMatch(m -> m.getName().equals("testMethod")));
    }

    @Test
    public void testAnd() {
        reflectionSearch.and();
        assertEquals(Conditional.AND, reflectionSearch.getQuery().getNextConditional());
    }

    @Test
    public void testOr() {
        reflectionSearch.or();
        assertEquals(Conditional.OR, reflectionSearch.getQuery().getNextConditional());
    }

    @Test
    public void testGetMethods() throws BeanBinException {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.size() > 0);
    }

    @Test
    public void testIntersect() throws Exception {
        Method intersectMethod = ReflectionSearch.class.getDeclaredMethod("intersect", List.class, List.class);
        intersectMethod.setAccessible(true);

        List<Method> master = new ArrayList<>(Arrays.asList(testClass.getMethods()));
        List<Method> toAdd = new ArrayList<>(Arrays.asList(testClass.getMethods()));

        intersectMethod.invoke(reflectionSearch, master, toAdd);
        assertEquals(master.size(), toAdd.size());
    }

    @Test
    public void testUnion() throws Exception {
        Method unionMethod = ReflectionSearch.class.getDeclaredMethod("union", List.class, List.class);
        unionMethod.setAccessible(true);

        List<Method> master = new ArrayList<>(Arrays.asList(testClass.getMethods()));
        List<Method> toAdd = new ArrayList<>(Arrays.asList(testClass.getMethods()));

        unionMethod.invoke(reflectionSearch, master, toAdd);
        assertEquals(master.size(), toAdd.size());
    }

    private Query getQuery(ReflectionSearch reflectionSearch) throws Exception {
        Field queryField = ReflectionSearch.class.getDeclaredField("query");
        queryField.setAccessible(true);
        return (Query) queryField.get(reflectionSearch);
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE)
    public @interface TestAnnotation {
    }

    @TestAnnotation
    public static class TestClass {
        public void testMethod() {
        }

        public void anotherMethod() {
        }
    }
}
```