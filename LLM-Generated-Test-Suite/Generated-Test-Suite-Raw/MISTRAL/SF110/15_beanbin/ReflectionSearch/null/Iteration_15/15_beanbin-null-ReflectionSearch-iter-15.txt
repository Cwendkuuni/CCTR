```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import net.sourceforge.beanbin.reflect.ReflectionSearch;
import net.sourceforge.beanbin.BeanBinException;
import java.lang.reflect.Method;
import java.util.List;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = ReflectionSearch.class;
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotation() {
        assertTrue(reflectionSearch.hasAnnotation("@Deprecated"));
        assertFalse(reflectionSearch.hasAnnotation("@NonExistentAnnotation"));
    }

    @Test
    public void testHasWildcard() throws Exception {
        Method hasWildcardMethod = ReflectionSearch.class.getDeclaredMethod("hasWildcard", String.class);
        hasWildcardMethod.setAccessible(true);

        assertTrue((Boolean) hasWildcardMethod.invoke(reflectionSearch, "*"));
        assertFalse((Boolean) hasWildcardMethod.invoke(reflectionSearch, "NoWildcard"));
    }

    @Test
    public void testMethodsThatHave() throws BeanBinException {
        reflectionSearch.methodsThatHave("getMethods");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("getMethods")));
    }

    @Test
    public void testMethodsThatDontHave() throws BeanBinException {
        reflectionSearch.methodsThatDontHave("getMethods");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertFalse(methods.stream().anyMatch(m -> m.getName().equals("getMethods")));
    }

    @Test
    public void testAnd() throws BeanBinException {
        reflectionSearch.methodsThatHave("getMethods").and().methodsThatHave("hasAnnotation");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("getMethods") || m.getName().equals("hasAnnotation")));
    }

    @Test
    public void testOr() throws BeanBinException {
        reflectionSearch.methodsThatHave("getMethods").or().methodsThatHave("hasAnnotation");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("getMethods") || m.getName().equals("hasAnnotation")));
    }

    @Test
    public void testGetMethods() throws BeanBinException {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.size() > 0);
    }

    @Test
    public void testIntersect() throws Exception {
        Method intersectMethod = ReflectionSearch.class.getDeclaredMethod("intersect", List.class, List.class);
        intersectMethod.setAccessible(true);

        List<Method> master = List.of(testClass.getMethod("hasAnnotation", String.class));
        List<Method> toAdd = List.of(testClass.getMethod("getMethods"));

        List<Method> result = new java.util.ArrayList<>(master);
        intersectMethod.invoke(reflectionSearch, result, toAdd);

        assertEquals(0, result.size());
    }

    @Test
    public void testUnion() throws Exception {
        Method unionMethod = ReflectionSearch.class.getDeclaredMethod("union", List.class, List.class);
        unionMethod.setAccessible(true);

        List<Method> master = List.of(testClass.getMethod("hasAnnotation", String.class));
        List<Method> toAdd = List.of(testClass.getMethod("getMethods"));

        List<Method> result = new java.util.ArrayList<>(master);
        unionMethod.invoke(reflectionSearch, result, toAdd);

        assertEquals(2, result.size());
    }
}
```