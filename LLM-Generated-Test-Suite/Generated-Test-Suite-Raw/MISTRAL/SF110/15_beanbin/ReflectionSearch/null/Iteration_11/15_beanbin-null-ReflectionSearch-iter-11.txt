```java
package net.sourceforge.beanbin.reflect;

import net.sourceforge.beanbin.search.*;
import net.sourceforge.beanbin.*;
import net.sourceforge.beanbin.query.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.annotation.*;
import java.lang.reflect.*;
import java.util.*;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = TestAnnotationClass.class;
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotation() {
        assertTrue(reflectionSearch.hasAnnotation("@TestAnnotation"));
        assertFalse(reflectionSearch.hasAnnotation("@NonExistentAnnotation"));
    }

    @Test
    public void testHasWildcard() {
        assertTrue(reflectionSearch.hasWildcard("*Test*"));
        assertFalse(reflectionSearch.hasWildcard("Test"));
    }

    @Test
    public void testMethodsThatHave() throws BeanBinException {
        reflectionSearch.methodsThatHave("testMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("testMethod")));
    }

    @Test
    public void testMethodsThatDontHave() throws BeanBinException {
        reflectionSearch.methodsThatDontHave("testMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertFalse(methods.stream().anyMatch(m -> m.getName().equals("testMethod")));
    }

    @Test
    public void testAnd() throws BeanBinException {
        reflectionSearch.methodsThatHave("testMethod").and().methodsThatHave("anotherMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("testMethod") && m.getName().equals("anotherMethod")));
    }

    @Test
    public void testOr() throws BeanBinException {
        reflectionSearch.methodsThatHave("testMethod").or().methodsThatHave("anotherMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.stream().anyMatch(m -> m.getName().equals("testMethod") || m.getName().equals("anotherMethod")));
    }

    @Test
    public void testGetMethods() throws BeanBinException {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
        assertTrue(methods.size() > 0);
    }

    @Test
    public void testIntersect() {
        List<Method> master = new ArrayList<>(Arrays.asList(testClass.getMethods()));
        List<Method> toAdd = new ArrayList<>(Arrays.asList(testClass.getMethods()));
        reflectionSearch.intersect(master, toAdd);
        assertEquals(master.size(), toAdd.size());
    }

    @Test
    public void testUnion() {
        List<Method> master = new ArrayList<>(Arrays.asList(testClass.getMethods()));
        List<Method> toAdd = new ArrayList<>(Arrays.asList(testClass.getMethods()));
        reflectionSearch.union(master, toAdd);
        assertEquals(master.size(), toAdd.size());
    }

    @TestAnnotation
    private class TestAnnotationClass {
        public void testMethod() {}
        public void anotherMethod() {}
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE)
    private @interface TestAnnotation {}
}
```