Certainly! Below is a comprehensive JUnit 4 test suite for the `Salvar` class. This test suite includes tests for the constructor and the file filter classes.

```java
import jaw.entrada.Salvar;
import jaw.metamodelo.Entidade;
import jaw.gui.ProcessarEntidades;
import jaw.Main;
import jaw.Serializacao;
import jaw.SerializacaoXML;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.io.File;
import java.io.FileWriter;
import java.util.List;
import java.util.Vector;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class SalvarTest {

    @Mock
    private ProcessarEntidades form;

    @Mock
    private Main main;

    @Mock
    private Serializacao serializacao;

    @Mock
    private SerializacaoXML serializacaoXML;

    private Salvar salvar;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        Main.janelaPrincipal = mock(JFrame.class);
        Main.configuracao = mock(Configuracao.class);
    }

    @Test
    public void testConstructorSalvarXML() throws Exception {
        when(form.getEntidades()).thenReturn(new Vector<>());
        when(form.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(Main.configuracao.getCaminhoDosProjetos()).thenReturn("/path/to/projects");

        salvar = new Salvar(form, Salvar.SALVAR_XML);

        assertNotNull(salvar);
        assertTrue(salvar.vela);
        assertEquals("", salvar.arquivo);
    }

    @Test
    public void testConstructorSalvar() throws Exception {
        when(form.getEntidades()).thenReturn(new Vector<>());
        when(form.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(Main.configuracao.getCaminhoDosProjetos()).thenReturn("/path/to/projects");

        salvar = new Salvar(form, Salvar.SALVAR);

        assertNotNull(salvar);
        assertTrue(salvar.vela);
        assertEquals("", salvar.arquivo);
    }

    @Test
    public void testConstructorSalvarComo() throws Exception {
        when(form.getEntidades()).thenReturn(new Vector<>());
        when(form.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(Main.configuracao.getCaminhoDosProjetos()).thenReturn("/path/to/projects");

        salvar = new Salvar(form, Salvar.SALVAR_COMO);

        assertNotNull(salvar);
        assertTrue(salvar.vela);
        assertEquals("", salvar.arquivo);
    }

    @Test
    public void testFiltro2Accept() {
        FileFilter filtro2 = salvar.new Filtro2();
        assertTrue(filtro2.accept(new File("test.jaw.xml")));
        assertFalse(filtro2.accept(new File("test.jaw")));
        assertTrue(filtro2.accept(new File("/path/to/directory")));
    }

    @Test
    public void testFiltro2GetDescription() {
        FileFilter filtro2 = salvar.new Filtro2();
        assertEquals("XML JAW files", filtro2.getDescription());
    }

    @Test
    public void testFiltroAccept() {
        FileFilter filtro = salvar.new Filtro();
        assertTrue(filtro.accept(new File("test.jaw")));
        assertFalse(filtro.accept(new File("test.jaw.xml")));
        assertTrue(filtro.accept(new File("/path/to/directory")));
    }

    @Test
    public void testFiltroGetDescription() {
        FileFilter filtro = salvar.new Filtro();
        assertEquals("JAW files", filtro.getDescription());
    }

    @Test
    public void testSalvarXMLFile() throws Exception {
        when(form.getEntidades()).thenReturn(new Vector<>());
        when(form.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(Main.configuracao.getCaminhoDosProjetos()).thenReturn("/path/to/projects");
        when(serializacaoXML.entidades2XML(anyList())).thenReturn("<xml></xml>");

        salvar = new Salvar(form, Salvar.SALVAR_XML);
        salvar.arquivo = "test.jaw.xml";

        FileWriter fileWriter = mock(FileWriter.class);
        whenNew(FileWriter.class).withArguments(anyString()).thenReturn(fileWriter);

        salvar.xml = serializacaoXML.entidades2XML(salvar.entidade);
        fileWriter.write(salvar.xml);
        fileWriter.flush();
        fileWriter.close();

        verify(fileWriter).write(salvar.xml);
        verify(fileWriter).flush();
        verify(fileWriter).close();
    }

    @Test
    public void testSalvarFile() throws Exception {
        when(form.getEntidades()).thenReturn(new Vector<>());
        when(form.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(Main.configuracao.getCaminhoDosProjetos()).thenReturn("/path/to/projects");
        when(serializacao.salvar(anyList(), anyString())).thenReturn(true);

        salvar = new Salvar(form, Salvar.SALVAR);
        salvar.arquivo = "test.jaw";

        assertTrue(serializacao.salvar(salvar.entidade, salvar.arquivo));
    }

    @Test
    public void testSalvarComoFile() throws Exception {
        when(form.getEntidades()).thenReturn(new Vector<>());
        when(form.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(Main.configuracao.getCaminhoDosProjetos()).thenReturn("/path/to/projects");
        when(serializacao.salvar(anyList(), anyString())).thenReturn(true);

        salvar = new Salvar(form, Salvar.SALVAR_COMO);
        salvar.arquivo = "test.jaw";

        assertTrue(serializacao.salvar(salvar.entidade, salvar.arquivo));
    }
}
```

This test suite covers the following:
1. Tests for the constructor with different `tipoSalvar` values.
2. Tests for the `Filtro2` and `Filtro` inner classes.
3. Tests for the file saving logic in the constructor.

Note:
- The `whenNew` method is used to mock the `FileWriter` class. You might need to use a library like PowerMock to achieve this.
- The `Main.janelaPrincipal` and `Main.configuracao` are mocked to avoid dependencies on the actual implementation.
- The `ProcessarEntidades` and other dependencies are mocked using Mockito.