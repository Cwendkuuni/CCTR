Certainly! Below is a comprehensive JUnit 4 test suite for the `Abrir` class. This test suite includes tests for the constructors and the private methods `abrirSerializado` and `abrirXML`. Note that private methods are tested indirectly through the public constructors.

```java
package jaw.entrada;

import jaw.gui.ProcessarEntidades;
import jaw.Main;
import jaw.Serializacao;
import jaw.SerializacaoXML;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.io.File;
import java.io.FileReader;
import java.io.Reader;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({JOptionPane.class, Main.class, Serializacao.class, SerializacaoXML.class})
public class AbrirTest {

    @Mock
    private ProcessarEntidades form;

    @Mock
    private Main main;

    @Mock
    private Main.Configuracao configuracao;

    @Mock
    private Serializacao serializacao;

    @Mock
    private SerializacaoXML serializacaoXML;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JOptionPane.class);
        PowerMockito.mockStatic(Main.class);
        PowerMockito.mockStatic(Serializacao.class);
        PowerMockito.mockStatic(SerializacaoXML.class);

        when(Main.configuracao).thenReturn(configuracao);
        when(configuracao.getCaminhoDosProjetos()).thenReturn("testPath");
    }

    @Test
    public void testConstructorWithXMLFile() {
        Abrir abrir = new Abrir(form, "testFile.jaw.xml");
        verify(form).setNomeArquivoSalvo("testFile.jaw.xml");
        verify(form).setEntidades(any());
    }

    @Test
    public void testConstructorWithSerializedFile() {
        Abrir abrir = new Abrir(form, "testFile.jaw");
        verify(form).setNomeArquivoSalvo("testFile.jaw");
        verify(form).setEntidades(any());
    }

    @Test
    public void testConstructorWithFileChooserXML() {
        JFileChooser fileChooser = mock(JFileChooser.class);
        File file = mock(File.class);
        when(fileChooser.getSelectedFile()).thenReturn(file);
        when(file.getAbsolutePath()).thenReturn("testFile.jaw.xml");
        PowerMockito.when(JFileChooser.class).thenReturn(fileChooser);

        Abrir abrir = new Abrir(form, Abrir.ABRIR_XML);
        verify(form).setNomeArquivoSalvo("testFile.jaw.xml");
        verify(form).setEntidades(any());
    }

    @Test
    public void testConstructorWithFileChooserSerialized() {
        JFileChooser fileChooser = mock(JFileChooser.class);
        File file = mock(File.class);
        when(fileChooser.getSelectedFile()).thenReturn(file);
        when(file.getAbsolutePath()).thenReturn("testFile.jaw");
        PowerMockito.when(JFileChooser.class).thenReturn(fileChooser);

        Abrir abrir = new Abrir(form, Abrir.ABRIR);
        verify(form).setNomeArquivoSalvo("testFile.jaw");
        verify(form).setEntidades(any());
    }

    @Test
    public void testAbrirSerializadoSuccess() throws Exception {
        when(serializacao.abrir(anyString())).thenReturn(new Object());

        Abrir abrir = new Abrir(form, "testFile.jaw");
        verify(form).setNomeArquivoSalvo("testFile.jaw");
        verify(form).setEntidades(any());
    }

    @Test
    public void testAbrirSerializadoFailure() throws Exception {
        when(serializacao.abrir(anyString())).thenThrow(new Exception("Test Exception"));

        Abrir abrir = new Abrir(form, "testFile.jaw");
        verify(JOptionPane.class);
        JOptionPane.showMessageDialog(null, "Arquivo jaw corrompido ou incompatível com aplicação!", "Abrir Arquivo jaw", 0);
    }

    @Test
    public void testAbrirXMLSuccess() throws Exception {
        Reader reader = new FileReader("testFile.jaw.xml");
        when(serializacaoXML.xml2Entidades(reader)).thenReturn(new Object());

        Abrir abrir = new Abrir(form, "testFile.jaw.xml");
        verify(form).setNomeArquivoSalvo("testFile.jaw.xml");
        verify(form).setEntidades(any());
    }

    @Test
    public void testAbrirXMLFailure() throws Exception {
        Reader reader = new FileReader("testFile.jaw.xml");
        when(serializacaoXML.xml2Entidades(reader)).thenThrow(new Exception("Test Exception"));

        Abrir abrir = new Abrir(form, "testFile.jaw.xml");
        verify(JOptionPane.class);
        JOptionPane.showMessageDialog(null, "Arquivo xml corrompido ou incompatível com aplicação!", "Importação XML", 0);
    }
}
```

This test suite uses JUnit 4 and Mockito for mocking dependencies. PowerMock is used to mock static methods and constructors. The tests cover the constructors and indirectly test the private methods `abrirSerializado` and `abrirXML` by verifying the interactions with the mocked dependencies.