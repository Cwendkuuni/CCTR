Certainly! Below is a complete JUnit 4 test suite to comprehensively test the `MP3` class. This test suite includes tests for the constructor and the `run` method.

```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;

public class MP3Test {

    private MP3 mp3;
    private String testFilename;

    @Before
    public void setUp() {
        // Create a temporary MP3 file for testing
        testFilename = "test.mp3";
        File file = new File(testFilename);
        try {
            file.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @After
    public void tearDown() {
        // Delete the temporary MP3 file after testing
        File file = new File(testFilename);
        if (file.exists()) {
            file.delete();
        }
    }

    @Test
    public void testConstructor() {
        mp3 = new MP3(testFilename);
        assertNotNull(mp3);
        assertEquals(testFilename, mp3.filename);
    }

    @Test
    public void testRun() {
        mp3 = new MP3(testFilename);
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // Since the run method does not return any value, we can only check if it runs without exceptions
        // Additional checks can be added based on the expected behavior of the run method
    }

    @Test(expected = NullPointerException.class)
    public void testRunWithNullFilename() {
        mp3 = new MP3(null);
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test(expected = FileNotFoundException.class)
    public void testRunWithNonExistentFile() {
        mp3 = new MP3("non_existent_file.mp3");
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Setup and Teardown**:
   - `setUp`: Creates a temporary MP3 file for testing.
   - `tearDown`: Deletes the temporary MP3 file after testing.

2. **Test Constructor**:
   - `testConstructor`: Verifies that the `MP3` object is created correctly and the filename is set properly.

3. **Test Run Method**:
   - `testRun`: Tests the `run` method by creating an `MP3` object and waiting for the thread to finish. Since the `run` method does not return any value, we can only check if it runs without exceptions.

4. **Exception Handling**:
   - `testRunWithNullFilename`: Tests the `run` method with a `null` filename, expecting a `NullPointerException`.
   - `testRunWithNonExistentFile`: Tests the `run` method with a non-existent file, expecting a `FileNotFoundException`.

This test suite covers the basic functionality and edge cases for the `MP3` class.