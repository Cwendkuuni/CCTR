```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class MP3Test {

    private MP3 mp3;
    private String testFilename;

    @Before
    public void setUp() {
        testFilename = "test.mp3";
        mp3 = new MP3(testFilename);
    }

    @After
    public void tearDown() {
        mp3 = null;
    }

    @Test
    public void testConstructor() {
        assertNotNull(mp3);
        assertEquals(testFilename, mp3.filename);
    }

    @Test
    public void testRun() {
        // This test is a bit tricky because the run method is asynchronous and involves file I/O and audio playback.
        // We can't directly test the audio playback, but we can check if the thread is running and if the file is being read.

        // Check if the thread is running
        assertTrue(mp3.isAlive());

        // Wait for the thread to finish
        try {
            mp3.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Check if the thread has finished
        assertFalse(mp3.isAlive());

        // Check if the file was read (this is a bit indirect, but we can check if the file exists)
        File file = new File(testFilename);
        assertTrue(file.exists());
    }

    @Test
    public void testRunWithInvalidFile() {
        MP3 invalidMp3 = new MP3("invalid.mp3");

        // Check if the thread is running
        assertTrue(invalidMp3.isAlive());

        // Wait for the thread to finish
        try {
            invalidMp3.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Check if the thread has finished
        assertFalse(invalidMp3.isAlive());

        // Check if the file does not exist
        File file = new File("invalid.mp3");
        assertFalse(file.exists());
    }
}
```