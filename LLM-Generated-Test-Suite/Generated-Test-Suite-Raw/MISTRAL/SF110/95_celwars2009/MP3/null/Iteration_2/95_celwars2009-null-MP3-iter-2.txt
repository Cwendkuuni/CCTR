```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class MP3Test {

    private MP3 mp3;
    private String testFilename;

    @Before
    public void setUp() {
        testFilename = "test.mp3";
        mp3 = new MP3(testFilename);
    }

    @After
    public void tearDown() {
        mp3 = null;
    }

    @Test
    public void testConstructor() {
        assertNotNull(mp3);
        assertEquals(testFilename, mp3.filename);
    }

    @Test
    public void testRun() {
        // This test is a bit tricky because it involves multithreading and audio playback.
        // We can't easily test the actual audio playback, but we can test that the thread starts.
        mp3.start();
        try {
            mp3.join(5000); // Wait for the thread to finish (up to 5 seconds)
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        assertFalse(mp3.isAlive()); // Ensure the thread has finished
    }

    @Test
    public void testRunWithInvalidFile() {
        MP3 invalidMp3 = new MP3("invalid.mp3");
        invalidMp3.start();
        try {
            invalidMp3.join(5000); // Wait for the thread to finish (up to 5 seconds)
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        assertFalse(invalidMp3.isAlive()); // Ensure the thread has finished
        // Additional checks can be added to verify that no exceptions were thrown or handled properly
    }

    @Test
    public void testRunWithNullFile() {
        MP3 nullMp3 = new MP3(null);
        nullMp3.start();
        try {
            nullMp3.join(5000); // Wait for the thread to finish (up to 5 seconds)
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        assertFalse(nullMp3.isAlive()); // Ensure the thread has finished
        // Additional checks can be added to verify that no exceptions were thrown or handled properly
    }
}
```