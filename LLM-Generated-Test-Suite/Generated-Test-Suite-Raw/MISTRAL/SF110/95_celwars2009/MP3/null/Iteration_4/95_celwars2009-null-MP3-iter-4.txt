```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

public class MP3Test {

    private MP3 mp3;
    private String testFilename;

    @Before
    public void setUp() {
        testFilename = "test.mp3";
        mp3 = new MP3(testFilename);
    }

    @After
    public void tearDown() {
        mp3 = null;
    }

    @Test
    public void testConstructor() {
        assertNotNull(mp3);
        assertEquals(testFilename, mp3.filename);
    }

    @Test
    public void testRun() {
        // This test is a bit tricky because it involves multithreading and audio playback.
        // We can't directly test the audio playback, but we can check if the thread is running.
        mp3.start();
        try {
            Thread.sleep(1000); // Give the thread some time to start
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        assertTrue(mp3.isAlive());
    }

    @Test
    public void testRunWithInvalidFile() {
        MP3 invalidMp3 = new MP3("invalid.mp3");
        invalidMp3.start();
        try {
            Thread.sleep(1000); // Give the thread some time to start
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // We can't directly check for exceptions in the thread, but we can ensure the thread is not stuck
        assertFalse(invalidMp3.isAlive());
    }

    @Test
    public void testAudioInputStreamClosed() {
        // This test checks if the AudioInputStream is closed after the run method completes
        mp3.start();
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        try {
            mp3.din.close(); // This should not throw an exception if din is already closed
        } catch (IOException e) {
            fail("AudioInputStream was not closed properly");
        }
    }
}
```