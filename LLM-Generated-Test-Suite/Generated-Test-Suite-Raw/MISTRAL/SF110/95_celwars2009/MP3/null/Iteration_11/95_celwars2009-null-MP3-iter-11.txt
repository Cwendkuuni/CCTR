Certainly! Below is a comprehensive JUnit 4 test suite for the `MP3` class. This test suite includes tests for the constructor and the `run` method.

```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;

public class MP3Test {

    private MP3 mp3;
    private String testFilename;

    @Before
    public void setUp() {
        // Create a temporary MP3 file for testing
        testFilename = "test.mp3";
        File file = new File(testFilename);
        try {
            file.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @After
    public void tearDown() {
        // Delete the temporary MP3 file after testing
        File file = new File(testFilename);
        if (file.exists()) {
            file.delete();
        }
    }

    @Test
    public void testConstructor() {
        mp3 = new MP3(testFilename);
        assertNotNull(mp3);
        assertEquals(testFilename, mp3.filename);
    }

    @Test
    public void testRun() {
        mp3 = new MP3(testFilename);
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // Since the run method does not return any value, we can only check if it runs without exceptions
        // Additional checks can be added based on the expected behavior of the run method
    }

    @Test(expected = NullPointerException.class)
    public void testRunWithNullFilename() {
        mp3 = new MP3(null);
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test(expected = FileNotFoundException.class)
    public void testRunWithNonExistentFile() {
        mp3 = new MP3("non_existent_file.mp3");
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Setup and Teardown**:
   - `setUp`: Creates a temporary MP3 file for testing.
   - `tearDown`: Deletes the temporary MP3 file after testing.

2. **Tests**:
   - `testConstructor`: Tests the constructor to ensure the `MP3` object is created correctly and the filename is set.
   - `testRun`: Tests the `run` method to ensure it executes without exceptions. Since the `run` method does not return any value, we can only check if it runs without exceptions.
   - `testRunWithNullFilename`: Tests the `run` method with a `null` filename to ensure it handles null values correctly.
   - `testRunWithNonExistentFile`: Tests the `run` method with a non-existent file to ensure it handles file not found exceptions correctly.

This test suite covers the basic functionality of the `MP3` class and ensures that it handles different scenarios appropriately.