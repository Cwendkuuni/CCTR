```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BinaryCalculateTest {

    private BinaryCalculate binaryCalculate;

    @Before
    public void setUp() {
        binaryCalculate = new BinaryCalculate();
    }

    @Test
    public void testAddBinary() {
        assertEquals("100", binaryCalculate.addBinary("1", "1"));
        assertEquals("10101", binaryCalculate.addBinary("1010", "1001"));
        assertEquals("1111", binaryCalculate.addBinary("1111", "0000"));
    }

    @Test
    public void testSubBinary() {
        assertEquals("1", binaryCalculate.subBinary("10", "1"));
        assertEquals("101", binaryCalculate.subBinary("110", "1"));
        assertEquals("0", binaryCalculate.subBinary("1", "1"));
    }

    @Test
    public void testIPCalculate() {
        String result = binaryCalculate.IPCalculate("192.168.1.0", "255.255.255.0");
        assertTrue(result.contains("Total Range: 192.168.1.0 -- 192.168.1.255"));
        assertTrue(result.contains("Usable Range: 192.168.1.1 -- 192.168.1.254"));
        assertTrue(result.contains("Total usable IP Addresses : 254"));
        assertTrue(result.contains("Subnet: 192.168.1.0"));
        assertTrue(result.contains("Binary Subnet: 11000000.10101000.00000001.00000000"));
        assertTrue(result.contains("Broadcast Address: 192.168.1.255"));
        assertTrue(result.contains("Prefix: /24"));
        assertTrue(result.contains("Netmask: 255.255.255.0"));
        assertTrue(result.contains("Binary Netmask: 11111111.11111111.11111111.00000000"));
    }

    @Test
    public void testGetBinaryIP() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("11000000.10101000.00000001.00000000", binaryCalculate.getBinaryIP("11000000101010000000000100000000"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("2001:0db8:85a3:0000:0000:8a2e:0370:7334", binaryCalculate.getBinaryIP("00100000000000010000110110111000100001011010001100000000000000000000000000000000100010100010111000000111000001110011001100110100"));
    }

    @Test
    public void testGetNetmask() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("11111111111111111111111100000000", binaryCalculate.getNetmask("11111111111111111111111100000000"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", binaryCalculate.getNetmask("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"));
    }

    @Test
    public void testConvert() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("192.168.1.0", binaryCalculate.convert("11000000101010000000000100000000"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("2001:0db8:85a3:0000:0000:8a2e:0370:7334", binaryCalculate.convert("00100000000000010000110110111000100001011010001100000000000000000000000000000000100010100010111000000111000001110011001100110100"));
    }

    @Test
    public void testConvertToBinary() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("11000000101010000000000100000000", binaryCalculate.convertToBinary("192.168.1.0"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("00100000000000010000110110111000100001011010001100000000000000000000000000000000100010100010111000000111000001110011001100110100", binaryCalculate.convertToBinary("2001:0db8:85a3:0000:0000:8a2e:0370:7334"));
    }

    @Test
    public void testGetStartIP() {
        binaryCalculate.IPRangeAddress = "192.168.1.0 -- 192.168.1.255";
        assertEquals("192.168.1.0", binaryCalculate.getStartIP());
    }

    @Test
    public void testPrefixInPrefixCalculate() {
        // This test is more complex and may require mocking or additional setup
        // For simplicity, we'll just ensure it doesn't throw an exception
        try {
            binaryCalculate.prefixInPrefixCalculate("192.168.1.0", "255.255.255.0", 4, "/24");
        } catch (Exception e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }
}
```