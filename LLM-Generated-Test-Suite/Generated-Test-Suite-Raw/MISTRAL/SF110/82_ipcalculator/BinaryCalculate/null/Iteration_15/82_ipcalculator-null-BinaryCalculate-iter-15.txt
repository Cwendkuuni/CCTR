```java
package ipac;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BinaryCalculateTest {

    private BinaryCalculate binaryCalculate;

    @Before
    public void setUp() {
        binaryCalculate = new BinaryCalculate();
    }

    @Test
    public void testAddBinary() {
        assertEquals("100", binaryCalculate.addBinary("1", "1"));
        assertEquals("10101", binaryCalculate.addBinary("1010", "101"));
        assertEquals("1000", binaryCalculate.addBinary("111", "1"));
    }

    @Test
    public void testSubBinary() {
        assertEquals("1", binaryCalculate.subBinary("10", "1"));
        assertEquals("101", binaryCalculate.subBinary("110", "1"));
        assertEquals("11", binaryCalculate.subBinary("100", "1"));
    }

    @Test
    public void testIPCalculate() {
        String result = binaryCalculate.IPCalculate("192.168.1.0", "255.255.255.0");
        assertTrue(result.contains("Total Range:"));
        assertTrue(result.contains("Usable Range:"));
        assertTrue(result.contains("Total usable IP Addresses :"));
        assertTrue(result.contains("Subnet:"));
        assertTrue(result.contains("Binary Subnet:"));
        assertTrue(result.contains("Broadcast Address:"));
        assertTrue(result.contains("Prefix:"));
        assertTrue(result.contains("Netmask:"));
        assertTrue(result.contains("Binary Netmask:"));
    }

    @Test
    public void testGetBinaryIP() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("11000000.10101000.00000001.00000000", binaryCalculate.getBinaryIP("11000000101010000000000100000000"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("2001:0db8:85a3:0000:0000:8a2e:0370:7334", binaryCalculate.getBinaryIP("001000000000000100001101101110001000010110100011000000000000000000000000100010100010111000000111000001110011001100100100"));
    }

    @Test
    public void testGetNetmask() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("11111111111111111111111100000000", binaryCalculate.getNetmask("255.255.255.0"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", binaryCalculate.getNetmask("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"));
    }

    @Test
    public void testCalculate() {
        binaryCalculate.checkIPType(31); // IPv4
        binaryCalculate.calculate("11000000101010000000000100000000", "11111111111111111111111100000000");
        assertEquals("/24", binaryCalculate.prefix);

        binaryCalculate.checkIPType(127); // IPv6
        binaryCalculate.calculate("001000000000000100001101101110001000010110100011000000000000000000000000100010100010111000000111000001110011001100100100", "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
        assertEquals("/64", binaryCalculate.prefix);
    }

    @Test
    public void testPrefixInPrefixCalculate() {
        binaryCalculate.prefixInPrefixCalculate("192.168.1.0", "255.255.255.0", 2, "/24");
        // Add assertions based on the expected output
    }

    @Test
    public void testCheckIPType() {
        binaryCalculate.checkIPType(31);
        assertTrue(binaryCalculate.isIPv4);
        assertFalse(binaryCalculate.isIPv6);
        assertEquals(8, binaryCalculate.lengthOfToken);
        assertEquals(".", binaryCalculate.DELIMITER);
        assertEquals(32, binaryCalculate.MAXPREFIX);

        binaryCalculate.checkIPType(127);
        assertFalse(binaryCalculate.isIPv4);
        assertTrue(binaryCalculate.isIPv6);
        assertEquals(16, binaryCalculate.lengthOfToken);
        assertEquals(":", binaryCalculate.DELIMITER);
        assertEquals(128, binaryCalculate.MAXPREFIX);
    }

    @Test
    public void testConvert() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("192.168.1.0", binaryCalculate.convert("11000000101010000000000100000000"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("2001:0db8:85a3:0000:0000:8a2e:0370:7334", binaryCalculate.convert("001000000000000100001101101110001000010110100011000000000000000000000000100010100010111000000111000001110011001100100100"));
    }

    @Test
    public void testConvertToBinary() {
        binaryCalculate.checkIPType(31); // IPv4
        assertEquals("11000000101010000000000100000000", binaryCalculate.convertToBinary("192.168.1.0"));

        binaryCalculate.checkIPType(127); // IPv6
        assertEquals("001000000000000100001101101110001000010110100011000000000000000000000000100010100010111000000111000001110011001100100100", binaryCalculate.convertToBinary("2001:0db8:85a3:0000:0000:8a2e:0370:7334"));
    }

    @Test
    public void testGetStartIP() {
        binaryCalculate.IPRangeAddress = "192.168.1.0 -- 192.168.1.255";
        assertEquals("192.168.1.0", binaryCalculate.getStartIP());
    }
}
```