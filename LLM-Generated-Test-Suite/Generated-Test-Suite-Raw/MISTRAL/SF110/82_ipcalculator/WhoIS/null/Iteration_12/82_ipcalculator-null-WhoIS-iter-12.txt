```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

public class WhoISTest {

    private WhoIS whoIS;

    @Before
    public void setUp() {
        whoIS = new WhoIS();
    }

    @Test
    public void testConstructor() {
        assertEquals("APNIC", whoIS.WHOIS_NAME);
        assertEquals("whois.apnic.net", whoIS.WHOIS_ADDRESS);
        assertEquals(43, whoIS.WHOIS_PORT);
        assertNotNull(whoIS.radioButtonGroup);
        assertNotNull(whoIS.queryTextField);
        assertNotNull(whoIS.queryButton);
        assertNotNull(whoIS.resetButton);
        assertNotNull(whoIS.lowercaseD);
        assertNotNull(whoIS.lowercaseL);
        assertNotNull(whoIS.uppercaseL);
        assertNotNull(whoIS.lowercaseM);
        assertNotNull(whoIS.uppercaseM);
        assertNotNull(whoIS.lowercaseX);
        assertNotNull(whoIS.resetRadioButton);
        assertNotNull(whoIS.popupMenu);
        assertNotNull(whoIS.inverseQueries);
        assertNotNull(whoIS.miscList);
    }

    @Test
    public void testQueryPanel() {
        JPanel queryPanel = whoIS.queryPanel();
        assertNotNull(queryPanel);
        assertEquals(1, queryPanel.getComponentCount());
    }

    @Test
    public void testAdditionalQueriesPanel() {
        JPanel additionalQueriesPanel = whoIS.additionalQueriesPanel();
        assertNotNull(additionalQueriesPanel);
        assertEquals(2, additionalQueriesPanel.getComponentCount());
    }

    @Test
    public void testIPAddressLookups() {
        JPanel lookupPanel = whoIS.IPAddressLookups();
        assertNotNull(lookupPanel);
        assertEquals(6, lookupPanel.getComponentCount());
    }

    @Test
    public void testMiscellaneousQueries() {
        JPanel miscPanel = whoIS.MiscellaneousQueries();
        assertNotNull(miscPanel);
        assertEquals(3, miscPanel.getComponentCount());
    }

    @Test
    public void testQueryHintsPanel() {
        JPanel queryHintsPanel = whoIS.queryHintsPanel();
        assertNotNull(queryHintsPanel);
        assertEquals(1, queryHintsPanel.getComponentCount());
    }

    @Test
    public void testCreatePopupMenu() {
        whoIS.createPopupMenu();
        assertNotNull(whoIS.popupMenu);
        assertEquals(4, whoIS.popupMenu.getComponentCount());
    }

    @Test
    public void testActionPerformedQueryButton() {
        whoIS.queryTextField.setText("test query");
        whoIS.actionPerformed(new ActionEvent(whoIS.queryButton, ActionEvent.ACTION_PERFORMED, null));
        // Add assertions to verify the query was started
    }

    @Test
    public void testActionPerformedResetButton() {
        whoIS.queryTextField.setText("test query");
        whoIS.actionPerformed(new ActionEvent(whoIS.resetButton, ActionEvent.ACTION_PERFORMED, null));
        assertEquals("", whoIS.queryTextField.getText());
        assertTrue(whoIS.resetRadioButton.isSelected());
        assertFalse(whoIS.lowercaseD.isSelected());
        assertEquals(0, whoIS.inverseQueries.getSelectedIndex());
        assertEquals(0, whoIS.miscList.getSelectedIndex());
    }

    @Test
    public void testStartQueryNoQuery() {
        whoIS.queryTextField.setText("");
        whoIS.startQuery();
        // Add assertions to verify the error message is displayed
    }

    @Test
    public void testStartQueryWithQuery() {
        whoIS.queryTextField.setText("test query");
        whoIS.startQuery();
        // Add assertions to verify the query was started
    }

    @Test
    public void testDisplayError() {
        whoIS.displayError("Test Error");
        // Add assertions to verify the error message is displayed
    }

    @Test
    public void testQuery() {
        whoIS.queryTextField.setText("test query");
        whoIS.query("test query");
        // Add assertions to verify the query was performed
    }

    @Test
    public void testGetQuery() {
        whoIS.queryTextField.setText("test query");
        String query = whoIS.getQuery();
        assertEquals("test query", query);

        whoIS.inverseQueries.setSelectedItem("admin-c");
        query = whoIS.getQuery();
        assertEquals("-i admin-c test query", query);

        whoIS.lowercaseL.setSelected(true);
        query = whoIS.getQuery();
        assertEquals("-l -i admin-c test query", query);

        whoIS.uppercaseL.setSelected(true);
        query = whoIS.getQuery();
        assertEquals("-L -i admin-c test query", query);

        whoIS.lowercaseM.setSelected(true);
        query = whoIS.getQuery();
        assertEquals("-m -i admin-c test query", query);

        whoIS.uppercaseM.setSelected(true);
        query = whoIS.getQuery();
        assertEquals("-M -i admin-c test query", query);

        whoIS.lowercaseX.setSelected(true);
        query = whoIS.getQuery();
        assertEquals("-x -i admin-c test query", query);

        whoIS.booleanD = true;
        query = whoIS.getQuery();
        assertEquals("-d -x -i admin-c test query", query);

        whoIS.miscList.setSelectedIndex(1);
        query = whoIS.getQuery();
        assertEquals("-d -x -i admin-c -T as-block test query", query);
    }

    @Test
    public void testReset() {
        whoIS.queryTextField.setText("test query");
        whoIS.reset();
        assertEquals("", whoIS.queryTextField.getText());
        assertTrue(whoIS.resetRadioButton.isSelected());
        assertFalse(whoIS.lowercaseD.isSelected());
        assertEquals(0, whoIS.inverseQueries.getSelectedIndex());
        assertEquals(0, whoIS.miscList.getSelectedIndex());
    }
}
```