```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import jigl.image.ops.Shift;
import jigl.image.types.*;
import jigl.image.*;

public class ShiftTest {

    private Shift shiftNoWrap;
    private Shift shiftWrap;
    private GrayImage grayImage;
    private RealGrayImage realGrayImage;
    private ColorImage colorImage;
    private RealColorImage realColorImage;

    @Before
    public void setUp() {
        shiftNoWrap = new Shift(1, 1, Shift.NOWRAP);
        shiftWrap = new Shift(1, 1, Shift.WRAP);

        grayImage = new GrayImage(3, 3);
        grayImage.set(0, 0, 1);
        grayImage.set(1, 1, 2);
        grayImage.set(2, 2, 3);

        realGrayImage = new RealGrayImage(3, 3);
        realGrayImage.set(0, 0, 1.0f);
        realGrayImage.set(1, 1, 2.0f);
        realGrayImage.set(2, 2, 3.0f);

        colorImage = new ColorImage(3, 3);
        colorImage.setPlane(0, grayImage);
        colorImage.setPlane(1, grayImage);
        colorImage.setPlane(2, grayImage);

        realColorImage = new RealColorImage(3, 3);
        realColorImage.setPlane(0, realGrayImage);
        realColorImage.setPlane(1, realGrayImage);
        realColorImage.setPlane(2, realGrayImage);
    }

    @Test
    public void testApplyGrayImageNoWrap() {
        GrayImage result = shiftNoWrap.apply(grayImage);
        assertEquals(0, result.get(0, 0).intValue());
        assertEquals(1, result.get(1, 1).intValue());
        assertEquals(2, result.get(2, 2).intValue());
    }

    @Test
    public void testApplyGrayImageWrap() {
        GrayImage result = shiftWrap.apply(grayImage);
        assertEquals(3, result.get(0, 0).intValue());
        assertEquals(1, result.get(1, 1).intValue());
        assertEquals(2, result.get(2, 2).intValue());
    }

    @Test
    public void testApplyRealGrayImageNoWrap() {
        RealGrayImage result = shiftNoWrap.apply(realGrayImage);
        assertEquals(0.0f, result.get(0, 0).floatValue(), 0.001);
        assertEquals(1.0f, result.get(1, 1).floatValue(), 0.001);
        assertEquals(2.0f, result.get(2, 2).floatValue(), 0.001);
    }

    @Test
    public void testApplyRealGrayImageWrap() {
        RealGrayImage result = shiftWrap.apply(realGrayImage);
        assertEquals(3.0f, result.get(0, 0).floatValue(), 0.001);
        assertEquals(1.0f, result.get(1, 1).floatValue(), 0.001);
        assertEquals(2.0f, result.get(2, 2).floatValue(), 0.001);
    }

    @Test
    public void testApplyColorImageNoWrap() {
        ColorImage result = shiftNoWrap.apply(colorImage);
        assertEquals(0, result.plane(0).get(0, 0).intValue());
        assertEquals(1, result.plane(0).get(1, 1).intValue());
        assertEquals(2, result.plane(0).get(2, 2).intValue());
    }

    @Test
    public void testApplyColorImageWrap() {
        ColorImage result = shiftWrap.apply(colorImage);
        assertEquals(3, result.plane(0).get(0, 0).intValue());
        assertEquals(1, result.plane(0).get(1, 1).intValue());
        assertEquals(2, result.plane(0).get(2, 2).intValue());
    }

    @Test
    public void testApplyRealColorImageNoWrap() {
        RealColorImage result = shiftNoWrap.apply(realColorImage);
        assertEquals(0.0f, result.plane(0).get(0, 0).floatValue(), 0.001);
        assertEquals(1.0f, result.plane(0).get(1, 1).floatValue(), 0.001);
        assertEquals(2.0f, result.plane(0).get(2, 2).floatValue(), 0.001);
    }

    @Test
    public void testApplyRealColorImageWrap() {
        RealColorImage result = shiftWrap.apply(realColorImage);
        assertEquals(3.0f, result.plane(0).get(0, 0).floatValue(), 0.001);
        assertEquals(1.0f, result.plane(0).get(1, 1).floatValue(), 0.001);
        assertEquals(2.0f, result.plane(0).get(2, 2).floatValue(), 0.001);
    }
}
```