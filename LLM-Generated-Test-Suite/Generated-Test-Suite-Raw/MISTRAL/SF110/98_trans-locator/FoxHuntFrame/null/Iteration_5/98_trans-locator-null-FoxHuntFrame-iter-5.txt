```java
package Joshua.FoxHunt;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JTextField;
import java.util.Vector;

public class FoxHuntFrameTest {

    private FoxHuntFrame foxHuntFrame;

    @Before
    public void setUp() {
        foxHuntFrame = new FoxHuntFrame();
    }

    @Test
    public void testConstructor() {
        assertNotNull(foxHuntFrame);
        assertEquals("Triangulation", foxHuntFrame.getTitle());
        assertNotNull(foxHuntFrame.points);
        assertNotNull(foxHuntFrame.fox);
        assertNotNull(foxHuntFrame.theta);
        assertNotNull(foxHuntFrame.lat);
        assertNotNull(foxHuntFrame.lon);
        assertNotNull(foxHuntFrame.zoom);
        assertNotNull(foxHuntFrame.add);
        assertNotNull(foxHuntFrame.pos);
        assertNotNull(foxHuntFrame.posModel);
        assertNotNull(foxHuntFrame.display);
        assertNotNull(foxHuntFrame.panel1);
        assertNotNull(foxHuntFrame.panel2);
        assertNotNull(foxHuntFrame.panel3);
        assertNotNull(foxHuntFrame.panel);
    }

    @Test
    public void testActionPerformed() {
        ActionEvent event = new ActionEvent(foxHuntFrame.add, ActionEvent.ACTION_PERFORMED, null);
        foxHuntFrame.actionPerformed(event);
        // Assuming addPoint() is called, we can check the size of points vector
        assertEquals(1, foxHuntFrame.points.size());
    }

    @Test
    public void testAddPoint() {
        foxHuntFrame.theta.setText("90");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");
        foxHuntFrame.addPoint();
        assertEquals(1, foxHuntFrame.points.size());
        TrigPoint point = (TrigPoint) foxHuntFrame.points.get(0);
        assertEquals(34.0522, point.getY(), 0.0001);
        assertEquals(-118.2437, point.getX(), 0.0001);
        assertEquals(90, point.getAngle());
    }

    @Test
    public void testFinalPrep() {
        // This method sets up the UI components, so we can check if they are initialized
        assertNotNull(foxHuntFrame.zoom);
        assertNotNull(foxHuntFrame.panel3);
        assertNotNull(foxHuntFrame.panel);
    }

    @Test
    public void testTextPrep() {
        // This method sets up the text fields and button, so we can check if they are initialized
        assertNotNull(foxHuntFrame.theta);
        assertNotNull(foxHuntFrame.lat);
        assertNotNull(foxHuntFrame.lon);
        assertNotNull(foxHuntFrame.add);
        assertNotNull(foxHuntFrame.panel1);
    }

    @Test
    public void testTablePrep() {
        // This method sets up the table model and table, so we can check if they are initialized
        assertNotNull(foxHuntFrame.posModel);
        assertNotNull(foxHuntFrame.pos);
        assertNotNull(foxHuntFrame.panel2);
    }

    @Test
    public void testDisplayPrep() {
        // This method sets up the display and loads landmarks, so we can check if they are initialized
        assertNotNull(foxHuntFrame.display);
    }

    @Test
    public void testLoadLandmarks() {
        // This method loads landmarks from a file, so we can check if the file is read correctly
        // Assuming the file exists and is correctly formatted
        // We can check if the landmarks are added to the display
        // This test might require mocking the file system or using a test file
    }

    @Test
    public void testError() {
        // This method shows an error dialog, so we can check if the dialog is shown
        // This test might require mocking the JOptionPane or using a test framework that supports UI testing
    }

    @Test
    public void testFoxTableModel() {
        FoxTableModel model = foxHuntFrame.new FoxTableModel();
        assertEquals(2, model.getColumnCount());
        assertEquals(0, model.getRowCount());
        assertEquals("Lattitude", model.getColumnName(0));
        assertEquals("Longitude", model.getColumnName(1));
        assertFalse(model.isCellEditable(0, 0));
    }
}
```