```java
package Joshua.FoxHunt;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Vector;

public class FoxHuntFrameTest {

    private FoxHuntFrame foxHuntFrame;

    @Before
    public void setUp() {
        foxHuntFrame = new FoxHuntFrame();
    }

    @Test
    public void testConstructor() {
        assertNotNull(foxHuntFrame);
        assertEquals("Triangulation", foxHuntFrame.getTitle());
        assertTrue(foxHuntFrame.isVisible());
    }

    @Test
    public void testActionPerformed() {
        ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "Add It!!!");
        foxHuntFrame.actionPerformed(event);
        // Assuming addPoint() is called, we can check the size of points vector
        assertEquals(1, foxHuntFrame.points.size());
    }

    @Test
    public void testAddPoint() {
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.052235");
        foxHuntFrame.lon.setText("-118.243683");
        foxHuntFrame.addPoint();
        assertEquals(1, foxHuntFrame.points.size());
        assertEquals(0, foxHuntFrame.fox.size()); // No fox point added yet

        foxHuntFrame.addPoint();
        assertEquals(2, foxHuntFrame.points.size());
        assertEquals(1, foxHuntFrame.fox.size()); // Fox point should be added now
    }

    @Test
    public void testFinalPrep() {
        // This method sets up the UI components, so we can check if they are initialized
        assertNotNull(foxHuntFrame.zoom);
        assertNotNull(foxHuntFrame.panel3);
        assertNotNull(foxHuntFrame.panel);
    }

    @Test
    public void testTextPrep() {
        // This method sets up the text fields and button, so we can check if they are initialized
        assertNotNull(foxHuntFrame.theta);
        assertNotNull(foxHuntFrame.lat);
        assertNotNull(foxHuntFrame.lon);
        assertNotNull(foxHuntFrame.add);
        assertNotNull(foxHuntFrame.panel1);
    }

    @Test
    public void testTablePrep() {
        // This method sets up the table, so we can check if it is initialized
        assertNotNull(foxHuntFrame.posModel);
        assertNotNull(foxHuntFrame.pos);
        assertNotNull(foxHuntFrame.panel2);
    }

    @Test
    public void testDisplayPrep() {
        // This method sets up the display, so we can check if it is initialized
        assertNotNull(foxHuntFrame.display);
    }

    @Test
    public void testLoadLandmarks() {
        // Create a test landmarks.cfg file
        File testFile = new File("./landmarks.cfg");
        try {
            testFile.createNewFile();
            // Write test data to the file (omitted for brevity)
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Call the method to load landmarks
        foxHuntFrame.loadLandmarks();

        // Clean up the test file
        testFile.delete();

        // Check if landmarks are loaded (assuming display.addLandMark() is called)
        // This part depends on the implementation of HuntDisplay and Landmark classes
    }

    @Test
    public void testError() {
        // Test the error method by simulating an error
        foxHuntFrame.error("Test Error");
        // This method shows a dialog, so we can't directly test the outcome
        // However, we can check if the system exits by catching the System.exit call
        // This requires a security manager setup, which is omitted for brevity
    }

    @Test
    public void testFoxTableModel() {
        FoxTableModel model = foxHuntFrame.new FoxTableModel();
        assertEquals(2, model.getColumnCount());
        assertEquals(0, model.getRowCount()); // Initially, no fox points

        // Add a fox point and check the model
        foxHuntFrame.fox.add(new TrigPoint(34.052235, -118.243683, 45));
        assertEquals(1, model.getRowCount());
        assertEquals("34.052235", model.getValueAt(0, 0));
        assertEquals("-118.243683", model.getValueAt(0, 1));
    }
}
```