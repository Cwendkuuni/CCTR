```java
package Joshua.FoxHunt;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import java.awt.*;
import java.util.Vector;

public class HuntDisplayTest {

    private HuntDisplay huntDisplay;

    @Before
    public void setUp() {
        huntDisplay = new HuntDisplay();
    }

    @Test
    public void testConstructor() {
        assertNotNull(huntDisplay.points);
        assertNotNull(huntDisplay.landmarks);
        assertEquals(Color.WHITE, huntDisplay.getBackground());
        assertEquals(new Dimension(50, 50), huntDisplay.getMinimumSize());
        assertEquals(new Dimension(200, 200), huntDisplay.getPreferredSize());
    }

    @Test
    public void testGetPreferredSize() {
        assertEquals(new Dimension(200, 200), huntDisplay.getPreferredSize());
    }

    @Test
    public void testGetMinimumSize() {
        assertEquals(new Dimension(50, 50), huntDisplay.getMinimumSize());
    }

    @Test
    public void testAddPoint() {
        TrigPoint point = new TrigPoint(45.0, 90.0, 0.0, false);
        huntDisplay.addPoint(point);
        assertEquals(1, huntDisplay.points.size());
        TrigPoint addedPoint = (TrigPoint) huntDisplay.points.get(0);
        assertEquals(0.5, addedPoint.getY(), 0.001);
        assertEquals(0.5, addedPoint.getX(), 0.001);
        assertEquals(0.0, addedPoint.getTheta(), 0.001);
        assertFalse(addedPoint.isFox());
    }

    @Test
    public void testAddLandMark() {
        Landmark landmark = new Landmark(45.0, 90.0, new ImageIcon());
        huntDisplay.addLandMark(landmark);
        assertEquals(1, huntDisplay.landmarks.size());
        Landmark addedLandmark = (Landmark) huntDisplay.landmarks.get(0);
        assertEquals(0.5, addedLandmark.getLat(), 0.001);
        assertEquals(0.5, addedLandmark.getLon(), 0.001);
        assertNotNull(addedLandmark.getIcon());
    }

    @Test
    public void testPaintComponent() {
        // This test is more of a sanity check since paintComponent involves graphics
        // which is hard to test without a graphical environment.
        TrigPoint point = new TrigPoint(45.0, 90.0, 0.0, false);
        huntDisplay.addPoint(point);
        Landmark landmark = new Landmark(45.0, 90.0, new ImageIcon());
        huntDisplay.addLandMark(landmark);

        // Mocking the Graphics object is complex and typically requires a graphical environment.
        // Here we just ensure that the method does not throw an exception.
        try {
            huntDisplay.paintComponent(huntDisplay.getGraphics());
        } catch (Exception e) {
            fail("paintComponent should not throw an exception");
        }
    }
}
```

### Explanation:
1. **Constructor Test**: Ensures that the `HuntDisplay` object is initialized correctly with non-null vectors and the correct background color and dimensions.
2. **getPreferredSize Test**: Verifies that the preferred size is set correctly.
3. **getMinimumSize Test**: Verifies that the minimum size is set correctly.
4. **addPoint Test**: Adds a `TrigPoint` and checks if it is added correctly to the `points` vector.
5. **addLandMark Test**: Adds a `Landmark` and checks if it is added correctly to the `landmarks` vector.
6. **paintComponent Test**: This test is a sanity check to ensure that `paintComponent` does not throw an exception. Comprehensive testing of graphical methods typically requires a graphical environment and is beyond the scope of simple unit tests.

### Note:
- The `TrigPoint` and `Landmark` classes are assumed to have appropriate constructors and methods (`getY`, `getX`, `getTheta`, `isFox`, `getLat`, `getLon`, `getIcon`).
- The `paintComponent` test is a basic check and does not verify the actual painting logic, which would require more advanced testing techniques or a graphical environment.