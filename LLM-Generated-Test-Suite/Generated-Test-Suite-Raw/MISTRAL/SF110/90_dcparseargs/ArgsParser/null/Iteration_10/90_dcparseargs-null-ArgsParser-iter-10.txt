```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import de.devcity.parseargs.ArgsParser;
import de.devcity.parseargs.arguments.SwitchArgument;
import de.devcity.parseargs.arguments.ParameterArgument;
import de.devcity.parseargs.arguments.StringArgument;

import java.util.List;

public class ArgsParserTest {

    private ArgsParser parser;

    @Before
    public void setUp() {
        parser = new ArgsParser();
    }

    @Test
    public void testGetArgsCount() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertEquals(3, parser.getArgsCount());
    }

    @Test
    public void testGetArgs() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertArrayEquals(args, parser.getArgs());
    }

    @Test(expected = NullPointerException.class)
    public void testSetArgsNull() {
        parser.setArgs(null);
    }

    @Test
    public void testGetArgsLeftCount() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertEquals(3, parser.getArgsLeftCount());
        parser.parseSwitchArgument("a");
        assertEquals(2, parser.getArgsLeftCount());
    }

    @Test
    public void testParseSwitchArgumentShort() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        SwitchArgument result = parser.parseSwitchArgument("a");
        assertTrue(result.isPresent());
        assertEquals(0, result.getIndex());
        assertEquals("a", result.getKey());
    }

    @Test
    public void testParseSwitchArgumentLong() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        SwitchArgument result = parser.parseSwitchArgument("long");
        assertTrue(result.isPresent());
        assertEquals(1, result.getIndex());
        assertEquals("long", result.getKey());
    }

    @Test
    public void testParseSwitchArgumentNotFound() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        SwitchArgument result = parser.parseSwitchArgument("b");
        assertFalse(result.isPresent());
        assertEquals(-1, result.getIndex());
        assertEquals("b", result.getKey());
    }

    @Test
    public void testParseParameterArgumentShort() {
        String[] args = {"-a", "value", "--long", "value2"};
        parser.setArgs(args);
        ParameterArgument result = parser.parseParameterArgument("a");
        assertNotNull(result);
        assertEquals(0, result.getIndex());
        assertEquals("a", result.getKey());
        assertEquals("value", result.getValue());
    }

    @Test
    public void testParseParameterArgumentLong() {
        String[] args = {"-a", "value", "--long", "value2"};
        parser.setArgs(args);
        ParameterArgument result = parser.parseParameterArgument("long");
        assertNotNull(result);
        assertEquals(2, result.getIndex());
        assertEquals("long", result.getKey());
        assertEquals("value2", result.getValue());
    }

    @Test
    public void testParseParameterArgumentNotFound() {
        String[] args = {"-a", "value", "--long", "value2"};
        parser.setArgs(args);
        ParameterArgument result = parser.parseParameterArgument("b");
        assertNull(result);
    }

    @Test
    public void testParseStringArgument() {
        String[] args = {"value1", "value2", "value3"};
        parser.setArgs(args);
        List<StringArgument> result = parser.parseStringArgument();
        assertEquals(3, result.size());
        assertEquals("value1", result.get(0).getValue());
        assertEquals("value2", result.get(1).getValue());
        assertEquals("value3", result.get(2).getValue());
    }
}
```