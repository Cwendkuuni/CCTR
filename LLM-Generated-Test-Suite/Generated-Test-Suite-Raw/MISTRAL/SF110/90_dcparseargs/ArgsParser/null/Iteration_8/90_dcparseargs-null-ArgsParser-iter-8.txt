```java
package de.devcity.parseargs;

import de.devcity.parseargs.arguments.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ArgsParserTest {

    private ArgsParser parser;

    @Before
    public void setUp() {
        parser = new ArgsParser();
    }

    @Test
    public void testGetArgsCount() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertEquals(3, parser.getArgsCount());
    }

    @Test
    public void testGetArgs() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertArrayEquals(args, parser.getArgs());
    }

    @Test(expected = NullPointerException.class)
    public void testSetArgsNull() {
        parser.setArgs(null);
    }

    @Test
    public void testSetArgs() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertArrayEquals(args, parser.getArgs());
    }

    @Test
    public void testGetArgsLeftCount() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        assertEquals(3, parser.getArgsLeftCount());
        parser.parseSwitchArgument("a");
        assertEquals(2, parser.getArgsLeftCount());
    }

    @Test
    public void testParseSwitchArgumentShort() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        SwitchArgument switchArgument = parser.parseSwitchArgument("a");
        assertTrue(switchArgument.isPresent());
        assertEquals(0, switchArgument.getIndex());
        assertEquals("a", switchArgument.getKey());
    }

    @Test
    public void testParseSwitchArgumentLong() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        SwitchArgument switchArgument = parser.parseSwitchArgument("long");
        assertTrue(switchArgument.isPresent());
        assertEquals(1, switchArgument.getIndex());
        assertEquals("long", switchArgument.getKey());
    }

    @Test
    public void testParseSwitchArgumentNotFound() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        SwitchArgument switchArgument = parser.parseSwitchArgument("x");
        assertFalse(switchArgument.isPresent());
        assertEquals(-1, switchArgument.getIndex());
        assertEquals("x", switchArgument.getKey());
    }

    @Test
    public void testParseParameterArgumentShort() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        ParameterArgument parameterArgument = parser.parseParameterArgument("a");
        assertNull(parameterArgument);
    }

    @Test
    public void testParseParameterArgumentLong() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        ParameterArgument parameterArgument = parser.parseParameterArgument("long");
        assertNotNull(parameterArgument);
        assertEquals(1, parameterArgument.getIndex());
        assertEquals("long", parameterArgument.getKey());
        assertEquals("value", parameterArgument.getValue());
    }

    @Test
    public void testParseParameterArgumentNotFound() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        ParameterArgument parameterArgument = parser.parseParameterArgument("x");
        assertNull(parameterArgument);
    }

    @Test
    public void testParseStringArgument() {
        String[] args = {"-a", "--long", "value"};
        parser.setArgs(args);
        List<StringArgument> stringArguments = parser.parseStringArgument();
        assertEquals(3, stringArguments.size());
        assertEquals("value", stringArguments.get(2).getValue());
    }
}
```