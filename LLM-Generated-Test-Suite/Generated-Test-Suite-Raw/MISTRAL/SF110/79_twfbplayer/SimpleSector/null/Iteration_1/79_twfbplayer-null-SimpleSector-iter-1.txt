```java
package de.outstare.fortbattleplayer.model.impl;

import de.outstare.fortbattleplayer.model.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashSet;
import java.util.Set;

public class SimpleSectorTest {

    private SimpleSector sector;
    private CombatantSide side;
    private Area area;
    private SectorObserver observer;
    private CharacterClass charClass;

    @Before
    public void setUp() {
        side = new CombatantSide() {
            // Implement necessary methods
        };
        area = new Area() {
            // Implement necessary methods
        };
        observer = new SectorObserver() {
            // Implement necessary methods
        };
        charClass = new CharacterClass() {
            // Implement necessary methods
        };
        sector = new SimpleSector(10, true, false, 5, 3, true, 2, charClass);
    }

    @Test
    public void testFree() {
        sector.gainControl(side);
        sector.free();
        assertEquals(0, sector.getOccupierCount());
        assertNull(sector.getOccupier());
    }

    @Test
    public void testGainControl() {
        sector.gainControl(side);
        assertEquals(1, sector.getOccupierCount());
        assertEquals(side, sector.getOccupier());
    }

    @Test
    public void testGetOccupier() {
        assertNull(sector.getOccupier());
        sector.gainControl(side);
        assertEquals(side, sector.getOccupier());
    }

    @Test
    public void testIsOccupied() {
        assertFalse(sector.isOccupied());
        sector.gainControl(side);
        assertTrue(sector.isOccupied());
    }

    @Test
    public void testGetHeight() {
        assertEquals(10, sector.getHeight());
    }

    @Test
    public void testIsDefenderSpawn() {
        assertTrue(sector.isDefenderSpawn());
    }

    @Test
    public void testIsAttackerSpawn() {
        assertFalse(sector.isAttackerSpawn());
    }

    @Test
    public void testIsFlag() {
        assertTrue(sector.isFlag());
    }

    @Test
    public void testGetBonus() {
        SectorBonus bonus = sector.getBonus(charClass);
        assertNotNull(bonus);
    }

    @Test
    public void testGetDamageBonus() {
        int bonus = sector.getDamageBonus();
        assertEquals(0, bonus);
    }

    @Test
    public void testGetAttackBonus() {
        int bonus = sector.getAttackBonus(charClass);
        assertEquals(7, bonus); // 5 (attackBonus) + 2 (classBonus)
    }

    @Test
    public void testGetDefenseBonus() {
        int bonus = sector.getDefenseBonus(charClass);
        assertEquals(5, bonus); // 3 (defendBonus) + 2 (classBonus)
    }

    @Test
    public void testClassBonus() {
        int bonus = sector.classBonus(charClass);
        assertEquals(2, bonus);
    }

    @Test
    public void testGetAreas() {
        Set<Area> areas = sector.getAreas();
        assertTrue(areas.isEmpty());
    }

    @Test
    public void testAddArea() {
        sector._addArea(area);
        assertTrue(sector.getAreas().contains(area));
    }

    @Test
    public void testHashCode() {
        SimpleSector anotherSector = new SimpleSector(10, true, false, 5, 3, true, 2, charClass);
        assertEquals(sector.hashCode(), anotherSector.hashCode());
    }

    @Test
    public void testEquals() {
        SimpleSector anotherSector = new SimpleSector(10, true, false, 5, 3, true, 2, charClass);
        assertTrue(sector.equals(anotherSector));
    }

    @Test
    public void testAddObserver() {
        sector.addObserver(observer);
        assertTrue(sector.getObservers().contains(observer));
    }

    @Test
    public void testRemoveObserver() {
        sector.addObserver(observer);
        sector.removeObserver(observer);
        assertFalse(sector.getObservers().contains(observer));
    }

    private int getOccupierCount(SimpleSector sector) {
        try {
            java.lang.reflect.Field field = SimpleSector.class.getDeclaredField("occupierCount");
            field.setAccessible(true);
            return field.getInt(sector);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private Set<SectorObserver> getObservers(SimpleSector sector) {
        try {
            java.lang.reflect.Field field = SimpleSector.class.getDeclaredField("observers");
            field.setAccessible(true);
            return (Set<SectorObserver>) field.get(sector);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
```