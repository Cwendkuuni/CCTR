```java
package jahuwaldt.plot;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.awt.*;
import java.text.NumberFormat;

public class PlotAxisTest {

    private PlotAxis plotAxis;
    private PlotAxisScale scale;
    private NumberFormat nf;

    @Before
    public void setUp() {
        scale = new LinearAxisScale();
        nf = NumberFormat.getInstance();
        plotAxis = new PlotAxis("Test Label", scale, nf, PlotAxis.kMajorGrid) {
            @Override
            public void setAxisBounds(PlotRunList plotRunList) {
                // Implementation not needed for testing
            }

            @Override
            protected void resizeAxis(Rectangle plotFrame) {
                // Implementation not needed for testing
            }

            @Override
            public void draw(Graphics g, Component c, Rectangle r) {
                // Implementation not needed for testing
            }
        };
    }

    @Test
    public void testSetLabel() {
        plotAxis.setLabel("New Label");
        assertEquals("New Label", plotAxis.getLabel());
    }

    @Test
    public void testSetScale() {
        PlotAxisScale newScale = new LinearAxisScale();
        plotAxis.setScale(newScale);
        assertEquals(newScale, plotAxis.getScale());
    }

    @Test
    public void testSetNumberFormat() {
        NumberFormat newNf = NumberFormat.getCurrencyInstance();
        plotAxis.setNumberFormat(newNf);
        assertEquals(newNf, plotAxis.getNumberFormat());
    }

    @Test
    public void testSetGridStyle() {
        plotAxis.setGridStyle(PlotAxis.kNoGrid);
        assertEquals(PlotAxis.kNoGrid, plotAxis.getGridStyle());
    }

    @Test
    public void testManualLowerBounds() {
        plotAxis.manualLowerBounds(true);
        assertTrue(plotAxis.manualLB);
    }

    @Test
    public void testSetLowerBounds() {
        plotAxis.setLowerBounds(10.0);
        assertEquals(10.0, plotAxis.getLowerBounds(), 0.001);
    }

    @Test
    public void testLowerBoundsAsString() {
        plotAxis.setLowerBounds(10.0);
        assertEquals("10", plotAxis.lowerBoundsAsString());
    }

    @Test
    public void testManualUpperBounds() {
        plotAxis.manualUpperBounds(true);
        assertTrue(plotAxis.manualUB);
    }

    @Test
    public void testSetUpperBounds() {
        plotAxis.setUpperBounds(20.0);
        assertEquals(20.0, plotAxis.getUpperBounds(), 0.001);
    }

    @Test
    public void testUpperBoundsAsString() {
        plotAxis.setUpperBounds(20.0);
        assertEquals("20", plotAxis.upperBoundsAsString());
    }

    @Test
    public void testManualTickStepSize() {
        plotAxis.manualTickStepSize(true);
        assertTrue(plotAxis.manualQuant);
    }

    @Test
    public void testSetTickStepSize() {
        plotAxis.setTickStepSize(5.0);
        assertEquals(5.0, plotAxis.getTickStepSize(), 0.001);
    }

    @Test
    public void testSetAxisTickLimits() {
        plotAxis.setLowerBounds(5.0);
        plotAxis.setUpperBounds(15.0);
        plotAxis.setAxisTickLimits();
        assertTrue(plotAxis.getLowerBounds() <= 5.0);
        assertTrue(plotAxis.getUpperBounds() >= 15.0);
    }

    @Test
    public void testScaleCoord() {
        plotAxis.xA = 2.0;
        plotAxis.xB = 3.0;
        double result = plotAxis.scaleCoord(5.0);
        assertEquals(13.0, result, 0.001);
    }

    @Test
    public void testClone() {
        PlotAxis clonedAxis = (PlotAxis) plotAxis.clone();
        assertNotSame(plotAxis, clonedAxis);
        assertEquals(plotAxis.getLabel(), clonedAxis.getLabel());
        assertEquals(plotAxis.getScale(), clonedAxis.getScale());
        assertEquals(plotAxis.getNumberFormat(), clonedAxis.getNumberFormat());
        assertEquals(plotAxis.getGridStyle(), clonedAxis.getGridStyle());
    }
}
```