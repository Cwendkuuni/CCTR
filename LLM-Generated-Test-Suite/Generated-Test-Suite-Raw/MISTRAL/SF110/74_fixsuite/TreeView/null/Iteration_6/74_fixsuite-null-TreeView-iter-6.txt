```java
package org.fixsuite.message.view;

import org.fixsuite.message.info.*;
import org.fixsuite.message.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreePath;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TreeViewTest {

    private TreeView treeView;
    private Library library;
    private DictionaryInfo dictionary;
    private MessageInfo message;
    private ComponentInfo component;
    private FieldInfo field;

    @Before
    public void setUp() {
        library = mock(Library.class);
        dictionary = mock(DictionaryInfo.class);
        message = mock(MessageInfo.class);
        component = mock(ComponentInfo.class);
        field = mock(FieldInfo.class);

        List<DictionaryInfo> dictionaries = new ArrayList<>();
        dictionaries.add(dictionary);
        when(library.getDictionaries()).thenReturn(dictionaries);

        List<MessageInfo> messages = new ArrayList<>();
        messages.add(message);
        when(dictionary.getMessages()).thenReturn(messages);

        List<FixInfo> items = new ArrayList<>();
        items.add(component);
        items.add(field);
        when(message.getItems()).thenReturn(items);

        treeView = new TreeView(library);
    }

    @Test
    public void testInitGUI() {
        assertNotNull(treeView.mainScrollPane);
        assertNotNull(treeView.fixTree);
        assertNotNull(treeView.searchLabel);
        assertNotNull(treeView.searchTextField);
        assertNotNull(treeView.searchButton);
        assertNotNull(treeView.clearButton);
        assertNotNull(treeView.expandButton);
        assertNotNull(treeView.collapseButton);
    }

    @Test
    public void testLoadFIXTree() {
        FixInfoTreeNode root = treeView.loadFIXTree();
        assertNotNull(root);
        assertEquals("Dictionaries", root.getUserObject());
        assertEquals(1, root.getChildCount());
    }

    @Test
    public void testLoadMessages() {
        FixInfoTreeNode versionNode = new FixInfoTreeNode("Version");
        treeView.loadMessages(versionNode, dictionary);
        assertEquals(1, versionNode.getChildCount());
    }

    @Test
    public void testLoadItems() {
        FixInfoTreeNode branchNode = new FixInfoTreeNode("Branch");
        treeView.loadItems(branchNode, message, 0);
        assertEquals(2, branchNode.getChildCount());
    }

    @Test
    public void testExpandAll() {
        treeView.expandAll();
        // Add assertions based on the expected behavior
    }

    @Test
    public void testCollapseAll() {
        treeView.collapseAll();
        // Add assertions based on the expected behavior
    }

    @Test
    public void testSearch() {
        FixInfoTreeNode root = treeView.loadFIXTree();
        treeView.search(root, "SearchString");
        // Add assertions based on the expected behavior
    }

    @Test
    public void testClear() {
        FixInfoTreeNode root = treeView.loadFIXTree();
        treeView.clear(root);
        // Add assertions based on the expected behavior
    }

    @Test
    public void testValueChanged() {
        TreeSelectionEvent event = mock(TreeSelectionEvent.class);
        FixInfoTreeNode node = new FixInfoTreeNode(field);
        when(treeView.fixTree.getLastSelectedPathComponent()).thenReturn(node);

        treeView.valueChanged(event);
        // Add assertions based on the expected behavior
    }

    @Test
    public void testActionPerformed() {
        ActionEvent event = mock(ActionEvent.class);

        when(event.getSource()).thenReturn(treeView.collapseButton);
        treeView.actionPerformed(event);
        // Add assertions based on the expected behavior

        when(event.getSource()).thenReturn(treeView.expandButton);
        treeView.actionPerformed(event);
        // Add assertions based on the expected behavior

        when(event.getSource()).thenReturn(treeView.searchButton);
        treeView.actionPerformed(event);
        // Add assertions based on the expected behavior

        when(event.getSource()).thenReturn(treeView.clearButton);
        treeView.actionPerformed(event);
        // Add assertions based on the expected behavior
    }

    @Test
    public void testKeyPressed() {
        KeyEvent event = mock(KeyEvent.class);
        when(event.getKeyCode()).thenReturn(KeyEvent.VK_ENTER);

        treeView.keyPressed(event);
        // Add assertions based on the expected behavior
    }

    @Test
    public void testKeyReleased() {
        KeyEvent event = mock(KeyEvent.class);
        treeView.keyReleased(event);
        // Add assertions based on the expected behavior
    }

    @Test
    public void testKeyTyped() {
        KeyEvent event = mock(KeyEvent.class);
        treeView.keyTyped(event);
        // Add assertions based on the expected behavior
    }

    @Test
    public void testFixInfoTreeNode() {
        FixInfoTreeNode node = treeView.new FixInfoTreeNode("Test");
        assertNotNull(node);
        assertFalse(node.isHighlighted());

        node.setHighlighted(true);
        assertTrue(node.isHighlighted());
    }

    @Test
    public void testFixInfoCellRenderer() {
        FixInfoTreeNode node = treeView.new FixInfoTreeNode(field);
        JTree tree = new JTree();
        FixInfoCellRenderer renderer = treeView.new FixInfoCellRenderer();
        Component component = renderer.getTreeCellRendererComponent(tree, node, false, false, false, 0, false);

        assertNotNull(component);
        assertTrue(component instanceof JLabel);
        assertEquals("TestField (123)", ((JLabel) component).getText());
    }
}
```