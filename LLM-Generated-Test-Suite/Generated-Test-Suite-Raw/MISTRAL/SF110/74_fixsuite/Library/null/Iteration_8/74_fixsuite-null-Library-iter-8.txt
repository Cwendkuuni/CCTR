```java
package org.fixsuite.message;

import org.fixsuite.message.info.DictionaryInfo;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({Library.class, LoggerFactory.class})
public class LibraryTest {

    private Library library;
    private Logger mockLogger;

    @Before
    public void setUp() {
        PowerMockito.mockStatic(LoggerFactory.class);
        mockLogger = Mockito.mock(Logger.class);
        when(LoggerFactory.getLogger(Library.class)).thenReturn(mockLogger);

        library = new Library();
    }

    @Test
    public void testLoadFromDirectory_ValidDirectory() {
        String validPath = "src/test/resources/validDirectory";
        File mockFile = mock(File.class);
        File[] mockFiles = {mockFile};

        when(mockFile.isDirectory()).thenReturn(true);
        when(mockFile.listFiles()).thenReturn(mockFiles);
        when(mockFile.getName()).thenReturn("validDirectory");

        PowerMockito.mockStatic(System.class);
        PowerMockito.mockStatic(Runtime.class);
        when(System.currentTimeMillis()).thenReturn(1L, 2L);
        when(Runtime.getRuntime().freeMemory()).thenReturn(1000L, 2000L);

        boolean result = library.loadFromDirectory(validPath);

        assertTrue(result);
        verify(mockLogger).debug("Loaded 1 FIX dictionaries.");
    }

    @Test
    public void testLoadFromDirectory_EmptyDirectory() {
        String emptyPath = "src/test/resources/emptyDirectory";
        File mockFile = mock(File.class);

        when(mockFile.isDirectory()).thenReturn(true);
        when(mockFile.listFiles()).thenReturn(new File[0]);

        boolean result = library.loadFromDirectory(emptyPath);

        assertFalse(result);
        verify(mockLogger).error("Supplied directory is empty.");
    }

    @Test
    public void testLoadFromDirectory_NotADirectory() {
        String invalidPath = "src/test/resources/invalidPath";
        File mockFile = mock(File.class);

        when(mockFile.isDirectory()).thenReturn(false);

        boolean result = library.loadFromDirectory(invalidPath);

        assertFalse(result);
        verify(mockLogger).error("Supplied path is not a directory.");
    }

    @Test
    public void testGetDictionaries() {
        DictionaryInfo mockDictionary = mock(DictionaryInfo.class);
        library.dictionaries.put("1.0", mockDictionary);

        List<DictionaryInfo> dictionaries = library.getDictionaries();

        assertEquals(1, dictionaries.size());
        assertEquals(mockDictionary, dictionaries.get(0));
    }

    @Test
    public void testGetDictionary_ExistingVersion() {
        DictionaryInfo mockDictionary = mock(DictionaryInfo.class);
        library.dictionaries.put("1.0", mockDictionary);

        DictionaryInfo dictionary = library.getDictionary("1.0");

        assertEquals(mockDictionary, dictionary);
    }

    @Test
    public void testGetDictionary_NonExistingVersion() {
        DictionaryInfo dictionary = library.getDictionary("2.0");

        assertNull(dictionary);
    }

    @Test
    public void testLoadDirectory() {
        DictionaryInfo mockDictionary = mock(DictionaryInfo.class);
        File mockFile = mock(File.class);
        List<File> files = new ArrayList<>();
        files.add(mockFile);

        when(mockDictionary.isLoaded()).thenReturn(true);
        when(mockDictionary.getVersion()).thenReturn("1.0");

        library.loadDirectory(files, "1.0");

        assertEquals(1, library.dictionaries.size());
        assertEquals(mockDictionary, library.dictionaries.get("1.0"));
    }

    @Test
    public void testArrangeFiles() {
        File fieldsFile = mock(File.class);
        File enumsFile = mock(File.class);
        File componentsFile = mock(File.class);
        File msgTypeFile = mock(File.class);
        File msgContentsFile = mock(File.class);

        when(fieldsFile.getName()).thenReturn("Fields.xml");
        when(enumsFile.getName()).thenReturn("Enums.xml");
        when(componentsFile.getName()).thenReturn("Components.xml");
        when(msgTypeFile.getName()).thenReturn("MsgType.xml");
        when(msgContentsFile.getName()).thenReturn("MsgContents.xml");

        File[] files = {fieldsFile, enumsFile, componentsFile, msgTypeFile, msgContentsFile};

        List<File> arrangedFiles = library.arrangeFiles(files);

        assertEquals(5, arrangedFiles.size());
        assertEquals(fieldsFile, arrangedFiles.get(0));
        assertEquals(enumsFile, arrangedFiles.get(1));
        assertEquals(componentsFile, arrangedFiles.get(2));
        assertEquals(msgTypeFile, arrangedFiles.get(3));
        assertEquals(msgContentsFile, arrangedFiles.get(4));
    }
}
```