```java
package ioproject.server.network;

import ioproject.common.network.Client;
import ioproject.common.network.ClientHandler;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.Iterator;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ClientGroupTest {

    private ClientGroup clientGroup;
    private Client client;
    private ClientHandler handler;

    @Before
    public void setUp() {
        clientGroup = new ClientGroup(null);
        client = mock(Client.class);
        handler = mock(ClientHandler.class);
    }

    @Test
    public void testParentGroup() {
        assertNull(clientGroup.parentGroup());

        ClientGroup parentGroup = new ClientGroup(null);
        ClientGroup childGroup = new ClientGroup(parentGroup);
        assertEquals(parentGroup, childGroup.parentGroup());
    }

    @Test
    public void testNotifyMessageSent() {
        clientGroup.add(client);
        clientGroup.addClientHandler(handler);

        assertTrue(clientGroup.notifyMessageSent(client, "message"));
        verify(handler).messageSent(client, "message");

        ClientGroup subGroup = clientGroup.createSubGroup();
        subGroup.add(client);
        subGroup.addClientHandler(handler);

        assertTrue(clientGroup.notifyMessageSent(client, "message"));
        verify(handler, times(2)).messageSent(client, "message");
    }

    @Test
    public void testNotifyMessageReceived() {
        clientGroup.add(client);
        clientGroup.addClientHandler(handler);

        assertTrue(clientGroup.notifyMessageReceived(client, "message"));
        verify(handler).messageReceived(client, "message");

        ClientGroup subGroup = clientGroup.createSubGroup();
        subGroup.add(client);
        subGroup.addClientHandler(handler);

        assertTrue(clientGroup.notifyMessageReceived(client, "message"));
        verify(handler, times(2)).messageReceived(client, "message");
    }

    @Test
    public void testNotifyExceptionCaught() {
        clientGroup.add(client);
        clientGroup.addClientHandler(handler);

        Throwable cause = new Exception("test exception");
        assertTrue(clientGroup.notifyExceptionCaught(client, cause));
        verify(handler).exceptionCaught(client, cause);

        ClientGroup subGroup = clientGroup.createSubGroup();
        subGroup.add(client);
        subGroup.addClientHandler(handler);

        assertTrue(clientGroup.notifyExceptionCaught(client, cause));
        verify(handler, times(2)).exceptionCaught(client, cause);
    }

    @Test
    public void testIterator() {
        clientGroup.add(client);
        Iterator<Client> iterator = clientGroup.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(client, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testContains() {
        assertFalse(clientGroup.contains(client));
        clientGroup.add(client);
        assertTrue(clientGroup.contains(client));
    }

    @Test
    public void testSize() {
        assertEquals(0, clientGroup.size());
        clientGroup.add(client);
        assertEquals(1, clientGroup.size());
    }

    @Test
    public void testAdd() {
        assertTrue(clientGroup.add(client));
        verify(handler, never()).clientAdded(client);

        clientGroup.addClientHandler(handler);
        assertTrue(clientGroup.add(client));
        verify(handler).clientAdded(client);
    }

    @Test
    public void testRemove() {
        clientGroup.add(client);
        assertTrue(clientGroup.remove(client));
        verify(handler, never()).clientRemoved(client);

        clientGroup.addClientHandler(handler);
        clientGroup.add(client);
        assertTrue(clientGroup.remove(client));
        verify(handler).clientRemoved(client);
    }

    @Test
    public void testCreateSubGroup() {
        ClientGroup subGroup = clientGroup.createSubGroup();
        assertNotNull(subGroup);
        assertEquals(clientGroup, subGroup.parentGroup());
    }

    @Test
    public void testAddClientHandler() {
        clientGroup.addClientHandler(handler);
        assertEquals(handler, clientGroup.handler);
    }
}
```