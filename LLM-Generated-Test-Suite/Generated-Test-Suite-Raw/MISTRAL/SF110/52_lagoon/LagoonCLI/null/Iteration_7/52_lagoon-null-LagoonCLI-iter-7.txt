```java
package nu.staldal.lagoon;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Properties;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class LagoonCLITest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @Test
    public void testMainNoArgs() {
        LagoonCLI.main(new String[]{});
        assertEquals("Syntax:\nnu.staldal.lagoon.LagoonCLI <property_file> [<interval>|build|force]\nnu.staldal.lagoon.LagoonCLI <sitemap_file> [<interval>|build|force]\n", outContent.toString());
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"propertyFile", "invalidInterval"});
        assertEquals("Syntax:\nnu.staldal.lagoon.LagoonCLI <property_file> [<interval>|build|force]\nnu.staldal.lagoon.LagoonCLI <sitemap_file> [<interval>|build|force]\n", outContent.toString());
    }

    @Test
    public void testMainNegativeInterval() {
        LagoonCLI.main(new String[]{"propertyFile", "-1"});
        assertEquals("Syntax:\nnu.staldal.lagoon.LagoonCLI <property_file> [<interval>|build|force]\nnu.staldal.lagoon.LagoonCLI <sitemap_file> [<interval>|build|force]\n", outContent.toString());
    }

    @Test
    public void testMainBuild() {
        LagoonCLI.main(new String[]{"propertyFile", "build"});
        assertTrue(outContent.toString().contains("Building website..."));
    }

    @Test
    public void testMainForce() {
        LagoonCLI.main(new String[]{"propertyFile", "force"});
        assertTrue(outContent.toString().contains("Force building website..."));
    }

    @Test
    public void testMainInterval() {
        LagoonCLI.main(new String[]{"propertyFile", "1"});
        assertTrue(outContent.toString().contains("Building website..."));
    }

    @Test
    public void testMainSitemapFile() {
        LagoonCLI.main(new String[]{"sitemapFile.xml"});
        assertTrue(outContent.toString().contains("Initializing Lagoon..."));
    }

    @Test
    public void testMainPropertyFile() {
        LagoonCLI.main(new String[]{"propertyFile"});
        assertTrue(outContent.toString().contains("Initializing Lagoon..."));
    }

    @Test
    public void testMainFileNotFound() {
        LagoonCLI.main(new String[]{"nonexistentFile"});
        assertTrue(errContent.toString().contains("File not found"));
    }

    @Test
    public void testMainIOException() {
        LagoonCLI.main(new String[]{"propertyFile"});
        assertTrue(errContent.toString().contains("I/O error"));
    }

    @Test
    public void testMainLagoonException() {
        LagoonCLI.main(new String[]{"propertyFile"});
        assertTrue(errContent.toString().contains("Error while initializing Lagoon"));
    }

    @Test
    public void testMainAuthenticationMissingException() {
        LagoonCLI.main(new String[]{"propertyFile"});
        assertTrue(errContent.toString().contains("Password is required but not specified"));
    }

    @Test
    public void testMainAuthenticationException() {
        LagoonCLI.main(new String[]{"propertyFile"});
        assertTrue(errContent.toString().contains("Incorrect password"));
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties properties = new Properties();
        properties.setProperty("testProperty", "testValue");
        LagoonCLI.properties = properties;
        assertEquals("testValue", LagoonCLI.getProperty("testProperty"));
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyNotFound() throws Exception {
        Properties properties = new Properties();
        LagoonCLI.properties = properties;
        LagoonCLI.getProperty("nonexistentProperty");
    }

    @Test
    public void testShowTime() {
        LagoonCLI.showTime(5000);
        assertEquals("in 5 s\n", outContent.toString());
    }

    @Test
    public void testShowTimeMilliseconds() {
        LagoonCLI.showTime(500);
        assertEquals("in 500 ms\n", outContent.toString());
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }
}
```