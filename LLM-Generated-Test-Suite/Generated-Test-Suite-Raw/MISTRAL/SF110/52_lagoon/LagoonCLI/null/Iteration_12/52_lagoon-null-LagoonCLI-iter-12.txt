```java
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Properties;

import nu.staldal.lagoon.LagoonCLI;
import nu.staldal.lagoon.core.LagoonException;
import nu.staldal.lagoon.core.LagoonProcessor;
import nu.staldal.xtree.Element;
import nu.staldal.xtree.TreeBuilder;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({LagoonCLI.class, TreeBuilder.class, LagoonProcessor.class})
public class LagoonCLITest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @Test
    public void testMainNoArgs() {
        LagoonCLI.main(new String[]{});
        assertEquals("Syntax:\nnu.staldal.lagoon.LagoonCLI <property_file> [<interval>|build|force]\nnu.staldal.lagoon.LagoonCLI <sitemap_file> [<interval>|build|force]\n", outContent.toString());
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"propertyFile", "invalidInterval"});
        assertEquals("Syntax:\nnu.staldal.lagoon.LagoonCLI <property_file> [<interval>|build|force]\nnu.staldal.lagoon.LagoonCLI <sitemap_file> [<interval>|build|force]\n", outContent.toString());
    }

    @Test
    public void testMainBuild() throws Exception {
        PowerMockito.mockStatic(TreeBuilder.class);
        Element mockElement = mock(Element.class);
        when(TreeBuilder.parseXML(any(), anyBoolean())).thenReturn(mockElement);

        LagoonProcessor mockProcessor = mock(LagoonProcessor.class);
        PowerMockito.whenNew(LagoonProcessor.class).withAnyArguments().thenReturn(mockProcessor);

        LagoonCLI.main(new String[]{"propertyFile", "build"});

        verify(mockProcessor).build(false);
        assertTrue(outContent.toString().contains("Building website..."));
    }

    @Test
    public void testMainForce() throws Exception {
        PowerMockito.mockStatic(TreeBuilder.class);
        Element mockElement = mock(Element.class);
        when(TreeBuilder.parseXML(any(), anyBoolean())).thenReturn(mockElement);

        LagoonProcessor mockProcessor = mock(LagoonProcessor.class);
        PowerMockito.whenNew(LagoonProcessor.class).withAnyArguments().thenReturn(mockProcessor);

        LagoonCLI.main(new String[]{"propertyFile", "force"});

        verify(mockProcessor).build(true);
        assertTrue(outContent.toString().contains("Force building website..."));
    }

    @Test
    public void testMainInterval() throws Exception {
        PowerMockito.mockStatic(TreeBuilder.class);
        Element mockElement = mock(Element.class);
        when(TreeBuilder.parseXML(any(), anyBoolean())).thenReturn(mockElement);

        LagoonProcessor mockProcessor = mock(LagoonProcessor.class);
        PowerMockito.whenNew(LagoonProcessor.class).withAnyArguments().thenReturn(mockProcessor);

        LagoonCLI.main(new String[]{"propertyFile", "1"});

        verify(mockProcessor, atLeastOnce()).build(false);
        assertTrue(outContent.toString().contains("Building website..."));
    }

    @Test
    public void testMainFileNotFound() throws Exception {
        PowerMockito.mockStatic(TreeBuilder.class);
        when(TreeBuilder.parseXML(any(), anyBoolean())).thenThrow(new FileNotFoundException());

        LagoonCLI.main(new String[]{"propertyFile", "build"});

        assertTrue(errContent.toString().contains("File not found"));
    }

    @Test
    public void testMainIOException() throws Exception {
        PowerMockito.mockStatic(TreeBuilder.class);
        when(TreeBuilder.parseXML(any(), anyBoolean())).thenThrow(new IOException());

        LagoonCLI.main(new String[]{"propertyFile", "build"});

        assertTrue(errContent.toString().contains("I/O error"));
    }

    @Test
    public void testMainLagoonException() throws Exception {
        PowerMockito.mockStatic(TreeBuilder.class);
        when(TreeBuilder.parseXML(any(), anyBoolean())).thenThrow(new LagoonException("Test exception"));

        LagoonCLI.main(new String[]{"propertyFile", "build"});

        assertTrue(errContent.toString().contains("Test exception"));
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");
        LagoonCLI.properties = properties;

        String value = LagoonCLI.getProperty("testKey");

        assertEquals("testValue", value);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyNotFound() throws Exception {
        Properties properties = new Properties();
        LagoonCLI.properties = properties;

        LagoonCLI.getProperty("testKey");
    }

    @Test
    public void testShowTime() {
        LagoonCLI.showTime(5000);
        assertEquals("in 5 s\n", outContent.toString());

        outContent.reset();
        LagoonCLI.showTime(500);
        assertEquals("in 500 ms\n", outContent.toString());
    }
}
```