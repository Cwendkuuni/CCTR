```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import nu.staldal.lagoon.LagoonGUI;
import nu.staldal.lagoon.core.LagoonProcessor;
import nu.staldal.lagoon.core.LagoonException;
import nu.staldal.lagoon.core.AuthenticationMissingException;
import nu.staldal.lagoon.core.AuthenticationException;
import nu.staldal.xtree.Element;
import nu.staldal.xtree.TreeBuilder;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class LagoonGUITest {

    private LagoonGUI lagoonGUI;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
    }

    @After
    public void tearDown() {
        lagoonGUI.dispose();
    }

    @Test
    public void testMain() throws Exception {
        String[] args = {};
        LagoonGUI.main(args);
        assertTrue(true); // Just to ensure the main method runs without exceptions
    }

    @Test
    public void testWindowClosing() {
        WindowEvent event = new WindowEvent(lagoonGUI, WindowEvent.WINDOW_CLOSING);
        lagoonGUI.windowClosing(event);
        // Verify that the application exits
    }

    @Test
    public void testBuild() {
        lagoonGUI.sitemapFile.setValue("testSitemap.xml");
        lagoonGUI.sourceDir.setValue("testSourceDir");
        lagoonGUI.targetURL.setValue("testTargetURL");

        lagoonGUI.build(false);
        // Add assertions to verify the build process
    }

    @Test
    public void testExit() {
        lagoonGUI.exit();
        // Verify that the application exits
    }

    @Test
    public void testInit() throws IOException, SAXException, LagoonException, AuthenticationMissingException, AuthenticationException {
        lagoonGUI.sitemapFile.setValue("testSitemap.xml");
        lagoonGUI.sourceDir.setValue("testSourceDir");
        lagoonGUI.targetURL.setValue("testTargetURL");

        FileInputStream fis = new FileInputStream(new File("testSitemap.xml"));
        InputSource is = new InputSource("testSitemap.xml");
        is.setByteStream(fis);
        Element sitemapTree = TreeBuilder.parseXML(is, false);
        fis.close();

        lagoonGUI.init();
        assertNotNull(lagoonGUI.processor);
    }

    @Test
    public void testLoadPropertyFile() {
        lagoonGUI.loadPropertyFile();
        // Add assertions to verify the property file is loaded correctly
    }

    @Test
    public void testLoadProperties() throws IOException, LagoonException {
        File propertyFile = new File("testProperties.properties");
        Properties prop = new Properties();
        prop.setProperty("sitemapFile", "testSitemap.xml");
        prop.setProperty("sourceDir", "testSourceDir");
        prop.setProperty("targetURL", "testTargetURL");
        prop.setProperty("password", "testPassword");
        FileOutputStream fos = new FileOutputStream(propertyFile);
        prop.store(fos, "Test properties");
        fos.close();

        lagoonGUI.loadProperties(propertyFile);
        assertEquals("testSitemap.xml", lagoonGUI.sitemapFile.getValue());
        assertEquals("testSourceDir", lagoonGUI.sourceDir.getValue());
        assertEquals("testTargetURL", lagoonGUI.targetURL.getValue());
        assertEquals("testPassword", lagoonGUI.password);
    }

    @Test
    public void testSavePropertyFile() {
        lagoonGUI.sitemapFile.setValue("testSitemap.xml");
        lagoonGUI.sourceDir.setValue("testSourceDir");
        lagoonGUI.targetURL.setValue("testTargetURL");
        lagoonGUI.password = "testPassword";

        lagoonGUI.savePropertyFile();
        // Add assertions to verify the property file is saved correctly
    }

    @Test
    public void testGetProperty() throws LagoonException {
        Properties prop = new Properties();
        prop.setProperty("testProperty", "testValue");
        String value = LagoonGUI.getProperty(prop, "testProperty");
        assertEquals("testValue", value);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyException() throws LagoonException {
        Properties prop = new Properties();
        LagoonGUI.getProperty(prop, "nonExistentProperty");
    }

    @Test
    public void testShowTime() {
        assertEquals("in 5000 ms", LagoonGUI.showTime(5000));
        assertEquals("in 10 s", LagoonGUI.showTime(10000));
    }
}
```