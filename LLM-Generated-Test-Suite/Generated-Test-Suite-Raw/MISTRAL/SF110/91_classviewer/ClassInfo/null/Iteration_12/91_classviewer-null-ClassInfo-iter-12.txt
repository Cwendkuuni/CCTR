```java
package com.jstevh.viewer;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import javax.swing.WindowConstants;
import java.lang.reflect.Method;
import java.util.Arrays;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private ClassInfo classInfoWithDirManager;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        classInfo = new ClassInfo("java.lang.String");
        mockDirManager = new DirManager(); // Assuming DirManager has a default constructor
        classInfoWithDirManager = new ClassInfo("java.lang.String", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("java.lang.String", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("java.lang", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("java.lang.Object", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
        assertTrue(fields.length > 0);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
        assertTrue(constructors.length > 0);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
        assertTrue(interfaces.length > 0);
    }

    @Test
    public void testGetDataWithMembers() {
        Method[] methods = String.class.getMethods();
        String[] methodData = ClassInfo.getData(methods);
        assertNotNull(methodData);
        assertTrue(methodData.length > 0);
    }

    @Test
    public void testGetDataWithClasses() {
        Class[] classes = {String.class, Integer.class};
        String[] classData = ClassInfo.getData(classes);
        assertNotNull(classData);
        assertEquals(2, classData.length);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("toString");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] index = {"toString"};
        String[] foundMethods = classInfo.srchMethods("toString", index);
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testGetFoundMethod() {
        classInfo.srchMethods("toString");
        MethodData methodData = classInfo.getFoundMethod(0);
        assertNotNull(methodData);
        assertEquals("toString", methodData.getMethName());
    }

    @Test
    public void testMain() throws Exception {
        String[] args = {"java.lang.String"};
        ClassInfo.main(args);
        // This test is mainly to ensure that the main method runs without exceptions
    }

    // Additional tests for the constructor with DirManager
    @Test
    public void testClassInfoWithDirManager() {
        assertNotNull(classInfoWithDirManager);
        assertEquals("java.lang.String", classInfoWithDirManager.getClassName());
    }

    // Mock DirManager class for testing purposes
    private class DirManager {
        public String[] getPackageList() {
            return new String[]{"java.lang"};
        }
    }
}
```