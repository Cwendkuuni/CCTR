```java
package macaw.presentationLayer;

import macaw.businessLayer.*;
import macaw.persistenceLayer.demo.*;
import macaw.persistenceLayer.production.*;
import macaw.system.*;
import macaw.io.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MacawWorkBenchTest {

    private MacawWorkBench macawWorkBench;
    private SessionProperties sessionProperties;
    private UserInterfaceFactory userInterfaceFactory;
    private JDialog dialog;
    private JButton editConstants;
    private JButton editVariables;
    private JButton exportVariableData;
    private JButton exit;

    @Before
    public void setUp() {
        sessionProperties = mock(SessionProperties.class);
        userInterfaceFactory = mock(UserInterfaceFactory.class);
        dialog = mock(JDialog.class);
        editConstants = mock(JButton.class);
        editVariables = mock(JButton.class);
        exportVariableData = mock(JButton.class);
        exit = mock(JButton.class);

        when(sessionProperties.getUserInterfaceFactory()).thenReturn(userInterfaceFactory);
        when(userInterfaceFactory.createDialog()).thenReturn(dialog);
        when(userInterfaceFactory.createButton(anyString())).thenReturn(editConstants, editVariables, exportVariableData, exit);

        macawWorkBench = new MacawWorkBench(sessionProperties);
    }

    @Test
    public void testMain() {
        // This test is more of an integration test and might be better suited for a separate integration test suite.
        // For unit testing, we can mock the dependencies and verify the interactions.
        // Here, we just ensure that the main method does not throw an exception.
        try {
            MacawWorkBench.main(new String[]{});
        } catch (Exception e) {
            fail("Main method threw an exception: " + e.getMessage());
        }
    }

    @Test
    public void testShow() {
        macawWorkBench.show();
        verify(dialog).setVisible(true);
    }

    @Test
    public void testEditConstants() {
        macawWorkBench.actionPerformed(new ActionEvent(editConstants, ActionEvent.ACTION_PERFORMED, ""));
        verify(editConstants).addActionListener(macawWorkBench);
        // Additional verification can be added based on the behavior of VariableConstantsEditor
    }

    @Test
    public void testEditVariables() {
        macawWorkBench.actionPerformed(new ActionEvent(editVariables, ActionEvent.ACTION_PERFORMED, ""));
        verify(editVariables).addActionListener(macawWorkBench);
        // Additional verification can be added based on the behavior of MacawVariableBrowser
    }

    @Test
    public void testExportVariableData() {
        macawWorkBench.actionPerformed(new ActionEvent(exportVariableData, ActionEvent.ACTION_PERFORMED, ""));
        verify(exportVariableData).addActionListener(macawWorkBench);
        // Additional verification can be added based on the behavior of ExportVariablesToMacawXML
    }

    @Test
    public void testExit() {
        macawWorkBench.actionPerformed(new ActionEvent(exit, ActionEvent.ACTION_PERFORMED, ""));
        verify(exit).addActionListener(macawWorkBench);
        // Additional verification can be added based on the behavior of System.exit
    }

    @Test
    public void testActionPerformedUnknownButton() {
        JButton unknownButton = mock(JButton.class);
        macawWorkBench.actionPerformed(new ActionEvent(unknownButton, ActionEvent.ACTION_PERFORMED, ""));
        verify(unknownButton, never()).addActionListener(macawWorkBench);
        // Ensure that the method handles unknown buttons gracefully
    }
}
```