```java
package macaw.presentationLayer;

import macaw.businessLayer.*;
import macaw.persistenceLayer.demo.*;
import macaw.persistenceLayer.production.*;
import macaw.system.*;
import macaw.io.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MacawWorkBenchTest {

    private MacawWorkBench macawWorkBench;
    private SessionProperties sessionProperties;
    private UserInterfaceFactory userInterfaceFactory;
    private JDialog dialog;
    private JButton editConstants;
    private JButton editVariables;
    private JButton exportVariableData;
    private JButton exit;

    @Before
    public void setUp() {
        sessionProperties = mock(SessionProperties.class);
        userInterfaceFactory = mock(UserInterfaceFactory.class);
        dialog = mock(JDialog.class);
        editConstants = mock(JButton.class);
        editVariables = mock(JButton.class);
        exportVariableData = mock(JButton.class);
        exit = mock(JButton.class);

        when(sessionProperties.getUserInterfaceFactory()).thenReturn(userInterfaceFactory);
        when(userInterfaceFactory.createDialog()).thenReturn(dialog);
        when(userInterfaceFactory.createButton(anyString())).thenReturn(editConstants, editVariables, exportVariableData, exit);

        macawWorkBench = new MacawWorkBench(sessionProperties);
    }

    @Test
    public void testMain() {
        // This test is more of an integration test and might be skipped in unit tests
        // You can use a separate integration test suite to test the main method
    }

    @Test
    public void testConstructor() {
        verify(dialog).setTitle(anyString());
        verify(dialog).setModal(true);
        verify(dialog).setSize(300, 300);
    }

    @Test
    public void testCreateButtonPanel() {
        JPanel buttonPanel = macawWorkBench.createButtonPanel(userInterfaceFactory);
        assertNotNull(buttonPanel);
        verify(editConstants).addActionListener(macawWorkBench);
        verify(editVariables).addActionListener(macawWorkBench);
        verify(exportVariableData).addActionListener(macawWorkBench);
        verify(exit).addActionListener(macawWorkBench);
    }

    @Test
    public void testShow() {
        macawWorkBench.show();
        verify(dialog).setVisible(true);
    }

    @Test
    public void testEditConstants() {
        macawWorkBench.editConstants();
        verify(sessionProperties, times(1)).getProperty(anyString());
    }

    @Test
    public void testEditVariables() {
        macawWorkBench.editVariables();
        verify(sessionProperties, times(1)).getProperty(anyString());
    }

    @Test
    public void testExportVariableData() {
        macawWorkBench.exportVariableData();
        verify(sessionProperties, times(1)).getProperty(anyString());
    }

    @Test
    public void testExit() {
        macawWorkBench.exit();
        // No direct verification for System.exit(0) in unit tests
    }

    @Test
    public void testActionPerformedEditConstants() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(editConstants);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).editConstants();
    }

    @Test
    public void testActionPerformedEditVariables() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(editVariables);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).editVariables();
    }

    @Test
    public void testActionPerformedExportVariableData() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(exportVariableData);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).exportVariableData();
    }

    @Test
    public void testActionPerformedExit() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(exit);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).exit();
    }
}
```