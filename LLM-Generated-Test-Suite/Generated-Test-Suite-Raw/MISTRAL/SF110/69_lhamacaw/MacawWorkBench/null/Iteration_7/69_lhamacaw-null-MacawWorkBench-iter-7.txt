```java
package macaw.presentationLayer;

import macaw.businessLayer.*;
import macaw.persistenceLayer.demo.*;
import macaw.persistenceLayer.production.*;
import macaw.system.*;
import macaw.io.*;
import org.junit.*;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MacawWorkBenchTest {

    private SessionProperties sessionProperties;
    private UserInterfaceFactory userInterfaceFactory;
    private MacawWorkBench macawWorkBench;

    @Before
    public void setUp() {
        sessionProperties = mock(SessionProperties.class);
        userInterfaceFactory = mock(UserInterfaceFactory.class);
        when(sessionProperties.getUserInterfaceFactory()).thenReturn(userInterfaceFactory);
        macawWorkBench = new MacawWorkBench(sessionProperties);
    }

    @Test
    public void testConstructor() {
        assertNotNull(macawWorkBench);
        verify(userInterfaceFactory).createDialog();
        verify(userInterfaceFactory).createPanel();
        verify(userInterfaceFactory).createGridBagConstraints();
        verify(userInterfaceFactory).createImmutableTextArea(3, 20);
        verify(userInterfaceFactory, times(4)).createButton(anyString());
    }

    @Test
    public void testShow() {
        macawWorkBench.show();
        verify(macawWorkBench.dialog).setVisible(true);
    }

    @Test
    public void testEditConstants() {
        macawWorkBench.editConstants();
        verify(sessionProperties).getProperty(anyString());
    }

    @Test
    public void testEditVariables() {
        macawWorkBench.editVariables();
        verify(sessionProperties).getProperty(anyString());
    }

    @Test
    public void testExportVariableData() {
        macawWorkBench.exportVariableData();
        verify(sessionProperties).getProperty(anyString());
    }

    @Test
    public void testExit() {
        macawWorkBench.exit();
        // No assertions needed, just verifying no exceptions are thrown
    }

    @Test
    public void testActionPerformedEditConstants() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(macawWorkBench.editConstants);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).editConstants();
    }

    @Test
    public void testActionPerformedEditVariables() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(macawWorkBench.editVariables);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).editVariables();
    }

    @Test
    public void testActionPerformedExportVariableData() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(macawWorkBench.exportVariableData);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).exportVariableData();
    }

    @Test
    public void testActionPerformedExit() {
        ActionEvent event = mock(ActionEvent.class);
        when(event.getSource()).thenReturn(macawWorkBench.exit);
        macawWorkBench.actionPerformed(event);
        verify(macawWorkBench).exit();
    }
}
```