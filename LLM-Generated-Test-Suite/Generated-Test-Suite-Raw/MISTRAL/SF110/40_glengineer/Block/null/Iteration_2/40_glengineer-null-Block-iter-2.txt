```java
package glengineer.blocks;

import glengineer.positions.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BlockTest {

    private Scheme scheme;
    private Block block;

    @Before
    public void setUp() {
        // Assuming Scheme and CharPosition are properly defined elsewhere
        scheme = new Scheme(0, 0, 10, 10); // Example dimensions
        block = new Block(scheme, 0, 0, 10, 10) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Implementation not needed for testing
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Implementation not needed for testing
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Implementation not needed for testing
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return new HWordPosition(0, 0, 0); // Example implementation
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return new WordPosition(0, 0, 0); // Example implementation
            }

            @Override
            public boolean isTrivial() {
                return false; // Example implementation
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidRange() {
        new Block(scheme, -1, 0, 10, 10) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return null;
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return null;
            }

            @Override
            public boolean isTrivial() {
                return false;
            }
        };
    }

    @Test
    public void testConstructorValidRange() {
        Block validBlock = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return null;
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return null;
            }

            @Override
            public boolean isTrivial() {
                return false;
            }
        };
        assertNotNull(validBlock);
    }

    @Test
    public void testCharAt() {
        char expectedChar = 'a'; // Example character
        scheme.lines[0] = "aaaaaaaaaa"; // Example line
        assertEquals(expectedChar, block.charAt(0, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(11, 0);
    }

    @Test
    public void testTextAt() {
        String expectedText = "aaaaa"; // Example text
        scheme.lines[0] = "aaaaaaaaaa"; // Example line
        assertEquals(expectedText, block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(0, 11, 0);
    }

    @Test
    public void testContainsOnlyOneWord() {
        // Assuming firstWord_Horizontally and lastWord_Horizontally return the same word position
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordTrivialBlock() {
        Block trivialBlock = new Block(scheme, 0, 0, 0, 0) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return null;
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return null;
            }

            @Override
            public boolean isTrivial() {
                return true;
            }
        };
        trivialBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expectedString = "Block(0,0, 10,10):\n ####################\n # aaaaaaaaaa #\n ####################";
        scheme.lines[0] = "aaaaaaaaaaa"; // Example line
        assertEquals(expectedString, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        String expectedLine = "aaaaaaaaaa"; // Example line
        scheme.lines[0] = expectedLine;
        assertEquals(expectedLine, block.getUpperLine());
    }
}
```