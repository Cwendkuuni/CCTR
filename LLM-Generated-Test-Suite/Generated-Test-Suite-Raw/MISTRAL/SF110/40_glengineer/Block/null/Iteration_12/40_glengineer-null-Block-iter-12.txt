```java
package glengineer.blocks;

import glengineer.positions.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BlockTest {

    private Scheme scheme;
    private Block block;

    @Before
    public void setUp() {
        // Assuming Scheme and CharPosition are properly defined elsewhere
        scheme = new Scheme(0, 0, 10, 10); // Example initialization
        block = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Implementation not needed for this test
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Implementation not needed for this test
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Implementation not needed for this test
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidRange() {
        new Block(scheme, -1, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
    }

    @Test
    public void testConstructorValidRange() {
        Block validBlock = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
        assertNotNull(validBlock);
    }

    @Test
    public void testCharAt() {
        char expectedChar = scheme.lines[0].charAt(0);
        assertEquals(expectedChar, block.charAt(0, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(10, 10);
    }

    @Test
    public void testTextAt() {
        String expectedText = scheme.lines[0].substring(0, 5);
        assertEquals(expectedText, block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(0, 10, 0);
    }

    @Test
    public void testContainsOnlyOneWord() {
        // Assuming firstWord_Horizontally and lastWord_Horizontally are properly defined
        // and return the same word position for this test
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordTrivialBlock() {
        Block trivialBlock = new Block(scheme, 0, 0, 0, 0) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
        trivialBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expectedString = "Block(0,0, 5,5):\n" +
                                " ##########\n" +
                                " # " + scheme.textAt(0, 5, 0) + " #\n" +
                                " ##########";
        assertEquals(expectedString, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        String expectedLine = scheme.textAt(0, 5, 0);
        assertEquals(expectedLine, block.getUpperLine());
    }
}
```