```java
package glengineer.blocks;

import glengineer.positions.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BlockTest {

    private Scheme scheme;
    private Block block;

    @Before
    public void setUp() {
        // Assuming Scheme and CharPosition are properly defined elsewhere
        scheme = new Scheme(10, 10); // Example dimensions
        block = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Mock implementation
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidRange() {
        new Block(scheme, -1, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Mock implementation
            }
        };
    }

    @Test
    public void testConstructorValidRange() {
        Block validBlock = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Mock implementation
            }
        };
        assertNotNull(validBlock);
    }

    @Test
    public void testCharAt() {
        // Assuming scheme.lines is properly initialized
        scheme.lines = new String[]{"abcdefghij", "klmnopqrst", "uvwxyzabcd"};
        assertEquals('a', block.charAt(0, 0));
        assertEquals('f', block.charAt(5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(10, 0);
    }

    @Test
    public void testTextAt() {
        // Assuming scheme.lines is properly initialized
        scheme.lines = new String[]{"abcdefghij", "klmnopqrst", "uvwxyzabcd"};
        assertEquals("abcde", block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(0, 10, 0);
    }

    @Test
    public void testContainsOnlyOneWord() {
        // Assuming firstWord_Horizontally and lastWord_Horizontally are properly implemented
        // Mocking the behavior for the test
        Block mockBlock = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return new HWordPosition(0, 0, 5, 0); // Mock implementation
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return new HWordPosition(0, 0, 5, 0); // Mock implementation
            }
        };
        assertTrue(mockBlock.containsOnlyOneWord());
    }

    @Test
    public void testToString() {
        // Assuming scheme.lines is properly initialized
        scheme.lines = new String[]{"abcdefghij", "klmnopqrst", "uvwxyzabcd"};
        String expected = "Block(0,0, 5,5):\n ##########\n # abcde #\n # abcde #\n # abcde #\n ##########";
        assertEquals(expected, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        // Assuming scheme.lines is properly initialized
        scheme.lines = new String[]{"abcdefghij", "klmnopqrst", "uvwxyzabcd"};
        assertEquals("abcde", block.getUpperLine());
    }
}
```