```java
package glengineer.blocks;

import glengineer.positions.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BlockTest {

    private Scheme scheme;
    private Block block;

    @Before
    public void setUp() {
        scheme = new Scheme(0, 0, 10, 10); // Assuming Scheme has a constructor like this
        block = new Block(scheme, 1, 1, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null; // Mock implementation
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return new HWordPosition(1, 1); // Mock implementation
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return new WordPosition(1, 1); // Mock implementation
            }

            @Override
            public boolean isTrivial() {
                return false; // Mock implementation
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidRange() {
        new Block(scheme, -1, 1, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return null;
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return null;
            }

            @Override
            public boolean isTrivial() {
                return false;
            }
        };
    }

    @Test
    public void testCharAt() {
        char expectedChar = 'a'; // Assuming 'a' is at position (1, 1) in the scheme
        assertEquals(expectedChar, block.charAt(1, 1));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(100, 100);
    }

    @Test
    public void testTextAt() {
        String expectedText = "abcde"; // Assuming "abcde" is the text from (1, 1) to (5, 1) in the scheme
        assertEquals(expectedText, block.textAt(1, 5, 1));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(100, 105, 100);
    }

    @Test
    public void testContainsOnlyOneWord() {
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordTrivialBlock() {
        Block trivialBlock = new Block(scheme, 1, 1, 1, 1) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return null;
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return null;
            }

            @Override
            public boolean isTrivial() {
                return true;
            }
        };
        trivialBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expectedString = "Block(1,1, 5,5):\n # ##########\n # abcde #\n # abcde #\n # abcde #\n # abcde #\n # abcde #\n # ##########";
        assertEquals(expectedString, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        String expectedLine = "abcde"; // Assuming "abcde" is the text from (1, 1) to (5, 1) in the scheme
        assertEquals(expectedLine, block.getUpperLine());
    }
}
```