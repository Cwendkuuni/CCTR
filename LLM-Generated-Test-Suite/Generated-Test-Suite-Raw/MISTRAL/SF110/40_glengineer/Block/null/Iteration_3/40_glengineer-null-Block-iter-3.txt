```java
package glengineer.blocks;

import glengineer.positions.CharPosition;
import glengineer.positions.Scheme;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class BlockTest {

    @Mock
    private Scheme scheme;

    private Block block;

    @Before
    public void setUp() {
        when(scheme.x2).thenReturn(10);
        when(scheme.y2).thenReturn(10);
        block = new Block(scheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidCoordinates() {
        new Block(scheme, -1, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
    }

    @Test
    public void testConstructorWithCharPosition() {
        CharPosition p1 = new CharPosition(0, 0);
        CharPosition p2 = new CharPosition(5, 5);
        Block block = new Block(scheme, p1, p2) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
        assertEquals(0, block.x1);
        assertEquals(0, block.y1);
        assertEquals(5, block.x2);
        assertEquals(5, block.y2);
    }

    @Test
    public void testConstructorWithScheme() {
        Block block = new Block(scheme) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
        assertEquals(0, block.x1);
        assertEquals(0, block.y1);
        assertEquals(10, block.x2);
        assertEquals(10, block.y2);
    }

    @Test
    public void testCharAt() {
        when(scheme.lines).thenReturn(new String[]{"abcdefghij"});
        assertEquals('a', block.charAt(0, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        when(scheme.lines).thenReturn(new String[]{"abcdefghij"});
        block.charAt(11, 0);
    }

    @Test
    public void testTextAt() {
        when(scheme.lines).thenReturn(new String[]{"abcdefghij"});
        assertEquals("abcde", block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        when(scheme.lines).thenReturn(new String[]{"abcdefghij"});
        block.textAt(0, 11, 0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordTrivialBlock() {
        block.containsOnlyOneWord();
    }

    @Test
    public void testGetUpperLine() {
        when(scheme.lines).thenReturn(new String[]{"abcdefghij"});
        assertEquals("abcde", block.getUpperLine());
    }

    @Test
    public void testToString() {
        when(scheme.lines).thenReturn(new String[]{"abcdefghij"});
        String expected = "Block(0,0, 5,5):\n ##########\n # abcde #\n ##########";
        assertEquals(expected, block.toString());
    }
}
```