```java
package glengineer.blocks;

import glengineer.positions.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BlockTest {

    private Scheme scheme;
    private Block block;

    @Before
    public void setUp() {
        scheme = new Scheme(0, 0, 10, 10); // Assuming Scheme constructor takes x1, y1, x2, y2
        block = new Block(scheme, 1, 1, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidRange() {
        new Block(scheme, -1, 1, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
    }

    @Test
    public void testConstructorValidRange() {
        Block validBlock = new Block(scheme, 1, 1, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
        assertNotNull(validBlock);
    }

    @Test
    public void testCharAt() {
        // Assuming scheme.lines is properly initialized
        assertEquals('a', block.charAt(1, 1)); // Adjust based on actual scheme content
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(10, 10);
    }

    @Test
    public void testTextAt() {
        // Assuming scheme.lines is properly initialized
        assertEquals("abcd", block.textAt(1, 5, 1)); // Adjust based on actual scheme content
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(1, 10, 10);
    }

    @Test
    public void testContainsOnlyOneWord() {
        // Assuming firstWord_Horizontally and lastWord_Horizontally are properly implemented
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordEmptyBlock() {
        Block emptyBlock = new Block(scheme, 1, 1, 1, 1) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }
        };
        emptyBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expected = "Block(1,1, 5,5):\n" +
                         " ##########\n" +
                         " # abcd #\n" +
                         " # abcd #\n" +
                         " # abcd #\n" +
                         " # abcd #\n" +
                         " ##########"; // Adjust based on actual scheme content
        assertEquals(expected, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        // Assuming scheme.lines is properly initialized
        assertEquals("abcd", block.getUpperLine()); // Adjust based on actual scheme content
    }
}
```