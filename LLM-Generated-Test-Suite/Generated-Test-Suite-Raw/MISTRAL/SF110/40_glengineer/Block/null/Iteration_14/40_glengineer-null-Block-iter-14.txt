```java
package glengineer.blocks;

import glengineer.positions.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class BlockTest {

    @Mock
    private Scheme mockScheme;

    private Block block;

    @Before
    public void setUp() {
        when(mockScheme.x2).thenReturn(10);
        when(mockScheme.y2).thenReturn(10);
        when(mockScheme.lines).thenReturn(new String[]{"0123456789", "0123456789", "0123456789"});
        block = new Block(mockScheme, 0, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return new HWordPosition(0, 0);
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return new HWordPosition(0, 0);
            }

            @Override
            public boolean isTrivial() {
                return false;
            }
        };
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorInvalidRange() {
        new Block(mockScheme, -1, 0, 5, 5) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return null;
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return null;
            }

            @Override
            public boolean isTrivial() {
                return false;
            }
        };
    }

    @Test
    public void testCharAt() {
        assertEquals('0', block.charAt(0, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(10, 10);
    }

    @Test
    public void testTextAt() {
        assertEquals("01234", block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(0, 10, 0);
    }

    @Test
    public void testContainsOnlyOneWord() {
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordEmptyBlock() {
        Block emptyBlock = new Block(mockScheme, 0, 0, 0, 0) {
            @Override
            public Block subblock(int p0, int p1, int p2, int p3) {
                return null;
            }

            @Override
            public List<Block> extractSequentialSubblocks() {
                return null;
            }

            @Override
            public List<Block> extractParallelSubblocks() {
                return null;
            }

            @Override
            public HWordPosition firstWord_Horizontally() {
                return new HWordPosition(0, 0);
            }

            @Override
            public WordPosition lastWord_Horizontally() {
                return new HWordPosition(0, 0);
            }

            @Override
            public boolean isTrivial() {
                return false;
            }
        };
        emptyBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expected = "Block(0,0, 5,5):\n" +
                " ##########\n" +
                " # 01234 #\n" +
                " # 01234 #\n" +
                " # 01234 #\n" +
                " ##########";
        assertEquals(expected, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        assertEquals("01234", block.getUpperLine());
    }
}
```