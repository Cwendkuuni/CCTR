```java
package net.kencochrane.a4j.DAO;

import net.kencochrane.a4j.beans.*;
import net.kencochrane.a4j.file.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ProductTest {

    private Product product;
    private FileUtil fileUtil;
    private Search search;

    @Before
    public void setUp() {
        product = new Product();
        fileUtil = mock(FileUtil.class);
        search = mock(Search.class);
    }

    @Test
    public void testGetProduct_NullFileInputStream() {
        String asin = "testAsin";
        String offer = "testOffer";
        String page = "testPage";

        when(fileUtil.fetchASINFile(asin, "heavy", offer, page)).thenReturn(null);

        FullProduct result = product.getProduct(asin, offer, page);

        assertNull(result);
    }

    @Test
    public void testGetProduct_ValidFileInputStream() throws Exception {
        String asin = "testAsin";
        String offer = "testOffer";
        String page = "testPage";

        FileInputStream fileIn = mock(FileInputStream.class);
        when(fileUtil.fetchASINFile(asin, "heavy", offer, page)).thenReturn(fileIn);

        JOXBeanInputStream joxIn = mock(JOXBeanInputStream.class);
        whenNew(JOXBeanInputStream.class).withArguments((InputStream) fileIn).thenReturn(joxIn);

        ProductInfo productInfoBean = mock(ProductInfo.class);
        when(joxIn.readObject(ProductInfo.class)).thenReturn(productInfoBean);

        ProductDetails[] productDetailsArray = new ProductDetails[1];
        ProductDetails productDetails = mock(ProductDetails.class);
        productDetailsArray[0] = productDetails;
        when(productInfoBean.getDetails()).thenReturn(productDetailsArray);

        FullProduct fullProduct = product.getProduct(asin, offer, page);

        assertNotNull(fullProduct);
        assertEquals(productDetails, fullProduct.getDetails());

        verify(fileIn).close();
        verify(joxIn).close();
    }

    @Test
    public void testGetProduct_WithAccessories() throws Exception {
        String asin = "testAsin";
        String offer = "testOffer";
        String page = "testPage";

        FileInputStream fileIn = mock(FileInputStream.class);
        when(fileUtil.fetchASINFile(asin, "heavy", offer, page)).thenReturn(fileIn);

        JOXBeanInputStream joxIn = mock(JOXBeanInputStream.class);
        whenNew(JOXBeanInputStream.class).withArguments((InputStream) fileIn).thenReturn(joxIn);

        ProductInfo productInfoBean = mock(ProductInfo.class);
        when(joxIn.readObject(ProductInfo.class)).thenReturn(productInfoBean);

        ProductDetails[] productDetailsArray = new ProductDetails[1];
        ProductDetails productDetails = mock(ProductDetails.class);
        productDetailsArray[0] = productDetails;
        when(productInfoBean.getDetails()).thenReturn(productDetailsArray);

        Accessories accessories = mock(Accessories.class);
        when(productDetails.getAccessories()).thenReturn(accessories);

        ArrayList<String> accessoryArray = new ArrayList<>();
        accessoryArray.add("accessory1");
        when(accessories.getAccessoryArray()).thenReturn(accessoryArray);

        FileInputStream accessoryFileIn = mock(FileInputStream.class);
        when(fileUtil.fetchAccessories(asin, accessoryArray)).thenReturn(accessoryFileIn);

        JOXBeanInputStream accessoryJoxIn = mock(JOXBeanInputStream.class);
        whenNew(JOXBeanInputStream.class).withArguments((InputStream) accessoryFileIn).thenReturn(accessoryJoxIn);

        ProductInfo accessoryProductInfoBean = mock(ProductInfo.class);
        when(accessoryJoxIn.readObject(ProductInfo.class)).thenReturn(accessoryProductInfoBean);

        ArrayList<ProductDetails> detailsArray = new ArrayList<>();
        ProductDetails accessoryProductDetails = mock(ProductDetails.class);
        detailsArray.add(accessoryProductDetails);
        when(accessoryProductInfoBean.getProductsArrayList()).thenReturn(detailsArray);

        FullProduct fullProduct = product.getProduct(asin, offer, page);

        assertNotNull(fullProduct);
        assertEquals(productDetails, fullProduct.getDetails());
        assertEquals(1, fullProduct.getAccessories().size());

        verify(fileIn).close();
        verify(joxIn).close();
        verify(accessoryFileIn).close();
        verify(accessoryJoxIn).close();
    }

    @Test
    public void testGetProduct_WithSimilarItems() throws Exception {
        String asin = "testAsin";
        String offer = "testOffer";
        String page = "testPage";

        FileInputStream fileIn = mock(FileInputStream.class);
        when(fileUtil.fetchASINFile(asin, "heavy", offer, page)).thenReturn(fileIn);

        JOXBeanInputStream joxIn = mock(JOXBeanInputStream.class);
        whenNew(JOXBeanInputStream.class).withArguments((InputStream) fileIn).thenReturn(joxIn);

        ProductInfo productInfoBean = mock(ProductInfo.class);
        when(joxIn.readObject(ProductInfo.class)).thenReturn(productInfoBean);

        ProductDetails[] productDetailsArray = new ProductDetails[1];
        ProductDetails productDetails = mock(ProductDetails.class);
        productDetailsArray[0] = productDetails;
        when(productInfoBean.getDetails()).thenReturn(productDetailsArray);

        ProductInfo similarProductInfoBean = mock(ProductInfo.class);
        when(search.SimilaritesSearch(asin, "1")).thenReturn(similarProductInfoBean);

        ArrayList<ProductDetails> detailsArray = new ArrayList<>();
        ProductDetails similarProductDetails = mock(ProductDetails.class);
        detailsArray.add(similarProductDetails);
        when(similarProductInfoBean.getProductsArrayList()).thenReturn(detailsArray);

        FullProduct fullProduct = product.getProduct(asin, offer, page);

        assertNotNull(fullProduct);
        assertEquals(productDetails, fullProduct.getDetails());
        assertEquals(1, fullProduct.getSimilarItems().size());

        verify(fileIn).close();
        verify(joxIn).close();
    }

    @Test
    public void testGetProduct_ExceptionHandling() {
        String asin = "testAsin";
        String offer = "testOffer";
        String page = "testPage";

        when(fileUtil.fetchASINFile(asin, "heavy", offer, page)).thenThrow(new RuntimeException("Test Exception"));

        FullProduct result = product.getProduct(asin, offer, page);

        assertNotNull(result);
    }
}
```