```java
package fi.vtt.noen.mfw.bundle.probe.shared;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ProbeInformationTest {

    private ProbeInformation probeInfo;

    @Before
    public void setUp() {
        probeInfo = new ProbeInformation("targetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 5, "xmlRpcUrl");
    }

    @Test
    public void testGetTargetType() {
        assertEquals("targetType", probeInfo.getTargetType());
    }

    @Test
    public void testGetBmName() {
        assertEquals("bmName", probeInfo.getBmName());
    }

    @Test
    public void testGetProbeName() {
        assertEquals("probeDescription", probeInfo.getProbeName());
    }

    @Test
    public void testGetTargetName() {
        assertEquals("targetName", probeInfo.getTargetName());
    }

    @Test
    public void testGetBmClass() {
        assertEquals("bmClass", probeInfo.getBmClass());
    }

    @Test
    public void testGetBmDescription() {
        assertEquals("bmDescription", probeInfo.getBmDescription());
    }

    @Test
    public void testGetPrecision() {
        assertEquals(5, probeInfo.getPrecision());
    }

    @Test
    public void testGetMeasureURI() {
        String expectedURI = Const.createMeasureURI("targetType", "targetName", "bmClass", "bmName");
        assertEquals(expectedURI, probeInfo.getMeasureURI());
    }

    @Test
    public void testGetXmlRpcUrl() {
        assertEquals("xmlRpcUrl", probeInfo.getXmlRpcUrl());
    }

    @Test
    public void testToString() {
        String expectedString = "ProbeInformation{targetName='targetName', targetType='targetType', bmClass='bmClass', bmName='bmName', bmDescription='bmDescription', probeDescription='probeDescription', precision=5}";
        assertEquals(expectedString, probeInfo.toString());
    }

    @Test
    public void testEquals() {
        ProbeInformation other = new ProbeInformation("targetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 5, "xmlRpcUrl");
        assertTrue(probeInfo.equals(other));
    }

    @Test
    public void testEqualsDifferentPrecision() {
        ProbeInformation other = new ProbeInformation("targetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 6, "xmlRpcUrl");
        assertFalse(probeInfo.equals(other));
    }

    @Test
    public void testEqualsDifferentTargetName() {
        ProbeInformation other = new ProbeInformation("differentTargetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 5, "xmlRpcUrl");
        assertFalse(probeInfo.equals(other));
    }

    @Test
    public void testHashCode() {
        ProbeInformation other = new ProbeInformation("targetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 5, "xmlRpcUrl");
        assertEquals(probeInfo.hashCode(), other.hashCode());
    }

    @Test
    public void testHashCodeDifferentPrecision() {
        ProbeInformation other = new ProbeInformation("targetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 6, "xmlRpcUrl");
        assertNotEquals(probeInfo.hashCode(), other.hashCode());
    }

    @Test
    public void testHashCodeDifferentTargetName() {
        ProbeInformation other = new ProbeInformation("differentTargetName", "targetType", "bmClass", "bmName", "bmDescription", "probeDescription", 5, "xmlRpcUrl");
        assertNotEquals(probeInfo.hashCode(), other.hashCode());
    }
}
```