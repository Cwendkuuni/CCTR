```java
package fi.vtt.noen.mfw.bundle.probe.shared;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ProbeInformationTest {

    private ProbeInformation probeInformation;

    @Before
    public void setUp() {
        probeInformation = new ProbeInformation(
                "targetName",
                "targetType",
                "bmClass",
                "bmName",
                "bmDescription",
                "probeDescription",
                5,
                "xmlRpcUrl"
        );
    }

    @Test
    public void testGetTargetType() {
        assertEquals("targetType", probeInformation.getTargetType());
    }

    @Test
    public void testGetBmName() {
        assertEquals("bmName", probeInformation.getBmName());
    }

    @Test
    public void testGetProbeName() {
        assertEquals("probeDescription", probeInformation.getProbeName());
    }

    @Test
    public void testGetTargetName() {
        assertEquals("targetName", probeInformation.getTargetName());
    }

    @Test
    public void testGetBmClass() {
        assertEquals("bmClass", probeInformation.getBmClass());
    }

    @Test
    public void testGetBmDescription() {
        assertEquals("bmDescription", probeInformation.getBmDescription());
    }

    @Test
    public void testGetPrecision() {
        assertEquals(5, probeInformation.getPrecision());
    }

    @Test
    public void testGetMeasureURI() {
        String expectedURI = Const.createMeasureURI("targetType", "targetName", "bmClass", "bmName");
        assertEquals(expectedURI, probeInformation.getMeasureURI());
    }

    @Test
    public void testGetXmlRpcUrl() {
        assertEquals("xmlRpcUrl", probeInformation.getXmlRpcUrl());
    }

    @Test
    public void testToString() {
        String expectedString = "ProbeInformation{targetName='targetName', targetType='targetType', bmClass='bmClass', bmName='bmName', bmDescription='bmDescription', probeDescription='probeDescription', precision=5}";
        assertEquals(expectedString, probeInformation.toString());
    }

    @Test
    public void testEquals() {
        ProbeInformation other = new ProbeInformation(
                "targetName",
                "targetType",
                "bmClass",
                "bmName",
                "bmDescription",
                "probeDescription",
                5,
                "xmlRpcUrl"
        );
        assertTrue(probeInformation.equals(other));
    }

    @Test
    public void testEqualsDifferentPrecision() {
        ProbeInformation other = new ProbeInformation(
                "targetName",
                "targetType",
                "bmClass",
                "bmName",
                "bmDescription",
                "probeDescription",
                10,
                "xmlRpcUrl"
        );
        assertFalse(probeInformation.equals(other));
    }

    @Test
    public void testEqualsDifferentTargetName() {
        ProbeInformation other = new ProbeInformation(
                "differentTargetName",
                "targetType",
                "bmClass",
                "bmName",
                "bmDescription",
                "probeDescription",
                5,
                "xmlRpcUrl"
        );
        assertFalse(probeInformation.equals(other));
    }

    @Test
    public void testHashCode() {
        ProbeInformation other = new ProbeInformation(
                "targetName",
                "targetType",
                "bmClass",
                "bmName",
                "bmDescription",
                "probeDescription",
                5,
                "xmlRpcUrl"
        );
        assertEquals(probeInformation.hashCode(), other.hashCode());
    }
}
```