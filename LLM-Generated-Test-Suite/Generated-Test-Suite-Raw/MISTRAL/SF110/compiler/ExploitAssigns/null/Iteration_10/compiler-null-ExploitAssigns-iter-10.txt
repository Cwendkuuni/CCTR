```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

public class ExploitAssignsTest {

    private ExploitAssigns exploitAssigns;

    @Before
    public void setUp() {
        exploitAssigns = new ExploitAssigns();
    }

    @Test
    public void testOptimizeSubtree() {
        Node subtree = new Node(Token.BLOCK);
        Node assign1 = new Node(Token.ASSIGN);
        Node name1 = new Node(Token.NAME, "x");
        Node number1 = new Node(Token.NUMBER, "3");
        assign1.addChildToFront(name1);
        assign1.addChildToBack(number1);
        subtree.addChildToFront(assign1);

        Node assign2 = new Node(Token.ASSIGN);
        Node name2 = new Node(Token.NAME, "y");
        Node name3 = new Node(Token.NAME, "x");
        assign2.addChildToFront(name2);
        assign2.addChildToBack(name3);
        subtree.addChildToBack(assign2);

        Node optimizedSubtree = exploitAssigns.optimizeSubtree(subtree);
        assertEquals(subtree, optimizedSubtree);
        // Add more assertions to verify the optimization
    }

    @Test
    public void testCollapseAssign() {
        Node assign = new Node(Token.ASSIGN);
        Node name1 = new Node(Token.NAME, "x");
        Node number1 = new Node(Token.NUMBER, "3");
        assign.addChildToFront(name1);
        assign.addChildToBack(number1);

        Node expr = new Node(Token.EXPR_RESULT);
        expr.addChildToFront(assign);

        Node exprParent = new Node(Token.BLOCK);
        exprParent.addChildToFront(expr);

        exploitAssigns.collapseAssign(assign, expr, exprParent);
        // Add assertions to verify the collapse
    }

    @Test
    public void testIsCollapsibleValue() {
        Node nameNode = new Node(Token.NAME, "x");
        assertTrue(exploitAssigns.isCollapsibleValue(nameNode, true));

        Node getPropNode = new Node(Token.GETPROP);
        Node thisNode = new Node(Token.THIS);
        getPropNode.addChildToFront(thisNode);
        assertTrue(exploitAssigns.isCollapsibleValue(getPropNode, true));

        Node numberNode = new Node(Token.NUMBER, "3");
        assertTrue(exploitAssigns.isCollapsibleValue(numberNode, false));

        Node complexNode = new Node(Token.ADD);
        assertFalse(exploitAssigns.isCollapsibleValue(complexNode, false));
    }

    @Test
    public void testCollapseAssignEqualTo() {
        Node assign = new Node(Token.ASSIGN);
        Node name1 = new Node(Token.NAME, "x");
        Node number1 = new Node(Token.NUMBER, "3");
        assign.addChildToFront(name1);
        assign.addChildToBack(number1);

        Node expr = new Node(Token.EXPR_RESULT);
        expr.addChildToFront(assign);

        Node exprParent = new Node(Token.BLOCK);
        exprParent.addChildToFront(expr);

        Node value = new Node(Token.NAME, "x");
        assertTrue(exploitAssigns.collapseAssignEqualTo(expr, exprParent, value));

        Node value2 = new Node(Token.NUMBER, "3");
        assertTrue(exploitAssigns.collapseAssignEqualTo(expr, exprParent, value2));

        Node value3 = new Node(Token.NAME, "y");
        assertFalse(exploitAssigns.collapseAssignEqualTo(expr, exprParent, value3));
    }

    @Test
    public void testIsSafeReplacement() {
        Node node = new Node(Token.NAME, "x");
        Node replacement = new Node(Token.ASSIGN);
        Node name1 = new Node(Token.NAME, "x");
        Node number1 = new Node(Token.NUMBER, "3");
        replacement.addChildToFront(name1);
        replacement.addChildToBack(number1);

        assertTrue(exploitAssigns.isSafeReplacement(node, replacement));

        Node getPropNode = new Node(Token.GETPROP);
        Node thisNode = new Node(Token.THIS);
        getPropNode.addChildToFront(thisNode);
        assertTrue(exploitAssigns.isSafeReplacement(getPropNode, replacement));

        Node complexNode = new Node(Token.ADD);
        assertFalse(exploitAssigns.isSafeReplacement(complexNode, replacement));
    }

    @Test
    public void testIsNameAssignedTo() {
        Node assign = new Node(Token.ASSIGN);
        Node name1 = new Node(Token.NAME, "x");
        Node number1 = new Node(Token.NUMBER, "3");
        assign.addChildToFront(name1);
        assign.addChildToBack(number1);

        assertTrue(exploitAssigns.isNameAssignedTo("x", assign));
        assertFalse(exploitAssigns.isNameAssignedTo("y", assign));

        Node block = new Node(Token.BLOCK);
        block.addChildToFront(assign);
        assertTrue(exploitAssigns.isNameAssignedTo("x", block));
        assertFalse(exploitAssigns.isNameAssignedTo("y", block));
    }
}
```