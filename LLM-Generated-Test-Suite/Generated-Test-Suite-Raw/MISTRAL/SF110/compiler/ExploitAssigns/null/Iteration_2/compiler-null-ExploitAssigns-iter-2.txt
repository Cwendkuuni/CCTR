```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

public class ExploitAssignsTest {

    private ExploitAssigns exploitAssigns;

    @Before
    public void setUp() {
        exploitAssigns = new ExploitAssigns();
    }

    @Test
    public void testOptimizeSubtree() {
        Node subtree = new Node(Token.BLOCK);
        Node assign = new Node(Token.ASSIGN);
        Node name = new Node(Token.NAME, "x");
        Node number = new Node(Token.NUMBER, "3");
        assign.addChildToFront(name);
        assign.addChildToBack(number);
        subtree.addChildToFront(assign);

        Node result = exploitAssigns.optimizeSubtree(subtree);
        assertNotNull(result);
        assertEquals(1, result.getChildCount());
    }

    @Test
    public void testCollapseAssign() {
        Node assign = new Node(Token.ASSIGN);
        Node name = new Node(Token.NAME, "x");
        Node number = new Node(Token.NUMBER, "3");
        assign.addChildToFront(name);
        assign.addChildToBack(number);

        Node expr = new Node(Token.EXPR_RESULT);
        expr.addChildToFront(assign);

        Node exprParent = new Node(Token.BLOCK);
        exprParent.addChildToFront(expr);

        exploitAssigns.collapseAssign(assign, expr, exprParent);
        assertEquals(1, exprParent.getChildCount());
    }

    @Test
    public void testIsCollapsibleValue() {
        Node nameNode = new Node(Token.NAME, "x");
        assertTrue(exploitAssigns.isCollapsibleValue(nameNode, true));

        Node getPropNode = new Node(Token.GETPROP);
        getPropNode.addChildToFront(new Node(Token.THIS));
        assertTrue(exploitAssigns.isCollapsibleValue(getPropNode, true));

        Node numberNode = new Node(Token.NUMBER, "3");
        assertTrue(exploitAssigns.isCollapsibleValue(numberNode, false));
    }

    @Test
    public void testCollapseAssignEqualTo() {
        Node assign = new Node(Token.ASSIGN);
        Node name = new Node(Token.NAME, "x");
        Node number = new Node(Token.NUMBER, "3");
        assign.addChildToFront(name);
        assign.addChildToBack(number);

        Node expr = new Node(Token.EXPR_RESULT);
        expr.addChildToFront(assign);

        Node exprParent = new Node(Token.BLOCK);
        exprParent.addChildToFront(expr);

        Node next = new Node(Token.NAME, "x");
        exprParent.addChildToBack(next);

        assertTrue(exploitAssigns.collapseAssignEqualTo(expr, exprParent, name));
    }

    @Test
    public void testIsSafeReplacement() {
        Node node = new Node(Token.NAME, "x");
        Node replacement = new Node(Token.ASSIGN);
        replacement.addChildToFront(new Node(Token.NAME, "y"));
        replacement.addChildToBack(new Node(Token.NUMBER, "3"));

        assertTrue(exploitAssigns.isSafeReplacement(node, replacement));
    }

    @Test
    public void testIsNameAssignedTo() {
        Node node = new Node(Token.ASSIGN);
        Node nameNode = new Node(Token.NAME, "x");
        Node numberNode = new Node(Token.NUMBER, "3");
        node.addChildToFront(nameNode);
        node.addChildToBack(numberNode);

        assertTrue(exploitAssigns.isNameAssignedTo("x", node));
        assertFalse(exploitAssigns.isNameAssignedTo("y", node));
    }
}
```