```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

public class ExploitAssignsTest {

    private ExploitAssigns exploitAssigns;

    @Before
    public void setUp() {
        exploitAssigns = new ExploitAssigns();
    }

    @Test
    public void testOptimizeSubtree() {
        Node subtree = createTestNode(Token.BLOCK);
        Node child1 = createTestNode(Token.EXPR_RESULT);
        Node child2 = createTestNode(Token.EXPR_RESULT);
        subtree.addChildToFront(child1);
        subtree.addChildToFront(child2);

        Node optimizedSubtree = exploitAssigns.optimizeSubtree(subtree);

        assertNotNull(optimizedSubtree);
        assertEquals(subtree, optimizedSubtree);
    }

    @Test
    public void testCollapseAssign() {
        Node assign = createTestNode(Token.ASSIGN);
        Node expr = createTestNode(Token.EXPR_RESULT);
        Node exprParent = createTestNode(Token.BLOCK);
        exprParent.addChildToFront(expr);

        exploitAssigns.collapseAssign(assign, expr, exprParent);

        // Add specific assertions based on expected behavior
    }

    @Test
    public void testIsCollapsibleValue() {
        Node value = createTestNode(Token.NAME);
        assertTrue(exploitAssigns.isCollapsibleValue(value, true));

        value = createTestNode(Token.GETPROP);
        assertFalse(exploitAssigns.isCollapsibleValue(value, true));

        value = createTestNode(Token.NUMBER);
        assertTrue(exploitAssigns.isCollapsibleValue(value, false));
    }

    @Test
    public void testCollapseAssignEqualTo() {
        Node expr = createTestNode(Token.EXPR_RESULT);
        Node exprParent = createTestNode(Token.BLOCK);
        Node value = createTestNode(Token.NAME);
        exprParent.addChildToFront(expr);

        boolean result = exploitAssigns.collapseAssignEqualTo(expr, exprParent, value);

        assertFalse(result);

        // Add more specific test cases based on expected behavior
    }

    @Test
    public void testIsSafeReplacement() {
        Node node = createTestNode(Token.NAME);
        Node replacement = createTestNode(Token.NAME);

        assertTrue(exploitAssigns.isSafeReplacement(node, replacement));

        node = createTestNode(Token.GETPROP);
        assertFalse(exploitAssigns.isSafeReplacement(node, replacement));
    }

    @Test
    public void testIsNameAssignedTo() {
        Node node = createTestNode(Token.NAME);
        node.setString("testName");
        Node parent = createTestNode(Token.ASSIGN);
        parent.addChildToFront(node);

        assertTrue(exploitAssigns.isNameAssignedTo("testName", parent));

        assertFalse(exploitAssigns.isNameAssignedTo("otherName", parent));
    }

    private Node createTestNode(int token) {
        return new Node(token);
    }
}
```