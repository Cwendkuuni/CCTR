Certainly! Below is a comprehensive JUnit 4 test suite for the `XBUSClassLoader` class. This test suite includes tests for the `getInstance` method, the `createClassLoader` method, and the `addUrls` method.

```java
package net.sf.xbus.base.core.reflection;

import net.sf.xbus.base.core.Constants;
import net.sf.xbus.base.core.trace.Trace;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Vector;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({XBUSClassLoader.class, Constants.class, Trace.class, System.class})
public class XBUSClassLoaderTest {

    @Before
    public void setUp() {
        PowerMockito.mockStatic(Constants.class);
        PowerMockito.mockStatic(Trace.class);
        PowerMockito.mockStatic(System.class);
    }

    @After
    public void tearDown() {
        XBUSClassLoader.mClassLoader = null;
    }

    @Test
    public void testGetInstance() {
        ClassLoader parent = mock(ClassLoader.class);
        XBUSClassLoader classLoader = XBUSClassLoader.getInstance(parent);
        assertNotNull(classLoader);
    }

    @Test
    public void testCreateClassLoader() {
        ClassLoader parent = mock(ClassLoader.class);
        when(Constants.XBUS_HOME).thenReturn("test/path");

        XBUSClassLoader classLoader = XBUSClassLoader.createClassLoader(parent);
        assertNotNull(classLoader);
    }

    @Test
    public void testCreateClassLoaderWithNullXBUS_HOME() {
        ClassLoader parent = mock(ClassLoader.class);
        when(Constants.XBUS_HOME).thenReturn(null);

        try {
            XBUSClassLoader.createClassLoader(parent);
            fail("Expected System.exit(1) to be called");
        } catch (Exception e) {
            verifyStatic(Trace.class);
            Trace.error("XBUS_HOME has not been set!");
            verifyStatic(System.class);
            System.exit(1);
        }
    }

    @Test
    public void testAddUrls() {
        Vector<URL> urls = new Vector<>();
        File mockFile = mock(File.class);
        File[] mockFiles = {mockFile};

        when(mockFile.isFile()).thenReturn(true);
        when(mockFile.getName()).thenReturn("test.jar");
        try {
            when(mockFile.toURL()).thenReturn(new URL("file://test.jar"));
        } catch (MalformedURLException e) {
            fail("Unexpected MalformedURLException");
        }

        when(mockFile.listFiles()).thenReturn(mockFiles);

        XBUSClassLoader.addUrls(urls, "test/path");
        assertEquals(1, urls.size());
    }

    @Test
    public void testAddUrlsWithMalformedURLException() {
        Vector<URL> urls = new Vector<>();
        File mockFile = mock(File.class);
        File[] mockFiles = {mockFile};

        when(mockFile.isFile()).thenReturn(true);
        when(mockFile.getName()).thenReturn("test.jar");
        try {
            when(mockFile.toURL()).thenThrow(new MalformedURLException());
        } catch (MalformedURLException e) {
            fail("Unexpected MalformedURLException");
        }

        when(mockFile.listFiles()).thenReturn(mockFiles);

        try {
            XBUSClassLoader.addUrls(urls, "test/path");
            fail("Expected System.exit(1) to be called");
        } catch (Exception e) {
            verifyStatic(Trace.class);
            Trace.error(any(MalformedURLException.class));
            verifyStatic(System.class);
            System.exit(1);
        }
    }
}
```

This test suite uses JUnit 4 along with PowerMockito to mock static methods and classes. It includes tests for the following scenarios:

1. Testing the `getInstance` method to ensure it returns a non-null `XBUSClassLoader`.
2. Testing the `createClassLoader` method to ensure it returns a non-null `XBUSClassLoader` when `Constants.XBUS_HOME` is set.
3. Testing the `createClassLoader` method to ensure it handles the case where `Constants.XBUS_HOME` is null.
4. Testing the `addUrls` method to ensure it correctly adds URLs to the vector.
5. Testing the `addUrls` method to ensure it handles `MalformedURLException` correctly.

Make sure to include the necessary dependencies for JUnit 4, Mockito, and PowerMock in your project to run these tests.