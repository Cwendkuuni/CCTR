```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.xbus.base.core.MessageHandler;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance("testMessages");
    }

    @Test
    public void testGetMessage() {
        List<String> params = new ArrayList<>();
        params.add("param1");
        params.add("param2");

        // Assuming "testKey" exists in the message file and has placeholders $1$ and $2$
        String result = messageHandler.getMessage("testKey", params);
        assertNotNull(result);
        assertTrue(result.contains("param1"));
        assertTrue(result.contains("param2"));

        // Testing with a non-existent key
        String nonExistentKeyResult = messageHandler.getMessage("nonExistentKey", params);
        assertEquals("Key: nonExistentKey not found in message file", nonExistentKeyResult);
    }

    @Test
    public void testGetMessageOptional() {
        List<String> params = new ArrayList<>();
        params.add("param1");
        params.add("param2");

        // Assuming "testKey" exists in the message file and has placeholders $1$ and $2$
        String result = messageHandler.getMessageOptional("testKey", params);
        assertNotNull(result);
        assertTrue(result.contains("param1"));
        assertTrue(result.contains("param2"));

        // Testing with a non-existent key
        String nonExistentKeyResult = messageHandler.getMessageOptional("nonExistentKey", params);
        assertNull(nonExistentKeyResult);
    }

    @Test
    public void testGetInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("testMessages");
        MessageHandler instance2 = MessageHandler.getInstance("testMessages");

        assertSame(instance1, instance2);
    }

    @Test
    public void testAddMessages() {
        // This test assumes the existence of a test message file in the specified directory
        // and that the file contains a key "testKey" with a value "Test message with $1$ and $2$"

        List<String> params = new ArrayList<>();
        params.add("param1");
        params.add("param2");

        String result = messageHandler.getMessage("testKey", params);
        assertNotNull(result);
        assertEquals("Test message with param1 and param2", result);
    }

    @Test
    public void testMessagesFilter() {
        MessageHandler.MessagesFilter filter = new MessageHandler.MessagesFilter("test", "_en_US.properties");

        assertTrue(filter.accept(null, "test_en_US.properties"));
        assertFalse(filter.accept(null, "wrong_en_US.properties"));
        assertFalse(filter.accept(null, "test_fr_FR.properties"));
    }
}
```