```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance("testBasename");
    }

    @Test
    public void testGetMessage_KeyFound() {
        // Assuming there is a message file with key "testKey" and value "testMessage"
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessage("testKey", params);
        assertEquals("testMessage", result);
    }

    @Test
    public void testGetMessage_KeyNotFound() {
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessage("nonExistentKey", params);
        assertEquals("Key: nonExistentKey not found in message file", result);
    }

    @Test
    public void testGetMessageOptional_KeyFound() {
        // Assuming there is a message file with key "testKey" and value "testMessage"
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessageOptional("testKey", params);
        assertEquals("testMessage", result);
    }

    @Test
    public void testGetMessageOptional_KeyNotFound() {
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessageOptional("nonExistentKey", params);
        assertNull(result);
    }

    @Test
    public void testGetMessageOptional_WithParams() {
        // Assuming there is a message file with key "testKey" and value "Hello $1$"
        List<String> params = new ArrayList<>();
        params.add("World");
        String result = messageHandler.getMessageOptional("testKey", params);
        assertEquals("Hello World", result);
    }

    @Test
    public void testGetInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("testBasename");
        MessageHandler instance2 = MessageHandler.getInstance("testBasename");
        assertSame(instance1, instance2);
    }

    @Test
    public void testAddMessages() {
        // This test requires a mock or a test-specific setup to verify the internal state
        // Assuming the addMessages method is called internally during instance creation
        // and it populates the mMessages Hashtable correctly.
        assertNotNull(messageHandler.getMessageOptional("testKey", null));
    }

    @Test
    public void testMessagesFilter_Accept() {
        MessagesFilter filter = new MessagesFilter("testPrefix", "_en_US.properties");
        assertTrue(filter.accept(null, "testPrefix_en_US.properties"));
    }

    @Test
    public void testMessagesFilter_Reject() {
        MessagesFilter filter = new MessagesFilter("testPrefix", "_en_US.properties");
        assertFalse(filter.accept(null, "wrongPrefix_en_US.properties"));
    }
}
```