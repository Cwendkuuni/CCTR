```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance("testBasename");
    }

    @Test
    public void testGetMessage_KeyFound() {
        // Assuming there is a key "testKey" in the message file with value "Test Message"
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessage("testKey", params);
        assertEquals("Test Message", result);
    }

    @Test
    public void testGetMessage_KeyNotFound() {
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessage("nonExistentKey", params);
        assertEquals("Key: nonExistentKey not found in message file", result);
    }

    @Test
    public void testGetMessageOptional_KeyFound() {
        // Assuming there is a key "testKey" in the message file with value "Test Message"
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessageOptional("testKey", params);
        assertEquals("Test Message", result);
    }

    @Test
    public void testGetMessageOptional_KeyNotFound() {
        List<String> params = new ArrayList<>();
        params.add("param1");
        String result = messageHandler.getMessageOptional("nonExistentKey", params);
        assertNull(result);
    }

    @Test
    public void testGetMessageOptional_WithParams() {
        // Assuming there is a key "paramKey" in the message file with value "Hello $1$"
        List<String> params = new ArrayList<>();
        params.add("World");
        String result = messageHandler.getMessageOptional("paramKey", params);
        assertEquals("Hello World", result);
    }

    @Test
    public void testGetInstance_SameInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("testBasename");
        MessageHandler instance2 = MessageHandler.getInstance("testBasename");
        assertSame(instance1, instance2);
    }

    @Test
    public void testGetInstance_DifferentInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("testBasename1");
        MessageHandler instance2 = MessageHandler.getInstance("testBasename2");
        assertNotSame(instance1, instance2);
    }

    @Test
    public void testAddMessages_FileNotFound() {
        // This test assumes that the directory and file do not exist
        MessageHandler handler = new MessageHandler("nonExistentBasename");
        // No exception should be thrown, and the system should not exit
    }

    @Test
    public void testMessagesFilter_Accept() {
        MessagesFilter filter = new MessagesFilter("testPrefix", "_en_US.properties");
        assertTrue(filter.accept(null, "testPrefix_en_US.properties"));
    }

    @Test
    public void testMessagesFilter_Reject() {
        MessagesFilter filter = new MessagesFilter("testPrefix", "_en_US.properties");
        assertFalse(filter.accept(null, "wrongPrefix_en_US.properties"));
    }
}
```