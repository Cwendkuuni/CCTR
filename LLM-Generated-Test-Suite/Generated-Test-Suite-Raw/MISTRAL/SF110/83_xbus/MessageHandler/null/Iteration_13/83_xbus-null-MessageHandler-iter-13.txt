```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance("test");
    }

    @Test
    public void testGetMessage_KeyFound() {
        // Assuming there is a key "testKey" in the message file
        String key = "testKey";
        List<String> params = new ArrayList<>();
        params.add("param1");
        params.add("param2");

        String expectedMessage = "This is a test message with param1 and param2";
        String actualMessage = messageHandler.getMessage(key, params);

        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetMessage_KeyNotFound() {
        String key = "nonExistentKey";
        List<String> params = new ArrayList<>();

        String expectedMessage = "Key: " + key + " not found in message file";
        String actualMessage = messageHandler.getMessage(key, params);

        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetMessageOptional_KeyFound() {
        // Assuming there is a key "testKey" in the message file
        String key = "testKey";
        List<String> params = new ArrayList<>();
        params.add("param1");
        params.add("param2");

        String expectedMessage = "This is a test message with param1 and param2";
        String actualMessage = messageHandler.getMessageOptional(key, params);

        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetMessageOptional_KeyNotFound() {
        String key = "nonExistentKey";
        List<String> params = new ArrayList<>();

        String actualMessage = messageHandler.getMessageOptional(key, params);

        assertNull(actualMessage);
    }

    @Test
    public void testGetMessageOptional_NullParams() {
        // Assuming there is a key "testKey" in the message file
        String key = "testKey";

        String expectedMessage = "This is a test message with $1$ and $2$";
        String actualMessage = messageHandler.getMessageOptional(key, null);

        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetInstance_SameInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("test");
        MessageHandler instance2 = MessageHandler.getInstance("test");

        assertSame(instance1, instance2);
    }

    @Test
    public void testGetInstance_DifferentInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("test1");
        MessageHandler instance2 = MessageHandler.getInstance("test2");

        assertNotSame(instance1, instance2);
    }

    @Test
    public void testAddMessages_FileNotFound() {
        // This test assumes that the directory does not contain the message file
        MessageHandler handler = new MessageHandler("nonExistentBaseName");

        // Since the constructor calls addMessages, we expect System.exit(1) to be called
        // However, we cannot directly test System.exit in a unit test, so this is more of a manual test
    }

    @Test
    public void testMessagesFilter_Accept() {
        MessagesFilter filter = new MessagesFilter("test", "_en_US.properties");

        assertTrue(filter.accept(null, "test_en_US.properties"));
    }

    @Test
    public void testMessagesFilter_Reject() {
        MessagesFilter filter = new MessagesFilter("test", "_en_US.properties");

        assertFalse(filter.accept(null, "wrong_en_US.properties"));
    }
}
```