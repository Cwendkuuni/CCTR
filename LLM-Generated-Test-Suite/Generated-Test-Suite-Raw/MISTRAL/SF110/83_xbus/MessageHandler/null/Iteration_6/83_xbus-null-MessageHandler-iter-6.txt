Certainly! Below is a comprehensive JUnit 4 test suite for the `MessageHandler` class. This test suite includes tests for all public methods and some private methods via reflection.

```java
package net.sf.xbus.base.core;

import net.sf.xbus.base.core.trace.Trace;
import net.sf.xbus.base.core.strings.XStringSupport;
import net.sf.xbus.base.core.config.Constants;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({MessageHandler.class, Trace.class, XStringSupport.class, Constants.class, File.class, FileInputStream.class})
public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() throws Exception {
        PowerMockito.mockStatic(Trace.class);
        PowerMockito.mockStatic(XStringSupport.class);
        PowerMockito.mockStatic(Constants.class);
        PowerMockito.mockStatic(File.class);
        PowerMockito.mockStatic(FileInputStream.class);

        messageHandler = MessageHandler.getInstance("test");
    }

    @Test
    public void testGetMessage() {
        List<String> params = Arrays.asList("param1", "param2");
        String key = "testKey";

        // Mocking the getMessageOptional method
        MessageHandler spyMessageHandler = spy(messageHandler);
        doReturn("testMessage").when(spyMessageHandler).getMessageOptional(key, params);

        String result = spyMessageHandler.getMessage(key, params);
        assertEquals("testMessage", result);

        // Test when messageText is null
        doReturn(null).when(spyMessageHandler).getMessageOptional(key, params);
        result = spyMessageHandler.getMessage(key, params);
        assertEquals("Key: testKey not found in message file", result);
        verify(Trace.class);
        Trace.error("Key: testKey not found in message file");
    }

    @Test
    public void testGetMessageOptional() {
        List<String> params = Arrays.asList("param1", "param2");
        String key = "testKey";

        // Mocking the mMessages Hashtable
        Hashtable<String, String> mockMessages = new Hashtable<>();
        mockMessages.put(key, "Message with $1$ and $2$");
        messageHandler.mMessages = mockMessages;

        // Mocking XStringSupport.replaceAll method
        when(XStringSupport.replaceAll(anyString(), anyString(), anyString())).thenAnswer(invocation -> {
            String text = invocation.getArgument(0);
            String placeholder = invocation.getArgument(1);
            String replacement = invocation.getArgument(2);
            return text.replace(placeholder, replacement);
        });

        String result = messageHandler.getMessageOptional(key, params);
        assertEquals("Message with param1 and param2", result);

        // Test when mMessages is null
        messageHandler.mMessages = null;
        result = messageHandler.getMessageOptional(key, params);
        assertNull(result);

        // Test when key is not found
        messageHandler.mMessages = mockMessages;
        result = messageHandler.getMessageOptional("nonExistentKey", params);
        assertNull(result);
    }

    @Test
    public void testGetInstance() {
        MessageHandler instance1 = MessageHandler.getInstance("test");
        MessageHandler instance2 = MessageHandler.getInstance("test");

        assertSame(instance1, instance2);
    }

    @Test
    public void testAddMessages() throws Exception {
        MessageHandler spyMessageHandler = spy(messageHandler);
        String basename = "test";
        String dir = "testDir";

        // Mocking File and FileInputStream
        File mockDirFile = mock(File.class);
        when(mockDirFile.list(any(FilenameFilter.class))).thenReturn(new String[]{"test_en_US.properties"});
        PowerMockito.whenNew(File.class).withArguments(dir).thenReturn(mockDirFile);

        FileInputStream mockInputStream = mock(FileInputStream.class);
        PowerMockito.whenNew(FileInputStream.class).withArguments(dir + "test_en_US.properties").thenReturn(mockInputStream);

        Properties mockProps = new Properties();
        mockProps.put("key", "value");
        doNothing().when(mockProps).load(mockInputStream);

        // Call the private method using reflection
        Method addMessagesMethod = MessageHandler.class.getDeclaredMethod("addMessages", String.class, String.class);
        addMessagesMethod.setAccessible(true);
        addMessagesMethod.invoke(spyMessageHandler, basename, dir);

        assertEquals("value", spyMessageHandler.mMessages.get("key"));
    }

    @Test
    public void testMessagesFilter() throws Exception {
        MessageHandler.MessagesFilter filter = new MessageHandler.MessagesFilter("test", "_en_US.properties");

        assertTrue(filter.accept(null, "test_en_US.properties"));
        assertFalse(filter.accept(null, "test_fr_FR.properties"));
        assertFalse(filter.accept(null, "other_en_US.properties"));
    }
}
```

This test suite covers the following:
1. `getMessage` method with both valid and invalid keys.
2. `getMessageOptional` method with various scenarios.
3. `getInstance` method to ensure singleton behavior.
4. `addMessages` method using reflection to test the private method.
5. `MessagesFilter` inner class to ensure the filename filtering works correctly.

Make sure to include the necessary dependencies for JUnit, Mockito, and PowerMock in your project to run these tests.