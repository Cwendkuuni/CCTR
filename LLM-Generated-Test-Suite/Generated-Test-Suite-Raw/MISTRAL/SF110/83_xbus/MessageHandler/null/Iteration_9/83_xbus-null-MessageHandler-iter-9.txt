```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance("test");
    }

    @Test
    public void testGetMessage_KeyFound() {
        // Assuming there is a key "testKey" in the message file
        String key = "testKey";
        List<String> params = Arrays.asList("param1", "param2");
        String expectedMessage = "Expected message with param1 and param2";

        String message = messageHandler.getMessage(key, params);

        assertEquals(expectedMessage, message);
    }

    @Test
    public void testGetMessage_KeyNotFound() {
        String key = "nonExistentKey";
        List<String> params = Arrays.asList("param1", "param2");
        String expectedMessage = "Key: " + key + " not found in message file";

        String message = messageHandler.getMessage(key, params);

        assertEquals(expectedMessage, message);
    }

    @Test
    public void testGetMessageOptional_KeyFound() {
        // Assuming there is a key "testKey" in the message file
        String key = "testKey";
        List<String> params = Arrays.asList("param1", "param2");
        String expectedMessage = "Expected message with param1 and param2";

        String message = messageHandler.getMessageOptional(key, params);

        assertEquals(expectedMessage, message);
    }

    @Test
    public void testGetMessageOptional_KeyNotFound() {
        String key = "nonExistentKey";
        List<String> params = Arrays.asList("param1", "param2");

        String message = messageHandler.getMessageOptional(key, params);

        assertNull(message);
    }

    @Test
    public void testGetInstance_SameInstance() {
        String basename = "test";
        MessageHandler instance1 = MessageHandler.getInstance(basename);
        MessageHandler instance2 = MessageHandler.getInstance(basename);

        assertSame(instance1, instance2);
    }

    @Test
    public void testGetInstance_DifferentInstance() {
        String basename1 = "test1";
        String basename2 = "test2";
        MessageHandler instance1 = MessageHandler.getInstance(basename1);
        MessageHandler instance2 = MessageHandler.getInstance(basename2);

        assertNotSame(instance1, instance2);
    }

    @Test
    public void testAddMessages() {
        // This test assumes the existence of a test message file in the specified directory
        String basename = "test";
        String dir = "path/to/test/messages";
        MessageHandler instance = new MessageHandler(basename);

        // Mock the addMessages method to verify it's called with the correct parameters
        // This requires a mocking framework like Mockito, which is not included in this basic example
        // instance.addMessages(basename, dir);

        // Verify that messages are added to mMessages
        // assertNotNull(instance.mMessages);
        // assertTrue(instance.mMessages.size() > 0);
    }

    @Test
    public void testMessagesFilter_Accept() {
        String prefix = "test";
        String postfix = "_en_US.properties";
        MessageHandler.MessagesFilter filter = new MessageHandler.MessagesFilter(prefix, postfix);

        assertTrue(filter.accept(null, "test_en_US.properties"));
    }

    @Test
    public void testMessagesFilter_Reject() {
        String prefix = "test";
        String postfix = "_en_US.properties";
        MessageHandler.MessagesFilter filter = new MessageHandler.MessagesFilter(prefix, postfix);

        assertFalse(filter.accept(null, "wrong_en_US.properties"));
        assertFalse(filter.accept(null, "test_wrong.properties"));
    }
}
```