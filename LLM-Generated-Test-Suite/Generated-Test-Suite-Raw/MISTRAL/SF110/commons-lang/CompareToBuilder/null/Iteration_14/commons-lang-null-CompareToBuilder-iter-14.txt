```java
package org.apache.commons.lang3.builder;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;

public class CompareToBuilderTest {

    private CompareToBuilder compareToBuilder;

    @Before
    public void setUp() {
        compareToBuilder = new CompareToBuilder();
    }

    @Test
    public void testReflectionCompare() {
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object()));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), false, null, new String[0]));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), Arrays.asList("field")));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), new String[0]));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), false, null, new String[0]));
    }

    @Test(expected = NullPointerException.class)
    public void testReflectionCompareNull() {
        CompareToBuilder.reflectionCompare(null, new Object());
    }

    @Test(expected = ClassCastException.class)
    public void testReflectionCompareClassCastException() {
        CompareToBuilder.reflectionCompare(new Object(), "String");
    }

    @Test
    public void testAppendSuper() {
        assertEquals(compareToBuilder, compareToBuilder.appendSuper(0));
        assertEquals(compareToBuilder, compareToBuilder.appendSuper(1));
        assertEquals(compareToBuilder, compareToBuilder.appendSuper(-1));
    }

    @Test
    public void testAppendObjects() {
        assertEquals(compareToBuilder, compareToBuilder.append(new Object(), new Object()));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object(), new Object(), null));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object(), new Object(), Comparator.naturalOrder()));
    }

    @Test
    public void testAppendPrimitives() {
        assertEquals(compareToBuilder, compareToBuilder.append(1L, 1L));
        assertEquals(compareToBuilder, compareToBuilder.append(1, 1));
        assertEquals(compareToBuilder, compareToBuilder.append((short) 1, (short) 1));
        assertEquals(compareToBuilder, compareToBuilder.append('a', 'a'));
        assertEquals(compareToBuilder, compareToBuilder.append((byte) 1, (byte) 1));
        assertEquals(compareToBuilder, compareToBuilder.append(1.0, 1.0));
        assertEquals(compareToBuilder, compareToBuilder.append(1.0f, 1.0f));
        assertEquals(compareToBuilder, compareToBuilder.append(true, true));
    }

    @Test
    public void testAppendArrays() {
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{}, new Object[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{}, new Object[]{}, null));
        assertEquals(compareToBuilder, compareToBuilder.append(new long[]{}, new long[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new int[]{}, new int[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new short[]{}, new short[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new char[]{}, new char[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new byte[]{}, new byte[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new double[]{}, new double[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new float[]{}, new float[]{}));
        assertEquals(compareToBuilder, compareToBuilder.append(new boolean[]{}, new boolean[]{}));
    }

    @Test
    public void testToComparison() {
        assertEquals(0, compareToBuilder.toComparison());
        compareToBuilder.append(1, 2);
        assertEquals(-1, compareToBuilder.toComparison());
    }

    @Test
    public void testBuild() {
        assertEquals(Integer.valueOf(0), compareToBuilder.build());
        compareToBuilder.append(1, 2);
        assertEquals(Integer.valueOf(-1), compareToBuilder.build());
    }
}
```