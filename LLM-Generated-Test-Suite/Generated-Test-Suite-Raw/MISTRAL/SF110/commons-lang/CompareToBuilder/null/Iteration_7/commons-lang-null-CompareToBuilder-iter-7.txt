```java
package org.apache.commons.lang3.builder;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;

public class CompareToBuilderTest {

    private CompareToBuilder compareToBuilder;

    @Before
    public void setUp() {
        compareToBuilder = new CompareToBuilder();
    }

    @After
    public void tearDown() {
        compareToBuilder = null;
    }

    @Test
    public void testReflectionCompare() {
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object()));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), false, null, new String[0]));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), Arrays.asList("field")));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), new String[0]));
        assertEquals(0, CompareToBuilder.reflectionCompare(new Object(), new Object(), false, null, new String[0]));
    }

    @Test(expected = NullPointerException.class)
    public void testReflectionCompareNull() {
        CompareToBuilder.reflectionCompare(null, new Object());
    }

    @Test(expected = ClassCastException.class)
    public void testReflectionCompareClassCastException() {
        CompareToBuilder.reflectionCompare(new Object(), new String());
    }

    @Test
    public void testAppendSuper() {
        assertEquals(compareToBuilder, compareToBuilder.appendSuper(0));
        assertEquals(compareToBuilder, compareToBuilder.appendSuper(1));
        assertEquals(compareToBuilder, compareToBuilder.appendSuper(-1));
    }

    @Test
    public void testAppend() {
        assertEquals(compareToBuilder, compareToBuilder.append(1, 1));
        assertEquals(compareToBuilder, compareToBuilder.append(1, 2));
        assertEquals(compareToBuilder, compareToBuilder.append(2, 1));
        assertEquals(compareToBuilder, compareToBuilder.append(null, null));
        assertEquals(compareToBuilder, compareToBuilder.append(null, 1));
        assertEquals(compareToBuilder, compareToBuilder.append(1, null));
    }

    @Test
    public void testAppendWithComparator() {
        Comparator<Integer> comparator = Comparator.naturalOrder();
        assertEquals(compareToBuilder, compareToBuilder.append(1, 1, comparator));
        assertEquals(compareToBuilder, compareToBuilder.append(1, 2, comparator));
        assertEquals(compareToBuilder, compareToBuilder.append(2, 1, comparator));
    }

    @Test
    public void testAppendLong() {
        assertEquals(compareToBuilder, compareToBuilder.append(1L, 1L));
        assertEquals(compareToBuilder, compareToBuilder.append(1L, 2L));
        assertEquals(compareToBuilder, compareToBuilder.append(2L, 1L));
    }

    @Test
    public void testAppendInt() {
        assertEquals(compareToBuilder, compareToBuilder.append(1, 1));
        assertEquals(compareToBuilder, compareToBuilder.append(1, 2));
        assertEquals(compareToBuilder, compareToBuilder.append(2, 1));
    }

    @Test
    public void testAppendShort() {
        assertEquals(compareToBuilder, compareToBuilder.append((short) 1, (short) 1));
        assertEquals(compareToBuilder, compareToBuilder.append((short) 1, (short) 2));
        assertEquals(compareToBuilder, compareToBuilder.append((short) 2, (short) 1));
    }

    @Test
    public void testAppendChar() {
        assertEquals(compareToBuilder, compareToBuilder.append('a', 'a'));
        assertEquals(compareToBuilder, compareToBuilder.append('a', 'b'));
        assertEquals(compareToBuilder, compareToBuilder.append('b', 'a'));
    }

    @Test
    public void testAppendByte() {
        assertEquals(compareToBuilder, compareToBuilder.append((byte) 1, (byte) 1));
        assertEquals(compareToBuilder, compareToBuilder.append((byte) 1, (byte) 2));
        assertEquals(compareToBuilder, compareToBuilder.append((byte) 2, (byte) 1));
    }

    @Test
    public void testAppendDouble() {
        assertEquals(compareToBuilder, compareToBuilder.append(1.0, 1.0));
        assertEquals(compareToBuilder, compareToBuilder.append(1.0, 2.0));
        assertEquals(compareToBuilder, compareToBuilder.append(2.0, 1.0));
    }

    @Test
    public void testAppendFloat() {
        assertEquals(compareToBuilder, compareToBuilder.append(1.0f, 1.0f));
        assertEquals(compareToBuilder, compareToBuilder.append(1.0f, 2.0f));
        assertEquals(compareToBuilder, compareToBuilder.append(2.0f, 1.0f));
    }

    @Test
    public void testAppendBoolean() {
        assertEquals(compareToBuilder, compareToBuilder.append(true, true));
        assertEquals(compareToBuilder, compareToBuilder.append(true, false));
        assertEquals(compareToBuilder, compareToBuilder.append(false, true));
    }

    @Test
    public void testAppendObjectArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 2}));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 3}));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1}));
    }

    @Test
    public void testAppendObjectArrayWithComparator() {
        Comparator<Integer> comparator = Comparator.naturalOrder();
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 2}, comparator));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 3}, comparator));
        assertEquals(compareToBuilder, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1}, comparator));
    }

    @Test
    public void testAppendLongArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new long[]{1, 2}, new long[]{1, 2}));
        assertEquals(compareToBuilder, compareToBuilder.append(new long[]{1, 2}, new long[]{1, 3}));
        assertEquals(compareToBuilder, compareToBuilder.append(new long[]{1, 2}, new long[]{1}));
    }

    @Test
    public void testAppendIntArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new int[]{1, 2}, new int[]{1, 2}));
        assertEquals(compareToBuilder, compareToBuilder.append(new int[]{1, 2}, new int[]{1, 3}));
        assertEquals(compareToBuilder, compareToBuilder.append(new int[]{1, 2}, new int[]{1}));
    }

    @Test
    public void testAppendShortArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new short[]{1, 2}, new short[]{1, 2}));
        assertEquals(compareToBuilder, compareToBuilder.append(new short[]{1, 2}, new short[]{1, 3}));
        assertEquals(compareToBuilder, compareToBuilder.append(new short[]{1, 2}, new short[]{1}));
    }

    @Test
    public void testAppendCharArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new char[]{'a', 'b'}, new char[]{'a', 'b'}));
        assertEquals(compareToBuilder, compareToBuilder.append(new char[]{'a', 'b'}, new char[]{'a', 'c'}));
        assertEquals(compareToBuilder, compareToBuilder.append(new char[]{'a', 'b'}, new char[]{'a'}));
    }

    @Test
    public void testAppendByteArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new byte[]{1, 2}, new byte[]{1, 2}));
        assertEquals(compareToBuilder, compareToBuilder.append(new byte[]{1, 2}, new byte[]{1, 3}));
        assertEquals(compareToBuilder, compareToBuilder.append(new byte[]{1, 2}, new byte[]{1}));
    }

    @Test
    public void testAppendDoubleArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new double[]{1.0, 2.0}, new double[]{1.0, 2.0}));
        assertEquals(compareToBuilder, compareToBuilder.append(new double[]{1.0, 2.0}, new double[]{1.0, 3.0}));
        assertEquals(compareToBuilder, compareToBuilder.append(new double[]{1.0, 2.0}, new double[]{1.0}));
    }

    @Test
    public void testAppendFloatArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new float[]{1.0f, 2.0f}, new float[]{1.0f, 2.0f}));
        assertEquals(compareToBuilder, compareToBuilder.append(new float[]{1.0f, 2.0f}, new float[]{1.0f, 3.0f}));
        assertEquals(compareToBuilder, compareToBuilder.append(new float[]{1.0f, 2.0f}, new float[]{1.0f}));
    }

    @Test
    public void testAppendBooleanArray() {
        assertEquals(compareToBuilder, compareToBuilder.append(new boolean[]{true, false}, new boolean[]{true, false}));
        assertEquals(compareToBuilder, compareToBuilder.append(new boolean[]{true, false}, new boolean[]{true, true}));
        assertEquals(compareToBuilder, compareToBuilder.append(new boolean[]{true, false}, new boolean[]{true}));
    }

    @Test
    public void testToComparison() {
        assertEquals(0, compareToBuilder.toComparison());
        compareToBuilder.append(1, 2);
        assertEquals(-1, compareToBuilder.toComparison());
        compareToBuilder = new CompareToBuilder();
        compareToBuilder.append(2, 1);
        assertEquals(1, compareToBuilder.toComparison());
    }

    @Test
    public void testBuild() {
        assertEquals(Integer.valueOf(0), compareToBuilder.build());
        compareToBuilder.append(1, 2);
        assertEquals(Integer.valueOf(-1), compareToBuilder.build());
        compareToBuilder = new CompareToBuilder();
        compareToBuilder.append(2, 1);
        assertEquals(Integer.valueOf(1), compareToBuilder.build());
    }
}
```