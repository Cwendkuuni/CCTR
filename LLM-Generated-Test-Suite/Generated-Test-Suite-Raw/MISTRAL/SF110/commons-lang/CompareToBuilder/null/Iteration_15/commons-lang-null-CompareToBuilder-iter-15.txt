```java
package org.apache.commons.lang3.builder;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;

public class CompareToBuilderTest {

    private CompareToBuilder compareToBuilder;

    @Before
    public void setUp() {
        compareToBuilder = new CompareToBuilder();
    }

    @After
    public void tearDown() {
        compareToBuilder = null;
    }

    @Test
    public void testReflectionCompare() {
        TestClass obj1 = new TestClass(1, "test");
        TestClass obj2 = new TestClass(1, "test");
        TestClass obj3 = new TestClass(2, "test");

        assertEquals(0, CompareToBuilder.reflectionCompare(obj1, obj2));
        assertTrue(CompareToBuilder.reflectionCompare(obj1, obj3) < 0);
        assertTrue(CompareToBuilder.reflectionCompare(obj3, obj1) > 0);
    }

    @Test
    public void testReflectionCompareWithTransients() {
        TestClass obj1 = new TestClass(1, "test");
        TestClass obj2 = new TestClass(1, "test");
        TestClass obj3 = new TestClass(2, "test");

        assertEquals(0, CompareToBuilder.reflectionCompare(obj1, obj2, true));
        assertTrue(CompareToBuilder.reflectionCompare(obj1, obj3, true) < 0);
        assertTrue(CompareToBuilder.reflectionCompare(obj3, obj1, true) > 0);
    }

    @Test
    public void testReflectionCompareWithExcludeFields() {
        TestClass obj1 = new TestClass(1, "test");
        TestClass obj2 = new TestClass(1, "test");
        TestClass obj3 = new TestClass(2, "test");

        assertEquals(0, CompareToBuilder.reflectionCompare(obj1, obj2, Arrays.asList("field1")));
        assertTrue(CompareToBuilder.reflectionCompare(obj1, obj3, Arrays.asList("field1")) < 0);
        assertTrue(CompareToBuilder.reflectionCompare(obj3, obj1, Arrays.asList("field1")) > 0);
    }

    @Test
    public void testReflectionCompareWithExcludeFieldsArray() {
        TestClass obj1 = new TestClass(1, "test");
        TestClass obj2 = new TestClass(1, "test");
        TestClass obj3 = new TestClass(2, "test");

        assertEquals(0, CompareToBuilder.reflectionCompare(obj1, obj2, "field1"));
        assertTrue(CompareToBuilder.reflectionCompare(obj1, obj3, "field1") < 0);
        assertTrue(CompareToBuilder.reflectionCompare(obj3, obj1, "field1") > 0);
    }

    @Test
    public void testReflectionCompareWithAllParameters() {
        TestClass obj1 = new TestClass(1, "test");
        TestClass obj2 = new TestClass(1, "test");
        TestClass obj3 = new TestClass(2, "test");

        assertEquals(0, CompareToBuilder.reflectionCompare(obj1, obj2, true, null, "field1"));
        assertTrue(CompareToBuilder.reflectionCompare(obj1, obj3, true, null, "field1") < 0);
        assertTrue(CompareToBuilder.reflectionCompare(obj3, obj1, true, null, "field1") > 0);
    }

    @Test
    public void testAppendSuper() {
        assertEquals(0, compareToBuilder.appendSuper(0).toComparison());
        assertTrue(compareToBuilder.appendSuper(-1).toComparison() < 0);
        assertTrue(compareToBuilder.appendSuper(1).toComparison() > 0);
    }

    @Test
    public void testAppendObjects() {
        assertEquals(0, compareToBuilder.append(1, 1).toComparison());
        assertTrue(compareToBuilder.append(1, 2).toComparison() < 0);
        assertTrue(compareToBuilder.append(2, 1).toComparison() > 0);
    }

    @Test
    public void testAppendObjectsWithComparator() {
        Comparator<Integer> comparator = Comparator.naturalOrder();
        assertEquals(0, compareToBuilder.append(1, 1, comparator).toComparison());
        assertTrue(compareToBuilder.append(1, 2, comparator).toComparison() < 0);
        assertTrue(compareToBuilder.append(2, 1, comparator).toComparison() > 0);
    }

    @Test
    public void testAppendLong() {
        assertEquals(0, compareToBuilder.append(1L, 1L).toComparison());
        assertTrue(compareToBuilder.append(1L, 2L).toComparison() < 0);
        assertTrue(compareToBuilder.append(2L, 1L).toComparison() > 0);
    }

    @Test
    public void testAppendInt() {
        assertEquals(0, compareToBuilder.append(1, 1).toComparison());
        assertTrue(compareToBuilder.append(1, 2).toComparison() < 0);
        assertTrue(compareToBuilder.append(2, 1).toComparison() > 0);
    }

    @Test
    public void testAppendShort() {
        assertEquals(0, compareToBuilder.append((short) 1, (short) 1).toComparison());
        assertTrue(compareToBuilder.append((short) 1, (short) 2).toComparison() < 0);
        assertTrue(compareToBuilder.append((short) 2, (short) 1).toComparison() > 0);
    }

    @Test
    public void testAppendChar() {
        assertEquals(0, compareToBuilder.append('a', 'a').toComparison());
        assertTrue(compareToBuilder.append('a', 'b').toComparison() < 0);
        assertTrue(compareToBuilder.append('b', 'a').toComparison() > 0);
    }

    @Test
    public void testAppendByte() {
        assertEquals(0, compareToBuilder.append((byte) 1, (byte) 1).toComparison());
        assertTrue(compareToBuilder.append((byte) 1, (byte) 2).toComparison() < 0);
        assertTrue(compareToBuilder.append((byte) 2, (byte) 1).toComparison() > 0);
    }

    @Test
    public void testAppendDouble() {
        assertEquals(0, compareToBuilder.append(1.0, 1.0).toComparison());
        assertTrue(compareToBuilder.append(1.0, 2.0).toComparison() < 0);
        assertTrue(compareToBuilder.append(2.0, 1.0).toComparison() > 0);
    }

    @Test
    public void testAppendFloat() {
        assertEquals(0, compareToBuilder.append(1.0f, 1.0f).toComparison());
        assertTrue(compareToBuilder.append(1.0f, 2.0f).toComparison() < 0);
        assertTrue(compareToBuilder.append(2.0f, 1.0f).toComparison() > 0);
    }

    @Test
    public void testAppendBoolean() {
        assertEquals(0, compareToBuilder.append(true, true).toComparison());
        assertTrue(compareToBuilder.append(false, true).toComparison() < 0);
        assertTrue(compareToBuilder.append(true, false).toComparison() > 0);
    }

    @Test
    public void testAppendObjectArray() {
        assertEquals(0, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 2}).toComparison());
        assertTrue(compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 3}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new Object[]{1, 3}, new Object[]{1, 2}).toComparison() > 0);
    }

    @Test
    public void testAppendObjectArrayWithComparator() {
        Comparator<Integer> comparator = Comparator.naturalOrder();
        assertEquals(0, compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 2}, comparator).toComparison());
        assertTrue(compareToBuilder.append(new Object[]{1, 2}, new Object[]{1, 3}, comparator).toComparison() < 0);
        assertTrue(compareToBuilder.append(new Object[]{1, 3}, new Object[]{1, 2}, comparator).toComparison() > 0);
    }

    @Test
    public void testAppendLongArray() {
        assertEquals(0, compareToBuilder.append(new long[]{1, 2}, new long[]{1, 2}).toComparison());
        assertTrue(compareToBuilder.append(new long[]{1, 2}, new long[]{1, 3}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new long[]{1, 3}, new long[]{1, 2}).toComparison() > 0);
    }

    @Test
    public void testAppendIntArray() {
        assertEquals(0, compareToBuilder.append(new int[]{1, 2}, new int[]{1, 2}).toComparison());
        assertTrue(compareToBuilder.append(new int[]{1, 2}, new int[]{1, 3}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new int[]{1, 3}, new int[]{1, 2}).toComparison() > 0);
    }

    @Test
    public void testAppendShortArray() {
        assertEquals(0, compareToBuilder.append(new short[]{1, 2}, new short[]{1, 2}).toComparison());
        assertTrue(compareToBuilder.append(new short[]{1, 2}, new short[]{1, 3}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new short[]{1, 3}, new short[]{1, 2}).toComparison() > 0);
    }

    @Test
    public void testAppendCharArray() {
        assertEquals(0, compareToBuilder.append(new char[]{'a', 'b'}, new char[]{'a', 'b'}).toComparison());
        assertTrue(compareToBuilder.append(new char[]{'a', 'b'}, new char[]{'a', 'c'}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new char[]{'a', 'c'}, new char[]{'a', 'b'}).toComparison() > 0);
    }

    @Test
    public void testAppendByteArray() {
        assertEquals(0, compareToBuilder.append(new byte[]{1, 2}, new byte[]{1, 2}).toComparison());
        assertTrue(compareToBuilder.append(new byte[]{1, 2}, new byte[]{1, 3}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new byte[]{1, 3}, new byte[]{1, 2}).toComparison() > 0);
    }

    @Test
    public void testAppendDoubleArray() {
        assertEquals(0, compareToBuilder.append(new double[]{1.0, 2.0}, new double[]{1.0, 2.0}).toComparison());
        assertTrue(compareToBuilder.append(new double[]{1.0, 2.0}, new double[]{1.0, 3.0}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new double[]{1.0, 3.0}, new double[]{1.0, 2.0}).toComparison() > 0);
    }

    @Test
    public void testAppendFloatArray() {
        assertEquals(0, compareToBuilder.append(new float[]{1.0f, 2.0f}, new float[]{1.0f, 2.0f}).toComparison());
        assertTrue(compareToBuilder.append(new float[]{1.0f, 2.0f}, new float[]{1.0f, 3.0f}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new float[]{1.0f, 3.0f}, new float[]{1.0f, 2.0f}).toComparison() > 0);
    }

    @Test
    public void testAppendBooleanArray() {
        assertEquals(0, compareToBuilder.append(new boolean[]{true, false}, new boolean[]{true, false}).toComparison());
        assertTrue(compareToBuilder.append(new boolean[]{true, false}, new boolean[]{true, true}).toComparison() < 0);
        assertTrue(compareToBuilder.append(new boolean[]{true, true}, new boolean[]{true, false}).toComparison() > 0);
    }

    @Test
    public void testToComparison() {
        assertEquals(0, compareToBuilder.toComparison());
        compareToBuilder.append(1, 2);
        assertTrue(compareToBuilder.toComparison() < 0);
        compareToBuilder = new CompareToBuilder();
        compareToBuilder.append(2, 1);
        assertTrue(compareToBuilder.toComparison() > 0);
    }

    @Test
    public void testBuild() {
        assertEquals(0, compareToBuilder.build());
        compareToBuilder.append(1, 2);
        assertTrue(compareToBuilder.build() < 0);
        compareToBuilder = new CompareToBuilder();
        compareToBuilder.append(2, 1);
        assertTrue(compareToBuilder.build() > 0);
    }

    private static class TestClass {
        private int field1;
        private String field2;

        public TestClass(int field1, String field2) {
            this.field1 = field1;
            this.field2 = field2;
        }

        public int getField1() {
            return field1;
        }

        public String getField2() {
            return field2;
        }
    }
}
```