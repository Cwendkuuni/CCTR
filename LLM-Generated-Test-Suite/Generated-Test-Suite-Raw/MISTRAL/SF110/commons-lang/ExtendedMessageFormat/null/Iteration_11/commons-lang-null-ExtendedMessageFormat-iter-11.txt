```java
package org.apache.commons.lang3.text;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.text.Format;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        emf = new ExtendedMessageFormat("Test pattern", registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern");
        assertEquals("Test pattern", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", locale);
        assertEquals("Test pattern", emf.toPattern());
        assertEquals(locale, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", registry);
        assertEquals("Test pattern", emf.toPattern());
        assertEquals(registry, emf.registry);
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", locale, registry);
        assertEquals("Test pattern", emf.toPattern());
        assertEquals(locale, emf.getLocale());
        assertEquals(registry, emf.registry);
    }

    @Test
    public void testToPattern() {
        assertEquals("Test pattern", emf.toPattern());
    }

    @Test
    public void testApplyPattern() {
        emf.applyPattern("New pattern");
        assertEquals("New pattern", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf.setFormat(0, new Format() {
            @Override
            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                return null;
            }

            @Override
            public Object parseObject(String source, ParsePosition pos) {
                return null;
            }
        });
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf.setFormatByArgumentIndex(0, new Format() {
            @Override
            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                return null;
            }

            @Override
            public Object parseObject(String source, ParsePosition pos) {
                return null;
            }
        });
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf.setFormats(new Format[]{new Format() {
            @Override
            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                return null;
            }

            @Override
            public Object parseObject(String source, ParsePosition pos) {
                return null;
            }
        }});
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf.setFormatsByArgumentIndex(new Format[]{new Format() {
            @Override
            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                return null;
            }

            @Override
            public Object parseObject(String source, ParsePosition pos) {
                return null;
            }
        }});
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry);
        assertTrue(emf.equals(emf2));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry);
        assertEquals(emf.hashCode(), emf2.hashCode());
    }

    @Test
    public void testGetFormat() {
        registry.put("test", new FormatFactory() {
            @Override
            public Format getFormat(String name, String arguments, Locale locale) {
                return new Format() {
                    @Override
                    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                        return null;
                    }

                    @Override
                    public Object parseObject(String source, ParsePosition pos) {
                        return null;
                    }
                };
            }
        });
        emf = new ExtendedMessageFormat("Test pattern", registry);
        assertNotNull(emf.getFormat("test"));
    }

    @Test
    public void testReadArgumentIndex() {
        ParsePosition pos = new ParsePosition(0);
        assertEquals(123, emf.readArgumentIndex("123", pos));
    }

    @Test
    public void testParseFormatDescription() {
        ParsePosition pos = new ParsePosition(0);
        assertEquals("format", emf.parseFormatDescription("{format}", pos));
    }

    @Test
    public void testInsertFormats() {
        assertEquals("Test pattern", emf.insertFormats("Test pattern", new ArrayList<>()));
    }

    @Test
    public void testSeekNonWs() {
        ParsePosition pos = new ParsePosition(0);
        emf.seekNonWs("  Test", pos);
        assertEquals(2, pos.getIndex());
    }

    @Test
    public void testNext() {
        ParsePosition pos = new ParsePosition(0);
        emf.next(pos);
        assertEquals(1, pos.getIndex());
    }

    @Test
    public void testAppendQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        StringBuilder sb = new StringBuilder();
        emf.appendQuotedString("'Test'", pos, sb, true);
        assertEquals("Test", sb.toString());
    }

    @Test
    public void testGetQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        emf.getQuotedString("'Test'", pos, true);
        assertEquals(6, pos.getIndex());
    }

    @Test
    public void testContainsElements() {
        assertTrue(emf.containsElements(registry));
    }
}
```