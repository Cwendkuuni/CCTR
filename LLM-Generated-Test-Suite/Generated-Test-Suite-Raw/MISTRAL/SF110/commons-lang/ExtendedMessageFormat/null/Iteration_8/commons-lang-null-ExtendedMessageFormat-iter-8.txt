```java
package org.apache.commons.lang3.text;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.text.FormatFactory;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        emf = new ExtendedMessageFormat("Test pattern", registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern");
        assertNotNull(emf);
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", Locale.ENGLISH);
        assertNotNull(emf);
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", registry);
        assertNotNull(emf);
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", Locale.ENGLISH, registry);
        assertNotNull(emf);
    }

    @Test
    public void testToPattern() {
        assertEquals("Test pattern", emf.toPattern());
    }

    @Test
    public void testApplyPattern() {
        emf.applyPattern("New pattern");
        assertEquals("New pattern", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf.setFormats(new java.text.Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf.setFormatsByArgumentIndex(new java.text.Format[0]);
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry);
        assertTrue(emf.equals(emf2));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry);
        assertEquals(emf.hashCode(), emf2.hashCode());
    }

    @Test
    public void testGetFormat() {
        assertNull(emf.getFormat("unknown"));
    }

    @Test
    public void testReadArgumentIndex() {
        assertEquals(1, emf.readArgumentIndex("{1}", new java.text.ParsePosition(0)));
    }

    @Test
    public void testParseFormatDescription() {
        assertEquals("format", emf.parseFormatDescription("{0,format}", new java.text.ParsePosition(0)));
    }

    @Test
    public void testInsertFormats() {
        ArrayList<String> customPatterns = new ArrayList<>();
        customPatterns.add("custom");
        assertEquals("{0,custom}", emf.insertFormats("{0}", customPatterns));
    }

    @Test
    public void testSeekNonWs() {
        java.text.ParsePosition pos = new java.text.ParsePosition(0);
        emf.seekNonWs("  test", pos);
        assertEquals(2, pos.getIndex());
    }

    @Test
    public void testNext() {
        java.text.ParsePosition pos = new java.text.ParsePosition(0);
        emf.next(pos);
        assertEquals(1, pos.getIndex());
    }

    @Test
    public void testAppendQuotedString() {
        java.text.ParsePosition pos = new java.text.ParsePosition(0);
        StringBuilder sb = new StringBuilder();
        emf.appendQuotedString("'test'", pos, sb, true);
        assertEquals("test", sb.toString());
    }

    @Test
    public void testGetQuotedString() {
        java.text.ParsePosition pos = new java.text.ParsePosition(0);
        emf.getQuotedString("'test'", pos, true);
        assertEquals(5, pos.getIndex());
    }

    @Test
    public void testContainsElements() {
        ArrayList<String> list = new ArrayList<>();
        list.add("element");
        assertTrue(emf.containsElements(list));
    }
}
```