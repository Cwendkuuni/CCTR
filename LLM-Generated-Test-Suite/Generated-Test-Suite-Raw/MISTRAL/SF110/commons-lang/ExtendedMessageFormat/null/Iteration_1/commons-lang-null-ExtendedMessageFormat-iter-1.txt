```java
package org.apache.commons.lang3.text;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.text.FormatFactory;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private static final String PATTERN = "Test pattern {0}";
    private static final Locale LOCALE = Locale.ENGLISH;
    private static final Map<String, FormatFactory> REGISTRY = new HashMap<>();

    @Before
    public void setUp() {
        emf = new ExtendedMessageFormat(PATTERN, LOCALE, REGISTRY);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat(PATTERN);
        assertEquals(PATTERN, emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat(PATTERN, LOCALE);
        assertEquals(PATTERN, emf.toPattern());
        assertEquals(LOCALE, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat(PATTERN, REGISTRY);
        assertEquals(PATTERN, emf.toPattern());
        assertEquals(REGISTRY, emf.registry);
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat(PATTERN, LOCALE, REGISTRY);
        assertEquals(PATTERN, emf.toPattern());
        assertEquals(LOCALE, emf.getLocale());
        assertEquals(REGISTRY, emf.registry);
    }

    @Test
    public void testToPattern() {
        assertEquals(PATTERN, emf.toPattern());
    }

    @Test
    public void testApplyPattern() {
        String newPattern = "New pattern {0}";
        emf.applyPattern(newPattern);
        assertEquals(newPattern, emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf.setFormats(new java.text.Format[]{});
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf.setFormatsByArgumentIndex(new java.text.Format[]{});
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat(PATTERN, LOCALE, REGISTRY);
        assertTrue(emf.equals(emf2));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat(PATTERN, LOCALE, REGISTRY);
        assertEquals(emf.hashCode(), emf2.hashCode());
    }

    @Test
    public void testGetFormat() {
        // Assuming a mock FormatFactory is added to the registry
        REGISTRY.put("test", new FormatFactory() {
            @Override
            public java.text.Format getFormat(String name, String arguments, Locale locale) {
                return new java.text.SimpleDateFormat();
            }
        });
        ExtendedMessageFormat emfWithRegistry = new ExtendedMessageFormat(PATTERN, LOCALE, REGISTRY);
        assertNotNull(emfWithRegistry.getFormat("test"));
    }

    @Test
    public void testReadArgumentIndex() {
        String pattern = "{0}";
        ParsePosition pos = new ParsePosition(0);
        assertEquals(0, emf.readArgumentIndex(pattern, pos));
    }

    @Test
    public void testParseFormatDescription() {
        String pattern = "{0,date}";
        ParsePosition pos = new ParsePosition(2);
        assertEquals("date", emf.parseFormatDescription(pattern, pos));
    }

    @Test
    public void testInsertFormats() {
        String pattern = "{0}";
        ArrayList<String> customPatterns = new ArrayList<>();
        customPatterns.add("date");
        assertEquals("{0,date}", emf.insertFormats(pattern, customPatterns));
    }

    @Test
    public void testSeekNonWs() {
        String pattern = "  {0}";
        ParsePosition pos = new ParsePosition(0);
        emf.seekNonWs(pattern, pos);
        assertEquals(2, pos.getIndex());
    }

    @Test
    public void testNext() {
        ParsePosition pos = new ParsePosition(0);
        emf.next(pos);
        assertEquals(1, pos.getIndex());
    }

    @Test
    public void testAppendQuotedString() {
        String pattern = "'quoted'";
        ParsePosition pos = new ParsePosition(0);
        StringBuilder sb = new StringBuilder();
        emf.appendQuotedString(pattern, pos, sb, true);
        assertEquals("quoted", sb.toString());
    }

    @Test
    public void testGetQuotedString() {
        String pattern = "'quoted'";
        ParsePosition pos = new ParsePosition(0);
        emf.getQuotedString(pattern, pos, true);
        assertEquals(7, pos.getIndex());
    }

    @Test
    public void testContainsElements() {
        ArrayList<String> list = new ArrayList<>();
        list.add("element");
        assertTrue(emf.containsElements(list));
    }
}
```