```java
package org.apache.commons.lang3.text;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.text.FormatFactory;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat extendedMessageFormat;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        extendedMessageFormat = new ExtendedMessageFormat("Test Pattern", registry);
    }

    @After
    public void tearDown() {
        extendedMessageFormat = null;
        registry = null;
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test Pattern");
        assertNotNull(emf);
        assertEquals("Test Pattern", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test Pattern", locale);
        assertNotNull(emf);
        assertEquals("Test Pattern", emf.toPattern());
        assertEquals(locale, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test Pattern", registry);
        assertNotNull(emf);
        assertEquals("Test Pattern", emf.toPattern());
        assertEquals(registry, emf.registry);
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test Pattern", locale, registry);
        assertNotNull(emf);
        assertEquals("Test Pattern", emf.toPattern());
        assertEquals(locale, emf.getLocale());
        assertEquals(registry, emf.registry);
    }

    @Test
    public void testToPattern() {
        assertEquals("Test Pattern", extendedMessageFormat.toPattern());
    }

    @Test
    public void testApplyPattern() {
        extendedMessageFormat.applyPattern("New Pattern");
        assertEquals("New Pattern", extendedMessageFormat.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        extendedMessageFormat.setFormat(0, new MessageFormat(""));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        extendedMessageFormat.setFormatByArgumentIndex(0, new MessageFormat(""));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        extendedMessageFormat.setFormats(new MessageFormat[]{new MessageFormat("")});
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        extendedMessageFormat.setFormatsByArgumentIndex(new MessageFormat[]{new MessageFormat("")});
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf1 = new ExtendedMessageFormat("Test Pattern", registry);
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test Pattern", registry);
        assertTrue(emf1.equals(emf2));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf1 = new ExtendedMessageFormat("Test Pattern", registry);
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test Pattern", registry);
        assertEquals(emf1.hashCode(), emf2.hashCode());
    }

    @Test
    public void testGetFormat() {
        registry.put("test", new FormatFactory() {
            @Override
            public Format getFormat(String name, String arguments, Locale locale) {
                return new MessageFormat("");
            }
        });
        extendedMessageFormat = new ExtendedMessageFormat("Test Pattern", registry);
        assertNotNull(extendedMessageFormat.getFormat("test"));
    }

    @Test
    public void testReadArgumentIndex() {
        assertEquals(1, extendedMessageFormat.readArgumentIndex("{1}", new ParsePosition(0)));
    }

    @Test
    public void testParseFormatDescription() {
        assertEquals("format", extendedMessageFormat.parseFormatDescription("{format}", new ParsePosition(0)));
    }

    @Test
    public void testInsertFormats() {
        assertEquals("{0,format}", extendedMessageFormat.insertFormats("{0}", new ArrayList<String>() {{
            add("format");
        }}));
    }

    @Test
    public void testSeekNonWs() {
        ParsePosition pos = new ParsePosition(0);
        extendedMessageFormat.seekNonWs("  test", pos);
        assertEquals(2, pos.getIndex());
    }

    @Test
    public void testNext() {
        ParsePosition pos = new ParsePosition(0);
        extendedMessageFormat.next(pos);
        assertEquals(1, pos.getIndex());
    }

    @Test
    public void testAppendQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        StringBuilder sb = new StringBuilder();
        extendedMessageFormat.appendQuotedString("'test'", pos, sb, true);
        assertEquals("test", sb.toString());
    }

    @Test
    public void testGetQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        extendedMessageFormat.getQuotedString("'test'", pos, true);
        assertEquals(5, pos.getIndex());
    }

    @Test
    public void testContainsElements() {
        assertTrue(extendedMessageFormat.containsElements(new ArrayList<String>() {{
            add("test");
        }}));
    }
}
```