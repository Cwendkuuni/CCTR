```java
package org.apache.commons.lang3.text;

import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

import java.text.Format;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat messageFormat;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        messageFormat = new ExtendedMessageFormat("Test pattern", registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat format = new ExtendedMessageFormat("Test pattern");
        Assert.assertEquals("Test pattern", format.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat format = new ExtendedMessageFormat("Test pattern", locale);
        Assert.assertEquals("Test pattern", format.toPattern());
        Assert.assertEquals(locale, format.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat format = new ExtendedMessageFormat("Test pattern", registry);
        Assert.assertEquals("Test pattern", format.toPattern());
        Assert.assertEquals(registry, format.registry);
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat format = new ExtendedMessageFormat("Test pattern", locale, registry);
        Assert.assertEquals("Test pattern", format.toPattern());
        Assert.assertEquals(locale, format.getLocale());
        Assert.assertEquals(registry, format.registry);
    }

    @Test
    public void testToPattern() {
        Assert.assertEquals("Test pattern", messageFormat.toPattern());
    }

    @Test
    public void testApplyPattern() {
        messageFormat.applyPattern("New pattern");
        Assert.assertEquals("New pattern", messageFormat.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        messageFormat.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        messageFormat.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        messageFormat.setFormats(new Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        messageFormat.setFormatsByArgumentIndex(new Format[0]);
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat format1 = new ExtendedMessageFormat("Test pattern", registry);
        ExtendedMessageFormat format2 = new ExtendedMessageFormat("Test pattern", registry);
        Assert.assertEquals(format1, format2);
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat format1 = new ExtendedMessageFormat("Test pattern", registry);
        ExtendedMessageFormat format2 = new ExtendedMessageFormat("Test pattern", registry);
        Assert.assertEquals(format1.hashCode(), format2.hashCode());
    }

    @Test
    public void testGetFormat() {
        registry.put("test", new FormatFactory() {
            @Override
            public Format getFormat(String name, String arguments, Locale locale) {
                return new Format() {
                    @Override
                    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                        return toAppendTo.append(obj.toString());
                    }

                    @Override
                    public Object parseObject(String source, ParsePosition pos) {
                        return null;
                    }
                };
            }
        });
        Format format = messageFormat.getFormat("test");
        Assert.assertNotNull(format);
    }

    @Test
    public void testReadArgumentIndex() {
        ParsePosition pos = new ParsePosition(0);
        int index = messageFormat.readArgumentIndex("{0}", pos);
        Assert.assertEquals(0, index);
    }

    @Test
    public void testParseFormatDescription() {
        ParsePosition pos = new ParsePosition(0);
        String description = messageFormat.parseFormatDescription("{test}", pos);
        Assert.assertEquals("test", description);
    }

    @Test
    public void testInsertFormats() {
        String pattern = messageFormat.insertFormats("{0}", null);
        Assert.assertEquals("{0}", pattern);
    }

    @Test
    public void testSeekNonWs() {
        ParsePosition pos = new ParsePosition(0);
        messageFormat.seekNonWs(" test", pos);
        Assert.assertEquals(1, pos.getIndex());
    }

    @Test
    public void testNext() {
        ParsePosition pos = new ParsePosition(0);
        messageFormat.next(pos);
        Assert.assertEquals(1, pos.getIndex());
    }

    @Test
    public void testAppendQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        StringBuilder sb = new StringBuilder();
        messageFormat.appendQuotedString("'test'", pos, sb, true);
        Assert.assertEquals("test", sb.toString());
    }

    @Test
    public void testGetQuotedString() {
        ParsePosition pos = new ParsePosition(0);
        messageFormat.getQuotedString("'test'", pos, true);
        Assert.assertEquals(6, pos.getIndex());
    }

    @Test
    public void testContainsElements() {
        Assert.assertFalse(messageFormat.containsElements(null));
        Assert.assertFalse(messageFormat.containsElements(new HashMap<>()));
        Map<String, String> map = new HashMap<>();
        map.put("test", "value");
        Assert.assertTrue(messageFormat.containsElements(map));
    }
}
```