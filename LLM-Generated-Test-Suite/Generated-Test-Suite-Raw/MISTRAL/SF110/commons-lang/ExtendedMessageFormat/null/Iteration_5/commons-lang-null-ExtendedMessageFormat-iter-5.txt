```java
package org.apache.commons.lang3.text;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.text.FormatFactory;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        emf = new ExtendedMessageFormat("Test pattern", registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern");
        assertEquals("Test pattern", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", locale);
        assertEquals("Test pattern", emf.toPattern());
        assertEquals(locale, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", registry);
        assertEquals("Test pattern", emf.toPattern());
        assertEquals(registry, emf.registry);
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        Locale locale = Locale.FRANCE;
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Test pattern", locale, registry);
        assertEquals("Test pattern", emf.toPattern());
        assertEquals(locale, emf.getLocale());
        assertEquals(registry, emf.registry);
    }

    @Test
    public void testToPattern() {
        assertEquals("Test pattern", emf.toPattern());
    }

    @Test
    public void testApplyPattern() {
        emf.applyPattern("New pattern");
        assertEquals("New pattern", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf.setFormats(new java.text.Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf.setFormatsByArgumentIndex(new java.text.Format[0]);
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry);
        assertTrue(emf.equals(emf2));
    }

    @Test
    public void testEqualsDifferentPattern() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Different pattern", registry);
        assertFalse(emf.equals(emf2));
    }

    @Test
    public void testEqualsDifferentRegistry() {
        Map<String, FormatFactory> registry2 = new HashMap<>();
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry2);
        assertFalse(emf.equals(emf2));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry);
        assertEquals(emf.hashCode(), emf2.hashCode());
    }

    @Test
    public void testHashCodeDifferentPattern() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Different pattern", registry);
        assertNotEquals(emf.hashCode(), emf2.hashCode());
    }

    @Test
    public void testHashCodeDifferentRegistry() {
        Map<String, FormatFactory> registry2 = new HashMap<>();
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Test pattern", registry2);
        assertNotEquals(emf.hashCode(), emf2.hashCode());
    }

    @Test
    public void testGetFormat() {
        // Assuming a mock FormatFactory is implemented and added to the registry
        // FormatFactory mockFactory = new MockFormatFactory();
        // registry.put("mock", mockFactory);
        // Format format = emf.getFormat("mock,arg");
        // assertNotNull(format);
    }

    @Test
    public void testReadArgumentIndex() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testParseFormatDescription() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testInsertFormats() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testSeekNonWs() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testNext() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testAppendQuotedString() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testGetQuotedString() {
        // Testing private method directly is not possible, indirect testing through public methods
    }

    @Test
    public void testContainsElements() {
        // Testing private method directly is not possible, indirect testing through public methods
    }
}
```