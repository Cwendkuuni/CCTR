```java
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;

public class DurationFormatUtilsTest {

    @Test
    public void testFormatDurationHMS() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(0));
        assertEquals("0:00:01.000", DurationFormatUtils.formatDurationHMS(1000));
        assertEquals("0:01:00.000", DurationFormatUtils.formatDurationHMS(60000));
        assertEquals("1:00:00.000", DurationFormatUtils.formatDurationHMS(3600000));
    }

    @Test
    public void testFormatDurationISO() {
        assertEquals("P0D", DurationFormatUtils.formatDurationISO(0));
        assertEquals("PT1S", DurationFormatUtils.formatDurationISO(1000));
        assertEquals("PT1M", DurationFormatUtils.formatDurationISO(60000));
        assertEquals("PT1H", DurationFormatUtils.formatDurationISO(3600000));
    }

    @Test
    public void testFormatDuration() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatDuration(0, "H:mm:ss.SSS"));
        assertEquals("0:00:01.000", DurationFormatUtils.formatDuration(1000, "H:mm:ss.SSS"));
        assertEquals("0:01:00.000", DurationFormatUtils.formatDuration(60000, "H:mm:ss.SSS"));
        assertEquals("1:00:00.000", DurationFormatUtils.formatDuration(3600000, "H:mm:ss.SSS"));
    }

    @Test
    public void testFormatDurationWords() {
        assertEquals("0 seconds", DurationFormatUtils.formatDurationWords(0, true, true));
        assertEquals("1 second", DurationFormatUtils.formatDurationWords(1000, true, true));
        assertEquals("1 minute", DurationFormatUtils.formatDurationWords(60000, true, true));
        assertEquals("1 hour", DurationFormatUtils.formatDurationWords(3600000, true, true));
    }

    @Test
    public void testFormatPeriodISO() {
        assertEquals("P0D", DurationFormatUtils.formatPeriodISO(0, 0));
        assertEquals("PT1S", DurationFormatUtils.formatPeriodISO(0, 1000));
        assertEquals("PT1M", DurationFormatUtils.formatPeriodISO(0, 60000));
        assertEquals("PT1H", DurationFormatUtils.formatPeriodISO(0, 3600000));
    }

    @Test
    public void testFormatPeriod() {
        assertEquals("P0D", DurationFormatUtils.formatPeriod(0, 0, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", false, TimeZone.getDefault()));
        assertEquals("PT1S", DurationFormatUtils.formatPeriod(0, 1000, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", false, TimeZone.getDefault()));
        assertEquals("PT1M", DurationFormatUtils.formatPeriod(0, 60000, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", false, TimeZone.getDefault()));
        assertEquals("PT1H", DurationFormatUtils.formatPeriod(0, 3600000, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", false, TimeZone.getDefault()));
    }

    @Test
    public void testFormatPeriodWithCustomFormat() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatPeriod(0, 0, "H:mm:ss.SSS"));
        assertEquals("0:00:01.000", DurationFormatUtils.formatPeriod(0, 1000, "H:mm:ss.SSS"));
        assertEquals("0:01:00.000", DurationFormatUtils.formatPeriod(0, 60000, "H:mm:ss.SSS"));
        assertEquals("1:00:00.000", DurationFormatUtils.formatPeriod(0, 3600000, "H:mm:ss.SSS"));
    }

    @Test
    public void testFormat() {
        Token[] tokens = DurationFormatUtils.lexx("H:mm:ss.SSS");
        assertEquals("0:00:00.000", DurationFormatUtils.format(tokens, 0, 0, 0, 0, 0, 0, 0, true));
        assertEquals("0:00:01.000", DurationFormatUtils.format(tokens, 0, 0, 0, 0, 0, 1, 0, true));
        assertEquals("0:01:00.000", DurationFormatUtils.format(tokens, 0, 0, 0, 0, 1, 0, 0, true));
        assertEquals("1:00:00.000", DurationFormatUtils.format(tokens, 0, 0, 0, 1, 0, 0, 0, true));
    }

    @Test
    public void testPaddedValue() {
        assertEquals("000", DurationFormatUtils.paddedValue(0, true, 3));
        assertEquals("001", DurationFormatUtils.paddedValue(1, true, 3));
        assertEquals("123", DurationFormatUtils.paddedValue(123, true, 3));
        assertEquals("123", DurationFormatUtils.paddedValue(123, false, 3));
    }

    @Test
    public void testLexx() {
        Token[] tokens = DurationFormatUtils.lexx("H:mm:ss.SSS");
        assertEquals(7, tokens.length);
        assertEquals("H", tokens[0].getValue());
        assertEquals(":", tokens[1].getValue());
        assertEquals("m", tokens[2].getValue());
        assertEquals("m", tokens[3].getValue());
        assertEquals(":", tokens[4].getValue());
        assertEquals("s", tokens[5].getValue());
        assertEquals("s", tokens[6].getValue());
    }

    @Test
    public void testTokenContainsTokenWithValue() {
        Token[] tokens = { new Token("H"), new Token("m"), new Token("s") };
        assertTrue(Token.containsTokenWithValue(tokens, "H"));
        assertTrue(Token.containsTokenWithValue(tokens, "m"));
        assertTrue(Token.containsTokenWithValue(tokens, "s"));
        assertFalse(Token.containsTokenWithValue(tokens, "d"));
    }

    @Test
    public void testTokenEquals() {
        Token token1 = new Token("H");
        Token token2 = new Token("H");
        Token token3 = new Token("m");
        assertTrue(token1.equals(token2));
        assertFalse(token1.equals(token3));
    }

    @Test
    public void testTokenHashCode() {
        Token token1 = new Token("H");
        Token token2 = new Token("H");
        Token token3 = new Token("m");
        assertEquals(token1.hashCode(), token2.hashCode());
        assertNotEquals(token1.hashCode(), token3.hashCode());
    }

    @Test
    public void testTokenToString() {
        Token token = new Token("H", 2);
        assertEquals("HH", token.toString());
    }
}
```