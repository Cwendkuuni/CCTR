```java
package org.apache.commons.lang3.builder;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class HashCodeBuilderTest {

    private HashCodeBuilder hashCodeBuilder;

    @Before
    public void setUp() {
        hashCodeBuilder = new HashCodeBuilder();
    }

    @Test
    public void testDefaultConstructor() {
        assertEquals(17, hashCodeBuilder.toHashCode());
        assertEquals(37, hashCodeBuilder.iConstant);
    }

    @Test
    public void testConstructorWithParameters() {
        HashCodeBuilder builder = new HashCodeBuilder(19, 31);
        assertEquals(19, builder.toHashCode());
        assertEquals(31, builder.iConstant);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEvenInitialOddNumber() {
        new HashCodeBuilder(20, 31);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEvenMultiplierOddNumber() {
        new HashCodeBuilder(19, 32);
    }

    @Test
    public void testAppendBoolean() {
        hashCodeBuilder.append(true);
        assertEquals(38, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendBooleanArray() {
        hashCodeBuilder.append(new boolean[]{true, false});
        assertEquals(1445, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendByte() {
        hashCodeBuilder.append((byte) 1);
        assertEquals(54, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendByteArray() {
        hashCodeBuilder.append(new byte[]{1, 2});
        assertEquals(1078, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendChar() {
        hashCodeBuilder.append('a');
        assertEquals(100, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendCharArray() {
        hashCodeBuilder.append(new char[]{'a', 'b'});
        assertEquals(4489, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendDouble() {
        hashCodeBuilder.append(1.0);
        assertEquals(1234, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendDoubleArray() {
        hashCodeBuilder.append(new double[]{1.0, 2.0});
        assertEquals(1234, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendFloat() {
        hashCodeBuilder.append(1.0f);
        assertEquals(1234, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendFloatArray() {
        hashCodeBuilder.append(new float[]{1.0f, 2.0f});
        assertEquals(1234, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendInt() {
        hashCodeBuilder.append(1);
        assertEquals(54, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendIntArray() {
        hashCodeBuilder.append(new int[]{1, 2});
        assertEquals(1078, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendLong() {
        hashCodeBuilder.append(1L);
        assertEquals(54, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendLongArray() {
        hashCodeBuilder.append(new long[]{1L, 2L});
        assertEquals(1078, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendObject() {
        hashCodeBuilder.append("test");
        assertEquals(1234, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendObjectArray() {
        hashCodeBuilder.append(new Object[]{"test", "test2"});
        assertEquals(1234, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendShort() {
        hashCodeBuilder.append((short) 1);
        assertEquals(54, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendShortArray() {
        hashCodeBuilder.append(new short[]{1, 2});
        assertEquals(1078, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testAppendSuper() {
        hashCodeBuilder.appendSuper(1);
        assertEquals(54, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testToHashCode() {
        assertEquals(17, hashCodeBuilder.toHashCode());
    }

    @Test
    public void testBuild() {
        assertEquals(17, hashCodeBuilder.build().intValue());
    }

    @Test
    public void testHashCode() {
        assertEquals(17, hashCodeBuilder.hashCode());
    }

    @Test
    public void testReflectionHashCode() {
        assertEquals(1234, HashCodeBuilder.reflectionHashCode(17, 37, new Object()));
    }

    @Test
    public void testReflectionHashCodeWithTransients() {
        assertEquals(1234, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), true));
    }

    @Test
    public void testReflectionHashCodeWithExcludeFields() {
        assertEquals(1234, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), false, null, "field1", "field2"));
    }

    @Test
    public void testReflectionHashCodeWithCollectionExcludeFields() {
        assertEquals(1234, HashCodeBuilder.reflectionHashCode(new Object(), Arrays.asList("field1", "field2")));
    }

    @Test
    public void testReflectionHashCodeWithStringExcludeFields() {
        assertEquals(1234, HashCodeBuilder.reflectionHashCode(new Object(), "field1", "field2"));
    }

    @Test
    public void testReflectionHashCodeWithTransientsAndExcludeFields() {
        assertEquals(1234, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), true, null, "field1", "field2"));
    }

    @Test
    public void testReflectionHashCodeWithNullObject() {
        try {
            HashCodeBuilder.reflectionHashCode(17, 37, null, true, null, "field1", "field2");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("The object to build a hash code for must not be null", e.getMessage());
        }
    }

    @Test
    public void testRegisterAndUnregister() {
        Object obj = new Object();
        HashCodeBuilder.register(obj);
        assertTrue(HashCodeBuilder.isRegistered(obj));
        HashCodeBuilder.unregister(obj);
        assertFalse(HashCodeBuilder.isRegistered(obj));
    }
}
```