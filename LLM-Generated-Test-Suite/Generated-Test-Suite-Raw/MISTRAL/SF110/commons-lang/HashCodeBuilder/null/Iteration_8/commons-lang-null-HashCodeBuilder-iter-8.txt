```java
package org.apache.commons.lang3.builder;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;

public class HashCodeBuilderTest {

    private HashCodeBuilder builder;

    @Before
    public void setUp() {
        builder = new HashCodeBuilder();
    }

    @After
    public void tearDown() {
        builder = null;
    }

    @Test
    public void testDefaultConstructor() {
        assertEquals(17, builder.toHashCode());
    }

    @Test
    public void testConstructorWithOddNumbers() {
        HashCodeBuilder builder = new HashCodeBuilder(19, 31);
        assertEquals(19, builder.toHashCode());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEvenInitialNumber() {
        new HashCodeBuilder(20, 31);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEvenMultiplierNumber() {
        new HashCodeBuilder(19, 32);
    }

    @Test
    public void testAppendBoolean() {
        builder.append(true);
        assertEquals(37 * 17 + 0, builder.toHashCode());
    }

    @Test
    public void testAppendBooleanArray() {
        builder.append(new boolean[]{true, false});
        assertEquals(37 * (37 * (37 * 17 + 0) + 1), builder.toHashCode());
    }

    @Test
    public void testAppendByte() {
        builder.append((byte) 1);
        assertEquals(37 * 17 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendByteArray() {
        builder.append(new byte[]{1, 2});
        assertEquals(37 * (37 * 17 + 1) + 2, builder.toHashCode());
    }

    @Test
    public void testAppendChar() {
        builder.append('a');
        assertEquals(37 * 17 + 'a', builder.toHashCode());
    }

    @Test
    public void testAppendCharArray() {
        builder.append(new char[]{'a', 'b'});
        assertEquals(37 * (37 * 17 + 'a') + 'b', builder.toHashCode());
    }

    @Test
    public void testAppendDouble() {
        builder.append(1.0);
        assertEquals(37 * 17 + Double.doubleToLongBits(1.0), builder.toHashCode());
    }

    @Test
    public void testAppendDoubleArray() {
        builder.append(new double[]{1.0, 2.0});
        assertEquals(37 * (37 * 17 + Double.doubleToLongBits(1.0)) + Double.doubleToLongBits(2.0), builder.toHashCode());
    }

    @Test
    public void testAppendFloat() {
        builder.append(1.0f);
        assertEquals(37 * 17 + Float.floatToIntBits(1.0f), builder.toHashCode());
    }

    @Test
    public void testAppendFloatArray() {
        builder.append(new float[]{1.0f, 2.0f});
        assertEquals(37 * (37 * 17 + Float.floatToIntBits(1.0f)) + Float.floatToIntBits(2.0f), builder.toHashCode());
    }

    @Test
    public void testAppendInt() {
        builder.append(1);
        assertEquals(37 * 17 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendIntArray() {
        builder.append(new int[]{1, 2});
        assertEquals(37 * (37 * 17 + 1) + 2, builder.toHashCode());
    }

    @Test
    public void testAppendLong() {
        builder.append(1L);
        assertEquals(37 * 17 + (int)(1L ^ 1L >> 32), builder.toHashCode());
    }

    @Test
    public void testAppendLongArray() {
        builder.append(new long[]{1L, 2L});
        assertEquals(37 * (37 * 17 + (int)(1L ^ 1L >> 32)) + (int)(2L ^ 2L >> 32), builder.toHashCode());
    }

    @Test
    public void testAppendObject() {
        builder.append("test");
        assertEquals(37 * 17 + "test".hashCode(), builder.toHashCode());
    }

    @Test
    public void testAppendObjectArray() {
        builder.append(new Object[]{"test1", "test2"});
        assertEquals(37 * (37 * 17 + "test1".hashCode()) + "test2".hashCode(), builder.toHashCode());
    }

    @Test
    public void testAppendShort() {
        builder.append((short) 1);
        assertEquals(37 * 17 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendShortArray() {
        builder.append(new short[]{1, 2});
        assertEquals(37 * (37 * 17 + 1) + 2, builder.toHashCode());
    }

    @Test
    public void testAppendSuper() {
        builder.appendSuper(1);
        assertEquals(37 * 17 + 1, builder.toHashCode());
    }

    @Test
    public void testToHashCode() {
        assertEquals(17, builder.toHashCode());
    }

    @Test
    public void testBuild() {
        assertEquals(17, builder.build().intValue());
    }

    @Test
    public void testHashCode() {
        assertEquals(17, builder.hashCode());
    }

    @Test
    public void testReflectionHashCode() {
        assertEquals(17, HashCodeBuilder.reflectionHashCode(17, 37, new Object()));
    }

    @Test
    public void testReflectionHashCodeWithTransients() {
        assertEquals(17, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), true));
    }

    @Test
    public void testReflectionHashCodeWithExcludeFields() {
        assertEquals(17, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), false, null, "field"));
    }

    @Test
    public void testReflectionHashCodeWithCollectionExcludeFields() {
        Collection<String> excludeFields = new HashSet<>(Arrays.asList("field"));
        assertEquals(17, HashCodeBuilder.reflectionHashCode(new Object(), excludeFields));
    }

    @Test
    public void testReflectionHashCodeWithStringExcludeFields() {
        assertEquals(17, HashCodeBuilder.reflectionHashCode(new Object(), "field"));
    }

    @Test
    public void testReflectionHashCodeWithTransientsAndExcludeFields() {
        assertEquals(17, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), true, null, "field"));
    }

    @Test
    public void testReflectionHashCodeWithNullObject() {
        try {
            HashCodeBuilder.reflectionHashCode(17, 37, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("The object to build a hash code for must not be null", e.getMessage());
        }
    }

    @Test
    public void testReflectionHashCodeWithReflectUpToClass() {
        assertEquals(17, HashCodeBuilder.reflectionHashCode(17, 37, new Object(), false, Object.class, "field"));
    }

    @Test
    public void testGetRegistry() {
        assertNull(HashCodeBuilder.getRegistry());
    }

    @Test
    public void testIsRegistered() {
        assertFalse(HashCodeBuilder.isRegistered(new Object()));
    }

    @Test
    public void testRegister() {
        Object obj = new Object();
        HashCodeBuilder.register(obj);
        assertTrue(HashCodeBuilder.isRegistered(obj));
    }

    @Test
    public void testUnregister() {
        Object obj = new Object();
        HashCodeBuilder.register(obj);
        HashCodeBuilder.unregister(obj);
        assertFalse(HashCodeBuilder.isRegistered(obj));
    }
}
```