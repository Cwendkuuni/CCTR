```java
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.junit.Test;
import static org.junit.Assert.*;

public class HashCodeBuilderTest {

    @Test
    public void testDefaultConstructor() {
        HashCodeBuilder builder = new HashCodeBuilder();
        assertEquals(17, builder.toHashCode());
    }

    @Test
    public void testConstructorWithInitialAndMultiplier() {
        HashCodeBuilder builder = new HashCodeBuilder(19, 31);
        assertEquals(19, builder.toHashCode());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEvenInitial() {
        new HashCodeBuilder(20, 31);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithEvenMultiplier() {
        new HashCodeBuilder(19, 32);
    }

    @Test
    public void testAppendBoolean() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(true);
        assertEquals(17 * 37 + 0, builder.toHashCode());
    }

    @Test
    public void testAppendBooleanArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new boolean[]{true, false});
        assertEquals(17 * 37 * 37 * 37 + 0 * 37 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendByte() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append((byte) 1);
        assertEquals(17 * 37 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendByteArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new byte[]{1, 2});
        assertEquals(17 * 37 * 37 + 1 * 37 + 2, builder.toHashCode());
    }

    @Test
    public void testAppendChar() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append('a');
        assertEquals(17 * 37 + 'a', builder.toHashCode());
    }

    @Test
    public void testAppendCharArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new char[]{'a', 'b'});
        assertEquals(17 * 37 * 37 + 'a' * 37 + 'b', builder.toHashCode());
    }

    @Test
    public void testAppendDouble() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(1.0);
        assertEquals(17 * 37 + Double.doubleToLongBits(1.0), builder.toHashCode());
    }

    @Test
    public void testAppendDoubleArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new double[]{1.0, 2.0});
        assertEquals(17 * 37 * 37 + Double.doubleToLongBits(1.0) * 37 + Double.doubleToLongBits(2.0), builder.toHashCode());
    }

    @Test
    public void testAppendFloat() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(1.0f);
        assertEquals(17 * 37 + Float.floatToIntBits(1.0f), builder.toHashCode());
    }

    @Test
    public void testAppendFloatArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new float[]{1.0f, 2.0f});
        assertEquals(17 * 37 * 37 + Float.floatToIntBits(1.0f) * 37 + Float.floatToIntBits(2.0f), builder.toHashCode());
    }

    @Test
    public void testAppendInt() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(1);
        assertEquals(17 * 37 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendIntArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new int[]{1, 2});
        assertEquals(17 * 37 * 37 + 1 * 37 + 2, builder.toHashCode());
    }

    @Test
    public void testAppendLong() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(1L);
        assertEquals(17 * 37 + (int)(1L ^ 1L >> 32), builder.toHashCode());
    }

    @Test
    public void testAppendLongArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new long[]{1L, 2L});
        assertEquals(17 * 37 * 37 + (int)(1L ^ 1L >> 32) * 37 + (int)(2L ^ 2L >> 32), builder.toHashCode());
    }

    @Test
    public void testAppendObject() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append("test");
        assertEquals(17 * 37 + "test".hashCode(), builder.toHashCode());
    }

    @Test
    public void testAppendObjectArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new Object[]{"test1", "test2"});
        assertEquals(17 * 37 * 37 + "test1".hashCode() * 37 + "test2".hashCode(), builder.toHashCode());
    }

    @Test
    public void testAppendShort() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append((short) 1);
        assertEquals(17 * 37 + 1, builder.toHashCode());
    }

    @Test
    public void testAppendShortArray() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(new short[]{1, 2});
        assertEquals(17 * 37 * 37 + 1 * 37 + 2, builder.toHashCode());
    }

    @Test
    public void testAppendSuper() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.appendSuper(1);
        assertEquals(17 * 37 + 1, builder.toHashCode());
    }

    @Test
    public void testToHashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();
        assertEquals(17, builder.toHashCode());
    }

    @Test
    public void testBuild() {
        HashCodeBuilder builder = new HashCodeBuilder();
        assertEquals(17, builder.build().intValue());
    }

    @Test
    public void testHashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();
        assertEquals(17, builder.hashCode());
    }

    @Test
    public void testReflectionHashCode() {
        class TestClass {
            int a = 1;
            int b = 2;
        }
        TestClass obj = new TestClass();
        int hashCode = HashCodeBuilder.reflectionHashCode(17, 37, obj);
        assertEquals(17 * 37 * 37 + 1 * 37 + 2, hashCode);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testReflectionHashCodeWithNullObject() {
        HashCodeBuilder.reflectionHashCode(17, 37, null);
    }

    @Test
    public void testReflectionHashCodeWithExcludeFields() {
        class TestClass {
            int a = 1;
            int b = 2;
        }
        TestClass obj = new TestClass();
        int hashCode = HashCodeBuilder.reflectionHashCode(17, 37, obj, false, null, "b");
        assertEquals(17 * 37 + 1, hashCode);
    }

    @Test
    public void testReflectionHashCodeWithTransients() {
        class TestClass {
            transient int a = 1;
            int b = 2;
        }
        TestClass obj = new TestClass();
        int hashCode = HashCodeBuilder.reflectionHashCode(17, 37, obj, true);
        assertEquals(17 * 37 * 37 + 1 * 37 + 2, hashCode);
    }

    @Test
    public void testReflectionHashCodeWithCollectionExcludeFields() {
        class TestClass {
            int a = 1;
            int b = 2;
        }
        TestClass obj = new TestClass();
        int hashCode = HashCodeBuilder.reflectionHashCode(obj, Arrays.asList("b"));
        assertEquals(17 * 37 + 1, hashCode);
    }

    @Test
    public void testReflectionHashCodeWithStringExcludeFields() {
        class TestClass {
            int a = 1;
            int b = 2;
        }
        TestClass obj = new TestClass();
        int hashCode = HashCodeBuilder.reflectionHashCode(obj, "b");
        assertEquals(17 * 37 + 1, hashCode);
    }
}
```