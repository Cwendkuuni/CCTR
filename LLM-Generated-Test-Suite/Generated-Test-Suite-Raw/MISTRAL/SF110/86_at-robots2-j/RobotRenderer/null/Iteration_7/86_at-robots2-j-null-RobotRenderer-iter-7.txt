```java
package net.virtualinfinity.atrobots.gui.renderers;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.util.HashSet;
import java.util.Set;
import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;

public class RobotRendererTest {

    private RobotRenderer robotRenderer;
    private RobotSnapshot robotSnapshot;
    private Graphics2D g2d;
    private Set<Integer> selectedRobotIds;

    @Before
    public void setUp() {
        robotRenderer = new RobotRenderer();
        robotSnapshot = new RobotSnapshot(); // Assuming a default constructor or mock
        g2d = new MockGraphics2D(); // Assuming a mock implementation of Graphics2D
        selectedRobotIds = new HashSet<>();
    }

    @Test
    public void testRenderDeadRobot() {
        robotSnapshot.setDead(true);
        robotRenderer.setRenderDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that nothing is rendered
        assertTrue(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testRenderLiveRobot() {
        robotSnapshot.setDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that body, shield, turret, armor, heat, and name are rendered
        assertFalse(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testRenderSelectedRobot() {
        selectedRobotIds.add(robotSnapshot.getId());
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that selection is rendered
        assertTrue(((MockGraphics2D) g2d).containsShape(new Ellipse2D.Double()));
    }

    @Test
    public void testIsRenderDead() {
        assertTrue(robotRenderer.isRenderDead());
        robotRenderer.setRenderDead(false);
        assertFalse(robotRenderer.isRenderDead());
    }

    @Test
    public void testIsShowStatusBars() {
        assertTrue(robotRenderer.isShowStatusBars());
        robotRenderer.setShowStatusBars(false);
        assertFalse(robotRenderer.isShowStatusBars());
    }

    @Test
    public void testIsShowName() {
        assertTrue(robotRenderer.isShowName());
        robotRenderer.setShowName(false);
        assertFalse(robotRenderer.isShowName());
    }

    @Test
    public void testIsFillShield() {
        assertTrue(robotRenderer.isFillShield());
        robotRenderer.setFillShield(false);
        assertFalse(robotRenderer.isFillShield());
    }

    // Additional tests for private methods can be added using reflection or by exposing them for testing purposes

    // Mock implementation of Graphics2D for testing purposes
    private static class MockGraphics2D extends Graphics2D {
        private boolean empty = true;
        private Set<Shape> shapes = new HashSet<>();

        @Override
        public void draw(Shape s) {
            empty = false;
            shapes.add(s);
        }

        @Override
        public void fill(Shape s) {
            empty = false;
            shapes.add(s);
        }

        public boolean isEmpty() {
            return empty;
        }

        public boolean containsShape(Shape s) {
            return shapes.contains(s);
        }

        // Implement other methods as needed for testing
    }
}
```