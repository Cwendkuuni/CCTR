```java
package net.virtualinfinity.atrobots.gui.renderers;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.util.HashSet;
import java.util.Set;
import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;

public class RobotRendererTest {

    private RobotRenderer robotRenderer;
    private RobotSnapshot robotSnapshot;
    private Graphics2D g2d;
    private Set<Integer> selectedRobotIds;

    @Before
    public void setUp() {
        robotRenderer = new RobotRenderer();
        robotSnapshot = new RobotSnapshot(); // Assuming a default constructor for RobotSnapshot
        g2d = new MockGraphics2D(); // Assuming a mock implementation of Graphics2D
        selectedRobotIds = new HashSet<>();
    }

    @Test
    public void testConstructor() {
        assertTrue(robotRenderer.isRenderDead());
        assertTrue(robotRenderer.isShowStatusBars());
        assertTrue(robotRenderer.isShowName());
        assertTrue(robotRenderer.isFillShield());
    }

    @Test
    public void testRenderDead() {
        robotSnapshot.setDead(true);
        robotRenderer.setRenderDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that no rendering occurs
        assertTrue(((MockGraphics2D) g2d).isEmpty());

        robotRenderer.setRenderDead(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that rendering occurs
        assertFalse(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testRenderAlive() {
        robotSnapshot.setDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that all parts are rendered
        assertFalse(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testShowStatusBars() {
        robotSnapshot.setDead(false);
        robotRenderer.setShowStatusBars(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that status bars are rendered
        assertFalse(((MockGraphics2D) g2d).isEmpty());

        robotRenderer.setShowStatusBars(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that status bars are not rendered
        assertTrue(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testShowName() {
        robotSnapshot.setDead(false);
        robotRenderer.setShowName(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that name is rendered
        assertFalse(((MockGraphics2D) g2d).isEmpty());

        robotRenderer.setShowName(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that name is not rendered
        assertTrue(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testFillShield() {
        robotSnapshot.setDead(false);
        robotSnapshot.setActiveShield(true);
        robotRenderer.setFillShield(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that shield is filled
        assertFalse(((MockGraphics2D) g2d).isEmpty());

        robotRenderer.setFillShield(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that shield is not filled
        assertTrue(((MockGraphics2D) g2d).isEmpty());
    }

    @Test
    public void testPaintSelection() {
        selectedRobotIds.add(robotSnapshot.getId());
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that selection is painted
        assertFalse(((MockGraphics2D) g2d).isEmpty());
    }

    // Mock implementation of Graphics2D for testing purposes
    private static class MockGraphics2D extends Graphics2D {
        private boolean empty = true;

        @Override
        public void draw(Shape s) {
            empty = false;
        }

        @Override
        public void fill(Shape s) {
            empty = false;
        }

        @Override
        public void drawString(String str, float x, float y) {
            empty = false;
        }

        public boolean isEmpty() {
            return empty;
        }

        // Other methods can be mocked as needed
    }
}
```