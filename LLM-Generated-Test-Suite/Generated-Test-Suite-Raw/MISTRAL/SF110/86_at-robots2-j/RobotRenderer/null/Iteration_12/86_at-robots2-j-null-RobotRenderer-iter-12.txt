```java
package net.virtualinfinity.atrobots.gui.renderers;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.awt.Graphics2D;
import java.util.HashSet;
import java.util.Set;
import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;

public class RobotRendererTest {

    private RobotRenderer robotRenderer;
    private RobotSnapshot robotSnapshot;
    private Graphics2D g2d;
    private Set<Integer> selectedRobotIds;

    @Before
    public void setUp() {
        robotRenderer = new RobotRenderer();
        robotSnapshot = new RobotSnapshot(); // Assuming a default constructor exists
        g2d = new MockGraphics2D(); // Assuming a mock implementation of Graphics2D
        selectedRobotIds = new HashSet<>();
    }

    @Test
    public void testRenderDead() {
        robotSnapshot.setDead(true);
        robotRenderer.setRenderDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that no painting methods were called
    }

    @Test
    public void testRenderAlive() {
        robotSnapshot.setDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that painting methods were called
    }

    @Test
    public void testIsRenderDead() {
        robotRenderer.setRenderDead(true);
        assertTrue(robotRenderer.isRenderDead());
        robotRenderer.setRenderDead(false);
        assertFalse(robotRenderer.isRenderDead());
    }

    @Test
    public void testIsShowStatusBars() {
        robotRenderer.setShowStatusBars(true);
        assertTrue(robotRenderer.isShowStatusBars());
        robotRenderer.setShowStatusBars(false);
        assertFalse(robotRenderer.isShowStatusBars());
    }

    @Test
    public void testIsShowName() {
        robotRenderer.setShowName(true);
        assertTrue(robotRenderer.isShowName());
        robotRenderer.setShowName(false);
        assertFalse(robotRenderer.isShowName());
    }

    @Test
    public void testIsFillShield() {
        robotRenderer.setFillShield(true);
        assertTrue(robotRenderer.isFillShield());
        robotRenderer.setFillShield(false);
        assertFalse(robotRenderer.isFillShield());
    }

    @Test
    public void testPaintSelection() {
        selectedRobotIds.add(robotSnapshot.getId());
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintSelection was called
    }

    @Test
    public void testPaintShield() {
        robotSnapshot.setActiveShield(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintShield was called
    }

    @Test
    public void testPaintName() {
        robotRenderer.setShowName(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintName was called
    }

    @Test
    public void testPaintHeat() {
        robotRenderer.setShowStatusBars(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintHeat was called
    }

    @Test
    public void testPaintArmor() {
        robotRenderer.setShowStatusBars(true);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintArmor was called
    }

    @Test
    public void testPaintTurret() {
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintTurret was called
    }

    @Test
    public void testPaintBody() {
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        // Verify that paintBody was called
    }
}
```

Note:
1. The `MockGraphics2D` class is assumed to be a mock implementation of `Graphics2D` for testing purposes.
2. The `RobotSnapshot` class is assumed to have appropriate getters and setters for its properties.
3. The actual verification of painting methods being called would require a more sophisticated mocking framework or custom implementation to track method calls.
4. The test suite assumes that the `RobotSnapshot` class has a default constructor and appropriate methods to set its state. Adjustments may be needed based on the actual implementation of `RobotSnapshot`.