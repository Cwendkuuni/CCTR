```java
package net.virtualinfinity.atrobots.gui.renderers;

import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.HashSet;
import java.util.Set;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class RobotRendererTest {

    private RobotRenderer robotRenderer;
    private Graphics2D g2d;
    private RobotSnapshot robotSnapshot;
    private Set<Integer> selectedRobotIds;

    @Before
    public void setUp() {
        robotRenderer = new RobotRenderer();
        g2d = mock(Graphics2D.class);
        robotSnapshot = mock(RobotSnapshot.class);
        selectedRobotIds = new HashSet<>();
    }

    @Test
    public void testConstructor() {
        assertTrue(robotRenderer.isRenderDead());
        assertTrue(robotRenderer.isShowStatusBars());
        assertTrue(robotRenderer.isShowName());
        assertTrue(robotRenderer.isFillShield());
    }

    @Test
    public void testRenderDead() {
        when(robotSnapshot.isDead()).thenReturn(true);
        robotRenderer.setRenderDead(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        verify(g2d, never()).fill(any());
        verify(g2d, never()).draw(any());
    }

    @Test
    public void testRenderAlive() {
        when(robotSnapshot.isDead()).thenReturn(false);
        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);
        verify(g2d, atLeastOnce()).fill(any());
        verify(g2d, atLeastOnce()).draw(any());
    }

    @Test
    public void testIsRenderDead() {
        assertTrue(robotRenderer.isRenderDead());
    }

    @Test
    public void testSetRenderDead() {
        robotRenderer.setRenderDead(false);
        assertFalse(robotRenderer.isRenderDead());
    }

    @Test
    public void testIsShowStatusBars() {
        assertTrue(robotRenderer.isShowStatusBars());
    }

    @Test
    public void testSetShowStatusBars() {
        robotRenderer.setShowStatusBars(false);
        assertFalse(robotRenderer.isShowStatusBars());
    }

    @Test
    public void testIsShowName() {
        assertTrue(robotRenderer.isShowName());
    }

    @Test
    public void testSetShowName() {
        robotRenderer.setShowName(false);
        assertFalse(robotRenderer.isShowName());
    }

    @Test
    public void testIsFillShield() {
        assertTrue(robotRenderer.isFillShield());
    }

    @Test
    public void testSetFillShield() {
        robotRenderer.setFillShield(false);
        assertFalse(robotRenderer.isFillShield());
    }

    @Test
    public void testPaintSelection() {
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        selectedRobotIds.add(1);
        when(robotSnapshot.getId()).thenReturn(1);

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(Color.class));
        verify(g2d).fill(any(Ellipse2D.class));
    }

    @Test
    public void testPaintShield() {
        when(robotSnapshot.isActiveShield()).thenReturn(true);
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        when(robotSnapshot.getPositionVector()).thenReturn(mock(Vector.class));

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(RadialGradientPaint.class));
        verify(g2d).fill(any(Ellipse2D.class));
    }

    @Test
    public void testPaintName() {
        when(robotSnapshot.getName()).thenReturn("RobotName");
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        FontMetrics fontMetrics = mock(FontMetrics.class);
        when(g2d.getFontMetrics()).thenReturn(fontMetrics);
        when(fontMetrics.getStringBounds(anyString(), any(Graphics.class))).thenReturn(new Rectangle2D.Double(0, 0, 50, 10));

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(Color.class));
        verify(g2d).drawString(anyString(), anyFloat(), anyFloat());
    }

    @Test
    public void testPaintHeat() {
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        when(robotSnapshot.getTemperature()).thenReturn(mock(Temperature.class));
        when(robotSnapshot.getTemperature().getLogScale()).thenReturn(50.0);

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(GradientPaint.class));
        verify(g2d).fill(any(Rectangle2D.class));
        verify(g2d).draw(any(Rectangle2D.class));
    }

    @Test
    public void testPaintArmor() {
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        when(robotSnapshot.getArmor()).thenReturn(75.0);

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(Color.class));
        verify(g2d).fill(any(Rectangle2D.class));
        verify(g2d).draw(any(Rectangle2D.class));
    }

    @Test
    public void testPaintTurret() {
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        when(robotSnapshot.getTurretHeading()).thenReturn(mock(AbsoluteAngle.class));
        when(robotSnapshot.getTurretHeading().cosine()).thenReturn(1.0);
        when(robotSnapshot.getTurretHeading().sine()).thenReturn(0.0);

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(Color.class));
        verify(g2d).draw(any(Line2D.class));
    }

    @Test
    public void testPaintBody() {
        when(robotSnapshot.getX()).thenReturn(10.0);
        when(robotSnapshot.getY()).thenReturn(20.0);
        when(robotSnapshot.getHeading()).thenReturn(mock(AbsoluteAngle.class));
        when(robotSnapshot.getHeading().cosine()).thenReturn(1.0);
        when(robotSnapshot.getHeading().sine()).thenReturn(0.0);
        when(robotSnapshot.getHeading().counterClockwise(any(RelativeAngle.class))).thenReturn(mock(AbsoluteAngle.class));
        when(robotSnapshot.getHeading().clockwise(any(RelativeAngle.class))).thenReturn(mock(AbsoluteAngle.class));

        robotRenderer.render(g2d, robotSnapshot, selectedRobotIds);

        verify(g2d).setPaint(any(Color.class));
        verify(g2d).fill(any(GeneralPath.class));
    }
}
```