```java
package freemind.extensions;

import freemind.view.mindmapview.MapView;
import freemind.modes.ModeController;
import freemind.main.Tools;
import freemind.main.Resources;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.MessageFormat;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ExportHookTest {

    private ExportHook exportHook;
    private ModeController mockController;
    private MapView mockView;

    @Before
    public void setUp() {
        exportHook = new ExportHook();
        mockController = mock(ModeController.class);
        mockView = mock(MapView.class);
        when(mockController.getView()).thenReturn(mockView);
        exportHook.setController(mockController);
    }

    @Test
    public void testChooseFile() {
        String type = "png";
        String description = "PNG Image";
        String nameExtension = ".png";

        File file = exportHook.chooseFile(type, description, nameExtension);
        assertNull(file); // Assuming the file chooser dialog is not shown in a test environment
    }

    @Test
    public void testChooseImageFile() {
        String type = "png";
        String description = "PNG Image";
        String nameExtension = ".png";

        ModeController mockController = mock(ModeController.class);
        JFrame mockFrame = mock(JFrame.class);
        Container mockContainer = mock(Container.class);
        when(mockController.getFrame()).thenReturn(mockFrame);
        when(mockFrame.getContentPane()).thenReturn(mockContainer);

        FreeMindFileDialog mockChooser = mock(FreeMindFileDialog.class);
        when(mockController.getFileChooser(any(FileFilter.class))).thenReturn(mockChooser);
        when(mockChooser.showSaveDialog(mockContainer)).thenReturn(JFileChooser.APPROVE_OPTION);

        File mmFile = new File("test.mm");
        when(mockController.getMap().getFile()).thenReturn(mmFile);

        File file = ExportHook.chooseImageFile(type, description, nameExtension, mockController);
        assertNotNull(file);
    }

    @Test
    public void testGetTranslatableResourceString() {
        String resourceName = "%test";
        when(exportHook.getResourceString(resourceName)).thenReturn(resourceName);
        when(mockController.getText("test")).thenReturn("Test String");

        String result = exportHook.getTranslatableResourceString(resourceName);
        assertEquals("Test String", result);
    }

    @Test
    public void testCreateBufferedImage() {
        Rectangle innerBounds = new Rectangle(0, 0, 100, 100);
        when(mockView.getInnerBounds()).thenReturn(innerBounds);
        BufferedImage mockImage = mock(BufferedImage.class);
        when(mockView.createImage(anyInt(), anyInt())).thenReturn(mockImage);

        BufferedImage image = exportHook.createBufferedImage();
        assertNotNull(image);
    }

    @Test
    public void testCopyFromResource() {
        String prefix = "prefix/";
        String fileName = "test.txt";
        String destinationDirectory = "destination/";

        try {
            URL mockURL = mock(URL.class);
            when(exportHook.getResource(prefix + fileName)).thenReturn(mockURL);
            InputStream mockInputStream = mock(InputStream.class);
            when(mockURL.openStream()).thenReturn(mockInputStream);
            OutputStream mockOutputStream = mock(FileOutputStream.class);
            PowerMockito.mockStatic(FileOutputStream.class);
            whenNew(FileOutputStream.class).withArguments(destinationDirectory + "/" + fileName).thenReturn(mockOutputStream);

            exportHook.copyFromResource(prefix, fileName, destinationDirectory);

            verify(mockInputStream).close();
            verify(mockOutputStream).close();
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testCopyFromFile() {
        String dir = "source/";
        String fileName = "test.txt";
        String destinationDirectory = "destination/";

        try {
            File mockFile = mock(File.class);
            whenNew(File.class).withArguments(dir, fileName).thenReturn(mockFile);
            InputStream mockInputStream = mock(InputStream.class);
            when(mockFile.exists()).thenReturn(true);
            whenNew(FileInputStream.class).withArguments(mockFile).thenReturn(mockInputStream);
            OutputStream mockOutputStream = mock(FileOutputStream.class);
            PowerMockito.mockStatic(FileOutputStream.class);
            whenNew(FileOutputStream.class).withArguments(destinationDirectory + "/" + fileName).thenReturn(mockOutputStream);

            exportHook.copyFromFile(dir, fileName, destinationDirectory);

            verify(mockInputStream).close();
            verify(mockOutputStream).close();
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testImageFilterAccept() {
        ExportHook.ImageFilter filter = new ExportHook.ImageFilter("png", "PNG Image");
        File file = mock(File.class);
        when(file.isDirectory()).thenReturn(false);
        when(file.getName()).thenReturn("test.png");

        assertTrue(filter.accept(file));
    }

    @Test
    public void testImageFilterGetDescription() {
        ExportHook.ImageFilter filter = new ExportHook.ImageFilter("png", "PNG Image");
        assertEquals("PNG Image", filter.getDescription());
    }
}
```