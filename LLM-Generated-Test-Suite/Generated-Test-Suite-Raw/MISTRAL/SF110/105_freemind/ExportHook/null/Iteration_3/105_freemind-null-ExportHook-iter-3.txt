```java
package freemind.extensions;

import freemind.view.mindmapview.MapView;
import freemind.modes.ModeController;
import freemind.main.Tools;
import freemind.main.Resources;
import freemind.main.FreeMindFileDialog;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.text.MessageFormat;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({Tools.class, Resources.class, FreeMindFileDialog.class, JOptionPane.class})
public class ExportHookTest {

    @Mock
    private ModeController controller;

    @Mock
    private MapView view;

    @Mock
    private FreeMindFileDialog chooser;

    @Mock
    private File mmFile;

    @Mock
    private File chosenFile;

    @Mock
    private URL resource;

    @Mock
    private InputStream in;

    @Mock
    private FileOutputStream out;

    private ExportHook exportHook;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        exportHook = new ExportHook();
        exportHook.setController(controller);
    }

    @Test
    public void testChooseFile() {
        when(controller.getFileChooser(any(FileFilter.class))).thenReturn(chooser);
        when(controller.getMap()).thenReturn(mock(freemind.modes.MindMap.class));
        when(controller.getMap().getFile()).thenReturn(mmFile);
        when(mmFile.getAbsolutePath()).thenReturn("test.mm");
        when(chooser.showSaveDialog(any(Container.class))).thenReturn(0);
        when(chooser.getSelectedFile()).thenReturn(chosenFile);
        when(chosenFile.getName()).thenReturn("test.png");
        when(chosenFile.getParent()).thenReturn("parent");
        when(chosenFile.exists()).thenReturn(false);

        File file = exportHook.chooseFile("png", "PNG Image", ".png");
        assertNotNull(file);
        assertEquals("test.png", file.getName());
    }

    @Test
    public void testChooseImageFile() {
        when(controller.getFileChooser(any(FileFilter.class))).thenReturn(chooser);
        when(controller.getMap()).thenReturn(mock(freemind.modes.MindMap.class));
        when(controller.getMap().getFile()).thenReturn(mmFile);
        when(mmFile.getAbsolutePath()).thenReturn("test.mm");
        when(chooser.showSaveDialog(any(Container.class))).thenReturn(0);
        when(chooser.getSelectedFile()).thenReturn(chosenFile);
        when(chosenFile.getName()).thenReturn("test.png");
        when(chosenFile.getParent()).thenReturn("parent");
        when(chosenFile.exists()).thenReturn(false);

        File file = ExportHook.chooseImageFile("png", "PNG Image", ".png", controller);
        assertNotNull(file);
        assertEquals("test.png", file.getName());
    }

    @Test
    public void testGetTranslatableResourceString() {
        when(exportHook.getResourceString("test")).thenReturn("%test");
        when(controller.getText("test")).thenReturn("Test");

        String result = exportHook.getTranslatableResourceString("test");
        assertEquals("Test", result);
    }

    @Test
    public void testCreateBufferedImage() {
        when(controller.getView()).thenReturn(view);
        when(view.getInnerBounds()).thenReturn(new Rectangle(0, 0, 100, 100));
        BufferedImage image = mock(BufferedImage.class);
        when(view.createImage(100, 100)).thenReturn(image);

        BufferedImage result = exportHook.createBufferedImage();
        assertNotNull(result);
    }

    @Test
    public void testCopyFromResource() throws Exception {
        PowerMockito.mockStatic(Tools.class);
        PowerMockito.mockStatic(Resources.class);
        when(exportHook.getResource("prefixfileName")).thenReturn(resource);
        when(resource.openStream()).thenReturn(in);
        PowerMockito.doNothing().when(Tools.class, "copyStream", in, out, true);

        exportHook.copyFromResource("prefix", "fileName", "destinationDirectory");
        verify(out).close();
    }

    @Test
    public void testCopyFromFile() throws Exception {
        PowerMockito.mockStatic(Tools.class);
        PowerMockito.mockStatic(Resources.class);
        File resourceFile = mock(File.class);
        when(new File("dir", "fileName")).thenReturn(resourceFile);
        when(resourceFile.exists()).thenReturn(true);
        when(new FileInputStream(resourceFile)).thenReturn(in);
        PowerMockito.doNothing().when(Tools.class, "copyStream", in, out, true);

        exportHook.copyFromFile("dir", "fileName", "destinationDirectory");
        verify(out).close();
    }

    @Test
    public void testImageFilterAccept() {
        ExportHook.ImageFilter filter = new ExportHook.ImageFilter("png", "PNG Image");
        File file = mock(File.class);
        when(file.isDirectory()).thenReturn(false);
        when(file.getName()).thenReturn("test.png");
        PowerMockito.mockStatic(Tools.class);
        when(Tools.getExtension("test.png")).thenReturn("png");
        when(Tools.safeEqualsIgnoreCase("png", "png")).thenReturn(true);

        assertTrue(filter.accept(file));
    }

    @Test
    public void testImageFilterGetDescription() {
        ExportHook.ImageFilter filter = new ExportHook.ImageFilter("png", "PNG Image");
        assertEquals("PNG Image", filter.getDescription());
    }
}
```