```java
package freemind.extensions;

import freemind.view.mindmapview.MapView;
import freemind.modes.ModeController;
import freemind.main.Tools;
import freemind.main.Resources;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.MessageFormat;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ExportHookTest {

    private ExportHook exportHook;
    private ModeController mockController;
    private MapView mockView;

    @Before
    public void setUp() {
        exportHook = new ExportHook();
        mockController = mock(ModeController.class);
        mockView = mock(MapView.class);
        exportHook.setController(mockController);
    }

    @Test
    public void testChooseFile() {
        when(mockController.getFrame()).thenReturn(new JFrame());
        when(mockController.getFileChooser(any(FileFilter.class))).thenReturn(new FreeMindFileDialog(new JFrame()));
        when(mockController.getMap()).thenReturn(mock(MindMap.class));
        when(mockController.getMap().getFile()).thenReturn(new File("test.mm"));

        File file = exportHook.chooseFile("png", "PNG Image", ".png");
        assertNotNull(file);
    }

    @Test
    public void testChooseImageFile() {
        when(mockController.getFrame()).thenReturn(new JFrame());
        when(mockController.getFileChooser(any(FileFilter.class))).thenReturn(new FreeMindFileDialog(new JFrame()));
        when(mockController.getMap()).thenReturn(mock(MindMap.class));
        when(mockController.getMap().getFile()).thenReturn(new File("test.mm"));

        File file = ExportHook.chooseImageFile("png", "PNG Image", ".png", mockController);
        assertNotNull(file);
    }

    @Test
    public void testGetTranslatableResourceString() {
        when(mockController.getText(anyString())).thenReturn("Translated Text");

        String result = exportHook.getTranslatableResourceString("%resourceName");
        assertEquals("Translated Text", result);
    }

    @Test
    public void testCreateBufferedImage() {
        when(mockController.getView()).thenReturn(mockView);
        when(mockView.getInnerBounds()).thenReturn(new Rectangle(0, 0, 100, 100));
        when(mockView.createImage(anyInt(), anyInt())).thenReturn(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB));

        BufferedImage image = exportHook.createBufferedImage();
        assertNotNull(image);
        assertEquals(100, image.getWidth());
        assertEquals(100, image.getHeight());
    }

    @Test
    public void testCopyFromResource() {
        URL mockUrl = mock(URL.class);
        when(exportHook.getResource(anyString())).thenReturn(mockUrl);
        try {
            when(mockUrl.openStream()).thenReturn(mock(InputStream.class));
            exportHook.copyFromResource("prefix", "fileName", "destinationDirectory");
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testCopyFromFile() {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        try {
            when(new FileInputStream(mockFile)).thenReturn(mock(InputStream.class));
            exportHook.copyFromFile("dir", "fileName", "destinationDirectory");
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testImageFilterAccept() {
        ExportHook.ImageFilter filter = new ExportHook.ImageFilter("png", "PNG Image");
        assertTrue(filter.accept(new File("test.png")));
        assertFalse(filter.accept(new File("test.jpg")));
    }

    @Test
    public void testImageFilterGetDescription() {
        ExportHook.ImageFilter filter = new ExportHook.ImageFilter("png", "PNG Image");
        assertEquals("PNG Image", filter.getDescription());
    }
}
```