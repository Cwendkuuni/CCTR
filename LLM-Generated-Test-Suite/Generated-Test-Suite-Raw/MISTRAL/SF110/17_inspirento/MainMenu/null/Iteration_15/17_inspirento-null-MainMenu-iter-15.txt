```java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.InspirentoMediator;
import com.allenstudio.ir.util.InspirentoUtilities;
import com.allenstudio.ir.util.UIResources;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import javax.swing.*;
import java.util.MissingResourceException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MainMenuTest {

    @Mock
    private InspirentoMediator mediator;

    @Mock
    private UIResources uiResources;

    private MainMenu mainMenu;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mainMenu = new MainMenu(mediator);
    }

    @Test
    public void testConstructor() {
        when(UIResources.getString("menu")).thenReturn("menu1,menu2");
        when(UIResources.getString("menu1Label")).thenReturn("Menu1");
        when(UIResources.getString("menu2Label")).thenReturn("Menu2");

        MainMenu menu = new MainMenu(mediator);
        assertEquals(2, menu.getMenuCount());
        assertEquals("Menu1", menu.getMenu(0).getText());
        assertEquals("Menu2", menu.getMenu(1).getText());
    }

    @Test
    public void testCreateMenu() {
        when(UIResources.getString("menu1Label")).thenReturn("Menu1");
        when(UIResources.getString("menu1")).thenReturn("item1,item2");
        when(UIResources.getString("item1Label")).thenReturn("Item1");
        when(UIResources.getString("item2Label")).thenReturn("Item2");

        JMenu menu = mainMenu.createMenu("menu1");
        assertEquals("Menu1", menu.getText());
        assertEquals(2, menu.getItemCount());
        assertEquals("Item1", menu.getItem(0).getText());
        assertEquals("Item2", menu.getItem(1).getText());
    }

    @Test
    public void testCreateMenuWithMnemonic() {
        when(UIResources.getString("menu1Label")).thenReturn("Menu1*M");
        when(UIResources.getString("menu1")).thenReturn("item1,item2");
        when(UIResources.getString("item1Label")).thenReturn("Item1");
        when(UIResources.getString("item2Label")).thenReturn("Item2");

        JMenu menu = mainMenu.createMenu("menu1");
        assertEquals("Menu1", menu.getText());
        assertEquals('M', menu.getMnemonic());
    }

    @Test
    public void testCreateMenuWithSubMenu() {
        when(UIResources.getString("menu1Label")).thenReturn("Menu1");
        when(UIResources.getString("menu1")).thenReturn("submenu1>,item1");
        when(UIResources.getString("submenu1Label")).thenReturn("SubMenu1");
        when(UIResources.getString("submenu1")).thenReturn("subitem1");
        when(UIResources.getString("subitem1Label")).thenReturn("SubItem1");
        when(UIResources.getString("item1Label")).thenReturn("Item1");

        JMenu menu = mainMenu.createMenu("menu1");
        assertEquals("Menu1", menu.getText());
        assertEquals(2, menu.getItemCount());
        assertEquals("SubMenu1", ((JMenu) menu.getItem(0)).getText());
        assertEquals("Item1", menu.getItem(1).getText());
    }

    @Test
    public void testCreateMenuWithCheckBoxMenuItem() {
        when(UIResources.getString("menu1Label")).thenReturn("Menu1");
        when(UIResources.getString("menu1")).thenReturn("#item1");
        when(UIResources.getString("item1Label")).thenReturn("Item1");

        JMenu menu = mainMenu.createMenu("menu1");
        assertEquals("Menu1", menu.getText());
        assertEquals(1, menu.getItemCount());
        assertTrue(menu.getItem(0) instanceof JCheckBoxMenuItem);
        assertEquals("Item1", menu.getItem(0).getText());
    }

    @Test
    public void testAddShortcutAndIcon() {
        JMenuItem item = new JMenuItem("TestItem");
        when(UIResources.getString("testItemShortcut")).thenReturn("ctrl T");
        when(UIResources.getString("testItemIcon")).thenReturn("/path/to/icon.png");
        when(mainMenu.getClass().getResource("/path/to/icon.png")).thenReturn(getClass().getResource("/path/to/icon.png"));

        mainMenu.addShortcutAndIcon(item, "testItem");
        assertEquals(KeyStroke.getKeyStroke("ctrl T"), item.getAccelerator());
        assertNotNull(item.getIcon());
    }

    @Test
    public void testChanged() {
        mainMenu.changed();
        // No implementation, so no assertions needed
    }
}
```