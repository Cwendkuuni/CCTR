```java
package fr.pingtimeout.jtail.gui.action;

import fr.pingtimeout.jtail.util.JTailLogger;
import fr.pingtimeout.jtail.gui.message.InformationHandler;
import fr.pingtimeout.jtail.gui.message.UIMessage;
import fr.pingtimeout.jtail.gui.controller.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.io.index.FileIndexer;
import fr.pingtimeout.jtail.io.index.FileIndexerWorker;
import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.io.index.RamFileIndex;
import fr.pingtimeout.jtail.io.index.RomFileIndex;
import fr.pingtimeout.jtail.io.LineReader;
import fr.pingtimeout.jtail.gui.model.JTailModel;
import fr.pingtimeout.jtail.gui.message.ExceptionHandler;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Observable;

import static org.mockito.Mockito.*;

public class IndexFileActionTest {

    private IndexFileAction indexFileAction;
    private JTailMainModel jTailMainModel;
    private OpenFileModel openFileModel;

    @Before
    public void setUp() {
        jTailMainModel = mock(JTailMainModel.class);
        openFileModel = mock(OpenFileModel.class);
        indexFileAction = new IndexFileAction(jTailMainModel, openFileModel);
    }

    @Test
    public void testActionPerformed_NoFileSelected() {
        ActionEvent actionEvent = mock(ActionEvent.class);
        when(openFileModel.getFile()).thenReturn(null);

        indexFileAction.actionPerformed(actionEvent);

        verify(InformationHandler).handle(true, UIMessage.INFO_NO_FILE_SELECTED, new Object[0]);
    }

    @Test
    public void testActionPerformed_MemoryBasedIndex() throws FileNotFoundException {
        ActionEvent actionEvent = mock(ActionEvent.class);
        File file = mock(File.class);
        when(openFileModel.getFile()).thenReturn(file);
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.MEMORY_BASED);

        FileIndexer fileIndexer = mock(FileIndexer.class);
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));

        FileIndexerWorker fileIndexerWorker = mock(FileIndexerWorker.class);
        doNothing().when(fileIndexerWorker).execute();

        indexFileAction.actionPerformed(actionEvent);

        verify(fileIndexerWorker).execute();
    }

    @Test
    public void testActionPerformed_FileBasedIndex() throws FileNotFoundException {
        ActionEvent actionEvent = mock(ActionEvent.class);
        File file = mock(File.class);
        when(openFileModel.getFile()).thenReturn(file);
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.FILE_BASED);

        FileIndexer fileIndexer = mock(FileIndexer.class);
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));

        FileIndexerWorker fileIndexerWorker = mock(FileIndexerWorker.class);
        doNothing().when(fileIndexerWorker).execute();

        indexFileAction.actionPerformed(actionEvent);

        verify(fileIndexerWorker).execute();
    }

    @Test
    public void testActionPerformed_FileNotFoundException() throws FileNotFoundException {
        ActionEvent actionEvent = mock(ActionEvent.class);
        File file = mock(File.class);
        when(openFileModel.getFile()).thenReturn(file);
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.MEMORY_BASED);

        doThrow(new FileNotFoundException()).when(mock(FileIndexer.class)).addObserver(any());

        indexFileAction.actionPerformed(actionEvent);

        verify(ExceptionHandler).handle(any(FileNotFoundException.class), eq(UIMessage.ERROR_FILE_NOT_FOUND), eq(file.getName()));
    }

    @Test
    public void testUpdate_NotificationReceived() {
        Observable observable = mock(Observable.class);
        FileIndexer fileIndexer = mock(FileIndexer.class);
        when(observable).equals(fileIndexer);
        File file = mock(File.class);
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));

        indexFileAction.update(observable, 100);

        verify(jTailMainModel).add(any(JTailModel.class));
    }

    @Test
    public void testUpdate_FileNotFoundException() throws FileNotFoundException {
        Observable observable = mock(Observable.class);
        FileIndexer fileIndexer = mock(FileIndexer.class);
        when(observable).equals(fileIndexer);
        File file = mock(File.class);
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));

        doThrow(new FileNotFoundException()).when(mock(LineReader.class)).newInstance(file, fileIndexer.getIndex());

        indexFileAction.update(observable, 100);

        verify(ExceptionHandler).handle(any(FileNotFoundException.class), eq(UIMessage.ERROR_FILE_NOT_FOUND), eq(file.getName()));
    }

    @Test
    public void testUpdate_GenericException() {
        Observable observable = mock(Observable.class);
        FileIndexer fileIndexer = mock(FileIndexer.class);
        when(observable).equals(fileIndexer);
        File file = mock(File.class);
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));

        doThrow(new RuntimeException()).when(mock(LineReader.class)).newInstance(file, fileIndexer.getIndex());

        indexFileAction.update(observable, 100);

        verify(ExceptionHandler).handle(any(RuntimeException.class), eq(UIMessage.ERROR_GENERIC_MESSAGE), eq(new Object[0]));
    }
}
```