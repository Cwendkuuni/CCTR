```java
package fr.pingtimeout.jtail.gui.action;

import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.io.index.FileIndexer;
import fr.pingtimeout.jtail.io.index.RamFileIndex;
import fr.pingtimeout.jtail.io.index.RomFileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import fr.pingtimeout.jtail.gui.message.InformationHandler;
import fr.pingtimeout.jtail.gui.message.UIMessage;
import fr.pingtimeout.jtail.gui.message.ExceptionHandler;
import fr.pingtimeout.jtail.io.LineReader;
import fr.pingtimeout.jtail.gui.model.JTailModel;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Observable;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class IndexFileActionTest {

    @Mock
    private JTailMainModel jTailMainModel;

    @Mock
    private OpenFileModel openFileModel;

    @Mock
    private FileIndexer fileIndexer;

    @Mock
    private FileIndexerWorker fileIndexerWorker;

    @Mock
    private File file;

    @Mock
    private LineReader lineReader;

    @Mock
    private JTailModel jTailModel;

    private IndexFileAction indexFileAction;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        indexFileAction = new IndexFileAction(jTailMainModel, openFileModel);
    }

    @Test
    public void testActionPerformedWithNoFileSelected() {
        when(openFileModel.getFile()).thenReturn(null);
        ActionEvent actionEvent = mock(ActionEvent.class);
        JDialog dialog = mock(JDialog.class);
        when(actionEvent.getSource()).thenReturn(dialog);

        indexFileAction.actionPerformed(actionEvent);

        verify(dialog).setVisible(false);
        verify(InformationHandler).handle(true, UIMessage.INFO_NO_FILE_SELECTED, new Object[0]);
    }

    @Test
    public void testActionPerformedWithMemoryBasedIndex() throws Exception {
        when(openFileModel.getFile()).thenReturn(file);
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.MEMORY_BASED);
        ActionEvent actionEvent = mock(ActionEvent.class);
        JDialog dialog = mock(JDialog.class);
        when(actionEvent.getSource()).thenReturn(dialog);

        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(RamFileIndex.class));
        when(new FileIndexer(file, RamFileIndex.class)).thenReturn(fileIndexer);
        when(fileIndexerWorker.execute()).thenReturn(null);

        indexFileAction.actionPerformed(actionEvent);

        verify(dialog).setVisible(false);
        verify(fileIndexer).addObserver(indexFileAction);
        verify(fileIndexerWorker).execute();
    }

    @Test
    public void testActionPerformedWithFileBasedIndex() throws Exception {
        when(openFileModel.getFile()).thenReturn(file);
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.FILE_BASED);
        ActionEvent actionEvent = mock(ActionEvent.class);
        JDialog dialog = mock(JDialog.class);
        when(actionEvent.getSource()).thenReturn(dialog);

        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(RomFileIndex.class));
        when(new FileIndexer(file, RomFileIndex.class)).thenReturn(fileIndexer);
        when(fileIndexerWorker.execute()).thenReturn(null);

        indexFileAction.actionPerformed(actionEvent);

        verify(dialog).setVisible(false);
        verify(fileIndexer).addObserver(indexFileAction);
        verify(fileIndexerWorker).execute();
    }

    @Test
    public void testActionPerformedWithFileNotFoundException() throws Exception {
        when(openFileModel.getFile()).thenReturn(file);
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.MEMORY_BASED);
        ActionEvent actionEvent = mock(ActionEvent.class);
        JDialog dialog = mock(JDialog.class);
        when(actionEvent.getSource()).thenReturn(dialog);

        when(new FileIndexer(file, RamFileIndex.class)).thenThrow(new FileNotFoundException());

        indexFileAction.actionPerformed(actionEvent);

        verify(dialog).setVisible(false);
        verify(ExceptionHandler).handle(any(FileNotFoundException.class), eq(UIMessage.ERROR_FILE_NOT_FOUND), eq(file.getName()));
    }

    @Test
    public void testUpdateWithNotification100() throws Exception {
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));
        when(new LineReader(file, fileIndexer.getIndex())).thenReturn(lineReader);
        when(new JTailModel(file, lineReader)).thenReturn(jTailModel);

        indexFileAction.update(fileIndexer, 100);

        verify(jTailMainModel).add(jTailModel);
    }

    @Test
    public void testUpdateWithFileNotFoundException() throws Exception {
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));
        when(new LineReader(file, fileIndexer.getIndex())).thenThrow(new FileNotFoundException());

        indexFileAction.update(fileIndexer, 100);

        verify(ExceptionHandler).handle(any(FileNotFoundException.class), eq(UIMessage.ERROR_FILE_NOT_FOUND), eq(file.getName()));
    }

    @Test
    public void testUpdateWithGenericException() throws Exception {
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndex.class));
        when(new LineReader(file, fileIndexer.getIndex())).thenThrow(new Exception());

        indexFileAction.update(fileIndexer, 100);

        verify(ExceptionHandler).handle(any(Exception.class), eq(UIMessage.ERROR_GENERIC_MESSAGE), any());
    }
}
```