```java
package fr.pingtimeout.jtail.gui.view;

import fr.pingtimeout.jtail.util.*;
import fr.pingtimeout.jtail.gui.controller.*;
import fr.pingtimeout.jtail.gui.model.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.util.Observable;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class JTailPanelTest {

    private JTailModel mockModel;
    private JTailPanel jTailPanel;

    @Before
    public void setUp() {
        mockModel = mock(JTailModel.class);
        jTailPanel = new JTailPanel(mockModel);
    }

    @Test
    public void testConstructor() {
        assertNotNull(jTailPanel.model);
        assertNotNull(jTailPanel.scrollPane);
        assertNotNull(jTailPanel.verticalScrollBar);
        assertNotNull(jTailPanel.dataTable);
        assertNotNull(jTailPanel.tableModel);
        assertTrue(jTailPanel.characterHeight > 0);
        assertTrue(jTailPanel.maxCharacterWidth > 0);
    }

    @Test
    public void testGetCharacterHeight() {
        int characterHeight = jTailPanel.getCharacterHeight();
        assertTrue(characterHeight > 0);
    }

    @Test
    public void testGetVerticalScrollBar() {
        JScrollBar verticalScrollBar = jTailPanel.getVerticalScrollBar();
        assertNotNull(verticalScrollBar);
    }

    @Test
    public void testUpdateWithResizeEvent() {
        JTailModelEvent resizeEvent = new JTailModelEvent(mockModel, JTailModelEvent.Type.RESIZED, 0, 0, 0, 0);
        jTailPanel.update(mockModel, resizeEvent);

        verify(mockModel, times(1)).getLineNumbers();
        verify(mockModel, times(1)).getContent();
    }

    @Test
    public void testUpdateWithScrollEvent() {
        JTailModelEvent scrollEvent = new JTailModelEvent(mockModel, JTailModelEvent.Type.SCROLLED, 0, 0, 0, 0);
        jTailPanel.update(mockModel, scrollEvent);

        verify(mockModel, times(1)).getLineNumbers();
        verify(mockModel, times(1)).getContent();
    }

    @Test
    public void testUpdateDataTable() {
        String lineNumbers = "1\n2\n3";
        String lines = "line1\nline2\nline3";

        jTailPanel.updateDataTable(lineNumbers, lines);

        assertEquals(3, jTailPanel.tableModel.getRowCount());
        assertEquals("1", jTailPanel.tableModel.getValueAt(0, 0));
        assertEquals("line1", jTailPanel.tableModel.getValueAt(0, 1));
        assertEquals("2", jTailPanel.tableModel.getValueAt(1, 0));
        assertEquals("line2", jTailPanel.tableModel.getValueAt(1, 1));
        assertEquals("3", jTailPanel.tableModel.getValueAt(2, 0));
        assertEquals("line3", jTailPanel.tableModel.getValueAt(2, 1));
    }

    @Test
    public void testUpdateDataTableWithMoreLineNumbersThanLines() {
        String lineNumbers = "1\n2\n3";
        String lines = "line1\nline2";

        jTailPanel.updateDataTable(lineNumbers, lines);

        assertEquals(3, jTailPanel.tableModel.getRowCount());
        assertEquals("1", jTailPanel.tableModel.getValueAt(0, 0));
        assertEquals("line1", jTailPanel.tableModel.getValueAt(0, 1));
        assertEquals("2", jTailPanel.tableModel.getValueAt(1, 0));
        assertEquals("line2", jTailPanel.tableModel.getValueAt(1, 1));
        assertEquals("3", jTailPanel.tableModel.getValueAt(2, 0));
        assertEquals("", jTailPanel.tableModel.getValueAt(2, 1));
    }
}
```