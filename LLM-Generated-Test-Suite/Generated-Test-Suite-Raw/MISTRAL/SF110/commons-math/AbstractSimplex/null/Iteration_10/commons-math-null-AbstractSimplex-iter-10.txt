```java
package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Before;
import org.junit.Test;

import java.util.Comparator;

import static org.junit.Assert.*;

public class AbstractSimplexTest {

    private AbstractSimplex simplex;

    @Before
    public void setUp() {
        simplex = new AbstractSimplex(2) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = NullArgumentException.class)
    public void testConstructorNullSteps() {
        new AbstractSimplex(null) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = ZeroException.class)
    public void testConstructorZeroLengthSteps() {
        new AbstractSimplex(new double[]{}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = ZeroException.class)
    public void testConstructorZeroStepValue() {
        new AbstractSimplex(new double[]{0.0}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorEmptyReferenceSimplex() {
        new AbstractSimplex(new double[][]{}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = DimensionMismatchException.class)
    public void testConstructorDimensionMismatch() {
        new AbstractSimplex(new double[][]{{1.0}, {1.0, 2.0}}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = MathIllegalArgumentException.class)
    public void testConstructorEqualVertices() {
        new AbstractSimplex(new double[][]{{1.0, 1.0}, {1.0, 1.0}}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test
    public void testGetDimension() {
        assertEquals(2, simplex.getDimension());
    }

    @Test
    public void testGetSize() {
        simplex.build(new double[]{1.0, 1.0});
        assertEquals(3, simplex.getSize());
    }

    @Test(expected = DimensionMismatchException.class)
    public void testBuildDimensionMismatch() {
        simplex.build(new double[]{1.0});
    }

    @Test
    public void testBuild() {
        simplex.build(new double[]{1.0, 1.0});
        assertEquals(3, simplex.getSize());
    }

    @Test
    public void testEvaluate() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.evaluate(new MultivariateFunction() {
            @Override
            public double value(double[] point) {
                return point[0] + point[1];
            }
        }, Comparator.naturalOrder());
        assertEquals(2.0, simplex.getPoint(0).getValue(), 0.0);
    }

    @Test(expected = OutOfRangeException.class)
    public void testGetPointOutOfRange() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.getPoint(3);
    }

    @Test
    public void testGetPoint() {
        simplex.build(new double[]{1.0, 1.0});
        assertNotNull(simplex.getPoint(0));
    }

    @Test(expected = OutOfRangeException.class)
    public void testSetPointOutOfRange() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.setPoint(3, new PointValuePair(new double[]{1.0, 1.0}, 1.0));
    }

    @Test
    public void testSetPoint() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.setPoint(0, new PointValuePair(new double[]{2.0, 2.0}, 4.0));
        assertEquals(4.0, simplex.getPoint(0).getValue(), 0.0);
    }

    @Test(expected = DimensionMismatchException.class)
    public void testSetPointsDimensionMismatch() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.setPoints(new PointValuePair[]{new PointValuePair(new double[]{1.0, 1.0}, 1.0)});
    }

    @Test
    public void testSetPoints() {
        simplex.build(new double[]{1.0, 1.0});
        PointValuePair[] points = new PointValuePair[]{
                new PointValuePair(new double[]{1.0, 1.0}, 2.0),
                new PointValuePair(new double[]{2.0, 2.0}, 4.0),
                new PointValuePair(new double[]{3.0, 3.0}, 6.0)
        };
        simplex.setPoints(points);
        assertEquals(2.0, simplex.getPoint(0).getValue(), 0.0);
    }

    @Test
    public void testGetPoints() {
        simplex.build(new double[]{1.0, 1.0});
        PointValuePair[] points = simplex.getPoints();
        assertEquals(3, points.length);
    }
}
```