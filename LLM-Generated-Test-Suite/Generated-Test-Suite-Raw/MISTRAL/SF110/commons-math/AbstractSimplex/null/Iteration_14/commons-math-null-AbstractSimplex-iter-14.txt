```java
package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Before;
import org.junit.Test;

import java.util.Comparator;

import static org.junit.Assert.*;

public class AbstractSimplexTest {

    private AbstractSimplex simplex;

    @Before
    public void setUp() {
        simplex = new AbstractSimplex(2) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test
    public void testConstructorWithDimension() {
        assertEquals(2, simplex.getDimension());
    }

    @Test
    public void testConstructorWithDimensionAndSideLength() {
        simplex = new AbstractSimplex(2, 2.0) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
        assertEquals(2, simplex.getDimension());
    }

    @Test(expected = NullArgumentException.class)
    public void testConstructorWithNullSteps() {
        new AbstractSimplex(null) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = ZeroException.class)
    public void testConstructorWithZeroLengthSteps() {
        new AbstractSimplex(new double[]{}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = ZeroException.class)
    public void testConstructorWithZeroStep() {
        new AbstractSimplex(new double[]{0.0}) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = MathIllegalArgumentException.class)
    public void testConstructorWithEqualVertices() {
        double[][] referenceSimplex = {
                {1.0, 1.0},
                {1.0, 1.0},
                {2.0, 2.0}
        };
        new AbstractSimplex(referenceSimplex) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = DimensionMismatchException.class)
    public void testConstructorWithDimensionMismatch() {
        double[][] referenceSimplex = {
                {1.0, 1.0},
                {2.0},
                {2.0, 2.0}
        };
        new AbstractSimplex(referenceSimplex) {
            @Override
            public void iterate(MultivariateFunction multivariateFunction, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test
    public void testGetDimension() {
        assertEquals(2, simplex.getDimension());
    }

    @Test
    public void testGetSize() {
        simplex.build(new double[]{1.0, 1.0});
        assertEquals(3, simplex.getSize());
    }

    @Test(expected = DimensionMismatchException.class)
    public void testBuildWithDimensionMismatch() {
        simplex.build(new double[]{1.0});
    }

    @Test
    public void testEvaluate() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.evaluate(new MultivariateFunction() {
            @Override
            public double value(double[] point) {
                return point[0] + point[1];
            }
        }, Comparator.naturalOrder());
        assertEquals(2.0, simplex.getPoint(0).getValue(), 0.0);
    }

    @Test(expected = OutOfRangeException.class)
    public void testGetPointWithInvalidIndex() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.getPoint(-1);
    }

    @Test(expected = OutOfRangeException.class)
    public void testSetPointWithInvalidIndex() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.setPoint(-1, new PointValuePair(new double[]{1.0, 1.0}, 1.0));
    }

    @Test(expected = DimensionMismatchException.class)
    public void testSetPointsWithDimensionMismatch() {
        simplex.build(new double[]{1.0, 1.0});
        simplex.setPoints(new PointValuePair[]{
                new PointValuePair(new double[]{1.0, 1.0}, 1.0),
                new PointValuePair(new double[]{2.0, 2.0}, 2.0)
        });
    }
}
```