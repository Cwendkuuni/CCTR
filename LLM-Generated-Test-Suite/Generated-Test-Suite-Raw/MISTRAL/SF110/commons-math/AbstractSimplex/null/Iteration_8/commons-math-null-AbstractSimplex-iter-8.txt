```java
package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Before;
import org.junit.Test;

import java.util.Comparator;

import static org.junit.Assert.*;

public class AbstractSimplexTest {

    private AbstractSimplex simplex;

    @Before
    public void setUp() {
        simplex = new AbstractSimplex(3) {
            @Override
            public void iterate(MultivariateFunction function, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test
    public void testConstructorWithDimension() {
        assertNotNull(simplex);
        assertEquals(3, simplex.getDimension());
    }

    @Test
    public void testConstructorWithDimensionAndSideLength() {
        AbstractSimplex simplex = new AbstractSimplex(3, 2.0) {
            @Override
            public void iterate(MultivariateFunction function, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
        assertNotNull(simplex);
        assertEquals(3, simplex.getDimension());
    }

    @Test(expected = NullArgumentException.class)
    public void testConstructorWithNullSteps() {
        new AbstractSimplex((double[]) null) {
            @Override
            public void iterate(MultivariateFunction function, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = ZeroException.class)
    public void testConstructorWithZeroLengthSteps() {
        new AbstractSimplex(new double[]{0.0}) {
            @Override
            public void iterate(MultivariateFunction function, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = ZeroException.class)
    public void testConstructorWithZeroInSteps() {
        new AbstractSimplex(new double[]{1.0, 0.0}) {
            @Override
            public void iterate(MultivariateFunction function, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = DimensionMismatchException.class)
    public void testConstructorWithReferenceSimplexDimensionMismatch() {
        new AbstractSimplex(new double[][]{{1.0}, {1.0, 2.0}}) {
            @Override
            public void iterate(MultivariateFunction function, Comparator<PointValuePair> comparator) {
                // Implementation not needed for testing
            }
        };
    }

    @Test(expected = DimensionMismatchException.class)
    public void testBuildWithDimensionMismatch() {
        simplex.build(new double[]{1.0, 2.0});
    }

    @Test
    public void testBuild() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        assertEquals(4, simplex.getSize());
    }

    @Test
    public void testEvaluate() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        simplex.evaluate(new MultivariateFunction() {
            @Override
            public double value(double[] point) {
                return point[0] + point[1] + point[2];
            }
        }, Comparator.naturalOrder());
        assertEquals(4, simplex.getSize());
    }

    @Test
    public void testReplaceWorstPoint() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        PointValuePair newPoint = new PointValuePair(new double[]{4.0, 5.0, 6.0}, 15.0);
        simplex.replaceWorstPoint(newPoint, Comparator.naturalOrder());
        assertEquals(newPoint, simplex.getPoint(3));
    }

    @Test
    public void testGetPoints() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        PointValuePair[] points = simplex.getPoints();
        assertEquals(4, points.length);
    }

    @Test
    public void testGetPoint() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        PointValuePair point = simplex.getPoint(0);
        assertNotNull(point);
    }

    @Test(expected = OutOfRangeException.class)
    public void testGetPointOutOfRange() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        simplex.getPoint(4);
    }

    @Test(expected = OutOfRangeException.class)
    public void testSetPointOutOfRange() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        simplex.setPoint(4, new PointValuePair(new double[]{1.0, 2.0, 3.0}, 6.0));
    }

    @Test
    public void testSetPoint() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        PointValuePair newPoint = new PointValuePair(new double[]{4.0, 5.0, 6.0}, 15.0);
        simplex.setPoint(0, newPoint);
        assertEquals(newPoint, simplex.getPoint(0));
    }

    @Test(expected = DimensionMismatchException.class)
    public void testSetPointsDimensionMismatch() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        simplex.setPoints(new PointValuePair[]{new PointValuePair(new double[]{1.0, 2.0, 3.0}, 6.0)});
    }

    @Test
    public void testSetPoints() {
        simplex.build(new double[]{1.0, 2.0, 3.0});
        PointValuePair[] newPoints = new PointValuePair[]{
                new PointValuePair(new double[]{1.0, 2.0, 3.0}, 6.0),
                new PointValuePair(new double[]{4.0, 5.0, 6.0}, 15.0),
                new PointValuePair(new double[]{7.0, 8.0, 9.0}, 24.0),
                new PointValuePair(new double[]{10.0, 11.0, 12.0}, 33.0)
        };
        simplex.setPoints(newPoints);
        assertArrayEquals(newPoints, simplex.getPoints());
    }
}
```