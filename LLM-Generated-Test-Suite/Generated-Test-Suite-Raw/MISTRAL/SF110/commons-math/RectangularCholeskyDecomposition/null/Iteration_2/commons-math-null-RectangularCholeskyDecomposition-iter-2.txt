```java
package org.apache.commons.math3.linear;

import org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.util.MathUtils;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class RectangularCholeskyDecompositionTest {

    private RealMatrix matrix;
    private RealMatrix nonPositiveDefiniteMatrix;

    @Before
    public void setUp() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        matrix = MatrixUtils.createRealMatrix(data);

        double[][] nonPositiveDefiniteData = {
            {1, 2},
            {2, 3}
        };
        nonPositiveDefiniteMatrix = MatrixUtils.createRealMatrix(nonPositiveDefiniteData);
    }

    @Test
    public void testConstructorWithDefaultThreshold() throws NonPositiveDefiniteMatrixException {
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);
        assertNotNull(decomposition);
    }

    @Test
    public void testConstructorWithCustomThreshold() throws NonPositiveDefiniteMatrixException {
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix, 1e-10);
        assertNotNull(decomposition);
    }

    @Test(expected = NonPositiveDefiniteMatrixException.class)
    public void testConstructorWithNonPositiveDefiniteMatrix() throws NonPositiveDefiniteMatrixException {
        new RectangularCholeskyDecomposition(nonPositiveDefiniteMatrix);
    }

    @Test
    public void testGetRootMatrix() throws NonPositiveDefiniteMatrixException {
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);
        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(matrix.getRowDimension(), rootMatrix.getRowDimension());
        assertEquals(matrix.getColumnDimension(), rootMatrix.getColumnDimension());
    }

    @Test
    public void testGetRank() throws NonPositiveDefiniteMatrixException {
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);
        int rank = decomposition.getRank();
        assertEquals(3, rank);
    }

    @Test
    public void testGetRankWithNonPositiveDefiniteMatrix() {
        try {
            RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(nonPositiveDefiniteMatrix);
            fail("Expected NonPositiveDefiniteMatrixException");
        } catch (NonPositiveDefiniteMatrixException e) {
            // Expected exception
        }
    }
}
```