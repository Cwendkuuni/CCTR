```java
package org.apache.commons.math3.fraction;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class FractionTest {

    private Fraction fraction1;
    private Fraction fraction2;
    private Fraction fraction3;

    @Before
    public void setUp() throws FractionConversionException {
        fraction1 = new Fraction(1, 2);
        fraction2 = new Fraction(3, 4);
        fraction3 = new Fraction(5, 6);
    }

    @Test
    public void testAbs() {
        Fraction negativeFraction = new Fraction(-1, 2);
        assertEquals(fraction1, negativeFraction.abs());
    }

    @Test
    public void testCompareTo() {
        assertTrue(fraction1.compareTo(fraction2) < 0);
        assertTrue(fraction2.compareTo(fraction1) > 0);
        assertTrue(fraction1.compareTo(fraction1) == 0);
    }

    @Test
    public void testDoubleValue() {
        assertEquals(0.5, fraction1.doubleValue(), 0.0001);
        assertEquals(0.75, fraction2.doubleValue(), 0.0001);
    }

    @Test
    public void testEquals() {
        assertTrue(fraction1.equals(new Fraction(1, 2)));
        assertFalse(fraction1.equals(fraction2));
    }

    @Test
    public void testFloatValue() {
        assertEquals(0.5f, fraction1.floatValue(), 0.0001f);
        assertEquals(0.75f, fraction2.floatValue(), 0.0001f);
    }

    @Test
    public void testGetDenominator() {
        assertEquals(2, fraction1.getDenominator());
        assertEquals(4, fraction2.getDenominator());
    }

    @Test
    public void testGetNumerator() {
        assertEquals(1, fraction1.getNumerator());
        assertEquals(3, fraction2.getNumerator());
    }

    @Test
    public void testHashCode() {
        assertEquals(fraction1.hashCode(), new Fraction(1, 2).hashCode());
        assertNotEquals(fraction1.hashCode(), fraction2.hashCode());
    }

    @Test
    public void testIntValue() {
        assertEquals(0, fraction1.intValue());
        assertEquals(0, fraction2.intValue());
    }

    @Test
    public void testLongValue() {
        assertEquals(0L, fraction1.longValue());
        assertEquals(0L, fraction2.longValue());
    }

    @Test
    public void testNagate() {
        assertEquals(new Fraction(-1, 2), fraction1.negate());
        assertEquals(new Fraction(-3, 4), fraction2.negate());
    }

    @Test
    public void testReciprocal() {
        assertEquals(new Fraction(2, 1), fraction1.reciprocal());
        assertEquals(new Fraction(4, 3), fraction2.reciprocal());
    }

    @Test
    public void testAdd() {
        assertEquals(new Fraction(5, 4), fraction1.add(fraction2));
        assertEquals(new Fraction(7, 2), fraction1.add(3));
    }

    @Test
    public void testSubtract() {
        assertEquals(new Fraction(-1, 4), fraction1.subtract(fraction2));
        assertEquals(new Fraction(-1, 2), fraction1.subtract(1));
    }

    @Test
    public void testMultiply() {
        assertEquals(new Fraction(3, 8), fraction1.multiply(fraction2));
        assertEquals(new Fraction(1, 2), fraction1.multiply(1));
    }

    @Test
    public void testDivide() {
        assertEquals(new Fraction(2, 3), fraction1.divide(fraction2));
        assertEquals(new Fraction(1, 2), fraction1.divide(1));
    }

    @Test
    public void testPercentageValue() {
        assertEquals(50.0, fraction1.percentageValue(), 0.0001);
        assertEquals(75.0, fraction2.percentageValue(), 0.0001);
    }

    @Test
    public void testGetReducedFraction() {
        assertEquals(new Fraction(1, 2), Fraction.getReducedFraction(1, 2));
        assertEquals(new Fraction(1, 1), Fraction.getReducedFraction(2, 2));
    }

    @Test
    public void testToString() {
        assertEquals("1 / 2", fraction1.toString());
        assertEquals("3 / 4", fraction2.toString());
    }

    @Test
    public void testGetField() {
        assertNotNull(fraction1.getField());
    }

    @Test(expected = FractionConversionException.class)
    public void testFractionConversionException() throws FractionConversionException {
        new Fraction(Double.MAX_VALUE);
    }

    @Test(expected = MathArithmeticException.class)
    public void testMathArithmeticException() {
        new Fraction(1, 0);
    }

    @Test(expected = NullArgumentException.class)
    public void testNullArgumentException() {
        fraction1.add(null);
    }
}
```