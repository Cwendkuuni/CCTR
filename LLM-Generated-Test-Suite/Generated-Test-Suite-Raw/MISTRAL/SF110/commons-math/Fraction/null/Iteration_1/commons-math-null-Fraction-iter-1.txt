```java
package org.apache.commons.math3.fraction;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

public class FractionTest {

    private Fraction fraction;

    @Before
    public void setUp() {
        fraction = new Fraction(3, 4);
    }

    @After
    public void tearDown() {
        fraction = null;
    }

    @Test
    public void testConstructorWithDouble() {
        try {
            Fraction f = new Fraction(0.75);
            assertEquals(3, f.getNumerator());
            assertEquals(4, f.getDenominator());
        } catch (FractionConversionException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testConstructorWithDoubleEpsilonMaxIterations() {
        try {
            Fraction f = new Fraction(0.75, 0.01, 100);
            assertEquals(3, f.getNumerator());
            assertEquals(4, f.getDenominator());
        } catch (FractionConversionException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testConstructorWithDoubleMaxDenominator() {
        try {
            Fraction f = new Fraction(0.75, 100);
            assertEquals(3, f.getNumerator());
            assertEquals(4, f.getDenominator());
        } catch (FractionConversionException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testConstructorWithInt() {
        Fraction f = new Fraction(5);
        assertEquals(5, f.getNumerator());
        assertEquals(1, f.getDenominator());
    }

    @Test
    public void testConstructorWithIntInt() {
        Fraction f = new Fraction(3, 4);
        assertEquals(3, f.getNumerator());
        assertEquals(4, f.getDenominator());
    }

    @Test(expected = MathArithmeticException.class)
    public void testConstructorWithZeroDenominator() {
        new Fraction(3, 0);
    }

    @Test
    public void testAbs() {
        Fraction f = new Fraction(-3, 4);
        assertEquals(new Fraction(3, 4), f.abs());
    }

    @Test
    public void testCompareTo() {
        Fraction f1 = new Fraction(3, 4);
        Fraction f2 = new Fraction(1, 2);
        assertEquals(0, f1.compareTo(f2));
    }

    @Test
    public void testDoubleValue() {
        assertEquals(0.75, fraction.doubleValue(), 0.0001);
    }

    @Test
    public void testEquals() {
        Fraction f1 = new Fraction(3, 4);
        Fraction f2 = new Fraction(3, 4);
        assertTrue(f1.equals(f2));
    }

    @Test
    public void testFloatValue() {
        assertEquals(0.75f, fraction.floatValue(), 0.0001f);
    }

    @Test
    public void testGetDenominator() {
        assertEquals(4, fraction.getDenominator());
    }

    @Test
    public void testGetNumerator() {
        assertEquals(3, fraction.getNumerator());
    }

    @Test
    public void testHashCode() {
        Fraction f1 = new Fraction(3, 4);
        Fraction f2 = new Fraction(3, 4);
        assertEquals(f1.hashCode(), f2.hashCode());
    }

    @Test
    public void testIntValue() {
        assertEquals(0, fraction.intValue());
    }

    @Test
    public void testLongValue() {
        assertEquals(0L, fraction.longValue());
    }

    @Test
    public void testNegate() {
        assertEquals(new Fraction(-3, 4), fraction.negate());
    }

    @Test
    public void testReciprocal() {
        assertEquals(new Fraction(4, 3), fraction.reciprocal());
    }

    @Test
    public void testAddFraction() {
        Fraction f1 = new Fraction(1, 2);
        Fraction f2 = new Fraction(1, 3);
        assertEquals(new Fraction(5, 6), f1.add(f2));
    }

    @Test
    public void testAddInt() {
        assertEquals(new Fraction(19, 4), fraction.add(4));
    }

    @Test
    public void testSubtractFraction() {
        Fraction f1 = new Fraction(1, 2);
        Fraction f2 = new Fraction(1, 3);
        assertEquals(new Fraction(1, 6), f1.subtract(f2));
    }

    @Test
    public void testSubtractInt() {
        assertEquals(new Fraction(-13, 4), fraction.subtract(4));
    }

    @Test
    public void testMultiplyFraction() {
        Fraction f1 = new Fraction(1, 2);
        Fraction f2 = new Fraction(1, 3);
        assertEquals(new Fraction(1, 6), f1.multiply(f2));
    }

    @Test
    public void testMultiplyInt() {
        assertEquals(new Fraction(12, 4), fraction.multiply(4));
    }

    @Test
    public void testDivideFraction() {
        Fraction f1 = new Fraction(1, 2);
        Fraction f2 = new Fraction(1, 3);
        assertEquals(new Fraction(3, 2), f1.divide(f2));
    }

    @Test
    public void testDivideInt() {
        assertEquals(new Fraction(3, 16), fraction.divide(4));
    }

    @Test
    public void testPercentageValue() {
        assertEquals(75.0, fraction.percentageValue(), 0.0001);
    }

    @Test
    public void testGetReducedFraction() {
        assertEquals(new Fraction(3, 4), Fraction.getReducedFraction(3, 4));
    }

    @Test
    public void testToString() {
        assertEquals("3 / 4", fraction.toString());
    }

    @Test
    public void testGetField() {
        assertNotNull(fraction.getField());
    }
}
```