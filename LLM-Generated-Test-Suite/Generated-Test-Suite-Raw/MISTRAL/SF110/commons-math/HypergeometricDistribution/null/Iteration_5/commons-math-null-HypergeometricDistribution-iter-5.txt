```java
package org.apache.commons.math3.distribution;

import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.Well19937c;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class HypergeometricDistributionTest {

    private HypergeometricDistribution distribution;

    @Before
    public void setUp() throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {
        distribution = new HypergeometricDistribution(50, 20, 10);
    }

    @Test
    public void testConstructor() {
        try {
            new HypergeometricDistribution(0, 20, 10);
            fail("Expected NotStrictlyPositiveException");
        } catch (NotStrictlyPositiveException e) {
            // Expected
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        try {
            new HypergeometricDistribution(50, -1, 10);
            fail("Expected NotPositiveException");
        } catch (NotPositiveException e) {
            // Expected
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        try {
            new HypergeometricDistribution(50, 20, -1);
            fail("Expected NotPositiveException");
        } catch (NotPositiveException e) {
            // Expected
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        try {
            new HypergeometricDistribution(50, 60, 10);
            fail("Expected NumberIsTooLargeException");
        } catch (NumberIsTooLargeException e) {
            // Expected
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        try {
            new HypergeometricDistribution(50, 20, 60);
            fail("Expected NumberIsTooLargeException");
        } catch (NumberIsTooLargeException e) {
            // Expected
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    public void testCumulativeProbability() {
        assertEquals(0.0, distribution.cumulativeProbability(-1), 1e-10);
        assertEquals(1.0, distribution.cumulativeProbability(11), 1e-10);
        assertTrue(distribution.cumulativeProbability(5) > 0.0 && distribution.cumulativeProbability(5) < 1.0);
    }

    @Test
    public void testProbability() {
        assertEquals(0.0, distribution.probability(-1), 1e-10);
        assertEquals(0.0, distribution.probability(11), 1e-10);
        assertTrue(distribution.probability(5) > 0.0);
    }

    @Test
    public void testUpperCumulativeProbability() {
        assertEquals(1.0, distribution.upperCumulativeProbability(-1), 1e-10);
        assertEquals(0.0, distribution.upperCumulativeProbability(11), 1e-10);
        assertTrue(distribution.upperCumulativeProbability(5) > 0.0 && distribution.upperCumulativeProbability(5) < 1.0);
    }

    @Test
    public void testGetNumberOfSuccesses() {
        assertEquals(20, distribution.getNumberOfSuccesses());
    }

    @Test
    public void testGetPopulationSize() {
        assertEquals(50, distribution.getPopulationSize());
    }

    @Test
    public void testGetSampleSize() {
        assertEquals(10, distribution.getSampleSize());
    }

    @Test
    public void testGetNumericalMean() {
        assertEquals(4.0, distribution.getNumericalMean(), 1e-10);
    }

    @Test
    public void testGetNumericalVariance() {
        assertEquals(1.4893617021276595, distribution.getNumericalVariance(), 1e-10);
    }

    @Test
    public void testGetSupportLowerBound() {
        assertEquals(0, distribution.getSupportLowerBound());
    }

    @Test
    public void testGetSupportUpperBound() {
        assertEquals(10, distribution.getSupportUpperBound());
    }

    @Test
    public void testIsSupportConnected() {
        assertTrue(distribution.isSupportConnected());
    }
}
```