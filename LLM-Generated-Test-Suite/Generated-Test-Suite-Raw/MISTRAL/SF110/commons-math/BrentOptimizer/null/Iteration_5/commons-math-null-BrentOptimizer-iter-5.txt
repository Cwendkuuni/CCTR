```java
package org.apache.commons.math3.optim.univariate;

import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.exception.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorRelativeThresholdTooSmall() {
        new BrentOptimizer(BrentOptimizer.MIN_RELATIVE_TOLERANCE - 1, 1.0);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorAbsoluteThresholdNonPositive() {
        new BrentOptimizer(1.0, 0.0);
    }

    @Test
    public void testConstructorValidParameters() {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);
        assertNotNull(optimizer);
    }

    @Test
    public void testDoOptimize() {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);
        optimizer.setMin(0.0);
        optimizer.setMax(1.0);
        optimizer.setStartValue(0.5);
        optimizer.setGoalType(GoalType.MINIMIZE);
        optimizer.setConvergenceChecker(new SimpleValueChecker(1e-6, 1e-6));

        UnivariatePointValuePair result = optimizer.doOptimize();
        assertNotNull(result);
        assertTrue(result.getPoint() >= 0.0 && result.getPoint() <= 1.0);
    }

    @Test
    public void testBest() throws Exception {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 2.0);

        UnivariatePointValuePair best = optimizer.best(a, b, true);
        assertEquals(a, best);

        best = optimizer.best(a, b, false);
        assertEquals(b, best);
    }

    @Test
    public void testBestWithNullValues() throws Exception {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = null;

        UnivariatePointValuePair best = optimizer.best(a, b, true);
        assertEquals(a, best);

        best = optimizer.best(b, a, true);
        assertEquals(a, best);
    }

    @Test
    public void testBestWithEqualValues() throws Exception {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(1.0, 1.0);

        UnivariatePointValuePair best = optimizer.best(a, b, true);
        assertEquals(a, best);

        best = optimizer.best(a, b, false);
        assertEquals(a, best);
    }
}
```