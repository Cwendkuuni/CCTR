```java
package org.apache.commons.math3.optim.univariate;

import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.exception.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    @Test
    public void testConstructorWithValidParameters() {
        double rel = 1e-6;
        double abs = 1e-8;
        ConvergenceChecker<UnivariatePointValuePair> checker = null;
        BrentOptimizer optimizer = new BrentOptimizer(rel, abs, checker);
        assertEquals(rel, optimizer.relativeThreshold, 0);
        assertEquals(abs, optimizer.absoluteThreshold, 0);
    }

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorWithInvalidRelativeTolerance() {
        double rel = 1e-10; // Assuming MIN_RELATIVE_TOLERANCE is greater than this value
        double abs = 1e-8;
        ConvergenceChecker<UnivariatePointValuePair> checker = null;
        new BrentOptimizer(rel, abs, checker);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorWithInvalidAbsoluteTolerance() {
        double rel = 1e-6;
        double abs = 0.0;
        ConvergenceChecker<UnivariatePointValuePair> checker = null;
        new BrentOptimizer(rel, abs, checker);
    }

    @Test
    public void testDoOptimize() {
        double rel = 1e-6;
        double abs = 1e-8;
        ConvergenceChecker<UnivariatePointValuePair> checker = null;
        BrentOptimizer optimizer = new BrentOptimizer(rel, abs, checker);

        // Mocking the necessary methods and setting up the test environment
        optimizer.setGoalType(GoalType.MINIMIZE);
        optimizer.setMin(0.0);
        optimizer.setStartValue(1.0);
        optimizer.setMax(2.0);

        // Assuming computeObjectiveValue is a method that needs to be mocked
        // For the sake of this example, we'll use a simple quadratic function
        optimizer.setComputeObjectiveValue(x -> x * x);

        UnivariatePointValuePair result = optimizer.doOptimize();
        assertNotNull(result);
        assertTrue(result.getValue() >= 0.0);
    }

    @Test
    public void testBestWithNullValues() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-6, 1e-8);
        UnivariatePointValuePair a = null;
        UnivariatePointValuePair b = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(b, result);

        a = new UnivariatePointValuePair(2.0, 2.0);
        b = null;
        result = optimizer.best(a, b, true);
        assertEquals(a, result);
    }

    @Test
    public void testBestWithMinimization() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-6, 1e-8);
        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 2.0);
        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(a, result);
    }

    @Test
    public void testBestWithMaximization() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-6, 1e-8);
        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 2.0);
        UnivariatePointValuePair result = optimizer.best(a, b, false);
        assertEquals(b, result);
    }
}
```