```java
package org.apache.commons.math3.optim.univariate;

import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.exception.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorRelativeThresholdTooSmall() {
        new BrentOptimizer(BrentOptimizer.MIN_RELATIVE_TOLERANCE - 1, 1.0);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorAbsoluteThresholdNotPositive() {
        new BrentOptimizer(1.0, 0.0);
    }

    @Test
    public void testConstructorValidParameters() {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);
        assertNotNull(optimizer);
    }

    @Test
    public void testDoOptimize() {
        // Mocking the necessary components for testing
        class MockUnivariateOptimizer extends BrentOptimizer {
            public MockUnivariateOptimizer(double rel, double abs) {
                super(rel, abs);
            }

            @Override
            protected double computeObjectiveValue(double point) {
                // Example objective function: f(x) = x^2
                return point * point;
            }

            @Override
            protected double getMin() {
                return -1.0;
            }

            @Override
            protected double getMax() {
                return 1.0;
            }

            @Override
            protected double getStartValue() {
                return 0.0;
            }

            @Override
            protected GoalType getGoalType() {
                return GoalType.MINIMIZE;
            }

            @Override
            protected ConvergenceChecker<UnivariatePointValuePair> getConvergenceChecker() {
                return null;
            }
        }

        BrentOptimizer optimizer = new MockUnivariateOptimizer(1.0, 1.0);
        UnivariatePointValuePair result = optimizer.doOptimize();
        assertNotNull(result);
        assertEquals(0.0, result.getPoint(), 1e-6);
        assertEquals(0.0, result.getValue(), 1e-6);
    }

    @Test
    public void testBest() {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 2.0);

        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(a, result);

        result = optimizer.best(a, b, false);
        assertEquals(b, result);
    }

    @Test
    public void testBestWithNullValues() {
        BrentOptimizer optimizer = new BrentOptimizer(1.0, 1.0);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = null;

        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(a, result);

        result = optimizer.best(a, b, false);
        assertEquals(a, result);

        result = optimizer.best(null, b, true);
        assertNull(result);

        result = optimizer.best(null, b, false);
        assertNull(result);
    }
}
```