```java
package org.apache.commons.math3.optim.univariate;

import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    private static final double RELATIVE_TOLERANCE = 1e-10;
    private static final double ABSOLUTE_TOLERANCE = 1e-10;
    private static final double MIN_RELATIVE_TOLERANCE = 2.0 * Math.ulp(1.0);

    private BrentOptimizer optimizer;

    @Before
    public void setUp() {
        optimizer = new BrentOptimizer(RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE);
    }

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorRelativeToleranceTooSmall() {
        new BrentOptimizer(MIN_RELATIVE_TOLERANCE - 1e-15, ABSOLUTE_TOLERANCE);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorAbsoluteToleranceNonPositive() {
        new BrentOptimizer(RELATIVE_TOLERANCE, 0.0);
    }

    @Test
    public void testDoOptimize() {
        // Mock the necessary methods and setup for doOptimize
        // This is a placeholder test, actual implementation will depend on the specifics of the methods being called
        // For example, you might need to mock computeObjectiveValue, getGoalType, getMin, getStartValue, getMax, etc.
        UnivariatePointValuePair result = optimizer.doOptimize();
        assertNotNull(result);
        // Add more assertions based on expected behavior
    }

    @Test
    public void testBest() {
        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 2.0);

        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(a, result);

        result = optimizer.best(a, b, false);
        assertEquals(b, result);

        result = optimizer.best(null, b, true);
        assertEquals(b, result);

        result = optimizer.best(a, null, true);
        assertEquals(a, result);
    }

    @Test
    public void testGoldenSectionConstant() {
        assertEquals(0.5 * (3.0 - Math.sqrt(5.0)), BrentOptimizer.GOLDEN_SECTION, 0.0);
    }

    @Test
    public void testMinRelativeToleranceConstant() {
        assertEquals(2.0 * Math.ulp(1.0), BrentOptimizer.MIN_RELATIVE_TOLERANCE, 0.0);
    }
}
```