```java
package org.apache.commons.math3.optim.univariate;

import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.exception.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    private static final double RELATIVE_TOLERANCE = 1e-10;
    private static final double ABSOLUTE_TOLERANCE = 1e-10;
    private static final double MIN_RELATIVE_TOLERANCE = 2.0 * FastMath.ulp(1.0);

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorRelativeToleranceTooSmall() {
        new BrentOptimizer(MIN_RELATIVE_TOLERANCE - 1e-15, ABSOLUTE_TOLERANCE);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorAbsoluteToleranceNonPositive() {
        new BrentOptimizer(RELATIVE_TOLERANCE, 0.0);
    }

    @Test
    public void testConstructorWithCheckers() {
        ConvergenceChecker<UnivariatePointValuePair> checker = new SimpleValueChecker(1e-10, 1e-10);
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE, checker);
        assertNotNull(optimizer);
    }

    @Test
    public void testConstructorWithoutCheckers() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE);
        assertNotNull(optimizer);
    }

    @Test
    public void testDoOptimize() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE);
        optimizer.setGoalType(GoalType.MINIMIZE);
        optimizer.setMin(0.0);
        optimizer.setStartValue(1.0);
        optimizer.setMax(2.0);

        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return x * x;
            }
        };

        optimizer.setObjectiveFunction(function);

        UnivariatePointValuePair result = optimizer.optimize(new MaxIter(100));
        assertEquals(0.0, result.getPoint(), ABSOLUTE_TOLERANCE);
        assertEquals(0.0, result.getValue(), ABSOLUTE_TOLERANCE);
    }

    @Test
    public void testBest() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 2.0);

        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(a, result);

        result = optimizer.best(a, b, false);
        assertEquals(b, result);
    }

    @Test
    public void testBestWithNullValues() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_TOLERANCE, ABSOLUTE_TOLERANCE);

        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = null;

        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(a, result);

        result = optimizer.best(a, b, false);
        assertEquals(a, result);

        a = null;
        b = new UnivariatePointValuePair(2.0, 2.0);

        result = optimizer.best(a, b, true);
        assertEquals(b, result);

        result = optimizer.best(a, b, false);
        assertEquals(b, result);
    }
}
```