```java
package org.apache.commons.math3.util;

import org.apache.commons.math3.exception.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Iterator;

public class MultidimensionalCounterTest {

    private MultidimensionalCounter counter;

    @Before
    public void setUp() throws NotStrictlyPositiveException {
        counter = new MultidimensionalCounter(2, 3, 4);
    }

    @Test
    public void testGetDimension() {
        assertEquals(3, counter.getDimension());
    }

    @Test
    public void testGetCounts() throws OutOfRangeException {
        int[] counts = counter.getCounts(10);
        assertArrayEquals(new int[]{1, 1, 2}, counts);
    }

    @Test(expected = OutOfRangeException.class)
    public void testGetCountsOutOfRange() throws OutOfRangeException {
        counter.getCounts(-1);
    }

    @Test
    public void testGetCount() throws OutOfRangeException, DimensionMismatchException {
        int count = counter.getCount(1, 1, 2);
        assertEquals(10, count);
    }

    @Test(expected = DimensionMismatchException.class)
    public void testGetCountDimensionMismatch() throws OutOfRangeException, DimensionMismatchException {
        counter.getCount(1, 1);
    }

    @Test(expected = OutOfRangeException.class)
    public void testGetCountOutOfRange() throws OutOfRangeException, DimensionMismatchException {
        counter.getCount(1, 1, 4);
    }

    @Test
    public void testGetSize() {
        assertEquals(24, counter.getSize());
    }

    @Test
    public void testGetSizes() {
        int[] sizes = counter.getSizes();
        assertArrayEquals(new int[]{2, 3, 4}, sizes);
    }

    @Test
    public void testToString() {
        String str = counter.toString();
        assertEquals("[0][0][0]", str);
    }

    @Test
    public void testIterator() {
        Iterator<Integer> iterator = counter.iterator();
        int count = 0;
        while (iterator.hasNext()) {
            assertEquals(count, (int) iterator.next());
            count++;
        }
        assertEquals(24, count);
    }

    @Test
    public void testIteratorGetCount() {
        Iterator<Integer> iterator = counter.iterator();
        while (iterator.hasNext()) {
            iterator.next();
        }
        assertEquals(23, iterator.getCount());
    }

    @Test
    public void testIteratorGetCounts() {
        Iterator<Integer> iterator = counter.iterator();
        while (iterator.hasNext()) {
            iterator.next();
        }
        assertArrayEquals(new int[]{1, 2, 3}, iterator.getCounts());
    }

    @Test
    public void testIteratorGetCountDim() {
        Iterator<Integer> iterator = counter.iterator();
        while (iterator.hasNext()) {
            iterator.next();
        }
        assertEquals(3, iterator.getCount(2));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testIteratorRemove() {
        Iterator<Integer> iterator = counter.iterator();
        iterator.remove();
    }
}
```