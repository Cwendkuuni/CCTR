```java
package org.apache.commons.math3.optimization.linear;

import org.apache.commons.math3.optimization.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.util.*;
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class SimplexTableauTest {

    private static final double EPSILON = 1.0E-12;
    private static final int MAX_ULPS = 10;

    private LinearObjectiveFunction createObjectiveFunction() {
        return new LinearObjectiveFunction(new double[]{1.0, 2.0}, 0.0);
    }

    private Collection<LinearConstraint> createConstraints() {
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1.0, 1.0}, Relationship.LEQ, 1.0));
        constraints.add(new LinearConstraint(new double[]{1.0, -1.0}, Relationship.GEQ, 1.0));
        return constraints;
    }

    @Test
    public void testConstructor() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertNotNull(tableau);
        assertEquals(f, tableau.f);
        assertEquals(constraints, tableau.constraints);
        assertEquals(true, tableau.restrictToNonNegative);
        assertEquals(EPSILON, tableau.epsilon, EPSILON);
        assertEquals(MAX_ULPS, tableau.maxUlps);
    }

    @Test
    public void testInitializeColumnLabels() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.initializeColumnLabels();

        List<String> expectedLabels = Arrays.asList("Z", "x0", "x1", "s0", "s1", "RHS");
        assertEquals(expectedLabels, tableau.columnLabels);
    }

    @Test
    public void testCreateTableau() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        RealMatrix tableauMatrix = tableau.createTableau(true);

        assertNotNull(tableauMatrix);
        assertEquals(3, tableauMatrix.getRowDimension());
        assertEquals(7, tableauMatrix.getColumnDimension());
    }

    @Test
    public void testNormalizeConstraints() {
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(createObjectiveFunction(), constraints, GoalType.MAXIMIZE, true, EPSILON);

        List<LinearConstraint> normalizedConstraints = tableau.normalizeConstraints(constraints);

        assertEquals(constraints.size(), normalizedConstraints.size());
        for (LinearConstraint constraint : normalizedConstraints) {
            assertTrue(constraint.getValue() >= 0.0);
        }
    }

    @Test
    public void testGetNumObjectiveFunctions() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(1, tableau.getNumObjectiveFunctions());
    }

    @Test
    public void testGetInvertedCoefficientSum() {
        RealVector coefficients = new ArrayRealVector(new double[]{1.0, 2.0, 3.0});
        double sum = SimplexTableau.getInvertedCoefficientSum(coefficients);

        assertEquals(-6.0, sum, EPSILON);
    }

    @Test
    public void testGetBasicRow() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        Integer basicRow = tableau.getBasicRow(0);

        assertNull(basicRow);
    }

    @Test
    public void testDropPhase1Objective() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        tableau.dropPhase1Objective();

        assertEquals(0, tableau.getNumArtificialVariables());
    }

    @Test
    public void testCopyArray() {
        double[] src = new double[]{1.0, 2.0, 3.0};
        double[] dest = new double[5];
        SimplexTableau tableau = new SimplexTableau(createObjectiveFunction(), createConstraints(), GoalType.MAXIMIZE, true, EPSILON);

        tableau.copyArray(src, dest);

        assertArrayEquals(new double[]{0.0, 1.0, 2.0, 3.0, 0.0}, dest, EPSILON);
    }

    @Test
    public void testIsOptimal() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        boolean isOptimal = tableau.isOptimal();

        assertTrue(isOptimal);
    }

    @Test
    public void testGetSolution() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        PointValuePair solution = tableau.getSolution();

        assertNotNull(solution);
        assertEquals(2, solution.getPoint().length);
    }

    @Test
    public void testDivideRow() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        tableau.divideRow(0, 2.0);

        assertEquals(0.5, tableau.getEntry(0, 0), EPSILON);
    }

    @Test
    public void testSubtractRow() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        tableau.subtractRow(0, 1, 1.0);

        assertEquals(0.0, tableau.getEntry(0, 0), EPSILON);
    }

    @Test
    public void testGetWidth() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        assertEquals(7, tableau.getWidth());
    }

    @Test
    public void testGetHeight() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        assertEquals(3, tableau.getHeight());
    }

    @Test
    public void testGetEntry() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        assertEquals(1.0, tableau.getEntry(0, 0), EPSILON);
    }

    @Test
    public void testSetEntry() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        tableau.setEntry(0, 0, 2.0);
        assertEquals(2.0, tableau.getEntry(0, 0), EPSILON);
    }

    @Test
    public void testGetSlackVariableOffset() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(3, tableau.getSlackVariableOffset());
    }

    @Test
    public void testGetArtificialVariableOffset() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(5, tableau.getArtificialVariableOffset());
    }

    @Test
    public void testGetRhsOffset() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        assertEquals(6, tableau.getRhsOffset());
    }

    @Test
    public void testGetNumDecisionVariables() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(2, tableau.getNumDecisionVariables());
    }

    @Test
    public void testGetOriginalNumDecisionVariables() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(2, tableau.getOriginalNumDecisionVariables());
    }

    @Test
    public void testGetNumSlackVariables() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(2, tableau.getNumSlackVariables());
    }

    @Test
    public void testGetNumArtificialVariables() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(1, tableau.getNumArtificialVariables());
    }

    @Test
    public void testGetData() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        tableau.createTableau(true);
        double[][] data = tableau.getData();

        assertNotNull(data);
        assertEquals(3, data.length);
        assertEquals(7, data[0].length);
    }

    @Test
    public void testEquals() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau1 = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);
        SimplexTableau tableau2 = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertTrue(tableau1.equals(tableau2));
    }

    @Test
    public void testHashCode() {
        LinearObjectiveFunction f = createObjectiveFunction();
        Collection<LinearConstraint> constraints = createConstraints();
        SimplexTableau tableau1 = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);
        SimplexTableau tableau2 = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, EPSILON);

        assertEquals(tableau1.hashCode(), tableau2.hashCode());
    }
}
```