```java
package org.apache.commons.math3.ode.nonstiff;

import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.ode.sampling.*;
import org.apache.commons.math3.exception.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class EmbeddedRungeKuttaIntegratorTest {

    private static final double EPSILON = 1e-10;
    private EmbeddedRungeKuttaIntegrator integrator;

    @Before
    public void setUp() {
        // Mock implementation of EmbeddedRungeKuttaIntegrator for testing
        integrator = new EmbeddedRungeKuttaIntegrator(
            "TestIntegrator",
            true,
            new double[]{0.5},
            new double[][]{{0.5}},
            new double[]{1.0},
            new RungeKuttaStepInterpolator() {
                @Override
                public RungeKuttaStepInterpolator copy() {
                    return this;
                }

                @Override
                public void reinitialize(final EmbeddedRungeKuttaIntegrator integrator, final double[] y, final double[][] yDotK, final boolean forward, final ODEStateAndDerivative primaryMapper, final SecondaryODE... secondaryMappers) {
                    // Mock implementation
                }

                @Override
                public void storeTime(final double t) {
                    // Mock implementation
                }

                @Override
                public void shift() {
                    // Mock implementation
                }

                @Override
                public double getInterpolatedTime() {
                    return 0;
                }

                @Override
                public double[] getInterpolatedState() {
                    return new double[0];
                }

                @Override
                public double[] getInterpolatedDerivatives() {
                    return new double[0];
                }
            },
            0.01,
            1.0,
            1e-6,
            1e-6
        ) {
            @Override
            public int getOrder() {
                return 1;
            }

            @Override
            protected double estimateError(final double[][] p0, final double[] p1, final double[] p2, final double p3) {
                return 0;
            }
        };
    }

    @Test
    public void testGetOrder() {
        assertEquals(1, integrator.getOrder());
    }

    @Test
    public void testGetSafety() {
        assertEquals(0.9, integrator.getSafety(), EPSILON);
    }

    @Test
    public void testSetSafety() {
        integrator.setSafety(0.8);
        assertEquals(0.8, integrator.getSafety(), EPSILON);
    }

    @Test
    public void testGetMinReduction() {
        assertEquals(0.2, integrator.getMinReduction(), EPSILON);
    }

    @Test
    public void testSetMinReduction() {
        integrator.setMinReduction(0.1);
        assertEquals(0.1, integrator.getMinReduction(), EPSILON);
    }

    @Test
    public void testGetMaxGrowth() {
        assertEquals(10.0, integrator.getMaxGrowth(), EPSILON);
    }

    @Test
    public void testSetMaxGrowth() {
        integrator.setMaxGrowth(5.0);
        assertEquals(5.0, integrator.getMaxGrowth(), EPSILON);
    }

    @Test
    public void testIntegrate() throws Exception {
        ExpandableStatefulODE equations = new ExpandableStatefulODE(new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = y[0]; // Simple exponential growth
            }
        });

        equations.init(0.0, new double[]{1.0});
        integrator.integrate(equations, 1.0);

        assertEquals(Math.exp(1.0), equations.getCompleteState()[0], EPSILON);
    }
}
```