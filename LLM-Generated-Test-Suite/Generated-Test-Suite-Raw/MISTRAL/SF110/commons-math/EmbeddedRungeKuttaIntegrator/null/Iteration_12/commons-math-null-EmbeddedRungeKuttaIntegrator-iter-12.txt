```java
package org.apache.commons.math3.ode.nonstiff;

import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.ode.sampling.*;
import org.apache.commons.math3.exception.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class EmbeddedRungeKuttaIntegratorTest {

    private EmbeddedRungeKuttaIntegrator integrator;
    private double[] c;
    private double[][] a;
    private double[] b;
    private RungeKuttaStepInterpolator prototype;

    @Before
    public void setUp() {
        c = new double[]{0.0, 0.5, 1.0};
        a = new double[][]{{0.0, 0.0, 0.0}, {0.5, 0.0, 0.0}, {-1.0, 2.0, 0.0}};
        b = new double[]{1.0 / 6.0, 2.0 / 3.0, 1.0 / 6.0};
        prototype = new RungeKuttaStepInterpolator() {
            @Override
            public StepInterpolator copy() {
                return this;
            }

            @Override
            public void reinitialize(final ODEIntegrator integrator, final double[] y, final double[][] yDotK, final boolean forward, final ODEStateAndDerivativeMapper primaryMapper, final SecondaryODE[] secondaryMappers) {
                // Mock implementation
            }

            @Override
            public void storeTime(final double t) {
                // Mock implementation
            }

            @Override
            public void shift() {
                // Mock implementation
            }

            @Override
            public double getInterpolatedTime() {
                return 0;
            }

            @Override
            public double[] getInterpolatedState() {
                return new double[0];
            }

            @Override
            public double[] getInterpolatedDerivatives() {
                return new double[0];
            }
        };
        integrator = new EmbeddedRungeKuttaIntegrator("TestIntegrator", true, c, a, b, prototype, 0.01, 1.0, 1e-6, 1e-6) {
            @Override
            public int getOrder() {
                return 3;
            }

            @Override
            protected double estimateError(final double[][] p0, final double[] p1, final double[] p2, final double p3) {
                return 0.0;
            }
        };
    }

    @Test
    public void testGetSafety() {
        assertEquals(0.9, integrator.getSafety(), 0.0);
    }

    @Test
    public void testSetSafety() {
        integrator.setSafety(0.8);
        assertEquals(0.8, integrator.getSafety(), 0.0);
    }

    @Test
    public void testGetMinReduction() {
        assertEquals(0.2, integrator.getMinReduction(), 0.0);
    }

    @Test
    public void testSetMinReduction() {
        integrator.setMinReduction(0.1);
        assertEquals(0.1, integrator.getMinReduction(), 0.0);
    }

    @Test
    public void testGetMaxGrowth() {
        assertEquals(10.0, integrator.getMaxGrowth(), 0.0);
    }

    @Test
    public void testSetMaxGrowth() {
        integrator.setMaxGrowth(5.0);
        assertEquals(5.0, integrator.getMaxGrowth(), 0.0);
    }

    @Test
    public void testIntegrate() throws Exception {
        ExpandableStatefulODE equations = new ExpandableStatefulODE(new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = y[0];
            }
        });
        equations.init(0.0, new double[]{1.0});
        integrator.integrate(equations, 1.0);
        assertEquals(1.0, equations.getTime(), 0.0);
        assertEquals(Math.exp(1.0), equations.getCompleteState()[0], 1e-6);
    }
}
```