```java
package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NotFiniteNumberException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.util.LocalizedFormats;

public class MathUtilsTest {

    @Test
    public void testHashDouble() {
        double value = 123.456;
        int expectedHash = new Double(value).hashCode();
        int actualHash = MathUtils.hash(value);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    public void testHashDoubleArray() {
        double[] value = {1.0, 2.0, 3.0};
        int expectedHash = Arrays.hashCode(value);
        int actualHash = MathUtils.hash(value);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    public void testNormalizeAngle() {
        double a = 7.0;
        double center = 0.0;
        double expected = 0.7168146928204136;
        double actual = MathUtils.normalizeAngle(a, center);
        assertEquals(expected, actual, 1e-10);
    }

    @Test
    public void testReduce() {
        double a = 7.0;
        double period = 5.0;
        double offset = 0.0;
        double expected = 2.0;
        double actual = MathUtils.reduce(a, period, offset);
        assertEquals(expected, actual, 1e-10);
    }

    @Test
    public void testCopySignByte() throws MathArithmeticException {
        byte magnitude = 127;
        byte sign = -1;
        byte expected = -127;
        byte actual = MathUtils.copySign(magnitude, sign);
        assertEquals(expected, actual);
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignByteOverflow() throws MathArithmeticException {
        byte magnitude = -128;
        byte sign = 1;
        MathUtils.copySign(magnitude, sign);
    }

    @Test
    public void testCopySignShort() throws MathArithmeticException {
        short magnitude = 32767;
        short sign = -1;
        short expected = -32767;
        short actual = MathUtils.copySign(magnitude, sign);
        assertEquals(expected, actual);
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignShortOverflow() throws MathArithmeticException {
        short magnitude = -32768;
        short sign = 1;
        MathUtils.copySign(magnitude, sign);
    }

    @Test
    public void testCopySignInt() throws MathArithmeticException {
        int magnitude = Integer.MAX_VALUE;
        int sign = -1;
        int expected = -Integer.MAX_VALUE;
        int actual = MathUtils.copySign(magnitude, sign);
        assertEquals(expected, actual);
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignIntOverflow() throws MathArithmeticException {
        int magnitude = Integer.MIN_VALUE;
        int sign = 1;
        MathUtils.copySign(magnitude, sign);
    }

    @Test
    public void testCopySignLong() throws MathArithmeticException {
        long magnitude = Long.MAX_VALUE;
        long sign = -1;
        long expected = -Long.MAX_VALUE;
        long actual = MathUtils.copySign(magnitude, sign);
        assertEquals(expected, actual);
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignLongOverflow() throws MathArithmeticException {
        long magnitude = Long.MIN_VALUE;
        long sign = 1;
        MathUtils.copySign(magnitude, sign);
    }

    @Test
    public void testCheckFinite() throws NotFiniteNumberException {
        double x = 123.456;
        MathUtils.checkFinite(x);
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteInfinite() throws NotFiniteNumberException {
        double x = Double.POSITIVE_INFINITY;
        MathUtils.checkFinite(x);
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteNaN() throws NotFiniteNumberException {
        double x = Double.NaN;
        MathUtils.checkFinite(x);
    }

    @Test
    public void testCheckFiniteArray() throws NotFiniteNumberException {
        double[] val = {1.0, 2.0, 3.0};
        MathUtils.checkFinite(val);
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteArrayInfinite() throws NotFiniteNumberException {
        double[] val = {1.0, Double.POSITIVE_INFINITY, 3.0};
        MathUtils.checkFinite(val);
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteArrayNaN() throws NotFiniteNumberException {
        double[] val = {1.0, Double.NaN, 3.0};
        MathUtils.checkFinite(val);
    }

    @Test
    public void testCheckNotNull() throws NullArgumentException {
        Object o = new Object();
        MathUtils.checkNotNull(o);
    }

    @Test(expected = NullArgumentException.class)
    public void testCheckNotNullNull() throws NullArgumentException {
        Object o = null;
        MathUtils.checkNotNull(o);
    }

    @Test
    public void testCheckNotNullWithPattern() throws NullArgumentException {
        Object o = new Object();
        Localizable pattern = LocalizedFormats.NULL_NOT_ALLOWED;
        MathUtils.checkNotNull(o, pattern);
    }

    @Test(expected = NullArgumentException.class)
    public void testCheckNotNullWithPatternNull() throws NullArgumentException {
        Object o = null;
        Localizable pattern = LocalizedFormats.NULL_NOT_ALLOWED;
        MathUtils.checkNotNull(o, pattern);
    }
}
```