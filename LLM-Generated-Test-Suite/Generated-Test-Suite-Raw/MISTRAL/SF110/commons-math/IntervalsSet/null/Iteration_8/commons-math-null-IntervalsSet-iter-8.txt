```java
package org.apache.commons.math3.geometry.euclidean.oned;

import org.apache.commons.math3.geometry.Euclidean1D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.OrientedPoint;
import org.apache.commons.math3.geometry.Vector1D;
import org.apache.commons.math3.util.Precision;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class IntervalsSetTest {

    private IntervalsSet intervalsSet;

    @Before
    public void setUp() {
        intervalsSet = new IntervalsSet();
    }

    @Test
    public void testDefaultConstructor() {
        assertNotNull(intervalsSet);
    }

    @Test
    public void testConstructorWithBounds() {
        IntervalsSet set = new IntervalsSet(1.0, 2.0);
        assertNotNull(set);
        assertEquals(1.0, set.getInf(), Precision.EPSILON);
        assertEquals(2.0, set.getSup(), Precision.EPSILON);
    }

    @Test
    public void testConstructorWithTree() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet set = new IntervalsSet(tree);
        assertNotNull(set);
    }

    @Test
    public void testConstructorWithBoundary() {
        Collection<SubHyperplane<Euclidean1D>> boundary = new ArrayList<>();
        boundary.add(new OrientedPoint(new Vector1D(1.0), true).wholeHyperplane());
        IntervalsSet set = new IntervalsSet(boundary);
        assertNotNull(set);
    }

    @Test
    public void testBuildTree() {
        BSPTree<Euclidean1D> tree = IntervalsSet.buildTree(1.0, 2.0);
        assertNotNull(tree);
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet newSet = intervalsSet.buildNew(tree);
        assertNotNull(newSet);
    }

    @Test
    public void testComputeGeometricalProperties() {
        intervalsSet.computeGeometricalProperties();
        // Add assertions based on expected behavior
    }

    @Test
    public void testGetInf() {
        IntervalsSet set = new IntervalsSet(1.0, 2.0);
        assertEquals(1.0, set.getInf(), Precision.EPSILON);
    }

    @Test
    public void testGetSup() {
        IntervalsSet set = new IntervalsSet(1.0, 2.0);
        assertEquals(2.0, set.getSup(), Precision.EPSILON);
    }

    @Test
    public void testAsList() {
        IntervalsSet set = new IntervalsSet(1.0, 2.0);
        List<Interval> list = set.asList();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertEquals(1.0, list.get(0).getInf(), Precision.EPSILON);
        assertEquals(2.0, list.get(0).getSup(), Precision.EPSILON);
    }

    @Test
    public void testRecurseList() {
        IntervalsSet set = new IntervalsSet(1.0, 2.0);
        List<Interval> list = new ArrayList<>();
        set.recurseList(set.getTree(false), list, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        assertNotNull(list);
        assertEquals(1, list.size());
        assertEquals(1.0, list.get(0).getInf(), Precision.EPSILON);
        assertEquals(2.0, list.get(0).getSup(), Precision.EPSILON);
    }
}
```