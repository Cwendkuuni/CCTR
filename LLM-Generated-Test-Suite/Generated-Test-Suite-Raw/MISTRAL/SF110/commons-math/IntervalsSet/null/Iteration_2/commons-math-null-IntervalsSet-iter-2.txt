```java
package org.apache.commons.math3.geometry.euclidean.oned;

import org.apache.commons.math3.geometry.*;
import org.apache.commons.math3.util.*;
import java.util.*;
import org.apache.commons.math3.geometry.partitioning.*;
import org.junit.*;
import static org.junit.Assert.*;

public class IntervalsSetTest {

    @Test
    public void testDefaultConstructor() {
        IntervalsSet intervalsSet = new IntervalsSet();
        assertNotNull(intervalsSet);
    }

    @Test
    public void testConstructorWithBounds() {
        IntervalsSet intervalsSet = new IntervalsSet(-1.0, 1.0);
        assertNotNull(intervalsSet);
        assertEquals(-1.0, intervalsSet.getInf(), 0.0);
        assertEquals(1.0, intervalsSet.getSup(), 0.0);
    }

    @Test
    public void testConstructorWithTree() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet intervalsSet = new IntervalsSet(tree);
        assertNotNull(intervalsSet);
    }

    @Test
    public void testConstructorWithBoundary() {
        Collection<SubHyperplane<Euclidean1D>> boundary = new ArrayList<>();
        boundary.add(new OrientedPoint(new Vector1D(0.0), true).wholeHyperplane());
        IntervalsSet intervalsSet = new IntervalsSet(boundary);
        assertNotNull(intervalsSet);
    }

    @Test
    public void testBuildTree() {
        BSPTree<Euclidean1D> tree = IntervalsSet.buildTree(-1.0, 1.0);
        assertNotNull(tree);
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet intervalsSet = new IntervalsSet();
        IntervalsSet newIntervalsSet = intervalsSet.buildNew(tree);
        assertNotNull(newIntervalsSet);
    }

    @Test
    public void testComputeGeometricalProperties() {
        IntervalsSet intervalsSet = new IntervalsSet(-1.0, 1.0);
        intervalsSet.computeGeometricalProperties();
        assertEquals(2.0, intervalsSet.getSize(), 0.0);
        assertEquals(0.0, intervalsSet.getBarycenter().getX(), 0.0);
    }

    @Test
    public void testGetInf() {
        IntervalsSet intervalsSet = new IntervalsSet(-1.0, 1.0);
        assertEquals(-1.0, intervalsSet.getInf(), 0.0);
    }

    @Test
    public void testGetSup() {
        IntervalsSet intervalsSet = new IntervalsSet(-1.0, 1.0);
        assertEquals(1.0, intervalsSet.getSup(), 0.0);
    }

    @Test
    public void testAsList() {
        IntervalsSet intervalsSet = new IntervalsSet(-1.0, 1.0);
        List<Interval> list = intervalsSet.asList();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertEquals(-1.0, list.get(0).getInf(), 0.0);
        assertEquals(1.0, list.get(0).getSup(), 0.0);
    }

    @Test
    public void testRecurseList() {
        IntervalsSet intervalsSet = new IntervalsSet(-1.0, 1.0);
        List<Interval> list = new ArrayList<>();
        intervalsSet.recurseList(intervalsSet.getTree(false), list, -1.0, 1.0);
        assertNotNull(list);
        assertEquals(1, list.size());
        assertEquals(-1.0, list.get(0).getInf(), 0.0);
        assertEquals(1.0, list.get(0).getSup(), 0.0);
    }
}
```