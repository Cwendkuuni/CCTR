```java
package org.apache.commons.math3.linear;

import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.util.Precision;
import org.apache.commons.math3.util.FastMath;
import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

public class SchurTransformerTest {

    private SchurTransformer schurTransformer;
    private RealMatrix matrix;

    @Before
    public void setUp() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        matrix = MatrixUtils.createRealMatrix(data);
        schurTransformer = new SchurTransformer(matrix);
    }

    @Test
    public void testConstructorWithNonSquareMatrix() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6}
        };
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(nonSquareMatrix);
            Assert.fail("Expected NonSquareMatrixException");
        } catch (NonSquareMatrixException e) {
            // Expected
        }
    }

    @Test
    public void testGetP() {
        RealMatrix p = schurTransformer.getP();
        Assert.assertNotNull(p);
        Assert.assertEquals(matrix.getRowDimension(), p.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix pt = schurTransformer.getPT();
        Assert.assertNotNull(pt);
        Assert.assertEquals(matrix.getRowDimension(), pt.getColumnDimension());
        Assert.assertEquals(matrix.getColumnDimension(), pt.getRowDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix t = schurTransformer.getT();
        Assert.assertNotNull(t);
        Assert.assertEquals(matrix.getRowDimension(), t.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testTransform() {
        // This test is indirect as the transform method is private
        // We can verify the transformation by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        Assert.assertNotNull(p);
        Assert.assertNotNull(t);
    }

    @Test
    public void testGetNorm() {
        // This test is indirect as the getNorm method is private
        // We can verify the norm calculation by checking the matrices P and T
        RealMatrix t = schurTransformer.getT();
        double norm = 0.0;
        for (int i = 0; i < t.getRowDimension(); ++i) {
            for (int j = FastMath.max(i - 1, 0); j < t.getColumnDimension(); ++j) {
                norm += FastMath.abs(t.getEntry(i, j));
            }
        }
        Assert.assertTrue(norm > 0);
    }

    @Test
    public void testFindSmallSubDiagonalElement() {
        // This test is indirect as the findSmallSubDiagonalElement method is private
        // We can verify the method by checking the matrices P and T
        RealMatrix t = schurTransformer.getT();
        double norm = 0.0;
        for (int i = 0; i < t.getRowDimension(); ++i) {
            for (int j = FastMath.max(i - 1, 0); j < t.getColumnDimension(); ++j) {
                norm += FastMath.abs(t.getEntry(i, j));
            }
        }
        int startIdx = t.getRowDimension() - 1;
        int l;
        for (l = startIdx; l > 0; --l) {
            double s = FastMath.abs(t.getEntry(l - 1, l - 1)) + FastMath.abs(t.getEntry(l, l));
            if (s == 0.0) {
                s = norm;
            }
            if (FastMath.abs(t.getEntry(l, l - 1)) < Precision.EPSILON * s) {
                break;
            }
        }
        Assert.assertTrue(l >= 0);
    }

    @Test
    public void testComputeShift() {
        // This test is indirect as the computeShift method is private
        // We can verify the method by checking the matrices P and T
        RealMatrix t = schurTransformer.getT();
        ShiftInfo shift = new ShiftInfo();
        int l = 0;
        int idx = t.getRowDimension() - 1;
        int iteration = 0;
        schurTransformer.computeShift(l, idx, iteration, shift);
        Assert.assertTrue(shift.x != 0 || shift.y != 0 || shift.w != 0 || shift.exShift != 0);
    }

    @Test
    public void testInitQRStep() {
        // This test is indirect as the initQRStep method is private
        // We can verify the method by checking the matrices P and T
        RealMatrix t = schurTransformer.getT();
        ShiftInfo shift = new ShiftInfo();
        double[] hVec = new double[3];
        int il = 0;
        int iu = t.getRowDimension() - 1;
        int im = schurTransformer.initQRStep(il, iu, shift, hVec);
        Assert.assertTrue(im >= il);
    }

    @Test
    public void testPerformDoubleQRStep() {
        // This test is indirect as the performDoubleQRStep method is private
        // We can verify the method by checking the matrices P and T
        RealMatrix t = schurTransformer.getT();
        ShiftInfo shift = new ShiftInfo();
        double[] hVec = new double[3];
        int il = 0;
        int iu = t.getRowDimension() - 1;
        int im = schurTransformer.initQRStep(il, iu, shift, hVec);
        schurTransformer.performDoubleQRStep(il, im, iu, shift, hVec);
        Assert.assertNotNull(t);
    }

    private static class ShiftInfo {
        double x;
        double y;
        double w;
        double exShift;
    }
}
```