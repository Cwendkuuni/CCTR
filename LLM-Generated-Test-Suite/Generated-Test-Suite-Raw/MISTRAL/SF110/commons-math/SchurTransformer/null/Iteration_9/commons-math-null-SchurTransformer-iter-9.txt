```java
package org.apache.commons.math3.linear;

import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.util.Precision;
import org.apache.commons.math3.util.FastMath;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class SchurTransformerTest {

    private SchurTransformer schurTransformer;
    private RealMatrix matrix;

    @Before
    public void setUp() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        matrix = MatrixUtils.createRealMatrix(data);
        schurTransformer = new SchurTransformer(matrix);
    }

    @Test
    public void testConstructorWithNonSquareMatrix() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6}
        };
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(nonSquareMatrix);
            fail("Expected NonSquareMatrixException");
        } catch (NonSquareMatrixException e) {
            // Expected
        }
    }

    @Test
    public void testGetP() {
        RealMatrix p = schurTransformer.getP();
        assertNotNull(p);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix pt = schurTransformer.getPT();
        assertNotNull(pt);
        assertEquals(matrix.getRowDimension(), pt.getColumnDimension());
        assertEquals(matrix.getColumnDimension(), pt.getRowDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix t = schurTransformer.getT();
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testTransform() {
        // This test is indirect as transform() is private and called in the constructor
        // We can verify the transformation by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testGetNorm() {
        // This test is indirect as getNorm() is private
        // We can verify the norm calculation by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testFindSmallSubDiagonalElement() {
        // This test is indirect as findSmallSubDiagonalElement() is private
        // We can verify the finding of small sub-diagonal elements by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testComputeShift() {
        // This test is indirect as computeShift() is private
        // We can verify the shift computation by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testInitQRStep() {
        // This test is indirect as initQRStep() is private
        // We can verify the initialization of QR step by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testPerformDoubleQRStep() {
        // This test is indirect as performDoubleQRStep() is private
        // We can verify the performance of double QR step by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testMaxIterationsExceeded() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(matrix) {
                @Override
                private void transform() {
                    // Simulate max iterations exceeded
                    throw new MaxCountExceededException(null, 100, new Object[0]);
                }
            };
            fail("Expected MaxCountExceededException");
        } catch (MaxCountExceededException e) {
            // Expected
        }
    }
}
```