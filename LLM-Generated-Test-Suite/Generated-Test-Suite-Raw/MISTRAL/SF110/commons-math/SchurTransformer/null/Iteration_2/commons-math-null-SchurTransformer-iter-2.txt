```java
package org.apache.commons.math3.linear;

import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.util.Precision;
import org.apache.commons.math3.util.FastMath;
import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

public class SchurTransformerTest {

    private SchurTransformer schurTransformer;
    private RealMatrix matrix;

    @Before
    public void setUp() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        matrix = MatrixUtils.createRealMatrix(data);
        schurTransformer = new SchurTransformer(matrix);
    }

    @Test
    public void testConstructorWithNonSquareMatrix() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6}
        };
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(nonSquareMatrix);
            Assert.fail("Expected NonSquareMatrixException");
        } catch (NonSquareMatrixException e) {
            // Expected
        }
    }

    @Test
    public void testGetP() {
        RealMatrix p = schurTransformer.getP();
        Assert.assertNotNull(p);
        Assert.assertEquals(matrix.getRowDimension(), p.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix pt = schurTransformer.getPT();
        Assert.assertNotNull(pt);
        Assert.assertEquals(matrix.getColumnDimension(), pt.getRowDimension());
        Assert.assertEquals(matrix.getRowDimension(), pt.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix t = schurTransformer.getT();
        Assert.assertNotNull(t);
        Assert.assertEquals(matrix.getRowDimension(), t.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testTransform() {
        // This test is indirect as transform() is private and called in the constructor
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        Assert.assertNotNull(p);
        Assert.assertNotNull(t);
    }

    @Test
    public void testGetNorm() {
        double norm = schurTransformer.getNorm();
        Assert.assertTrue(norm > 0);
    }

    @Test
    public void testFindSmallSubDiagonalElement() {
        int startIdx = matrix.getRowDimension() - 1;
        double norm = schurTransformer.getNorm();
        int result = schurTransformer.findSmallSubDiagonalElement(startIdx, norm);
        Assert.assertTrue(result >= 0 && result <= startIdx);
    }

    @Test
    public void testComputeShift() {
        int l = 0;
        int idx = matrix.getRowDimension() - 1;
        int iteration = 0;
        SchurTransformer.ShiftInfo shift = new SchurTransformer.ShiftInfo();
        schurTransformer.computeShift(l, idx, iteration, shift);
        Assert.assertTrue(shift.x == matrix.getEntry(idx, idx));
    }

    @Test
    public void testInitQRStep() {
        int il = 0;
        int iu = matrix.getRowDimension() - 1;
        SchurTransformer.ShiftInfo shift = new SchurTransformer.ShiftInfo();
        double[] hVec = new double[3];
        int result = schurTransformer.initQRStep(il, iu, shift, hVec);
        Assert.assertTrue(result >= il && result <= iu - 2);
    }

    @Test
    public void testPerformDoubleQRStep() {
        int il = 0;
        int im = 1;
        int iu = matrix.getRowDimension() - 1;
        SchurTransformer.ShiftInfo shift = new SchurTransformer.ShiftInfo();
        double[] hVec = new double[3];
        schurTransformer.performDoubleQRStep(il, im, iu, shift, hVec);
        // Verify the matrixT and matrixP are modified as expected
        RealMatrix t = schurTransformer.getT();
        RealMatrix p = schurTransformer.getP();
        Assert.assertNotNull(t);
        Assert.assertNotNull(p);
    }

    @Test
    public void testMaxIterationsExceeded() {
        double[][] data = {
            {1, 2},
            {3, 4}
        };
        RealMatrix smallMatrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(smallMatrix);
            Assert.fail("Expected MaxCountExceededException");
        } catch (MaxCountExceededException e) {
            // Expected
        }
    }
}
```