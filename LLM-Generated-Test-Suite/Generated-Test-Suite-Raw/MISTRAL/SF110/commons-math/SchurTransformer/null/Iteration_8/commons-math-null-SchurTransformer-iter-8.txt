```java
package org.apache.commons.math3.linear;

import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.util.Precision;
import org.apache.commons.math3.util.FastMath;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class SchurTransformerTest {

    private SchurTransformer schurTransformer;
    private RealMatrix matrix;

    @Before
    public void setUp() {
        double[][] data = {
            {1.0, 2.0, 3.0},
            {4.0, 5.0, 6.0},
            {7.0, 8.0, 9.0}
        };
        matrix = MatrixUtils.createRealMatrix(data);
        schurTransformer = new SchurTransformer(matrix);
    }

    @Test
    public void testConstructorNonSquareMatrix() {
        double[][] data = {
            {1.0, 2.0, 3.0},
            {4.0, 5.0, 6.0}
        };
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(nonSquareMatrix);
            fail("Expected NonSquareMatrixException");
        } catch (NonSquareMatrixException e) {
            // Expected
        }
    }

    @Test
    public void testGetP() {
        RealMatrix p = schurTransformer.getP();
        assertNotNull(p);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix pt = schurTransformer.getPT();
        assertNotNull(pt);
        assertEquals(matrix.getRowDimension(), pt.getColumnDimension());
        assertEquals(matrix.getColumnDimension(), pt.getRowDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix t = schurTransformer.getT();
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testTransform() {
        // This test is indirect as transform() is private and called in the constructor
        // We can verify the transformation by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testGetNorm() {
        // This test is indirect as getNorm() is private
        // We can verify the norm calculation by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testFindSmallSubDiagonalElement() {
        // This test is indirect as findSmallSubDiagonalElement() is private
        // We can verify the method by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testComputeShift() {
        // This test is indirect as computeShift() is private
        // We can verify the method by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testInitQRStep() {
        // This test is indirect as initQRStep() is private
        // We can verify the method by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testPerformDoubleQRStep() {
        // This test is indirect as performDoubleQRStep() is private
        // We can verify the method by checking the matrices P and T
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        assertNotNull(p);
        assertNotNull(t);
        assertEquals(matrix.getRowDimension(), p.getRowDimension());
        assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
        assertEquals(matrix.getRowDimension(), t.getRowDimension());
        assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }
}
```