```java
package org.apache.commons.math3.linear;

import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.util.Precision;
import org.apache.commons.math3.util.FastMath;
import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

public class SchurTransformerTest {

    private SchurTransformer schurTransformer;
    private RealMatrix matrix;

    @Before
    public void setUp() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        matrix = MatrixUtils.createRealMatrix(data);
        schurTransformer = new SchurTransformer(matrix);
    }

    @Test
    public void testConstructorWithNonSquareMatrix() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6}
        };
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(nonSquareMatrix);
            Assert.fail("Expected NonSquareMatrixException");
        } catch (NonSquareMatrixException e) {
            // Expected
        }
    }

    @Test
    public void testGetP() {
        RealMatrix p = schurTransformer.getP();
        Assert.assertNotNull(p);
        Assert.assertEquals(matrix.getRowDimension(), p.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), p.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix pt = schurTransformer.getPT();
        Assert.assertNotNull(pt);
        Assert.assertEquals(matrix.getRowDimension(), pt.getColumnDimension());
        Assert.assertEquals(matrix.getColumnDimension(), pt.getRowDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix t = schurTransformer.getT();
        Assert.assertNotNull(t);
        Assert.assertEquals(matrix.getRowDimension(), t.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), t.getColumnDimension());
    }

    @Test
    public void testTransform() {
        // This test is indirect as transform() is private and called in the constructor
        RealMatrix p = schurTransformer.getP();
        RealMatrix t = schurTransformer.getT();
        Assert.assertNotNull(p);
        Assert.assertNotNull(t);
    }

    @Test
    public void testGetNorm() {
        // This test is indirect as getNorm() is private and used internally
        double norm = 0.0;
        for (int i = 0; i < matrix.getRowDimension(); ++i) {
            for (int j = FastMath.max(i - 1, 0); j < matrix.getColumnDimension(); ++j) {
                norm += FastMath.abs(matrix.getEntry(i, j));
            }
        }
        Assert.assertTrue(norm > 0);
    }

    @Test
    public void testFindSmallSubDiagonalElement() {
        // This test is indirect as findSmallSubDiagonalElement() is private and used internally
        // Assuming the method works correctly if no exceptions are thrown during transformation
    }

    @Test
    public void testComputeShift() {
        // This test is indirect as computeShift() is private and used internally
        // Assuming the method works correctly if no exceptions are thrown during transformation
    }

    @Test
    public void testInitQRStep() {
        // This test is indirect as initQRStep() is private and used internally
        // Assuming the method works correctly if no exceptions are thrown during transformation
    }

    @Test
    public void testPerformDoubleQRStep() {
        // This test is indirect as performDoubleQRStep() is private and used internally
        // Assuming the method works correctly if no exceptions are thrown during transformation
    }

    @Test
    public void testMaxIterationsExceeded() {
        double[][] data = {
            {1, 2},
            {3, 4}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        try {
            new SchurTransformer(matrix);
            Assert.fail("Expected MaxCountExceededException");
        } catch (MaxCountExceededException e) {
            // Expected
        }
    }
}
```