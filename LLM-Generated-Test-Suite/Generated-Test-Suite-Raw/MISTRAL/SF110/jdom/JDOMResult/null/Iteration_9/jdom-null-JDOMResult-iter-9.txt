```java
package org.jdom2.transform;

import org.jdom2.*;
import org.jdom2.input.sax.SAXHandler;
import org.jdom2.input.sax.DefaultJDOMFactory;
import org.junit.Before;
import org.junit.Test;
import org.xml.sax.ContentHandler;
import org.xml.sax.LexicalHandler;
import org.xml.sax.helpers.XMLFilterImpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class JDOMResultTest {

    private JDOMResult jdomResult;
    private List<Content> contentList;
    private Document document;
    private JDOMFactory factory;

    @Before
    public void setUp() {
        jdomResult = new JDOMResult();
        contentList = new ArrayList<>();
        document = new Document();
        factory = new DefaultJDOMFactory();
    }

    @Test
    public void testSetResult() {
        jdomResult.setResult(contentList);
        assertEquals(contentList, jdomResult.getResult());
    }

    @Test
    public void testGetResult() {
        jdomResult.setResult(contentList);
        assertEquals(contentList, jdomResult.getResult());

        jdomResult.setDocument(document);
        assertEquals(document.getContent(), jdomResult.getResult());
    }

    @Test
    public void testSetDocument() {
        jdomResult.setDocument(document);
        assertEquals(document, jdomResult.getDocument());
    }

    @Test
    public void testGetDocument() {
        jdomResult.setDocument(document);
        assertEquals(document, jdomResult.getDocument());

        jdomResult.setResult(contentList);
        Document doc = jdomResult.getDocument();
        assertNotNull(doc);
        assertEquals(contentList, doc.getContent());
    }

    @Test
    public void testSetFactory() {
        jdomResult.setFactory(factory);
        assertEquals(factory, jdomResult.getFactory());
    }

    @Test
    public void testGetFactory() {
        jdomResult.setFactory(factory);
        assertEquals(factory, jdomResult.getFactory());
    }

    @Test
    public void testSetHandler() {
        ContentHandler handler = new XMLFilterImpl();
        jdomResult.setHandler(handler);
        // Since setHandler is overridden to do nothing, we can't directly test it
        // We can only ensure it doesn't throw an exception
    }

    @Test
    public void testSetLexicalHandler() {
        LexicalHandler handler = new SAXHandler();
        jdomResult.setLexicalHandler(handler);
        // Since setLexicalHandler is overridden to do nothing, we can't directly test it
        // We can only ensure it doesn't throw an exception
    }

    @Test
    public void testRetrieveResult() {
        // Testing private method indirectly via public methods
        jdomResult.setResult(contentList);
        assertEquals(contentList, jdomResult.getResult());
    }

    @Test
    public void testFragmentHandler() {
        JDOMResult.FragmentHandler fragmentHandler = new JDOMResult.FragmentHandler(factory);
        List<Content> result = fragmentHandler.getResult();
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testDocumentBuilder() {
        JDOMResult.DocumentBuilder documentBuilder = jdomResult.new DocumentBuilder();
        List<Content> result = documentBuilder.getResult();
        assertNull(result);

        try {
            documentBuilder.startDocument();
            result = documentBuilder.getResult();
            assertNotNull(result);
            assertTrue(result.isEmpty());
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }
}
```