```java
package org.jdom2.util;

import org.jdom2.Element;
import org.jdom2.Attribute;
import org.jdom2.Namespace;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class NamespaceStackTest {

    private NamespaceStack namespaceStack;
    private Namespace ns1;
    private Namespace ns2;
    private Namespace ns3;
    private Element element;
    private Attribute attribute;

    @Before
    public void setUp() {
        namespaceStack = new NamespaceStack();
        ns1 = Namespace.getNamespace("prefix1", "uri1");
        ns2 = Namespace.getNamespace("prefix2", "uri2");
        ns3 = Namespace.getNamespace("prefix3", "uri3");
        element = new Element("element", ns1);
        attribute = new Attribute("attribute", "value", ns2);
    }

    @Test
    public void testConstructor() {
        assertNotNull(namespaceStack);
        assertEquals(0, namespaceStack.getScope().length);
    }

    @Test
    public void testPushElement() {
        namespaceStack.push(element);
        assertTrue(namespaceStack.isInScope(ns1));
        assertFalse(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testPushAttribute() {
        namespaceStack.push(attribute);
        assertTrue(namespaceStack.isInScope(ns2));
        assertFalse(namespaceStack.isInScope(ns1));
    }

    @Test
    public void testPop() {
        namespaceStack.push(element);
        namespaceStack.pop();
        assertFalse(namespaceStack.isInScope(ns1));
    }

    @Test(expected = IllegalStateException.class)
    public void testPopEmptyStack() {
        namespaceStack.pop();
    }

    @Test
    public void testAddedForward() {
        namespaceStack.push(element);
        Iterable<Namespace> addedForward = namespaceStack.addedForward();
        assertNotNull(addedForward);
        for (Namespace ns : addedForward) {
            assertEquals(ns1, ns);
        }
    }

    @Test
    public void testAddedReverse() {
        namespaceStack.push(element);
        Iterable<Namespace> addedReverse = namespaceStack.addedReverse();
        assertNotNull(addedReverse);
        for (Namespace ns : addedReverse) {
            assertEquals(ns1, ns);
        }
    }

    @Test
    public void testIterator() {
        namespaceStack.push(element);
        Iterator<Namespace> iterator = namespaceStack.iterator();
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
        assertEquals(ns1, iterator.next());
    }

    @Test
    public void testGetScope() {
        namespaceStack.push(element);
        Namespace[] scope = namespaceStack.getScope();
        assertNotNull(scope);
        assertEquals(1, scope.length);
        assertEquals(ns1, scope[0]);
    }

    @Test
    public void testIsInScope() {
        namespaceStack.push(element);
        assertTrue(namespaceStack.isInScope(ns1));
        assertFalse(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testPushElementWithAdditionalNamespaces() {
        element.addNamespaceDeclaration(ns2);
        namespaceStack.push(element);
        assertTrue(namespaceStack.isInScope(ns1));
        assertTrue(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testPushElementWithAttributes() {
        element.setAttribute(attribute);
        namespaceStack.push(element);
        assertTrue(namespaceStack.isInScope(ns1));
        assertTrue(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testPushAttributeWithSameNamespaceAsElement() {
        attribute = new Attribute("attribute", "value", ns1);
        namespaceStack.push(element);
        namespaceStack.push(attribute);
        assertTrue(namespaceStack.isInScope(ns1));
        assertFalse(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testPushAttributeWithDifferentNamespace() {
        namespaceStack.push(element);
        namespaceStack.push(attribute);
        assertTrue(namespaceStack.isInScope(ns1));
        assertTrue(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testPushStackWithEmptyToAddList() {
        namespaceStack.pushStack(ns1, new Namespace[]{ns1}, new ArrayList<>());
        assertTrue(namespaceStack.isInScope(ns1));
    }

    @Test
    public void testPushStackWithNonEmptyToAddList() {
        List<Namespace> toAdd = new ArrayList<>();
        toAdd.add(ns2);
        namespaceStack.pushStack(ns1, new Namespace[]{ns1, ns2}, toAdd);
        assertTrue(namespaceStack.isInScope(ns1));
        assertTrue(namespaceStack.isInScope(ns2));
    }

    @Test
    public void testCheckNamespaceWithSameNamespace() {
        Namespace[] scope = new Namespace[]{ns1};
        Namespace[] newScope = NamespaceStack.checkNamespace(new ArrayList<>(), ns1, scope);
        assertArrayEquals(scope, newScope);
    }

    @Test
    public void testCheckNamespaceWithDifferentPrefix() {
        Namespace[] scope = new Namespace[]{ns1};
        Namespace[] newScope = NamespaceStack.checkNamespace(new ArrayList<>(), ns2, scope);
        assertEquals(2, newScope.length);
        assertEquals(ns2, newScope[0]);
        assertEquals(ns1, newScope[1]);
    }

    @Test
    public void testCheckNamespaceWithSamePrefixDifferentNamespace() {
        Namespace ns4 = Namespace.getNamespace("prefix1", "uri4");
        Namespace[] scope = new Namespace[]{ns1};
        Namespace[] newScope = NamespaceStack.checkNamespace(new ArrayList<>(), ns4, scope);
        assertEquals(2, newScope.length);
        assertEquals(ns4, newScope[0]);
        assertEquals(ns1, newScope[1]);
    }

    @Test
    public void testBinarySearchFound() {
        Namespace[] data = new Namespace[]{ns1, ns2, ns3};
        int index = NamespaceStack.binarySearch(data, 0, data.length, ns2);
        assertEquals(1, index);
    }

    @Test
    public void testBinarySearchNotFound() {
        Namespace[] data = new Namespace[]{ns1, ns2, ns3};
        int index = NamespaceStack.binarySearch(data, 0, data.length, Namespace.getNamespace("prefix4", "uri4"));
        assertEquals(-4, index);
    }
}
```