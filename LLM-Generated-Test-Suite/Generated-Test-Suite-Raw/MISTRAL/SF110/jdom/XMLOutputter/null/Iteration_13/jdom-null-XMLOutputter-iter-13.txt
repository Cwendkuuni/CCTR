```java
package org.jdom2.output;

import org.jdom2.*;
import org.jdom2.output.support.*;
import org.junit.*;
import java.io.*;
import java.util.*;

import static org.junit.Assert.*;

public class XMLOutputterTest {

    private XMLOutputter outputter;
    private Format format;
    private XMLOutputProcessor processor;

    @Before
    public void setUp() {
        format = Format.getPrettyFormat();
        processor = new DefaultXMLProcessor();
        outputter = new XMLOutputter(format, processor);
    }

    @Test
    public void testConstructorWithFormatAndProcessor() {
        XMLOutputter newOutputter = new XMLOutputter(format, processor);
        assertEquals(format, newOutputter.getFormat());
        assertEquals(processor, newOutputter.getXMLOutputProcessor());
    }

    @Test
    public void testDefaultConstructor() {
        XMLOutputter newOutputter = new XMLOutputter();
        assertNotNull(newOutputter.getFormat());
        assertNotNull(newOutputter.getXMLOutputProcessor());
    }

    @Test
    public void testConstructorWithXMLOutputter() {
        XMLOutputter newOutputter = new XMLOutputter(outputter);
        assertEquals(outputter.getFormat(), newOutputter.getFormat());
        assertEquals(outputter.getXMLOutputProcessor(), newOutputter.getXMLOutputProcessor());
    }

    @Test
    public void testConstructorWithFormat() {
        XMLOutputter newOutputter = new XMLOutputter(format);
        assertEquals(format, newOutputter.getFormat());
        assertNotNull(newOutputter.getXMLOutputProcessor());
    }

    @Test
    public void testConstructorWithProcessor() {
        XMLOutputter newOutputter = new XMLOutputter(processor);
        assertNotNull(newOutputter.getFormat());
        assertEquals(processor, newOutputter.getXMLOutputProcessor());
    }

    @Test
    public void testSetFormat() {
        Format newFormat = Format.getCompactFormat();
        outputter.setFormat(newFormat);
        assertEquals(newFormat, outputter.getFormat());
    }

    @Test
    public void testGetFormat() {
        assertEquals(format, outputter.getFormat());
    }

    @Test
    public void testGetXMLOutputProcessor() {
        assertEquals(processor, outputter.getXMLOutputProcessor());
    }

    @Test
    public void testSetXMLOutputProcessor() {
        XMLOutputProcessor newProcessor = new DefaultXMLProcessor();
        outputter.setXMLOutputProcessor(newProcessor);
        assertEquals(newProcessor, outputter.getXMLOutputProcessor());
    }

    @Test
    public void testOutputDocumentToOutputStream() throws IOException {
        Document doc = new Document(new Element("root"));
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(doc, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputDocTypeToOutputStream() throws IOException {
        DocType doctype = new DocType("root");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(doctype, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputElementToOutputStream() throws IOException {
        Element element = new Element("root");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(element, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputElementContentToOutputStream() throws IOException {
        Element element = new Element("root").setText("content");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.outputElementContent(element, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputListToOutputStream() throws IOException {
        List<Content> list = new ArrayList<>();
        list.add(new Element("root"));
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(list, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputCDATAToOutputStream() throws IOException {
        CDATA cdata = new CDATA("content");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(cdata, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputTextToOutputStream() throws IOException {
        Text text = new Text("content");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(text, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputCommentToOutputStream() throws IOException {
        Comment comment = new Comment("comment");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(comment, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputProcessingInstructionToOutputStream() throws IOException {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(pi, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputEntityRefToOutputStream() throws IOException {
        EntityRef entity = new EntityRef("entity");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        outputter.output(entity, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputStringDocument() {
        Document doc = new Document(new Element("root"));
        String result = outputter.outputString(doc);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringDocType() {
        DocType doctype = new DocType("root");
        String result = outputter.outputString(doctype);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringElement() {
        Element element = new Element("root");
        String result = outputter.outputString(element);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringList() {
        List<Content> list = new ArrayList<>();
        list.add(new Element("root"));
        String result = outputter.outputString(list);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringCDATA() {
        CDATA cdata = new CDATA("content");
        String result = outputter.outputString(cdata);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringText() {
        Text text = new Text("content");
        String result = outputter.outputString(text);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringComment() {
        Comment comment = new Comment("comment");
        String result = outputter.outputString(comment);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringProcessingInstruction() {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        String result = outputter.outputString(pi);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputStringEntityRef() {
        EntityRef entity = new EntityRef("entity");
        String result = outputter.outputString(entity);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputElementContentString() {
        Element element = new Element("root").setText("content");
        String result = outputter.outputElementContentString(element);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testOutputDocumentToWriter() throws IOException {
        Document doc = new Document(new Element("root"));
        StringWriter out = new StringWriter();
        outputter.output(doc, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputDocTypeToWriter() throws IOException {
        DocType doctype = new DocType("root");
        StringWriter out = new StringWriter();
        outputter.output(doctype, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputElementToWriter() throws IOException {
        Element element = new Element("root");
        StringWriter out = new StringWriter();
        outputter.output(element, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputElementContentToWriter() throws IOException {
        Element element = new Element("root").setText("content");
        StringWriter out = new StringWriter();
        outputter.outputElementContent(element, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputListToWriter() throws IOException {
        List<Content> list = new ArrayList<>();
        list.add(new Element("root"));
        StringWriter out = new StringWriter();
        outputter.output(list, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputCDATAToWriter() throws IOException {
        CDATA cdata = new CDATA("content");
        StringWriter out = new StringWriter();
        outputter.output(cdata, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputTextToWriter() throws IOException {
        Text text = new Text("content");
        StringWriter out = new StringWriter();
        outputter.output(text, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputCommentToWriter() throws IOException {
        Comment comment = new Comment("comment");
        StringWriter out = new StringWriter();
        outputter.output(comment, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputProcessingInstructionToWriter() throws IOException {
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        StringWriter out = new StringWriter();
        outputter.output(pi, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testOutputEntityRefToWriter() throws IOException {
        EntityRef entity = new EntityRef("entity");
        StringWriter out = new StringWriter();
        outputter.output(entity, out);
        assertFalse(out.toString().isEmpty());
    }

    @Test
    public void testEscapeAttributeEntities() {
        String str = "&<>";
        String result = outputter.escapeAttributeEntities(str);
        assertEquals("&amp;&lt;&gt;", result);
    }

    @Test
    public void testEscapeElementEntities() {
        String str = "&<>";
        String result = outputter.escapeElementEntities(str);
        assertEquals("&amp;&lt;&gt;", result);
    }

    @Test
    public void testClone() {
        XMLOutputter clonedOutputter = outputter.clone();
        assertNotSame(outputter, clonedOutputter);
        assertEquals(outputter.getFormat(), clonedOutputter.getFormat());
        assertEquals(outputter.getXMLOutputProcessor(), clonedOutputter.getXMLOutputProcessor());
    }

    @Test
    public void testToString() {
        String result = outputter.toString();
        assertTrue(result.startsWith("XMLOutputter[omitDeclaration = "));
    }
}
```