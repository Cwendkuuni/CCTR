```java
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.LocalDateTime;
import org.joda.time.DateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadWritableInstant;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;

import static org.junit.Assert.*;

public class DateTimeFormatterTest {

    private DateTimePrinter mockPrinter;
    private DateTimeParser mockParser;
    private DateTimeFormatter formatter;

    @Before
    public void setUp() {
        mockPrinter = Mockito.mock(DateTimePrinter.class);
        mockParser = Mockito.mock(DateTimeParser.class);
        formatter = new DateTimeFormatter(mockPrinter, mockParser);
    }

    @Test
    public void testIsPrinter() {
        assertTrue(formatter.isPrinter());
    }

    @Test
    public void testGetPrinter() {
        assertEquals(mockPrinter, formatter.getPrinter());
    }

    @Test
    public void testIsParser() {
        assertTrue(formatter.isParser());
    }

    @Test
    public void testGetParser() {
        assertEquals(mockParser, formatter.getParser());
    }

    @Test
    public void testWithLocale() {
        Locale locale = Locale.FRANCE;
        DateTimeFormatter newFormatter = formatter.withLocale(locale);
        assertEquals(locale, newFormatter.getLocale());
    }

    @Test
    public void testGetLocale() {
        assertNull(formatter.getLocale());
    }

    @Test
    public void testWithOffsetParsed() {
        DateTimeFormatter newFormatter = formatter.withOffsetParsed();
        assertTrue(newFormatter.isOffsetParsed());
    }

    @Test
    public void testIsOffsetParsed() {
        assertFalse(formatter.isOffsetParsed());
    }

    @Test
    public void testWithChronology() {
        Chronology chronology = Mockito.mock(Chronology.class);
        DateTimeFormatter newFormatter = formatter.withChronology(chronology);
        assertEquals(chronology, newFormatter.getChronology());
    }

    @Test
    public void testGetChronology() {
        assertNull(formatter.getChronology());
    }

    @Test
    public void testGetChronolgy() {
        assertNull(formatter.getChronolgy());
    }

    @Test
    public void testWithZoneUTC() {
        DateTimeFormatter newFormatter = formatter.withZoneUTC();
        assertEquals(DateTimeZone.UTC, newFormatter.getZone());
    }

    @Test
    public void testWithZone() {
        DateTimeZone zone = DateTimeZone.forID("America/New_York");
        DateTimeFormatter newFormatter = formatter.withZone(zone);
        assertEquals(zone, newFormatter.getZone());
    }

    @Test
    public void testGetZone() {
        assertNull(formatter.getZone());
    }

    @Test
    public void testWithPivotYearInteger() {
        Integer pivotYear = 2020;
        DateTimeFormatter newFormatter = formatter.withPivotYear(pivotYear);
        assertEquals(pivotYear, newFormatter.getPivotYear());
    }

    @Test
    public void testWithPivotYearInt() {
        int pivotYear = 2020;
        DateTimeFormatter newFormatter = formatter.withPivotYear(pivotYear);
        assertEquals(Integer.valueOf(pivotYear), newFormatter.getPivotYear());
    }

    @Test
    public void testGetPivotYear() {
        assertNull(formatter.getPivotYear());
    }

    @Test
    public void testWithDefaultYear() {
        int defaultYear = 2021;
        DateTimeFormatter newFormatter = formatter.withDefaultYear(defaultYear);
        assertEquals(defaultYear, newFormatter.getDefaultYear());
    }

    @Test
    public void testGetDefaultYear() {
        assertEquals(2000, formatter.getDefaultYear());
    }

    @Test
    public void testPrintToStringBufferReadableInstant() {
        ReadableInstant instant = Mockito.mock(ReadableInstant.class);
        StringBuffer sb = new StringBuffer();
        formatter.printTo(sb, instant);
        Mockito.verify(mockPrinter).printTo(sb, instant, null);
    }

    @Test
    public void testPrintToWriterReadableInstant() throws IOException {
        ReadableInstant instant = Mockito.mock(ReadableInstant.class);
        Writer writer = new StringWriter();
        formatter.printTo(writer, instant);
        Mockito.verify(mockPrinter).printTo(writer, instant, null);
    }

    @Test
    public void testPrintToAppendableReadableInstant() throws IOException {
        ReadableInstant instant = Mockito.mock(ReadableInstant.class);
        Appendable appendable = new StringWriter();
        formatter.printTo(appendable, instant);
        Mockito.verify(mockPrinter).printTo(appendable, instant, null);
    }

    @Test
    public void testPrintToStringBufferLong() {
        long instant = 123456789L;
        StringBuffer sb = new StringBuffer();
        formatter.printTo(sb, instant);
        Mockito.verify(mockPrinter).printTo(sb, instant, null);
    }

    @Test
    public void testPrintToWriterLong() throws IOException {
        long instant = 123456789L;
        Writer writer = new StringWriter();
        formatter.printTo(writer, instant);
        Mockito.verify(mockPrinter).printTo(writer, instant, null);
    }

    @Test
    public void testPrintToAppendableLong() throws IOException {
        long instant = 123456789L;
        Appendable appendable = new StringWriter();
        formatter.printTo(appendable, instant);
        Mockito.verify(mockPrinter).printTo(appendable, instant, null);
    }

    @Test
    public void testPrintToStringBufferReadablePartial() {
        ReadablePartial partial = Mockito.mock(ReadablePartial.class);
        StringBuffer sb = new StringBuffer();
        formatter.printTo(sb, partial);
        Mockito.verify(mockPrinter).printTo(sb, partial, null);
    }

    @Test
    public void testPrintToWriterReadablePartial() throws IOException {
        ReadablePartial partial = Mockito.mock(ReadablePartial.class);
        Writer writer = new StringWriter();
        formatter.printTo(writer, partial);
        Mockito.verify(mockPrinter).printTo(writer, partial, null);
    }

    @Test
    public void testPrintToAppendableReadablePartial() throws IOException {
        ReadablePartial partial = Mockito.mock(ReadablePartial.class);
        Appendable appendable = new StringWriter();
        formatter.printTo(appendable, partial);
        Mockito.verify(mockPrinter).printTo(appendable, partial, null);
    }

    @Test
    public void testPrintReadableInstant() {
        ReadableInstant instant = Mockito.mock(ReadableInstant.class);
        String result = formatter.print(instant);
        Mockito.verify(mockPrinter).printTo(Mockito.any(StringBuffer.class), Mockito.eq(instant), Mockito.eq(null));
    }

    @Test
    public void testPrintLong() {
        long instant = 123456789L;
        String result = formatter.print(instant);
        Mockito.verify(mockPrinter).printTo(Mockito.any(StringBuffer.class), Mockito.eq(instant), Mockito.eq(null));
    }

    @Test
    public void testPrintReadablePartial() {
        ReadablePartial partial = Mockito.mock(ReadablePartial.class);
        String result = formatter.print(partial);
        Mockito.verify(mockPrinter).printTo(Mockito.any(StringBuffer.class), Mockito.eq(partial), Mockito.eq(null));
    }

    @Test
    public void testParseInto() {
        ReadWritableInstant instant = Mockito.mock(ReadWritableInstant.class);
        String text = "2021-01-01";
        int position = 0;
        int result = formatter.parseInto(instant, text, position);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(position));
    }

    @Test
    public void testParseMillis() {
        String text = "2021-01-01";
        long result = formatter.parseMillis(text);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(0));
    }

    @Test
    public void testParseLocalDate() {
        String text = "2021-01-01";
        LocalDate result = formatter.parseLocalDate(text);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(0));
    }

    @Test
    public void testParseLocalTime() {
        String text = "12:34:56";
        LocalTime result = formatter.parseLocalTime(text);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(0));
    }

    @Test
    public void testParseLocalDateTime() {
        String text = "2021-01-01T12:34:56";
        LocalDateTime result = formatter.parseLocalDateTime(text);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(0));
    }

    @Test
    public void testParseDateTime() {
        String text = "2021-01-01T12:34:56";
        DateTime result = formatter.parseDateTime(text);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(0));
    }

    @Test
    public void testParseMutableDateTime() {
        String text = "2021-01-01T12:34:56";
        MutableDateTime result = formatter.parseMutableDateTime(text);
        Mockito.verify(mockParser).parseInto(Mockito.any(), Mockito.eq(text), Mockito.eq(0));
    }
}
```