```java
package org.joda.time.base;

import org.joda.time.*;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.DurationFieldType;
import org.joda.time.field.FieldUtils;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class BaseSingleFieldPeriodTest {

    private static class TestBaseSingleFieldPeriod extends BaseSingleFieldPeriod {
        public TestBaseSingleFieldPeriod(int iPeriod) {
            super(iPeriod);
        }

        @Override
        public DurationFieldType getFieldType() {
            return DurationFieldType.days();
        }

        @Override
        public PeriodType getPeriodType() {
            return PeriodType.days();
        }
    }

    private BaseSingleFieldPeriod period;

    @Before
    public void setUp() {
        period = new TestBaseSingleFieldPeriod(5);
    }

    @Test
    public void testBetweenReadableInstant() {
        ReadableInstant start = new Instant(0L);
        ReadableInstant end = new Instant(86400000L); // 1 day in milliseconds
        int result = BaseSingleFieldPeriod.between(start, end, DurationFieldType.days());
        assertEquals(1, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBetweenReadableInstantNull() {
        BaseSingleFieldPeriod.between(null, new Instant(0L), DurationFieldType.days());
    }

    @Test
    public void testBetweenReadablePartial() {
        ReadablePartial start = new DateTime(2000, 1, 1, 0, 0, 0, 0).toLocalDate();
        ReadablePartial end = new DateTime(2000, 1, 2, 0, 0, 0, 0).toLocalDate();
        int result = BaseSingleFieldPeriod.between(start, end, PeriodType.days().getField(0));
        assertEquals(1, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBetweenReadablePartialNull() {
        BaseSingleFieldPeriod.between(null, new DateTime(2000, 1, 1, 0, 0, 0, 0).toLocalDate(), PeriodType.days().getField(0));
    }

    @Test
    public void testStandardPeriodIn() {
        ReadablePeriod period = new Period(1, 0, 0, 0, 0, 0, 0, 0); // 1 year
        int result = BaseSingleFieldPeriod.standardPeriodIn(period, 86400000L); // 1 day in milliseconds
        assertEquals(365, result);
    }

    @Test
    public void testStandardPeriodInNull() {
        int result = BaseSingleFieldPeriod.standardPeriodIn(null, 86400000L); // 1 day in milliseconds
        assertEquals(0, result);
    }

    @Test
    public void testGetValue() {
        assertEquals(5, period.getValue());
    }

    @Test
    public void testSetValue() {
        period.setValue(10);
        assertEquals(10, period.getValue());
    }

    @Test
    public void testSize() {
        assertEquals(1, period.size());
    }

    @Test
    public void testGetFieldType() {
        assertEquals(DurationFieldType.days(), period.getFieldType());
    }

    @Test
    public void testGetFieldTypeIndex() {
        assertEquals(DurationFieldType.days(), period.getFieldType(0));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetFieldTypeIndexOutOfBounds() {
        period.getFieldType(1);
    }

    @Test
    public void testGetValueIndex() {
        assertEquals(5, period.getValue(0));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetValueIndexOutOfBounds() {
        period.getValue(1);
    }

    @Test
    public void testGet() {
        assertEquals(5, period.get(DurationFieldType.days()));
        assertEquals(0, period.get(DurationFieldType.hours()));
    }

    @Test
    public void testIsSupported() {
        assertTrue(period.isSupported(DurationFieldType.days()));
        assertFalse(period.isSupported(DurationFieldType.hours()));
    }

    @Test
    public void testToPeriod() {
        Period result = period.toPeriod();
        assertEquals(PeriodType.days(), result.getPeriodType());
        assertEquals(5, result.getDays());
    }

    @Test
    public void testToMutablePeriod() {
        MutablePeriod result = period.toMutablePeriod();
        assertEquals(PeriodType.days(), result.getPeriodType());
        assertEquals(5, result.getDays());
    }

    @Test
    public void testEquals() {
        BaseSingleFieldPeriod other = new TestBaseSingleFieldPeriod(5);
        assertTrue(period.equals(other));
        other.setValue(10);
        assertFalse(period.equals(other));
    }

    @Test
    public void testHashCode() {
        BaseSingleFieldPeriod other = new TestBaseSingleFieldPeriod(5);
        assertEquals(period.hashCode(), other.hashCode());
        other.setValue(10);
        assertNotEquals(period.hashCode(), other.hashCode());
    }

    @Test
    public void testCompareTo() {
        BaseSingleFieldPeriod other = new TestBaseSingleFieldPeriod(5);
        assertEquals(0, period.compareTo(other));
        other.setValue(10);
        assertTrue(period.compareTo(other) < 0);
        other.setValue(3);
        assertTrue(period.compareTo(other) > 0);
    }

    @Test(expected = ClassCastException.class)
    public void testCompareToDifferentClass() {
        period.compareTo(new Object());
    }
}
```