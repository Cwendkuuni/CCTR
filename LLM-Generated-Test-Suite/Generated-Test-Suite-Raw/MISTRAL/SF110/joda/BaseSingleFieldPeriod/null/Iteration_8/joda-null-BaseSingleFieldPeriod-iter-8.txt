```java
package org.joda.time.base;

import org.joda.time.*;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.DurationFieldType;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class BaseSingleFieldPeriodTest {

    private BaseSingleFieldPeriod period;
    private ReadableInstant startInstant;
    private ReadableInstant endInstant;
    private ReadablePartial startPartial;
    private ReadablePartial endPartial;
    private ReadablePeriod readablePeriod;

    @Before
    public void setUp() {
        period = new BaseSingleFieldPeriod(10) {
            @Override
            public DurationFieldType getFieldType() {
                return DurationFieldType.days();
            }

            @Override
            public PeriodType getPeriodType() {
                return PeriodType.days();
            }
        };

        DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd");
        startInstant = formatter.parseDateTime("2023-01-01T00:00:00Z");
        endInstant = formatter.parseDateTime("2023-01-10T00:00:00Z");

        startPartial = new DateTime(2023, 1, 1, 0, 0).toLocalDate();
        endPartial = new DateTime(2023, 1, 10, 0, 0).toLocalDate();

        readablePeriod = new Period(10, PeriodType.days());
    }

    @Test
    public void testBetweenInstants() {
        int result = BaseSingleFieldPeriod.between(startInstant, endInstant, DurationFieldType.days());
        assertEquals(9, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBetweenInstantsNull() {
        BaseSingleFieldPeriod.between(null, endInstant, DurationFieldType.days());
    }

    @Test
    public void testBetweenPartials() {
        int result = BaseSingleFieldPeriod.between(startPartial, endPartial, readablePeriod);
        assertEquals(9, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBetweenPartialsNull() {
        BaseSingleFieldPeriod.between(null, endPartial, readablePeriod);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBetweenPartialsDifferentFields() {
        ReadablePartial differentPartial = new DateTime(2023, 1, 1, 0, 0).toLocalTime();
        BaseSingleFieldPeriod.between(startPartial, differentPartial, readablePeriod);
    }

    @Test
    public void testStandardPeriodIn() {
        int result = BaseSingleFieldPeriod.standardPeriodIn(readablePeriod, 1);
        assertEquals(864000000, result); // 10 days in milliseconds
    }

    @Test
    public void testStandardPeriodInNull() {
        int result = BaseSingleFieldPeriod.standardPeriodIn(null, 1);
        assertEquals(0, result);
    }

    @Test
    public void testGetValue() {
        assertEquals(10, period.getValue());
    }

    @Test
    public void testSetValue() {
        period.setValue(20);
        assertEquals(20, period.getValue());
    }

    @Test
    public void testSize() {
        assertEquals(1, period.size());
    }

    @Test
    public void testGetFieldType() {
        assertEquals(DurationFieldType.days(), period.getFieldType());
    }

    @Test
    public void testGetFieldTypeIndex() {
        assertEquals(DurationFieldType.days(), period.getFieldType(0));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetFieldTypeIndexOutOfBounds() {
        period.getFieldType(1);
    }

    @Test
    public void testGetValueIndex() {
        assertEquals(10, period.getValue(0));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetValueIndexOutOfBounds() {
        period.getValue(1);
    }

    @Test
    public void testGet() {
        assertEquals(10, period.get(DurationFieldType.days()));
    }

    @Test
    public void testGetUnsupported() {
        assertEquals(0, period.get(DurationFieldType.hours()));
    }

    @Test
    public void testIsSupported() {
        assertTrue(period.isSupported(DurationFieldType.days()));
    }

    @Test
    public void testIsSupportedUnsupported() {
        assertFalse(period.isSupported(DurationFieldType.hours()));
    }

    @Test
    public void testToPeriod() {
        Period result = period.toPeriod();
        assertEquals(Period.days(10), result);
    }

    @Test
    public void testToMutablePeriod() {
        MutablePeriod result = period.toMutablePeriod();
        assertEquals(Period.days(10), result);
    }

    @Test
    public void testEquals() {
        BaseSingleFieldPeriod otherPeriod = new BaseSingleFieldPeriod(10) {
            @Override
            public DurationFieldType getFieldType() {
                return DurationFieldType.days();
            }

            @Override
            public PeriodType getPeriodType() {
                return PeriodType.days();
            }
        };
        assertTrue(period.equals(otherPeriod));
    }

    @Test
    public void testEqualsDifferentValue() {
        BaseSingleFieldPeriod otherPeriod = new BaseSingleFieldPeriod(20) {
            @Override
            public DurationFieldType getFieldType() {
                return DurationFieldType.days();
            }

            @Override
            public PeriodType getPeriodType() {
                return PeriodType.days();
            }
        };
        assertFalse(period.equals(otherPeriod));
    }

    @Test
    public void testHashCode() {
        int expectedHashCode = 27 * (27 * 17 + 10) + DurationFieldType.days().hashCode();
        assertEquals(expectedHashCode, period.hashCode());
    }

    @Test
    public void testCompareTo() {
        BaseSingleFieldPeriod otherPeriod = new BaseSingleFieldPeriod(20) {
            @Override
            public DurationFieldType getFieldType() {
                return DurationFieldType.days();
            }

            @Override
            public PeriodType getPeriodType() {
                return PeriodType.days();
            }
        };
        assertTrue(period.compareTo(otherPeriod) < 0);
    }

    @Test(expected = ClassCastException.class)
    public void testCompareToDifferentClass() {
        period.compareTo(new Object());
    }
}
```