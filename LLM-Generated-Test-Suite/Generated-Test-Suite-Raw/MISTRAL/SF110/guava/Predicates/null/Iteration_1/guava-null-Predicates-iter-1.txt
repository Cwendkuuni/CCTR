```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.collect.Lists;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.regex.Pattern;

public class PredicatesTest {

    @Test
    public void testAlwaysTrue() {
        Predicate<Object> predicate = Predicates.alwaysTrue();
        assertTrue(predicate.apply(null));
        assertTrue(predicate.apply("test"));
    }

    @Test
    public void testAlwaysFalse() {
        Predicate<Object> predicate = Predicates.alwaysFalse();
        assertFalse(predicate.apply(null));
        assertFalse(predicate.apply("test"));
    }

    @Test
    public void testIsNull() {
        Predicate<Object> predicate = Predicates.isNull();
        assertTrue(predicate.apply(null));
        assertFalse(predicate.apply("test"));
    }

    @Test
    public void testNotNull() {
        Predicate<Object> predicate = Predicates.notNull();
        assertFalse(predicate.apply(null));
        assertTrue(predicate.apply("test"));
    }

    @Test
    public void testNot() {
        Predicate<Object> predicate = Predicates.not(Predicates.isNull());
        assertFalse(predicate.apply(null));
        assertTrue(predicate.apply("test"));
    }

    @Test
    public void testAndIterable() {
        Predicate<Object> predicate = Predicates.and(Arrays.asList(Predicates.isNull(), Predicates.notNull()));
        assertFalse(predicate.apply(null));
        assertFalse(predicate.apply("test"));
    }

    @Test
    public void testAndArray() {
        Predicate<Object> predicate = Predicates.and(Predicates.isNull(), Predicates.notNull());
        assertFalse(predicate.apply(null));
        assertFalse(predicate.apply("test"));
    }

    @Test
    public void testAndTwoPredicates() {
        Predicate<Object> predicate = Predicates.and(Predicates.isNull(), Predicates.notNull());
        assertFalse(predicate.apply(null));
        assertFalse(predicate.apply("test"));
    }

    @Test
    public void testOrIterable() {
        Predicate<Object> predicate = Predicates.or(Arrays.asList(Predicates.isNull(), Predicates.notNull()));
        assertTrue(predicate.apply(null));
        assertTrue(predicate.apply("test"));
    }

    @Test
    public void testOrArray() {
        Predicate<Object> predicate = Predicates.or(Predicates.isNull(), Predicates.notNull());
        assertTrue(predicate.apply(null));
        assertTrue(predicate.apply("test"));
    }

    @Test
    public void testOrTwoPredicates() {
        Predicate<Object> predicate = Predicates.or(Predicates.isNull(), Predicates.notNull());
        assertTrue(predicate.apply(null));
        assertTrue(predicate.apply("test"));
    }

    @Test
    public void testEqualTo() {
        Predicate<String> predicate = Predicates.equalTo("test");
        assertTrue(predicate.apply("test"));
        assertFalse(predicate.apply("not test"));
    }

    @Test
    public void testInstanceOf() {
        Predicate<Object> predicate = Predicates.instanceOf(String.class);
        assertTrue(predicate.apply("test"));
        assertFalse(predicate.apply(123));
    }

    @Test
    public void testAssignableFrom() {
        Predicate<Class<?>> predicate = Predicates.assignableFrom(String.class);
        assertTrue(predicate.apply(String.class));
        assertFalse(predicate.apply(Integer.class));
    }

    @Test
    public void testIn() {
        Predicate<String> predicate = Predicates.in(Arrays.asList("test", "example"));
        assertTrue(predicate.apply("test"));
        assertFalse(predicate.apply("not test"));
    }

    @Test
    public void testCompose() {
        Predicate<String> predicate = Predicates.compose(Predicates.equalTo("test"), input -> input.toUpperCase());
        assertTrue(predicate.apply("TEST"));
        assertFalse(predicate.apply("not test"));
    }

    @Test
    public void testContainsPatternString() {
        Predicate<CharSequence> predicate = Predicates.containsPattern("test");
        assertTrue(predicate.apply("this is a test"));
        assertFalse(predicate.apply("no test here"));
    }

    @Test
    public void testContainsPattern() {
        Predicate<CharSequence> predicate = Predicates.contains(Pattern.compile("test"));
        assertTrue(predicate.apply("this is a test"));
        assertFalse(predicate.apply("no test here"));
    }

    @Test
    public void testDefensiveCopyArray() {
        List<String> list = Predicates.defensiveCopy("a", "b", "c");
        assertEquals(3, list.size());
        assertTrue(list.contains("a"));
        assertTrue(list.contains("b"));
        assertTrue(list.contains("c"));
    }

    @Test
    public void testDefensiveCopyIterable() {
        List<String> list = Predicates.defensiveCopy(Arrays.asList("a", "b", "c"));
        assertEquals(3, list.size());
        assertTrue(list.contains("a"));
        assertTrue(list.contains("b"));
        assertTrue(list.contains("c"));
    }
}
```