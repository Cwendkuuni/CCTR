```java
package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import com.google.common.base.Suppliers.MemoizingSupplier;
import com.google.common.base.Suppliers.SupplierComposition;
import com.google.common.base.Suppliers.SupplierOfInstance;
import com.google.common.base.Suppliers.ThreadSafeSupplier;
import com.google.common.base.Suppliers.ExpiringMemoizingSupplier;
import com.google.common.base.Suppliers.SupplierFunctionImpl;
import com.google.common.base.Suppliers.SupplierFunction;
import com.google.common.testing.EqualsTester;
import com.google.common.testing.SerializableTester;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.Serializable;
import java.util.concurrent.TimeUnit;

@GwtCompatible
public class SuppliersTest {

    @Test
    public void testCompose() {
        Function<String, Integer> function = new Function<String, Integer>() {
            @Override
            public Integer apply(String input) {
                return input.length();
            }
        };
        Supplier<String> supplier = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        Supplier<Integer> composedSupplier = Suppliers.compose(function, supplier);
        assertEquals(Integer.valueOf(4), composedSupplier.get());
    }

    @Test
    public void testMemoize() {
        Supplier<String> delegate = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        Supplier<String> memoizedSupplier = Suppliers.memoize(delegate);
        assertEquals("test", memoizedSupplier.get());
        assertEquals("test", memoizedSupplier.get());
    }

    @Test
    public void testMemoizeWithExpiration() {
        Supplier<String> delegate = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        Supplier<String> expiringMemoizedSupplier = Suppliers.memoizeWithExpiration(delegate, 1, TimeUnit.SECONDS);
        assertEquals("test", expiringMemoizedSupplier.get());
        try {
            Thread.sleep(1100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        assertEquals("test", expiringMemoizedSupplier.get());
    }

    @Test
    public void testOfInstance() {
        Supplier<String> instanceSupplier = Suppliers.ofInstance("test");
        assertEquals("test", instanceSupplier.get());
    }

    @Test
    public void testSynchronizedSupplier() {
        Supplier<String> delegate = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        Supplier<String> synchronizedSupplier = Suppliers.synchronizedSupplier(delegate);
        assertEquals("test", synchronizedSupplier.get());
    }

    @Test
    public void testSupplierFunction() {
        Function<Supplier<String>, String> supplierFunction = Suppliers.supplierFunction();
        Supplier<String> supplier = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        assertEquals("test", supplierFunction.apply(supplier));
    }

    @Test
    public void testSupplierCompositionEquals() {
        Function<String, Integer> function = new Function<String, Integer>() {
            @Override
            public Integer apply(String input) {
                return input.length();
            }
        };
        Supplier<String> supplier = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        SupplierComposition<String, Integer> composition1 = new SupplierComposition<>(function, supplier);
        SupplierComposition<String, Integer> composition2 = new SupplierComposition<>(function, supplier);

        new EqualsTester()
                .addEqualityGroup(composition1, composition2)
                .testEquals();
    }

    @Test
    public void testMemoizingSupplierSerialization() {
        Supplier<String> delegate = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        MemoizingSupplier<String> memoizingSupplier = new MemoizingSupplier<>(delegate);
        SerializableTester.reserializeAndAssert(memoizingSupplier);
    }

    @Test
    public void testExpiringMemoizingSupplierSerialization() {
        Supplier<String> delegate = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        ExpiringMemoizingSupplier<String> expiringMemoizingSupplier = new ExpiringMemoizingSupplier<>(delegate, 1, TimeUnit.SECONDS);
        SerializableTester.reserializeAndAssert(expiringMemoizingSupplier);
    }

    @Test
    public void testSupplierOfInstanceSerialization() {
        SupplierOfInstance<String> supplierOfInstance = new SupplierOfInstance<>("test");
        SerializableTester.reserializeAndAssert(supplierOfInstance);
    }

    @Test
    public void testThreadSafeSupplierSerialization() {
        Supplier<String> delegate = new Supplier<String>() {
            @Override
            public String get() {
                return "test";
            }
        };

        ThreadSafeSupplier<String> threadSafeSupplier = new ThreadSafeSupplier<>(delegate);
        SerializableTester.reserializeAndAssert(threadSafeSupplier);
    }

    @Test
    public void testSupplierFunctionImplSerialization() {
        SupplierFunctionImpl supplierFunctionImpl = SupplierFunctionImpl.INSTANCE;
        SerializableTester.reserializeAndAssert(supplierFunctionImpl);
    }
}
```