```java
package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import com.google.common.base.Suppliers.MemoizingSupplier;
import com.google.common.base.Suppliers.ExpiringMemoizingSupplier;
import com.google.common.base.Suppliers.SupplierOfInstance;
import com.google.common.base.Suppliers.ThreadSafeSupplier;
import com.google.common.base.Suppliers.SupplierFunctionImpl;
import com.google.common.base.Suppliers.SupplierFunction;
import com.google.common.base.Suppliers.SupplierComposition;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.concurrent.TimeUnit;

@GwtCompatible
public class SuppliersTest {

    private static final String TEST_STRING = "test";
    private static final Integer TEST_INTEGER = 42;

    private Supplier<String> stringSupplier;
    private Supplier<Integer> integerSupplier;

    @Before
    public void setUp() {
        stringSupplier = Suppliers.ofInstance(TEST_STRING);
        integerSupplier = Suppliers.ofInstance(TEST_INTEGER);
    }

    @Test
    public void testCompose() {
        Function<String, Integer> function = input -> input.length();
        Supplier<Integer> composedSupplier = Suppliers.compose(function, stringSupplier);
        assertEquals(Integer.valueOf(TEST_STRING.length()), composedSupplier.get());
    }

    @Test
    public void testMemoize() {
        Supplier<String> memoizedSupplier = Suppliers.memoize(stringSupplier);
        assertEquals(TEST_STRING, memoizedSupplier.get());
        assertEquals(TEST_STRING, memoizedSupplier.get());
    }

    @Test
    public void testMemoizeWithExpiration() {
        Supplier<String> expiringSupplier = Suppliers.memoizeWithExpiration(stringSupplier, 1, TimeUnit.SECONDS);
        assertEquals(TEST_STRING, expiringSupplier.get());

        try {
            Thread.sleep(1100); // Sleep for more than 1 second to ensure expiration
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        assertEquals(TEST_STRING, expiringSupplier.get());
    }

    @Test
    public void testOfInstance() {
        Supplier<String> instanceSupplier = Suppliers.ofInstance(TEST_STRING);
        assertEquals(TEST_STRING, instanceSupplier.get());
    }

    @Test
    public void testSynchronizedSupplier() {
        Supplier<String> synchronizedSupplier = Suppliers.synchronizedSupplier(stringSupplier);
        assertEquals(TEST_STRING, synchronizedSupplier.get());
    }

    @Test
    public void testSupplierFunction() {
        Function<Supplier<String>, String> supplierFunction = Suppliers.supplierFunction();
        assertEquals(TEST_STRING, supplierFunction.apply(stringSupplier));
    }

    @Test
    public void testSupplierCompositionEquals() {
        Function<String, Integer> function = input -> input.length();
        SupplierComposition<String, Integer> supplierComposition1 = new SupplierComposition<>(function, stringSupplier);
        SupplierComposition<String, Integer> supplierComposition2 = new SupplierComposition<>(function, stringSupplier);
        assertEquals(supplierComposition1, supplierComposition2);
    }

    @Test
    public void testSupplierCompositionHashCode() {
        Function<String, Integer> function = input -> input.length();
        SupplierComposition<String, Integer> supplierComposition1 = new SupplierComposition<>(function, stringSupplier);
        SupplierComposition<String, Integer> supplierComposition2 = new SupplierComposition<>(function, stringSupplier);
        assertEquals(supplierComposition1.hashCode(), supplierComposition2.hashCode());
    }

    @Test
    public void testMemoizingSupplierToString() {
        MemoizingSupplier<String> memoizingSupplier = new MemoizingSupplier<>(stringSupplier);
        assertTrue(memoizingSupplier.toString().contains("Suppliers.memoize("));
    }

    @Test
    public void testExpiringMemoizingSupplierToString() {
        ExpiringMemoizingSupplier<String> expiringSupplier = new ExpiringMemoizingSupplier<>(stringSupplier, 1, TimeUnit.SECONDS);
        assertTrue(expiringSupplier.toString().contains("Suppliers.memoizeWithExpiration("));
    }

    @Test
    public void testSupplierOfInstanceEquals() {
        SupplierOfInstance<String> supplierOfInstance1 = new SupplierOfInstance<>(TEST_STRING);
        SupplierOfInstance<String> supplierOfInstance2 = new SupplierOfInstance<>(TEST_STRING);
        assertEquals(supplierOfInstance1, supplierOfInstance2);
    }

    @Test
    public void testSupplierOfInstanceHashCode() {
        SupplierOfInstance<String> supplierOfInstance1 = new SupplierOfInstance<>(TEST_STRING);
        SupplierOfInstance<String> supplierOfInstance2 = new SupplierOfInstance<>(TEST_STRING);
        assertEquals(supplierOfInstance1.hashCode(), supplierOfInstance2.hashCode());
    }

    @Test
    public void testThreadSafeSupplierToString() {
        ThreadSafeSupplier<String> threadSafeSupplier = new ThreadSafeSupplier<>(stringSupplier);
        assertTrue(threadSafeSupplier.toString().contains("Suppliers.synchronizedSupplier("));
    }

    @Test
    public void testSupplierFunctionImplToString() {
        SupplierFunctionImpl supplierFunctionImpl = SupplierFunctionImpl.INSTANCE;
        assertEquals("Suppliers.supplierFunction()", supplierFunctionImpl.toString());
    }
}
```