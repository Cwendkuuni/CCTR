```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.*;
import java.util.regex.*;

public class SplitterTest {

    private Splitter splitter;

    @Before
    public void setUp() {
        splitter = Splitter.on(',');
    }

    @Test
    public void testOnChar() {
        Splitter splitter = Splitter.on(';');
        Iterable<String> result = splitter.split("a;b;c");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testOnCharMatcher() {
        Splitter splitter = Splitter.on(CharMatcher.is(';'));
        Iterable<String> result = splitter.split("a;b;c");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testOnString() {
        Splitter splitter = Splitter.on(";");
        Iterable<String> result = splitter.split("a;b;c");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testOnPattern() {
        Splitter splitter = Splitter.onPattern(";");
        Iterable<String> result = splitter.split("a;b;c");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testFixedLength() {
        Splitter splitter = Splitter.fixedLength(2);
        Iterable<String> result = splitter.split("abcdef");
        List<String> expected = Arrays.asList("ab", "cd", "ef");
        assertEquals(expected, result);
    }

    @Test
    public void testOmitEmptyStrings() {
        Splitter splitter = Splitter.on(',').omitEmptyStrings();
        Iterable<String> result = splitter.split(",a,,b,");
        List<String> expected = Arrays.asList("a", "b");
        assertEquals(expected, result);
    }

    @Test
    public void testLimit() {
        Splitter splitter = Splitter.on(',').limit(2);
        Iterable<String> result = splitter.split("a,b,c,d");
        List<String> expected = Arrays.asList("a", "b,c,d");
        assertEquals(expected, result);
    }

    @Test
    public void testTrimResults() {
        Splitter splitter = Splitter.on(',').trimResults();
        Iterable<String> result = splitter.split(" a , b , c ");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testTrimResultsWithCharMatcher() {
        Splitter splitter = Splitter.on(',').trimResults(CharMatcher.is(' '));
        Iterable<String> result = splitter.split(" a , b , c ");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testSplitToList() {
        Splitter splitter = Splitter.on(',');
        List<String> result = splitter.splitToList("a,b,c");
        List<String> expected = Arrays.asList("a", "b", "c");
        assertEquals(expected, result);
    }

    @Test
    public void testWithKeyValueSeparatorString() {
        Splitter splitter = Splitter.on(',').withKeyValueSeparator("=");
        Map<String, String> result = splitter.split("a=1,b=2,c=3");
        Map<String, String> expected = new LinkedHashMap<>();
        expected.put("a", "1");
        expected.put("b", "2");
        expected.put("c", "3");
        assertEquals(expected, result);
    }

    @Test
    public void testWithKeyValueSeparatorChar() {
        Splitter splitter = Splitter.on(',').withKeyValueSeparator('=');
        Map<String, String> result = splitter.split("a=1,b=2,c=3");
        Map<String, String> expected = new LinkedHashMap<>();
        expected.put("a", "1");
        expected.put("b", "2");
        expected.put("c", "3");
        assertEquals(expected, result);
    }

    @Test
    public void testWithKeyValueSeparatorSplitter() {
        Splitter splitter = Splitter.on(',').withKeyValueSeparator(Splitter.on('='));
        Map<String, String> result = splitter.split("a=1,b=2,c=3");
        Map<String, String> expected = new LinkedHashMap<>();
        expected.put("a", "1");
        expected.put("b", "2");
        expected.put("c", "3");
        assertEquals(expected, result);
    }
}
```