```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.*;
import java.util.regex.*;
import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.base.CharMatcher;
import com.google.common.base.Preconditions;
import com.google.common.base.Splitter;
import com.google.common.base.Splitter.MapSplitter;

@GwtCompatible(emulated = true)
public class SplitterTest {

    @Test
    public void testOnChar() {
        Splitter splitter = Splitter.on(',');
        Iterable<String> result = splitter.split("a,b,c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testOnCharMatcher() {
        Splitter splitter = Splitter.on(CharMatcher.is('-'));
        Iterable<String> result = splitter.split("a-b-c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testOnString() {
        Splitter splitter = Splitter.on("::");
        Iterable<String> result = splitter.split("a::b::c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testOnPattern() {
        Splitter splitter = Splitter.on(Pattern.compile("\\s+"));
        Iterable<String> result = splitter.split("a b c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testOnPatternString() {
        Splitter splitter = Splitter.onPattern("\\s+");
        Iterable<String> result = splitter.split("a b c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testFixedLength() {
        Splitter splitter = Splitter.fixedLength(2);
        Iterable<String> result = splitter.split("abcdef");
        assertEquals(Arrays.asList("ab", "cd", "ef"), result);
    }

    @Test
    public void testOmitEmptyStrings() {
        Splitter splitter = Splitter.on(',').omitEmptyStrings();
        Iterable<String> result = splitter.split(",a,,b,");
        assertEquals(Arrays.asList("a", "b"), result);
    }

    @Test
    public void testLimit() {
        Splitter splitter = Splitter.on(',').limit(2);
        Iterable<String> result = splitter.split("a,b,c,d");
        assertEquals(Arrays.asList("a", "b,c,d"), result);
    }

    @Test
    public void testTrimResults() {
        Splitter splitter = Splitter.on(',').trimResults();
        Iterable<String> result = splitter.split(" a , b , c ");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testTrimResultsWithCharMatcher() {
        Splitter splitter = Splitter.on(',').trimResults(CharMatcher.is(' '));
        Iterable<String> result = splitter.split(" a , b , c ");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testSplitToList() {
        Splitter splitter = Splitter.on(',');
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testWithKeyValueSeparatorString() {
        Splitter splitter = Splitter.on(',').withKeyValueSeparator("=");
        Map<String, String> result = splitter.split("a=1,b=2,c=3");
        assertEquals(Map.of("a", "1", "b", "2", "c", "3"), result);
    }

    @Test
    public void testWithKeyValueSeparatorChar() {
        Splitter splitter = Splitter.on(',').withKeyValueSeparator('=');
        Map<String, String> result = splitter.split("a=1,b=2,c=3");
        assertEquals(Map.of("a", "1", "b", "2", "c", "3"), result);
    }

    @Test
    public void testWithKeyValueSeparatorSplitter() {
        Splitter splitter = Splitter.on(',').withKeyValueSeparator(Splitter.on('='));
        Map<String, String> result = splitter.split("a=1,b=2,c=3");
        assertEquals(Map.of("a", "1", "b", "2", "c", "3"), result);
    }

    @Test
    public void testMapSplitter() {
        Splitter splitter = Splitter.on(',');
        MapSplitter mapSplitter = splitter.withKeyValueSeparator('=');
        Map<String, String> result = mapSplitter.split("a=1,b=2,c=3");
        assertEquals(Map.of("a", "1", "b", "2", "c", "3"), result);
    }
}
```