```java
package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.base.CharMatcher;
import com.google.common.base.Preconditions;
import com.google.common.base.Splitter;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

public class SplitterTest {

    private Splitter splitter;

    @Before
    public void setUp() {
        splitter = Splitter.on(',');
    }

    @After
    public void tearDown() {
        splitter = null;
    }

    @Test
    public void testOnChar() {
        Splitter splitter = Splitter.on(';');
        Iterable<String> result = splitter.split("a;b;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testOnCharMatcher() {
        Splitter splitter = Splitter.on(CharMatcher.is(';'));
        Iterable<String> result = splitter.split("a;b;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testOnString() {
        Splitter splitter = Splitter.on(";");
        Iterable<String> result = splitter.split("a;b;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testOnPattern() {
        Splitter splitter = Splitter.on(Pattern.compile(";"));
        Iterable<String> result = splitter.split("a;b;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testOnPatternString() {
        Splitter splitter = Splitter.onPattern(";");
        Iterable<String> result = splitter.split("a;b;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testFixedLength() {
        Splitter splitter = Splitter.fixedLength(2);
        Iterable<String> result = splitter.split("abcdef");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("ab", "cd", "ef"), list);
    }

    @Test
    public void testOmitEmptyStrings() {
        Splitter splitter = Splitter.on(';').omitEmptyStrings();
        Iterable<String> result = splitter.split("a;;b;;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testLimit() {
        Splitter splitter = Splitter.on(';').limit(2);
        Iterable<String> result = splitter.split("a;b;c");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b;c"), list);
    }

    @Test
    public void testTrimResults() {
        Splitter splitter = Splitter.on(';').trimResults();
        Iterable<String> result = splitter.split(" a ; b ; c ");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testTrimResultsCharMatcher() {
        Splitter splitter = Splitter.on(';').trimResults(CharMatcher.is(' '));
        Iterable<String> result = splitter.split(" a ; b ; c ");
        List<String> list = new ArrayList<>();
        result.forEach(list::add);
        assertEquals(Arrays.asList("a", "b", "c"), list);
    }

    @Test
    public void testSplitToList() {
        Splitter splitter = Splitter.on(';');
        List<String> result = splitter.splitToList("a;b;c");
        assertEquals(Arrays.asList("a", "b", "c"), result);
    }

    @Test
    public void testWithKeyValueSeparatorString() {
        Splitter splitter = Splitter.on(';').withKeyValueSeparator("=");
        Map<String, String> result = splitter.split("a=1;b=2;c=3");
        assertEquals(3, result.size());
        assertEquals("1", result.get("a"));
        assertEquals("2", result.get("b"));
        assertEquals("3", result.get("c"));
    }

    @Test
    public void testWithKeyValueSeparatorChar() {
        Splitter splitter = Splitter.on(';').withKeyValueSeparator('=');
        Map<String, String> result = splitter.split("a=1;b=2;c=3");
        assertEquals(3, result.size());
        assertEquals("1", result.get("a"));
        assertEquals("2", result.get("b"));
        assertEquals("3", result.get("c"));
    }

    @Test
    public void testWithKeyValueSeparatorSplitter() {
        Splitter splitter = Splitter.on(';').withKeyValueSeparator(Splitter.on('='));
        Map<String, String> result = splitter.split("a=1;b=2;c=3");
        assertEquals(3, result.size());
        assertEquals("1", result.get("a"));
        assertEquals("2", result.get("b"));
        assertEquals("3", result.get("c"));
    }
}
```