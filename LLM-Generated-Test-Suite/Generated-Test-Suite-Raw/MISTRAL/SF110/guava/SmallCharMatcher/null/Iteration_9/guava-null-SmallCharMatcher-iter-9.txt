```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.BitSet;

public class SmallCharMatcherTest {

    private SmallCharMatcher matcher;
    private BitSet bitSet;

    @Before
    public void setUp() {
        bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        bitSet.set('c');
        matcher = (SmallCharMatcher) SmallCharMatcher.from(bitSet, "TestMatcher");
    }

    @Test
    public void testSmear() {
        assertEquals(123456789, SmallCharMatcher.smear(123456789));
        assertEquals(-123456789, SmallCharMatcher.smear(-123456789));
    }

    @Test
    public void testChooseTableSize() {
        assertEquals(2, SmallCharMatcher.chooseTableSize(1));
        assertEquals(4, SmallCharMatcher.chooseTableSize(3));
        assertEquals(8, SmallCharMatcher.chooseTableSize(5));
    }

    @Test
    public void testFrom() {
        BitSet testSet = new BitSet();
        testSet.set('x');
        testSet.set('y');
        testSet.set('z');
        SmallCharMatcher testMatcher = (SmallCharMatcher) SmallCharMatcher.from(testSet, "TestFrom");
        assertTrue(testMatcher.matches('x'));
        assertTrue(testMatcher.matches('y'));
        assertTrue(testMatcher.matches('z'));
        assertFalse(testMatcher.matches('a'));
    }

    @Test
    public void testMatches() {
        assertTrue(matcher.matches('a'));
        assertTrue(matcher.matches('b'));
        assertTrue(matcher.matches('c'));
        assertFalse(matcher.matches('d'));
        assertFalse(matcher.matches('\0'));
    }

    @Test
    public void testSetBits() {
        BitSet resultSet = new BitSet();
        matcher.setBits(resultSet);
        assertTrue(resultSet.get('a'));
        assertTrue(resultSet.get('b'));
        assertTrue(resultSet.get('c'));
        assertFalse(resultSet.get('d'));
    }

    @Test
    public void testCheckFilter() {
        BitSet testSet = new BitSet();
        testSet.set('x');
        SmallCharMatcher testMatcher = (SmallCharMatcher) SmallCharMatcher.from(testSet, "TestFilter");
        assertTrue(testMatcher.checkFilter('x'));
        assertFalse(testMatcher.checkFilter('y'));
    }
}
```