```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.BitSet;

public class SmallCharMatcherTest {

    @Test
    public void testSmear() {
        assertEquals(461845907 * Integer.rotateLeft(1 * -862048943, 15), SmallCharMatcher.smear(1));
        assertEquals(461845907 * Integer.rotateLeft(2 * -862048943, 15), SmallCharMatcher.smear(2));
        assertEquals(461845907 * Integer.rotateLeft(3 * -862048943, 15), SmallCharMatcher.smear(3));
    }

    @Test
    public void testChooseTableSize() {
        assertEquals(2, SmallCharMatcher.chooseTableSize(1));
        assertEquals(4, SmallCharMatcher.chooseTableSize(3));
        assertEquals(8, SmallCharMatcher.chooseTableSize(5));
    }

    @Test
    public void testFrom() {
        BitSet bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        CharMatcher matcher = SmallCharMatcher.from(bitSet, "test");
        assertTrue(matcher.matches('a'));
        assertTrue(matcher.matches('b'));
        assertFalse(matcher.matches('c'));
    }

    @Test
    public void testMatches() {
        BitSet bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        CharMatcher matcher = SmallCharMatcher.from(bitSet, "test");
        assertTrue(matcher.matches('a'));
        assertTrue(matcher.matches('b'));
        assertFalse(matcher.matches('c'));
    }

    @Test
    public void testSetBits() {
        BitSet bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        CharMatcher matcher = SmallCharMatcher.from(bitSet, "test");
        BitSet resultSet = new BitSet();
        matcher.setBits(resultSet);
        assertTrue(resultSet.get('a'));
        assertTrue(resultSet.get('b'));
        assertFalse(resultSet.get('c'));
    }

    @Test
    public void testCheckFilter() {
        BitSet bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        SmallCharMatcher matcher = (SmallCharMatcher) SmallCharMatcher.from(bitSet, "test");
        assertTrue(matcher.checkFilter('a'));
        assertTrue(matcher.checkFilter('b'));
        assertFalse(matcher.checkFilter('c'));
    }
}
```