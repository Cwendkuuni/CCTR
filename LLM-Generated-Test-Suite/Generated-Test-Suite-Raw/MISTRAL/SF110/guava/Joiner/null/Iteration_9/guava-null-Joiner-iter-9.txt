```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.*;

public class JoinerTest {

    @Test
    public void testOnString() {
        Joiner joiner = Joiner.on(",");
        assertEquals(",", joiner.separator);
    }

    @Test
    public void testOnChar() {
        Joiner joiner = Joiner.on(';');
        assertEquals(";", joiner.separator);
    }

    @Test
    public void testAppendToIterable() throws IOException {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, Arrays.asList("a", "b", "c"));
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToIterator() throws IOException {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, Arrays.asList("a", "b", "c").iterator());
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToArray() throws IOException {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, new Object[]{"a", "b", "c"});
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToVarargs() throws IOException {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, "a", "b", "c");
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToStringBuilderIterable() {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, Arrays.asList("a", "b", "c"));
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToStringBuilderIterator() {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, Arrays.asList("a", "b", "c").iterator());
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToStringBuilderArray() {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, new Object[]{"a", "b", "c"});
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testAppendToStringBuilderVarargs() {
        Joiner joiner = Joiner.on(",");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, "a", "b", "c");
        assertEquals("a,b,c", sb.toString());
    }

    @Test
    public void testJoinIterable() {
        Joiner joiner = Joiner.on(",");
        String result = joiner.join(Arrays.asList("a", "b", "c"));
        assertEquals("a,b,c", result);
    }

    @Test
    public void testJoinIterator() {
        Joiner joiner = Joiner.on(",");
        String result = joiner.join(Arrays.asList("a", "b", "c").iterator());
        assertEquals("a,b,c", result);
    }

    @Test
    public void testJoinArray() {
        Joiner joiner = Joiner.on(",");
        String result = joiner.join(new Object[]{"a", "b", "c"});
        assertEquals("a,b,c", result);
    }

    @Test
    public void testJoinVarargs() {
        Joiner joiner = Joiner.on(",");
        String result = joiner.join("a", "b", "c");
        assertEquals("a,b,c", result);
    }

    @Test
    public void testUseForNull() {
        Joiner joiner = Joiner.on(",").useForNull("NULL");
        String result = joiner.join("a", null, "c");
        assertEquals("a,NULL,c", result);
    }

    @Test
    public void testSkipNulls() {
        Joiner joiner = Joiner.on(",").skipNulls();
        String result = joiner.join("a", null, "c");
        assertEquals("a,c", result);
    }

    @Test
    public void testWithKeyValueSeparator() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = joiner.join(map);
        assertEquals("key1=value1,key2=value2", result);
    }

    @Test
    public void testMapJoinerAppendToMap() throws IOException {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, map);
        assertEquals("key1=value1,key2=value2", sb.toString());
    }

    @Test
    public void testMapJoinerAppendToStringBuilderMap() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, map);
        assertEquals("key1=value1,key2=value2", sb.toString());
    }

    @Test
    public void testMapJoinerJoinMap() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = joiner.join(map);
        assertEquals("key1=value1,key2=value2", result);
    }

    @Test
    public void testMapJoinerAppendToIterable() throws IOException {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, map.entrySet());
        assertEquals("key1=value1,key2=value2", sb.toString());
    }

    @Test
    public void testMapJoinerAppendToIterator() throws IOException {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, map.entrySet().iterator());
        assertEquals("key1=value1,key2=value2", sb.toString());
    }

    @Test
    public void testMapJoinerAppendToStringBuilderIterable() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, map.entrySet());
        assertEquals("key1=value1,key2=value2", sb.toString());
    }

    @Test
    public void testMapJoinerAppendToStringBuilderIterator() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder sb = new StringBuilder();
        joiner.appendTo(sb, map.entrySet().iterator());
        assertEquals("key1=value1,key2=value2", sb.toString());
    }

    @Test
    public void testMapJoinerJoinIterable() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = joiner.join(map.entrySet());
        assertEquals("key1=value1,key2=value2", result);
    }

    @Test
    public void testMapJoinerJoinIterator() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String result = joiner.join(map.entrySet().iterator());
        assertEquals("key1=value1,key2=value2", result);
    }

    @Test
    public void testMapJoinerUseForNull() {
        Joiner joiner = Joiner.on(",").withKeyValueSeparator("=").useForNull("NULL");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", null);
        String result = joiner.join(map);
        assertEquals("key1=value1,key2=NULL", result);
    }
}
```