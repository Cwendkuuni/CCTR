```java
package com.google.common.base;

import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import static org.junit.Assert.*;

public class JoinerTest {

    private Joiner joiner;

    @Before
    public void setUp() {
        joiner = Joiner.on(",");
    }

    @Test
    public void testOnString() {
        Joiner joiner = Joiner.on(";");
        assertEquals(";", joiner.join(Arrays.asList("a", "b")));
    }

    @Test
    public void testOnChar() {
        Joiner joiner = Joiner.on(';');
        assertEquals("a;b", joiner.join(Arrays.asList("a", "b")));
    }

    @Test
    public void testAppendToIterable() throws IOException {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, Arrays.asList("a", "b", "c"));
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToIterator() throws IOException {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, Arrays.asList("a", "b", "c").iterator());
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToArray() throws IOException {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, new Object[]{"a", "b", "c"});
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToVarargs() throws IOException {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, "a", "b", "c");
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToStringBuilderIterable() {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, Arrays.asList("a", "b", "c"));
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToStringBuilderIterator() {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, Arrays.asList("a", "b", "c").iterator());
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToStringBuilderArray() {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, new Object[]{"a", "b", "c"});
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testAppendToStringBuilderVarargs() {
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, "a", "b", "c");
        assertEquals("a,b,c", builder.toString());
    }

    @Test
    public void testJoinIterable() {
        assertEquals("a,b,c", joiner.join(Arrays.asList("a", "b", "c")));
    }

    @Test
    public void testJoinIterator() {
        assertEquals("a,b,c", joiner.join(Arrays.asList("a", "b", "c").iterator()));
    }

    @Test
    public void testJoinArray() {
        assertEquals("a,b,c", joiner.join(new Object[]{"a", "b", "c"}));
    }

    @Test
    public void testJoinVarargs() {
        assertEquals("a,b,c", joiner.join("a", "b", "c"));
    }

    @Test
    public void testUseForNull() {
        Joiner joiner = Joiner.on(",").useForNull("NULL");
        assertEquals("a,NULL,c", joiner.join(Arrays.asList("a", null, "c")));
    }

    @Test
    public void testSkipNulls() {
        Joiner joiner = Joiner.on(",").skipNulls();
        assertEquals("a,c", joiner.join(Arrays.asList("a", null, "c")));
    }

    @Test
    public void testWithKeyValueSeparator() {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        assertEquals("key1=value1,key2=value2", mapJoiner.join(map));
    }

    @Test
    public void testToString() {
        assertEquals("test", joiner.toString("test"));
    }

    @Test
    public void testIterable() {
        Iterable<Object> iterable = Joiner.iterable("a", "b", new Object[]{"c", "d"});
        Iterator<Object> iterator = iterable.iterator();
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertEquals("b", iterator.next());
        assertEquals("c", iterator.next());
        assertEquals("d", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testMapJoinerAppendToMap() throws IOException {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder builder = new StringBuilder();
        mapJoiner.appendTo(builder, map);
        assertEquals("key1=value1,key2=value2", builder.toString());
    }

    @Test
    public void testMapJoinerAppendToStringBuilderMap() {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder builder = new StringBuilder();
        mapJoiner.appendTo(builder, map);
        assertEquals("key1=value1,key2=value2", builder.toString());
    }

    @Test
    public void testMapJoinerJoinMap() {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        assertEquals("key1=value1,key2=value2", mapJoiner.join(map));
    }

    @Test
    public void testMapJoinerAppendToIterable() throws IOException {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder builder = new StringBuilder();
        mapJoiner.appendTo(builder, map.entrySet());
        assertEquals("key1=value1,key2=value2", builder.toString());
    }

    @Test
    public void testMapJoinerAppendToStringBuilderIterable() {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringBuilder builder = new StringBuilder();
        mapJoiner.appendTo(builder, map.entrySet());
        assertEquals("key1=value1,key2=value2", builder.toString());
    }

    @Test
    public void testMapJoinerJoinIterable() {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        assertEquals("key1=value1,key2=value2", mapJoiner.join(map.entrySet()));
    }

    @Test
    public void testMapJoinerUseForNull() {
        Joiner.MapJoiner mapJoiner = joiner.withKeyValueSeparator("=").useForNull("NULL");
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", null);
        assertEquals("key1=value1,key2=NULL", mapJoiner.join(map));
    }
}
```