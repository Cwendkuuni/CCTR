```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Test;

public class Utf8Test {

    @Test
    public void testEncodedLength() {
        assertEquals(5, Utf8.encodedLength("hello"));
        assertEquals(1, Utf8.encodedLength("a"));
        assertEquals(2, Utf8.encodedLength("‚Ç¨"));
        assertEquals(3, Utf8.encodedLength("ùåÜ"));

        // Test with surrogate pairs
        assertEquals(4, Utf8.encodedLength("\uD83D\uDE00")); // Smiling face

        // Test with mixed characters
        assertEquals(8, Utf8.encodedLength("a‚Ç¨ùåÜ"));

        // Test with empty string
        assertEquals(0, Utf8.encodedLength(""));

        // Test with unpaired surrogate
        try {
            Utf8.encodedLength("\uD83D");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Unpaired surrogate at index"));
        }
    }

    @Test
    public void testIsWellFormed() {
        byte[] wellFormedBytes = "hello".getBytes();
        assertTrue(Utf8.isWellFormed(wellFormedBytes));

        byte[] wellFormedBytesWithSpecialChars = "a‚Ç¨ùåÜ".getBytes();
        assertTrue(Utf8.isWellFormed(wellFormedBytesWithSpecialChars));

        byte[] malformedBytes = {(byte) 0xC0, (byte) 0x80}; // Overlong encoding
        assertFalse(Utf8.isWellFormed(malformedBytes));

        byte[] malformedBytes2 = {(byte) 0xE0, (byte) 0x80, (byte) 0x80}; // Overlong encoding
        assertFalse(Utf8.isWellFormed(malformedBytes2));

        byte[] malformedBytes3 = {(byte) 0xF0, (byte) 0x80, (byte) 0x80, (byte) 0x80}; // Overlong encoding
        assertFalse(Utf8.isWellFormed(malformedBytes3));

        byte[] malformedBytes4 = {(byte) 0xC0, (byte) 0xAF}; // Invalid sequence
        assertFalse(Utf8.isWellFormed(malformedBytes4));
    }

    @Test
    public void testIsWellFormedWithOffsetAndLength() {
        byte[] bytes = "hello world".getBytes();
        assertTrue(Utf8.isWellFormed(bytes, 0, bytes.length));
        assertTrue(Utf8.isWellFormed(bytes, 0, 5));
        assertTrue(Utf8.isWellFormed(bytes, 6, 5));

        byte[] malformedBytes = {(byte) 0xC0, (byte) 0x80, 'h', 'e', 'l', 'l', 'o'};
        assertFalse(Utf8.isWellFormed(malformedBytes, 0, 2));
        assertTrue(Utf8.isWellFormed(malformedBytes, 2, 5));
    }

    @Test
    public void testIsWellFormedSlowPath() {
        byte[] wellFormedBytes = "hello".getBytes();
        assertTrue(Utf8.isWellFormedSlowPath(wellFormedBytes, 0, wellFormedBytes.length));

        byte[] malformedBytes = {(byte) 0xC0, (byte) 0x80}; // Overlong encoding
        assertFalse(Utf8.isWellFormedSlowPath(malformedBytes, 0, malformedBytes.length));

        byte[] malformedBytes2 = {(byte) 0xE0, (byte) 0x80, (byte) 0x80}; // Overlong encoding
        assertFalse(Utf8.isWellFormedSlowPath(malformedBytes2, 0, malformedBytes2.length));

        byte[] malformedBytes3 = {(byte) 0xF0, (byte) 0x80, (byte) 0x80, (byte) 0x80}; // Overlong encoding
        assertFalse(Utf8.isWellFormedSlowPath(malformedBytes3, 0, malformedBytes3.length));

        byte[] malformedBytes4 = {(byte) 0xC0, (byte) 0xAF}; // Invalid sequence
        assertFalse(Utf8.isWellFormedSlowPath(malformedBytes4, 0, malformedBytes4.length));
    }
}
```