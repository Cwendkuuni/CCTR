```java
package com.google.common.base;

import static org.junit.Assert.*;
import org.junit.Test;

public class Utf8Test {

    @Test
    public void testEncodedLength() {
        assertEquals(5, Utf8.encodedLength("hello"));
        assertEquals(1, Utf8.encodedLength("a"));
        assertEquals(2, Utf8.encodedLength("‚Ç¨"));
        assertEquals(3, Utf8.encodedLength("ùåÜ"));

        try {
            Utf8.encodedLength("ùåÜ".repeat(55000)); // This should throw an IllegalArgumentException
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test
    public void testIsWellFormed() {
        byte[] wellFormedBytes = "hello".getBytes();
        assertTrue(Utf8.isWellFormed(wellFormedBytes));

        byte[] malformedBytes = {(byte) 0xF8, (byte) 0x80, (byte) 0x80, (byte) 0x80};
        assertFalse(Utf8.isWellFormed(malformedBytes));

        byte[] wellFormedBytesWithOffset = "hello world".getBytes();
        assertTrue(Utf8.isWellFormed(wellFormedBytesWithOffset, 6, 5));

        byte[] malformedBytesWithOffset = {(byte) 0xE2, (byte) 0x28, (byte) 0xA1};
        assertFalse(Utf8.isWellFormed(malformedBytesWithOffset, 0, 3));
    }

    @Test
    public void testIsWellFormedSlowPath() {
        byte[] wellFormedBytes = "hello".getBytes();
        assertTrue(Utf8.isWellFormedSlowPath(wellFormedBytes, 0, wellFormedBytes.length));

        byte[] malformedBytes = {(byte) 0xF8, (byte) 0x80, (byte) 0x80, (byte) 0x80};
        assertFalse(Utf8.isWellFormedSlowPath(malformedBytes, 0, malformedBytes.length));

        byte[] wellFormedBytesWithOffset = "hello world".getBytes();
        assertTrue(Utf8.isWellFormedSlowPath(wellFormedBytesWithOffset, 6, 5));

        byte[] malformedBytesWithOffset = {(byte) 0xE2, (byte) 0x28, (byte) 0xA1};
        assertFalse(Utf8.isWellFormedSlowPath(malformedBytesWithOffset, 0, 3));
    }
}
```