```java
package com.puppycrawl.tools.checkstyle.api;

import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

public class FileTextTest {

    private FileText fileText;
    private File testFile;

    @Before
    public void setUp() throws IOException {
        testFile = new File("testFile.txt");
        List<String> lines = Arrays.asList("Line 1", "Line 2", "Line 3");
        Files.write(testFile.toPath(), lines, StandardCharsets.UTF_8);
        fileText = new FileText(testFile, "UTF-8");
    }

    @Test
    public void testConstructorWithFileAndCharset() throws IOException {
        FileText fileText = new FileText(testFile, "UTF-8");
        Assert.assertNotNull(fileText);
        Assert.assertEquals(testFile, fileText.getFile());
        Assert.assertEquals(StandardCharsets.UTF_8, fileText.getCharset());
    }

    @Test(expected = IllegalStateException.class)
    public void testConstructorWithUnsupportedCharset() throws IOException {
        new FileText(testFile, "UnsupportedCharset");
    }

    @Test
    public void testCopyConstructor() {
        FileText copy = new FileText(fileText);
        Assert.assertNotNull(copy);
        Assert.assertEquals(fileText.getFile(), copy.getFile());
        Assert.assertEquals(fileText.getCharset(), copy.getCharset());
        Assert.assertEquals(fileText.getFullText(), copy.getFullText());
        Assert.assertArrayEquals(fileText.toLinesArray(), copy.toLinesArray());
    }

    @Test
    public void testFromLines() {
        List<String> lines = Arrays.asList("Line 1", "Line 2", "Line 3");
        FileText fileTextFromLines = FileText.fromLines(testFile, lines);
        Assert.assertNotNull(fileTextFromLines);
        Assert.assertEquals(testFile, fileTextFromLines.getFile());
        Assert.assertArrayEquals(lines.toArray(new String[0]), fileTextFromLines.toLinesArray());
    }

    @Test
    public void testGetFile() {
        Assert.assertEquals(testFile, fileText.getFile());
    }

    @Test
    public void testGetCharset() {
        Assert.assertEquals(StandardCharsets.UTF_8, fileText.getCharset());
    }

    @Test
    public void testGetFullText() {
        String expectedText = "Line 1\nLine 2\nLine 3";
        Assert.assertEquals(expectedText, fileText.getFullText().toString());
    }

    @Test
    public void testToLinesArray() {
        String[] expectedLines = {"Line 1", "Line 2", "Line 3"};
        Assert.assertArrayEquals(expectedLines, fileText.toLinesArray());
    }

    @Test
    public void testLineColumn() {
        LineColumn lineColumn = fileText.lineColumn(7);
        Assert.assertEquals(1, lineColumn.getLine());
        Assert.assertEquals(7, lineColumn.getColumn());

        lineColumn = fileText.lineColumn(10);
        Assert.assertEquals(2, lineColumn.getLine());
        Assert.assertEquals(2, lineColumn.getColumn());
    }

    @Test
    public void testGet() {
        Assert.assertEquals("Line 1", fileText.get(0));
        Assert.assertEquals("Line 2", fileText.get(1));
        Assert.assertEquals("Line 3", fileText.get(2));
    }

    @Test
    public void testSize() {
        Assert.assertEquals(3, fileText.size());
    }
}
```