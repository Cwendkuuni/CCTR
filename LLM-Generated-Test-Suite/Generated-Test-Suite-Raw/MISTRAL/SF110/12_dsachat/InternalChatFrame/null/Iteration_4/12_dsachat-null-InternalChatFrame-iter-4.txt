```java
package dsachat.client.gui;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

public class InternalChatFrameTest {

    private InternalChatFrame internalChatFrame;
    private MainFrame mockParent;

    @Before
    public void setUp() {
        mockParent = new MainFrame(); // Assuming MainFrame has a no-arg constructor or mock it appropriately
        internalChatFrame = new InternalChatFrame(mockParent);
    }

    @Test
    public void testConstructor() {
        assertNotNull(internalChatFrame);
        assertEquals("Chat", internalChatFrame.getTitle());
        assertTrue(internalChatFrame.isClosable());
        assertTrue(internalChatFrame.isResizable());
        assertTrue(internalChatFrame.isIconifiable());
        assertTrue(internalChatFrame.isMaximizable());
    }

    @Test
    public void testAddText() {
        internalChatFrame.addText("System: Test message");
        String chatLog = internalChatFrame.getChatlog();
        assertTrue(chatLog.contains("System: Test message"));

        internalChatFrame.addText("User: Hello World");
        chatLog = internalChatFrame.getChatlog();
        assertTrue(chatLog.contains("User: Hello World"));
    }

    @Test
    public void testAddStylesToDocument() {
        StyledDocument doc = internalChatFrame.showTxt.getStyledDocument();
        internalChatFrame.addStylesToDocument(doc);

        assertNotNull(doc.getStyle("regular"));
        assertNotNull(doc.getStyle("italic"));
        assertNotNull(doc.getStyle("bold"));
        assertNotNull(doc.getStyle("bold-italic"));
        assertNotNull(doc.getStyle("name"));
        assertNotNull(doc.getStyle("system"));
        assertNotNull(doc.getStyle("small"));
        assertNotNull(doc.getStyle("large"));
    }

    @Test
    public void testAddUser() {
        internalChatFrame.addUser("TestUser");
        String[] userList = internalChatFrame.getUserlist();
        assertEquals(1, userList.length);
        assertEquals("TestUser", userList[0]);
    }

    @Test
    public void testDeleteUser() {
        internalChatFrame.addUser("TestUser");
        internalChatFrame.deleteUser("TestUser");
        String[] userList = internalChatFrame.getUserlist();
        assertEquals(0, userList.length);
    }

    @Test
    public void testGetUserlist() {
        internalChatFrame.addUser("User1");
        internalChatFrame.addUser("User2");
        String[] userList = internalChatFrame.getUserlist();
        assertEquals(2, userList.length);
        assertEquals("User2", userList[0]);
        assertEquals("User1", userList[1]);
    }

    @Test
    public void testActionPerformed() {
        internalChatFrame.addUser("TestUser");
        internalChatFrame.list.setSelectedValue("TestUser", true);

        ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "chooseColor");
        internalChatFrame.actionPerformed(event);

        event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "bgColor");
        internalChatFrame.actionPerformed(event);

        event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "whisper");
        internalChatFrame.actionPerformed(event);
        assertEquals("/w TestUser ", internalChatFrame.txtInput.getText());
    }

    @Test
    public void testMousePressed() {
        MouseEvent event = new MouseEvent(internalChatFrame.list, MouseEvent.MOUSE_PRESSED, System.currentTimeMillis(), 0, 10, 10, 1, false, MouseEvent.BUTTON1);
        internalChatFrame.mousePressed(event);

        event = new MouseEvent(internalChatFrame.showTxt, MouseEvent.MOUSE_PRESSED, System.currentTimeMillis(), 0, 10, 10, 1, false, MouseEvent.BUTTON1);
        internalChatFrame.mousePressed(event);
    }

    @Test
    public void testMouseReleased() {
        MouseEvent event = new MouseEvent(internalChatFrame.list, MouseEvent.MOUSE_RELEASED, System.currentTimeMillis(), 0, 10, 10, 1, false, MouseEvent.BUTTON1);
        internalChatFrame.mouseReleased(event);

        event = new MouseEvent(internalChatFrame.showTxt, MouseEvent.MOUSE_RELEASED, System.currentTimeMillis(), 0, 10, 10, 1, false, MouseEvent.BUTTON1);
        internalChatFrame.mouseReleased(event);
    }

    @Test
    public void testGetChatlog() {
        internalChatFrame.addText("System: Test message");
        String chatLog = internalChatFrame.getChatlog();
        assertTrue(chatLog.contains("System: Test message"));
    }
}
```