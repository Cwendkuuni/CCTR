```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;

    @Before
    public void setUp() {
        mockParent = new MainFrame(); // Assuming MainFrame has a default constructor
        chatFrame = new InternalChatFrame(mockParent);
    }

    @Test
    public void testAddText() {
        String line = "System: Welcome to the chat!";
        chatFrame.addText(line);
        String chatLog = chatFrame.getChatlog();
        assertTrue(chatLog.contains(line));
    }

    @Test
    public void testAddStylesToDocument() {
        StyledDocument doc = new DefaultStyledDocument();
        chatFrame.addStylesToDocument(doc);
        assertNotNull(doc.getStyle("regular"));
        assertNotNull(doc.getStyle("italic"));
        assertNotNull(doc.getStyle("bold"));
        assertNotNull(doc.getStyle("bold-italic"));
        assertNotNull(doc.getStyle("name"));
        assertNotNull(doc.getStyle("system"));
        assertNotNull(doc.getStyle("small"));
        assertNotNull(doc.getStyle("large"));
    }

    @Test
    public void testChangeStyle() {
        StyledDocument doc = new DefaultStyledDocument();
        chatFrame.addStylesToDocument(doc);
        chatFrame.changeStyle(12, Color.RED, true, true, "testStyle");
        Style style = doc.getStyle("testStyle");
        assertEquals(Color.RED, StyleConstants.getForeground(style));
        assertTrue(StyleConstants.isBold(style));
        assertTrue(StyleConstants.isItalic(style));
    }

    @Test
    public void testAddUser() {
        String user = "TestUser";
        chatFrame.addUser(user);
        String[] userList = chatFrame.getUserlist();
        assertEquals(1, userList.length);
        assertEquals(user, userList[0]);
    }

    @Test
    public void testDeleteUser() {
        String user = "TestUser";
        chatFrame.addUser(user);
        chatFrame.deleteUser(user);
        String[] userList = chatFrame.getUserlist();
        assertEquals(0, userList.length);
    }

    @Test
    public void testGetUserlist() {
        String user1 = "User1";
        String user2 = "User2";
        chatFrame.addUser(user1);
        chatFrame.addUser(user2);
        String[] userList = chatFrame.getUserlist();
        assertEquals(2, userList.length);
        assertEquals(user1, userList[0]);
        assertEquals(user2, userList[1]);
    }

    @Test
    public void testActionPerformedChooseColor() {
        String user = "TestUser";
        chatFrame.addUser(user);
        chatFrame.list.setSelectedValue(user, true);
        ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);
        // Assuming JColorChooser.showDialog returns a non-null color
        // This test might need manual verification or mocking JColorChooser
    }

    @Test
    public void testActionPerformedBgColor() {
        String user = "TestUser";
        chatFrame.addUser(user);
        chatFrame.list.setSelectedValue(user, true);
        ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "bgColor");
        chatFrame.actionPerformed(event);
        // Assuming JColorChooser.showDialog returns a non-null color
        // This test might need manual verification or mocking JColorChooser
    }

    @Test
    public void testActionPerformedWhisper() {
        String user = "TestUser";
        chatFrame.addUser(user);
        chatFrame.list.setSelectedValue(user, true);
        ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);
        assertEquals("/w TestUser ", chatFrame.txtInput.getText());
    }

    @Test
    public void testMousePressed() {
        MouseEvent event = new MouseEvent(chatFrame.list, MouseEvent.MOUSE_PRESSED, System.currentTimeMillis(), 0, 0, 0, 1, false, MouseEvent.BUTTON3_DOWN_MASK);
        chatFrame.mousePressed(event);
        // Assuming maybeShowPopup is called and shows the popup menu
    }

    @Test
    public void testMouseReleased() {
        MouseEvent event = new MouseEvent(chatFrame.list, MouseEvent.MOUSE_RELEASED, System.currentTimeMillis(), 0, 0, 0, 1, false, MouseEvent.BUTTON3_DOWN_MASK);
        chatFrame.mouseReleased(event);
        // Assuming maybeShowPopup is called and shows the popup menu
    }

    @Test
    public void testGetChatlog() {
        String line = "System: Welcome to the chat!";
        chatFrame.addText(line);
        String chatLog = chatFrame.getChatlog();
        assertTrue(chatLog.contains(line));
    }
}
```