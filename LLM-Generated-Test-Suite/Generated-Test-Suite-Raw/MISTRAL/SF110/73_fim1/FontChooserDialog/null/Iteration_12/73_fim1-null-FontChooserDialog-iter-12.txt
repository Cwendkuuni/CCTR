```java
package osa.ora.server.client.ui.utils;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class FontChooserDialogTest {

    @Mock
    private JFontChooser mockChooserPane;

    @Mock
    private ActionListener mockOkListener;

    @Mock
    private ActionListener mockCancelListener;

    private FontChooserDialog fontChooserDialog;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        fontChooserDialog = new FontChooserDialog(new JPanel(), "Test Dialog", true, mockChooserPane, mockOkListener, mockCancelListener);
    }

    @Test
    public void testConstructor() {
        assertNotNull(fontChooserDialog);
        assertEquals("Test Dialog", fontChooserDialog.getTitle());
        assertTrue(fontChooserDialog.isModal());
        assertEquals(mockChooserPane, fontChooserDialog.chooserPane);
    }

    @Test
    public void testSetVisible() {
        Font initialFont = new Font("Arial", Font.PLAIN, 12);
        when(mockChooserPane.getFont()).thenReturn(initialFont);

        fontChooserDialog.setVisible(true);
        assertEquals(initialFont, fontChooserDialog.initialFont);

        fontChooserDialog.setVisible(false);
        verify(fontChooserDialog).setVisible(false);
    }

    @Test
    public void testReset() {
        Font initialFont = new Font("Arial", Font.PLAIN, 12);
        when(mockChooserPane.getFont()).thenReturn(initialFont);

        fontChooserDialog.setVisible(true);
        fontChooserDialog.reset();

        verify(mockChooserPane).setFont(initialFont);
    }

    @Test
    public void testOkButtonAction() {
        JButton okButton = (JButton) fontChooserDialog.getRootPane().getDefaultButton();
        okButton.doClick();

        verify(mockOkListener).actionPerformed(any(ActionEvent.class));
        assertFalse(fontChooserDialog.isVisible());
    }

    @Test
    public void testCancelButtonAction() {
        JButton cancelButton = (JButton) ((JPanel) fontChooserDialog.getContentPane().getComponent(1)).getComponent(1);
        cancelButton.doClick();

        verify(mockCancelListener).actionPerformed(any(ActionEvent.class));
        assertFalse(fontChooserDialog.isVisible());
    }

    @Test
    public void testResetButtonAction() {
        JButton resetButton = (JButton) ((JPanel) fontChooserDialog.getContentPane().getComponent(1)).getComponent(2);
        resetButton.doClick();

        verify(mockChooserPane).setFont(fontChooserDialog.initialFont);
    }

    @Test
    public void testCloserWindowClosing() {
        FontChooserDialog.Closer closer = new FontChooserDialog.Closer();
        WindowEvent event = new WindowEvent(fontChooserDialog, WindowEvent.WINDOW_CLOSING);
        closer.windowClosing(event);

        assertFalse(fontChooserDialog.isVisible());
    }

    @Test
    public void testDisposeOnCloseComponentHidden() {
        FontChooserDialog.DisposeOnClose disposeOnClose = new FontChooserDialog.DisposeOnClose();
        ComponentEvent event = new ComponentEvent(fontChooserDialog, ComponentEvent.COMPONENT_HIDDEN);
        disposeOnClose.componentHidden(event);

        assertTrue(fontChooserDialog.isDisplayable());
    }
}
```