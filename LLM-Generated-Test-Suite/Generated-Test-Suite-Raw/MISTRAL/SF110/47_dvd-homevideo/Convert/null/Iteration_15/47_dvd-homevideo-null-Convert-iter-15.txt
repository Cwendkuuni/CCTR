```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ConvertTest {

    private Convert convert;
    private GUI mockGUI;

    @Before
    public void setUp() {
        mockGUI = mock(GUI.class);
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
    }

    @Test
    public void testConstructorWithFormatAndAspectRatio() {
        assertEquals(29.97, convert.m_fps, 0.01);
        assertEquals("dvd-ntsc", convert.m_Format);
        assertEquals("16:9", convert.m_AspectRatio);
        assertEquals(mockGUI, convert.m_GUI);
    }

    @Test
    public void testConstructorWithQualityFormatAndAspectRatio() {
        Convert convertWithQuality = new Convert(1, "dvd-ntsc", "16:9", mockGUI);
        assertEquals(29.97, convertWithQuality.m_fps, 0.01);
        assertEquals("dvd-ntsc", convertWithQuality.m_Format);
        assertEquals("16:9", convertWithQuality.m_AspectRatio);
        assertEquals(mockGUI, convertWithQuality.m_GUI);
        assertEquals(1, convertWithQuality.m_Quality);
    }

    @Test
    public void testInitWithThread() {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(true);
        assertFalse(convert.init());
        verify(mockGUI.menuChkThread).isSelected();
    }

    @Test
    public void testInitWithoutThread() {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(false);
        assertFalse(convert.init());
        verify(mockGUI.menuChkThread).isSelected();
    }

    @Test
    public void testRun() {
        convert.run();
        // Verify that Transcode method is called
        // Since Transcode is private, we can't directly verify its invocation
    }

    @Test
    public void testTranscode() {
        // Mock necessary GUI interactions and file operations
        when(mockGUI.strOutputDir).thenReturn("/tmp");
        when(mockGUI.spnMinutes.getValue()).thenReturn(1);
        when(mockGUI.spnSeconds.getValue()).thenReturn(0);

        convert.Transcode();

        // Verify file operations and GUI updates
        // This is a complex method, so we focus on critical paths and interactions
    }

    @Test
    public void testMatrix() {
        when(mockGUI.strOutputDir).thenReturn("/tmp");
        convert.matrix();

        // Verify that the matrix.txt file is created with the correct content
        // This can be done by reading the file and comparing its content
    }
}
```