```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CaptureTest {

    private Capture capture;
    private GUI mockGUI;

    @Before
    public void setUp() {
        mockGUI = mock(GUI.class);
        capture = new Capture(1, 30, mockGUI);
    }

    @Test
    public void testDefaultConstructor() {
        Capture defaultCapture = new Capture();
        assertNotNull(defaultCapture);
        assertEquals("Capture Error - ", defaultCapture.m_BaseErr);
        assertEquals("dvgrab --autosplit --size 0 --format raw --opendml --buffers 200 dv/dv_file-", defaultCapture.m_dvgrab);
    }

    @Test
    public void testParameterizedConstructor() {
        assertEquals(1, capture.m_Minutes);
        assertEquals(30, capture.m_Seconds);
        assertEquals(mockGUI, capture.m_GUI);
        assertEquals("Capture Error - ", capture.m_BaseErr);
        assertEquals("dvgrab --autosplit --size 0 --format raw --opendml --buffers 200 dv/dv_file-", capture.m_dvgrab);
    }

    @Test
    public void testInitWithThreadSelected() {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(true);
        assertFalse(capture.init());
        verify(mockGUI.menuChkThread).isSelected();
        assertNotNull(capture.m_Thread);
        assertTrue(capture.m_Thread.isAlive());
    }

    @Test
    public void testInitWithoutThreadSelected() {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(false);
        when(mockGUI.ErrorCheck(anyString())).thenReturn(false);
        assertTrue(capture.init());
        verify(mockGUI.menuChkThread).isSelected();
        verify(capture, times(1)).DV_Capture();
    }

    @Test
    public void testRun() {
        capture.run();
        verify(capture, times(1)).DV_Capture();
    }

    @Test
    public void testDV_CaptureDirectoryExistsAndDeleted() throws Exception {
        when(mockGUI.strOutputDir).thenReturn("/test/output");
        when(mockGUI.MessageBox(anyString())).thenReturn(0);
        when(mockGUI.blnBegin).thenReturn(true);

        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.isDirectory()).thenReturn(true);
        PowerMockito.mockStatic(File.class);
        when(File.class, "exists").thenReturn(true);
        when(File.class, "isDirectory").thenReturn(true);

        capture.DV_Capture();

        verify(mockGUI, times(1)).MessageBox(anyString());
        verify(mockFile, times(1)).mkdir();
    }

    @Test
    public void testDV_CaptureFileExistsAndNotDeleted() throws Exception {
        when(mockGUI.strOutputDir).thenReturn("/test/output");
        when(mockGUI.MessageBox(anyString())).thenReturn(1);
        when(mockGUI.blnBegin).thenReturn(false);

        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.isDirectory()).thenReturn(false);
        PowerMockito.mockStatic(File.class);
        when(File.class, "exists").thenReturn(true);
        when(File.class, "isDirectory").thenReturn(false);

        capture.DV_Capture();

        verify(mockGUI, times(1)).MessageBox(anyString());
        assertFalse(capture.m_GUI.blnBegin);
    }

    @Test
    public void testDV_CaptureDvgrabCommandNotFound() throws Exception {
        when(mockGUI.strOutputDir).thenReturn("/test/output");
        when(mockGUI.blnBegin).thenReturn(true);

        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(false);
        PowerMockito.mockStatic(File.class);
        when(File.class, "exists").thenReturn(false);

        BufferedReader mockReader = mock(BufferedReader.class);
        when(mockReader.ready()).thenReturn(true);
        when(mockReader.readLine()).thenReturn("/bin/sh: dvgrab: command not found");

        PowerMockito.mockStatic(Runtime.class);
        Process mockProcess = mock(Process.class);
        when(Runtime.getRuntime().exec(any(String[].class), any(String[].class), any(File.class))).thenReturn(mockProcess);
        when(mockProcess.getInputStream()).thenReturn(mock(InputStream.class));
        when(mockProcess.getErrorStream()).thenReturn(mock(InputStream.class));

        capture.DV_Capture();

        verify(mockGUI, times(1)).MessageBox(anyString());
        assertTrue(capture.m_Error);
    }

    @Test
    public void testDV_CaptureNoCameraError() throws Exception {
        when(mockGUI.strOutputDir).thenReturn("/test/output");
        when(mockGUI.blnBegin).thenReturn(true);

        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(false);
        PowerMockito.mockStatic(File.class);
        when(File.class, "exists").thenReturn(false);

        BufferedReader mockReader = mock(BufferedReader.class);
        when(mockReader.ready()).thenReturn(true);
        when(mockReader.readLine()).thenReturn("Error: no camera exists");

        PowerMockito.mockStatic(Runtime.class);
        Process mockProcess = mock(Process.class);
        when(Runtime.getRuntime().exec(any(String[].class), any(String[].class), any(File.class))).thenReturn(mockProcess);
        when(mockProcess.getInputStream()).thenReturn(mock(InputStream.class));
        when(mockProcess.getErrorStream()).thenReturn(mock(InputStream.class));

        capture.DV_Capture();

        verify(mockGUI, times(1)).MessageBox(anyString());
        assertTrue(capture.m_Error);
    }
}
```