```java
package org.jcvi.jillion.assembly.consed.phd;

import org.jcvi.jillion.core.Range;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;

public class DefaultPhdReadTagTest {

    private DefaultPhdReadTag phdReadTag;
    private String type;
    private String source;
    private Range ungappedRange;
    private Date date;
    private String comment;
    private String freeFormData;

    @Before
    public void setUp() {
        type = "type";
        source = "source";
        ungappedRange = new Range(1, 10);
        date = new Date();
        comment = "comment";
        freeFormData = "freeFormData";
        phdReadTag = new DefaultPhdReadTag(type, source, ungappedRange, date, comment, freeFormData);
    }

    @Test
    public void testGetType() {
        assertEquals(type, phdReadTag.getType());
    }

    @Test
    public void testGetSource() {
        assertEquals(source, phdReadTag.getSource());
    }

    @Test
    public void testGetUngappedRange() {
        assertEquals(ungappedRange, phdReadTag.getUngappedRange());
    }

    @Test
    public void testGetDate() {
        assertEquals(date, phdReadTag.getDate());
    }

    @Test
    public void testGetComment() {
        assertEquals(comment, phdReadTag.getComment());
    }

    @Test
    public void testGetFreeFormData() {
        assertEquals(freeFormData, phdReadTag.getFreeFormData());
    }

    @Test
    public void testHashCode() {
        int expectedHashCode = 1;
        final int prime = 31;
        expectedHashCode = 31 * expectedHashCode + ((comment == null) ? 0 : comment.hashCode());
        expectedHashCode = 31 * expectedHashCode + ((date == null) ? 0 : date.hashCode());
        expectedHashCode = 31 * expectedHashCode + ((freeFormData == null) ? 0 : freeFormData.hashCode());
        expectedHashCode = 31 * expectedHashCode + ((source == null) ? 0 : source.hashCode());
        expectedHashCode = 31 * expectedHashCode + ((type == null) ? 0 : type.hashCode());
        expectedHashCode = 31 * expectedHashCode + ((ungappedRange == null) ? 0 : ungappedRange.hashCode());

        assertEquals(expectedHashCode, phdReadTag.hashCode());
    }

    @Test
    public void testEquals() {
        DefaultPhdReadTag samePhdReadTag = new DefaultPhdReadTag(type, source, ungappedRange, date, comment, freeFormData);
        assertTrue(phdReadTag.equals(samePhdReadTag));

        DefaultPhdReadTag differentPhdReadTag = new DefaultPhdReadTag("differentType", source, ungappedRange, date, comment, freeFormData);
        assertFalse(phdReadTag.equals(differentPhdReadTag));

        assertFalse(phdReadTag.equals(null));
        assertFalse(phdReadTag.equals(new Object()));
    }
}
```