```java
package org.jcvi.jillion.assembly.consed.phd;

import org.jcvi.jillion.core.Range;
import org.junit.Before;
import org.junit.Test;

import java.util.Date;

import static org.junit.Assert.*;

public class DefaultPhdReadTagTest {

    private DefaultPhdReadTag defaultPhdReadTag;
    private String type;
    private String source;
    private Range ungappedRange;
    private Date date;
    private String comment;
    private String freeFormData;

    @Before
    public void setUp() {
        type = "type";
        source = "source";
        ungappedRange = new Range(1, 10);
        date = new Date();
        comment = "comment";
        freeFormData = "freeFormData";
        defaultPhdReadTag = new DefaultPhdReadTag(type, source, ungappedRange, date, comment, freeFormData);
    }

    @Test
    public void testGetType() {
        assertEquals(type, defaultPhdReadTag.getType());
    }

    @Test
    public void testGetSource() {
        assertEquals(source, defaultPhdReadTag.getSource());
    }

    @Test
    public void testGetUngappedRange() {
        assertEquals(ungappedRange, defaultPhdReadTag.getUngappedRange());
    }

    @Test
    public void testGetDate() {
        assertEquals(date, defaultPhdReadTag.getDate());
    }

    @Test
    public void testGetComment() {
        assertEquals(comment, defaultPhdReadTag.getComment());
    }

    @Test
    public void testGetFreeFormData() {
        assertEquals(freeFormData, defaultPhdReadTag.getFreeFormData());
    }

    @Test
    public void testHashCode() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, source, ungappedRange, date, comment, freeFormData);
        assertEquals(defaultPhdReadTag.hashCode(), anotherTag.hashCode());
    }

    @Test
    public void testEquals() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, source, ungappedRange, date, comment, freeFormData);
        assertTrue(defaultPhdReadTag.equals(anotherTag));
    }

    @Test
    public void testEqualsWithNull() {
        assertFalse(defaultPhdReadTag.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        assertFalse(defaultPhdReadTag.equals("Different Class"));
    }

    @Test
    public void testEqualsWithDifferentType() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag("differentType", source, ungappedRange, date, comment, freeFormData);
        assertFalse(defaultPhdReadTag.equals(anotherTag));
    }

    @Test
    public void testEqualsWithDifferentSource() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, "differentSource", ungappedRange, date, comment, freeFormData);
        assertFalse(defaultPhdReadTag.equals(anotherTag));
    }

    @Test
    public void testEqualsWithDifferentUngappedRange() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, source, new Range(2, 20), date, comment, freeFormData);
        assertFalse(defaultPhdReadTag.equals(anotherTag));
    }

    @Test
    public void testEqualsWithDifferentDate() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, source, ungappedRange, new Date(date.getTime() + 1), comment, freeFormData);
        assertFalse(defaultPhdReadTag.equals(anotherTag));
    }

    @Test
    public void testEqualsWithDifferentComment() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, source, ungappedRange, date, "differentComment", freeFormData);
        assertFalse(defaultPhdReadTag.equals(anotherTag));
    }

    @Test
    public void testEqualsWithDifferentFreeFormData() {
        DefaultPhdReadTag anotherTag = new DefaultPhdReadTag(type, source, ungappedRange, date, comment, "differentFreeFormData");
        assertFalse(defaultPhdReadTag.equals(anotherTag));
    }
}
```