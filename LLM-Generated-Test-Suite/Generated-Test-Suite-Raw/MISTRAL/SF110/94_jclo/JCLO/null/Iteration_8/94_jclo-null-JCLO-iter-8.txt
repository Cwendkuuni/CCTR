```java
package edu.mscd.cs.jclo;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class JCLOTest {

    private JCLO jclo;
    private TestClass testObject;

    @Before
    public void setUp() {
        testObject = new TestClass();
        jclo = new JCLO(testObject);
    }

    @Test
    public void testConstructorWithObject() {
        assertNotNull(jclo);
        assertEquals(testObject, jclo.getObject(TestClass.class.getDeclaredFields()[0]));
    }

    @Test
    public void testConstructorWithObjectAndAliases() {
        String[][] aliases = {{"aliasField", "field"}};
        JCLO jcloWithAliases = new JCLO(testObject, aliases);
        assertNotNull(jcloWithAliases);
        assertEquals(testObject, jcloWithAliases.getObject(TestClass.class.getDeclaredFields()[0]));
    }

    @Test
    public void testConstructorWithPrefixAndObject() {
        JCLO jcloWithPrefix = new JCLO("prefix", testObject);
        assertNotNull(jcloWithPrefix);
        assertEquals(testObject, jcloWithPrefix.getObject(TestClass.class.getDeclaredFields()[0]));
    }

    @Test
    public void testConstructorWithPrefixObjectAndAliases() {
        String[][] aliases = {{"aliasField", "field"}};
        JCLO jcloWithPrefixAndAliases = new JCLO("prefix", testObject, aliases);
        assertNotNull(jcloWithPrefixAndAliases);
        assertEquals(testObject, jcloWithPrefixAndAliases.getObject(TestClass.class.getDeclaredFields()[0]));
    }

    @Test
    public void testGetValue() {
        testObject.field = "testValue";
        assertEquals("testValue", jclo.getValue("field"));
    }

    @Test
    public void testSetValue() {
        jclo.setValue("field", "newValue");
        assertEquals("newValue", testObject.field);
    }

    @Test
    public void testToString() {
        testObject.field = "testValue";
        String result = jclo.toString();
        assertTrue(result.contains("String: field = testValue"));
    }

    @Test
    public void testUsage() {
        String usage = jclo.usage();
        assertTrue(usage.contains("-field"));
    }

    @Test
    public void testParse() {
        String[] args = {"-field", "testValue"};
        jclo.parse(args);
        assertEquals("testValue", testObject.field);
    }

    @Test
    public void testGetBoolean() {
        testObject.booleanField = true;
        assertTrue(jclo.getBoolean("booleanField"));
    }

    @Test
    public void testGetByte() {
        testObject.byteField = (byte) 1;
        assertEquals((byte) 1, jclo.getByte("byteField"));
    }

    @Test
    public void testGetChar() {
        testObject.charField = 'a';
        assertEquals('a', jclo.getChar("charField"));
    }

    @Test
    public void testGetShort() {
        testObject.shortField = (short) 1;
        assertEquals((short) 1, jclo.getShort("shortField"));
    }

    @Test
    public void testGetInt() {
        testObject.intField = 1;
        assertEquals(1, jclo.getInt("intField"));
    }

    @Test
    public void testGetFloat() {
        testObject.floatField = 1.0f;
        assertEquals(1.0f, jclo.getFloat("floatField"), 0.001);
    }

    @Test
    public void testGetDouble() {
        testObject.doubleField = 1.0;
        assertEquals(1.0, jclo.getDouble("doubleField"), 0.001);
    }

    @Test
    public void testGetLong() {
        testObject.longField = 1L;
        assertEquals(1L, jclo.getLong("longField"));
    }

    @Test
    public void testGetString() {
        testObject.field = "testValue";
        assertEquals("testValue", jclo.getString("field"));
    }

    @Test
    public void testGetBytes() {
        testObject.byteArrayField = new byte[]{1, 2, 3};
        assertArrayEquals(new byte[]{1, 2, 3}, jclo.getBytes("byteArrayField"));
    }

    @Test
    public void testGetChars() {
        testObject.charArrayField = new char[]{'a', 'b', 'c'};
        assertArrayEquals(new char[]{'a', 'b', 'c'}, jclo.getChars("charArrayField"));
    }

    @Test
    public void testGetShorts() {
        testObject.shortArrayField = new short[]{1, 2, 3};
        assertArrayEquals(new short[]{1, 2, 3}, jclo.getShorts("shortArrayField"));
    }

    @Test
    public void testGetInts() {
        testObject.intArrayField = new int[]{1, 2, 3};
        assertArrayEquals(new int[]{1, 2, 3}, jclo.getInts("intArrayField"));
    }

    @Test
    public void testGetFloats() {
        testObject.floatArrayField = new float[]{1.0f, 2.0f, 3.0f};
        assertArrayEquals(new float[]{1.0f, 2.0f, 3.0f}, jclo.getFloats("floatArrayField"), 0.001);
    }

    @Test
    public void testGetDoubles() {
        testObject.doubleArrayField = new double[]{1.0, 2.0, 3.0};
        assertArrayEquals(new double[]{1.0, 2.0, 3.0}, jclo.getDoubles("doubleArrayField"), 0.001);
    }

    @Test
    public void testGetLongs() {
        testObject.longArrayField = new long[]{1L, 2L, 3L};
        assertArrayEquals(new long[]{1L, 2L, 3L}, jclo.getLongs("longArrayField"));
    }

    @Test
    public void testGetStrings() {
        testObject.stringArrayField = new String[]{"a", "b", "c"};
        assertArrayEquals(new String[]{"a", "b", "c"}, jclo.getStrings("stringArrayField"));
    }

    private static class TestClass {
        public String field;
        public boolean booleanField;
        public byte byteField;
        public char charField;
        public short shortField;
        public int intField;
        public float floatField;
        public double doubleField;
        public long longField;
        public byte[] byteArrayField;
        public char[] charArrayField;
        public short[] shortArrayField;
        public int[] intArrayField;
        public float[] floatArrayField;
        public double[] doubleArrayField;
        public long[] longArrayField;
        public String[] stringArrayField;
    }
}
```