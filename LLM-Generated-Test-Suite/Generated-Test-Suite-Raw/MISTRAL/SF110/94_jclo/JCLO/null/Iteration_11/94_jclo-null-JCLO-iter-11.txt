```java
package edu.mscd.cs.jclo;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class JCLOTest {

    private JCLO jclo;
    private TestClass testObject;

    @Before
    public void setUp() {
        testObject = new TestClass();
        jclo = new JCLO(testObject);
    }

    @Test
    public void testConstructorWithObject() {
        assertNotNull(jclo);
        assertEquals(testObject, jclo.object);
    }

    @Test
    public void testConstructorWithObjectAndAliases() {
        String[][] aliases = {{"alias1", "field1"}, {"alias2", "field2"}};
        JCLO jcloWithAliases = new JCLO(testObject, aliases);
        assertNotNull(jcloWithAliases);
        assertEquals(testObject, jcloWithAliases.object);
        assertArrayEquals(aliases, jcloWithAliases.aliases);
    }

    @Test
    public void testConstructorWithPrefixAndObject() {
        String prefix = "prefix_";
        JCLO jcloWithPrefix = new JCLO(prefix, testObject);
        assertNotNull(jcloWithPrefix);
        assertEquals(testObject, jcloWithPrefix.object);
        assertEquals(prefix, jcloWithPrefix.prefix);
    }

    @Test
    public void testConstructorWithPrefixObjectAndAliases() {
        String prefix = "prefix_";
        String[][] aliases = {{"alias1", "field1"}, {"alias2", "field2"}};
        JCLO jcloWithPrefixAndAliases = new JCLO(prefix, testObject, aliases);
        assertNotNull(jcloWithPrefixAndAliases);
        assertEquals(testObject, jcloWithPrefixAndAliases.object);
        assertEquals(prefix, jcloWithPrefixAndAliases.prefix);
        assertArrayEquals(aliases, jcloWithPrefixAndAliases.aliases);
    }

    @Test
    public void testGetValue() {
        testObject.field1 = "value1";
        assertEquals("value1", jclo.getValue("field1"));
    }

    @Test
    public void testGetValueWithPrefix() {
        String prefix = "prefix_";
        JCLO jcloWithPrefix = new JCLO(prefix, testObject);
        testObject.field1 = "value1";
        assertEquals("value1", jcloWithPrefix.getValue("field1"));
    }

    @Test
    public void testGetValueWithAliases() {
        String[][] aliases = {{"alias1", "field1"}};
        JCLO jcloWithAliases = new JCLO(testObject, aliases);
        testObject.field1 = "value1";
        assertEquals("value1", jcloWithAliases.getValue("alias1"));
    }

    @Test
    public void testSetValue() {
        jclo.parse(new String[]{"--field1=newValue"});
        assertEquals("newValue", testObject.field1);
    }

    @Test
    public void testToString() {
        testObject.field1 = "value1";
        testObject.field2 = 123;
        String expected = "String: field1 = value1\nint: field2 = 123";
        assertEquals(expected, jclo.toString());
    }

    @Test
    public void testUsage() {
        String expected = "-field1 =String\n-field2 =int\n";
        assertEquals(expected, jclo.usage());
    }

    @Test
    public void testParseAdditional() {
        jclo.parse(new String[]{"additionalArg1", "additionalArg2"});
        assertArrayEquals(new String[]{"additionalArg1", "additionalArg2"}, testObject.additional);
    }

    @Test
    public void testGetBoolean() {
        testObject.fieldBoolean = true;
        assertTrue(jclo.getBoolean("fieldBoolean"));
    }

    @Test
    public void testGetByte() {
        testObject.fieldByte = 1;
        assertEquals(1, jclo.getByte("fieldByte"));
    }

    @Test
    public void testGetChar() {
        testObject.fieldChar = 'a';
        assertEquals('a', jclo.getChar("fieldChar"));
    }

    @Test
    public void testGetShort() {
        testObject.fieldShort = 1;
        assertEquals(1, jclo.getShort("fieldShort"));
    }

    @Test
    public void testGetInt() {
        testObject.fieldInt = 1;
        assertEquals(1, jclo.getInt("fieldInt"));
    }

    @Test
    public void testGetFloat() {
        testObject.fieldFloat = 1.0f;
        assertEquals(1.0f, jclo.getFloat("fieldFloat"), 0.001);
    }

    @Test
    public void testGetDouble() {
        testObject.fieldDouble = 1.0;
        assertEquals(1.0, jclo.getDouble("fieldDouble"), 0.001);
    }

    @Test
    public void testGetLong() {
        testObject.fieldLong = 1L;
        assertEquals(1L, jclo.getLong("fieldLong"));
    }

    @Test
    public void testGetString() {
        testObject.fieldString = "value";
        assertEquals("value", jclo.getString("fieldString"));
    }

    @Test
    public void testGetBytes() {
        testObject.fieldBytes = new byte[]{1, 2, 3};
        assertArrayEquals(new byte[]{1, 2, 3}, jclo.getBytes("fieldBytes"));
    }

    @Test
    public void testGetChars() {
        testObject.fieldChars = new char[]{'a', 'b', 'c'};
        assertArrayEquals(new char[]{'a', 'b', 'c'}, jclo.getChars("fieldChars"));
    }

    @Test
    public void testGetShorts() {
        testObject.fieldShorts = new short[]{1, 2, 3};
        assertArrayEquals(new short[]{1, 2, 3}, jclo.getShorts("fieldShorts"));
    }

    @Test
    public void testGetInts() {
        testObject.fieldInts = new int[]{1, 2, 3};
        assertArrayEquals(new int[]{1, 2, 3}, jclo.getInts("fieldInts"));
    }

    @Test
    public void testGetFloats() {
        testObject.fieldFloats = new float[]{1.0f, 2.0f, 3.0f};
        assertArrayEquals(new float[]{1.0f, 2.0f, 3.0f}, jclo.getFloats("fieldFloats"), 0.001);
    }

    @Test
    public void testGetDoubles() {
        testObject.fieldDoubles = new double[]{1.0, 2.0, 3.0};
        assertArrayEquals(new double[]{1.0, 2.0, 3.0}, jclo.getDoubles("fieldDoubles"), 0.001);
    }

    @Test
    public void testGetLongs() {
        testObject.fieldLongs = new long[]{1L, 2L, 3L};
        assertArrayEquals(new long[]{1L, 2L, 3L}, jclo.getLongs("fieldLongs"));
    }

    @Test
    public void testGetStrings() {
        testObject.fieldStrings = new String[]{"value1", "value2"};
        assertArrayEquals(new String[]{"value1", "value2"}, jclo.getStrings("fieldStrings"));
    }

    private static class TestClass {
        public String field1;
        public int field2;
        public boolean fieldBoolean;
        public byte fieldByte;
        public char fieldChar;
        public short fieldShort;
        public int fieldInt;
        public float fieldFloat;
        public double fieldDouble;
        public long fieldLong;
        public String fieldString;
        public byte[] fieldBytes;
        public char[] fieldChars;
        public short[] fieldShorts;
        public int[] fieldInts;
        public float[] fieldFloats;
        public double[] fieldDoubles;
        public long[] fieldLongs;
        public String[] fieldStrings;
        public String[] additional;
    }
}
```