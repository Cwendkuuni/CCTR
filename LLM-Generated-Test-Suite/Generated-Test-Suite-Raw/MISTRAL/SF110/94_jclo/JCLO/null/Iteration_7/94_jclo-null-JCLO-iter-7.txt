```java
package edu.mscd.cs.jclo;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class JCLOTest {

    private JCLO jclo;
    private TestClass testObject;

    @Before
    public void setUp() {
        testObject = new TestClass();
        jclo = new JCLO(testObject);
    }

    @Test
    public void testConstructorWithObject() {
        assertNotNull(jclo);
        assertEquals(testObject, jclo.object);
    }

    @Test
    public void testConstructorWithObjectAndAliases() {
        String[][] aliases = {{"alias1", "field1"}, {"alias2", "field2"}};
        JCLO jcloWithAliases = new JCLO(testObject, aliases);
        assertNotNull(jcloWithAliases);
        assertEquals(testObject, jcloWithAliases.object);
        assertArrayEquals(aliases, jcloWithAliases.aliases);
    }

    @Test
    public void testConstructorWithPrefixAndObject() {
        String prefix = "prefix_";
        JCLO jcloWithPrefix = new JCLO(prefix, testObject);
        assertNotNull(jcloWithPrefix);
        assertEquals(testObject, jcloWithPrefix.object);
        assertEquals(prefix, jcloWithPrefix.prefix);
    }

    @Test
    public void testConstructorWithPrefixObjectAndAliases() {
        String prefix = "prefix_";
        String[][] aliases = {{"alias1", "field1"}, {"alias2", "field2"}};
        JCLO jcloWithPrefixAndAliases = new JCLO(prefix, testObject, aliases);
        assertNotNull(jcloWithPrefixAndAliases);
        assertEquals(testObject, jcloWithPrefixAndAliases.object);
        assertEquals(prefix, jcloWithPrefixAndAliases.prefix);
        assertArrayEquals(aliases, jcloWithPrefixAndAliases.aliases);
    }

    @Test
    public void testGetValue() {
        testObject.field1 = "value1";
        assertEquals("value1", jclo.getValue("field1"));
    }

    @Test
    public void testGetValueWithPrefix() {
        String prefix = "prefix_";
        JCLO jcloWithPrefix = new JCLO(prefix, testObject);
        testObject.field1 = "value1";
        assertEquals("value1", jcloWithPrefix.getValue("field1"));
    }

    @Test
    public void testSetValue() {
        jclo.setValue("field1", "newValue");
        assertEquals("newValue", testObject.field1);
    }

    @Test
    public void testToString() {
        testObject.field1 = "value1";
        testObject.field2 = 123;
        String expected = "String: field1 = value1\nint: field2 = 123";
        assertEquals(expected, jclo.toString());
    }

    @Test
    public void testUsage() {
        String expected = "-field1=String\n-field2=int\n";
        assertEquals(expected, jclo.usage());
    }

    @Test
    public void testParse() {
        String[] args = {"--field1=newValue", "--field2=456"};
        jclo.parse(args);
        assertEquals("newValue", testObject.field1);
        assertEquals(456, testObject.field2);
    }

    @Test
    public void testGetBoolean() {
        testObject.booleanField = true;
        assertTrue(jclo.getBoolean("booleanField"));
    }

    @Test
    public void testGetByte() {
        testObject.byteField = (byte) 123;
        assertEquals((byte) 123, jclo.getByte("byteField"));
    }

    @Test
    public void testGetChar() {
        testObject.charField = 'a';
        assertEquals('a', jclo.getChar("charField"));
    }

    @Test
    public void testGetShort() {
        testObject.shortField = (short) 12345;
        assertEquals((short) 12345, jclo.getShort("shortField"));
    }

    @Test
    public void testGetInt() {
        testObject.intField = 123456;
        assertEquals(123456, jclo.getInt("intField"));
    }

    @Test
    public void testGetFloat() {
        testObject.floatField = 123.45f;
        assertEquals(123.45f, jclo.getFloat("floatField"), 0.001);
    }

    @Test
    public void testGetDouble() {
        testObject.doubleField = 123.456;
        assertEquals(123.456, jclo.getDouble("doubleField"), 0.001);
    }

    @Test
    public void testGetLong() {
        testObject.longField = 123456789L;
        assertEquals(123456789L, jclo.getLong("longField"));
    }

    @Test
    public void testGetString() {
        testObject.stringField = "testString";
        assertEquals("testString", jclo.getString("stringField"));
    }

    @Test
    public void testGetBytes() {
        testObject.byteArrayField = new byte[] {1, 2, 3};
        assertArrayEquals(new byte[] {1, 2, 3}, jclo.getBytes("byteArrayField"));
    }

    @Test
    public void testGetChars() {
        testObject.charArrayField = new char[] {'a', 'b', 'c'};
        assertArrayEquals(new char[] {'a', 'b', 'c'}, jclo.getChars("charArrayField"));
    }

    @Test
    public void testGetShorts() {
        testObject.shortArrayField = new short[] {1, 2, 3};
        assertArrayEquals(new short[] {1, 2, 3}, jclo.getShorts("shortArrayField"));
    }

    @Test
    public void testGetInts() {
        testObject.intArrayField = new int[] {1, 2, 3};
        assertArrayEquals(new int[] {1, 2, 3}, jclo.getInts("intArrayField"));
    }

    @Test
    public void testGetFloats() {
        testObject.floatArrayField = new float[] {1.1f, 2.2f, 3.3f};
        assertArrayEquals(new float[] {1.1f, 2.2f, 3.3f}, jclo.getFloats("floatArrayField"), 0.001);
    }

    @Test
    public void testGetDoubles() {
        testObject.doubleArrayField = new double[] {1.1, 2.2, 3.3};
        assertArrayEquals(new double[] {1.1, 2.2, 3.3}, jclo.getDoubles("doubleArrayField"), 0.001);
    }

    @Test
    public void testGetLongs() {
        testObject.longArrayField = new long[] {1L, 2L, 3L};
        assertArrayEquals(new long[] {1L, 2L, 3L}, jclo.getLongs("longArrayField"));
    }

    @Test
    public void testGetStrings() {
        testObject.stringArrayField = new String[] {"one", "two", "three"};
        assertArrayEquals(new String[] {"one", "two", "three"}, jclo.getStrings("stringArrayField"));
    }

    private static class TestClass {
        public String field1;
        public int field2;
        public boolean booleanField;
        public byte byteField;
        public char charField;
        public short shortField;
        public int intField;
        public float floatField;
        public double doubleField;
        public long longField;
        public String stringField;
        public byte[] byteArrayField;
        public char[] charArrayField;
        public short[] shortArrayField;
        public int[] intArrayField;
        public float[] floatArrayField;
        public double[] doubleArrayField;
        public long[] longArrayField;
        public String[] stringArrayField;
    }
}
```