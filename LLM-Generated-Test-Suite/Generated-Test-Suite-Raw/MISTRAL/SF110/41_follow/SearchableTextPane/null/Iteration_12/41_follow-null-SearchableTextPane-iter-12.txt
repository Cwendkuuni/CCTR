```java
package ghm.follow.search;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SearchableTextPaneTest {

    private SearchableTextPane searchableTextPane;
    private Font font;
    private int tabSize;

    @Before
    public void setUp() {
        font = new Font("Arial", Font.PLAIN, 12);
        tabSize = 4;
        searchableTextPane = new SearchableTextPane(font, tabSize);
    }

    @Test
    public void testConstructor() {
        assertNotNull(searchableTextPane);
        assertEquals(font, searchableTextPane.getFont());
        assertEquals(tabSize, searchableTextPane.getTabSize());
    }

    @Test
    public void testGetScrollableTracksViewportWidth() {
        JScrollPane scrollPane = new JScrollPane(searchableTextPane);
        searchableTextPane.setSize(200, 200);
        scrollPane.setSize(300, 300);
        assertTrue(searchableTextPane.getScrollableTracksViewportWidth());

        searchableTextPane.setSize(400, 400);
        assertFalse(searchableTextPane.getScrollableTracksViewportWidth());
    }

    @Test
    public void testHighlight() {
        searchableTextPane.setText("This is a test. This is only a test.");
        List<LineResult> results = searchableTextPane.highlight("test", 0);
        assertNotNull(results);
        assertEquals(2, results.size());

        results = searchableTextPane.highlight("", 0);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveHighlights() {
        searchableTextPane.setText("This is a test. This is only a test.");
        searchableTextPane.highlight("test", 0);
        searchableTextPane.removeHighlights();
        assertTrue(searchableTextPane.getHighlighter().getHighlights().length == 0);
    }

    @Test
    public void testSearch() {
        searchableTextPane.setText("This is a test. This is only a test.");
        int pos = searchableTextPane.search("test");
        assertEquals(10, pos);

        pos = searchableTextPane.search("test");
        assertEquals(26, pos);

        pos = searchableTextPane.search("nonexistent");
        assertEquals(-1, pos);
    }

    @Test
    public void testSearchWithStartPos() {
        searchableTextPane.setText("This is a test. This is only a test.");
        int pos = searchableTextPane.search("test", 0);
        assertEquals(10, pos);

        pos = searchableTextPane.search("test", 15);
        assertEquals(26, pos);

        pos = searchableTextPane.search("nonexistent", 0);
        assertEquals(-1, pos);
    }

    @Test
    public void testConvertWords2Lines() throws Exception {
        // Assuming WordResult and LineResult are properly defined and accessible
        // This test might need mock objects or a more detailed setup
        List<WordResult> words = List.of(new WordResult(0, 4), new WordResult(5, 9));
        List<LineResult> lines = searchableTextPane.convertWords2Lines(words);
        assertNotNull(lines);
        assertEquals(1, lines.size());
    }

    @Test
    public void testUpdateWordResult() throws Exception {
        // Assuming WordResult and LineResult are properly defined and accessible
        // This test might need mock objects or a more detailed setup
        WordResult wordResult = new WordResult(0, 4);
        LineResult lineResult = new LineResult(0, 0, 10);
        searchableTextPane.updateWordResult(wordResult, lineResult);
        assertEquals(1, wordResult.parent.lineNumber);
        assertEquals(0, wordResult.getLineOffset());
    }

    @Test
    public void testLogging() {
        Logger logger = Logger.getLogger(SearchableTextPane.class.getName());
        searchableTextPane.setText("This is a test.");
        searchableTextPane.search("test", 100); // Should trigger a BadLocationException
        assertTrue(logger.isLoggable(Level.WARNING));
    }
}
```