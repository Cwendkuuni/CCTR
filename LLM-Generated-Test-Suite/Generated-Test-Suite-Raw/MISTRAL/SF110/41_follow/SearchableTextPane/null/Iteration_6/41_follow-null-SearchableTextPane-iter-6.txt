```java
package ghm.follow.search;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class SearchableTextPaneTest {

    private SearchableTextPane searchableTextPane;
    private Logger log;

    @Before
    public void setUp() {
        Font font = new Font("Arial", Font.PLAIN, 12);
        searchableTextPane = new SearchableTextPane(font, 4);
        log = Logger.getLogger(SearchableTextPane.class.getName());
    }

    @Test
    public void testGetScrollableTracksViewportWidth() {
        JScrollPane scrollPane = new JScrollPane(searchableTextPane);
        searchableTextPane.setSize(200, 200);
        scrollPane.setSize(300, 300);
        assertTrue(searchableTextPane.getScrollableTracksViewportWidth());

        searchableTextPane.setSize(400, 400);
        assertFalse(searchableTextPane.getScrollableTracksViewportWidth());
    }

    @Test
    public void testHighlight() throws BadLocationException {
        searchableTextPane.setText("This is a test. This test is only a test.");
        List<LineResult> results = searchableTextPane.highlight("test", 0);
        assertEquals(3, results.size());

        results = searchableTextPane.highlight("nonexistent", 0);
        assertEquals(0, results.size());
    }

    @Test
    public void testRemoveHighlights() {
        searchableTextPane.setText("This is a test.");
        searchableTextPane.highlight("test", 0);
        searchableTextPane.removeHighlights();
        assertEquals(0, searchableTextPane.getHighlighter().getHighlights().length);
    }

    @Test
    public void testSearch() {
        searchableTextPane.setText("This is a test. This test is only a test.");
        int pos = searchableTextPane.search("test");
        assertEquals(10, pos);

        pos = searchableTextPane.search("test");
        assertEquals(24, pos);

        pos = searchableTextPane.search("test");
        assertEquals(39, pos);

        pos = searchableTextPane.search("test");
        assertEquals(-1, pos);
    }

    @Test
    public void testSearchWithStartPos() {
        searchableTextPane.setText("This is a test. This test is only a test.");
        int pos = searchableTextPane.search("test", 0);
        assertEquals(10, pos);

        pos = searchableTextPane.search("test", 15);
        assertEquals(24, pos);

        pos = searchableTextPane.search("test", 30);
        assertEquals(39, pos);

        pos = searchableTextPane.search("test", 40);
        assertEquals(-1, pos);
    }

    @Test
    public void testConvertWords2Lines() throws BadLocationException {
        searchableTextPane.setText("This is a test.\nThis test is only a test.");
        List<WordResult> words = List.of(
                new WordResult(10, 14),
                new WordResult(24, 28),
                new WordResult(44, 48)
        );
        List<LineResult> lines = searchableTextPane.convertWords2Lines(words);
        assertEquals(2, lines.size());
    }

    @Test
    public void testUpdateWordResult() throws BadLocationException {
        searchableTextPane.setText("This is a test.\nThis test is only a test.");
        WordResult wordResult = new WordResult(10, 14);
        LineResult lineResult = new LineResult(0, 0, 20);
        searchableTextPane.updateWordResult(wordResult, lineResult);
        assertEquals(1, wordResult.parent.lineNumber);
        assertEquals(0, wordResult.getLineOffset());
    }

    @Test
    public void testLogging() {
        log.setLevel(Level.SEVERE);
        searchableTextPane.setText("This is a test.");
        searchableTextPane.highlight("test", 0);
        searchableTextPane.search("test");
        searchableTextPane.search("test", 0);
    }
}
```