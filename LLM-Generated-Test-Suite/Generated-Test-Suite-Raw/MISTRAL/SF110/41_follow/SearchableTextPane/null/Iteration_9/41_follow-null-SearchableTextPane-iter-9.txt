```java
package ghm.follow.search;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SearchableTextPaneTest {

    private SearchableTextPane searchableTextPane;
    private final Font font = new Font("Arial", Font.PLAIN, 12);
    private final int tabSize = 4;

    @Before
    public void setUp() {
        searchableTextPane = new SearchableTextPane(font, tabSize);
    }

    @Test
    public void testGetScrollableTracksViewportWidth() {
        JScrollPane scrollPane = new JScrollPane(searchableTextPane);
        searchableTextPane.setSize(200, 200);
        scrollPane.setSize(300, 300);
        assertTrue(searchableTextPane.getScrollableTracksViewportWidth());

        searchableTextPane.setSize(400, 400);
        assertFalse(searchableTextPane.getScrollableTracksViewportWidth());
    }

    @Test
    public void testHighlight() {
        searchableTextPane.setText("This is a test. This test is only a test.");
        List<LineResult> results = searchableTextPane.highlight("test", 0);
        assertNotNull(results);
        assertFalse(results.isEmpty());

        results = searchableTextPane.highlight("", 0);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveHighlights() {
        searchableTextPane.setText("This is a test. This test is only a test.");
        searchableTextPane.highlight("test", 0);
        searchableTextPane.removeHighlights();
        assertEquals(0, searchableTextPane.getHighlighter().getHighlights().length);
    }

    @Test
    public void testSearch() {
        searchableTextPane.setText("This is a test. This test is only a test.");
        int pos = searchableTextPane.search("test");
        assertEquals(10, pos);

        pos = searchableTextPane.search("test");
        assertEquals(24, pos);

        pos = searchableTextPane.search("nonexistent");
        assertEquals(-1, pos);
    }

    @Test
    public void testSearchWithStartPos() {
        searchableTextPane.setText("This is a test. This test is only a test.");
        int pos = searchableTextPane.search("test", 0);
        assertEquals(10, pos);

        pos = searchableTextPane.search("test", 15);
        assertEquals(24, pos);

        pos = searchableTextPane.search("nonexistent", 0);
        assertEquals(-1, pos);
    }

    @Test
    public void testConvertWords2Lines() throws Exception {
        // Mocking WordResult and LineResult classes for testing
        class WordResult {
            int start;
            int end;
            WordResult parent;

            WordResult(int start, int end) {
                this.start = start;
                this.end = end;
                this.parent = this;
            }

            void setLineOffset(int lineOffset) {
                // Mock implementation
            }
        }

        class LineResult {
            int lineNumber;
            int startOffset;
            int endOffset;

            LineResult(int lineNumber, int startOffset, int endOffset) {
                this.lineNumber = lineNumber;
                this.startOffset = startOffset;
                this.endOffset = endOffset;
            }

            void addWord(WordResult wordResult) {
                // Mock implementation
            }

            List<WordResult> getWordResults() {
                // Mock implementation
                return null;
            }
        }

        searchableTextPane.setText("This is a test.\nThis test is only a test.");
        List<WordResult> words = List.of(new WordResult(10, 14), new WordResult(24, 28));
        List<LineResult> lines = searchableTextPane.convertWords2Lines(words);
        assertNotNull(lines);
        assertEquals(2, lines.size());
    }

    @Test
    public void testUpdateWordResult() throws Exception {
        // Mocking WordResult and LineResult classes for testing
        class WordResult {
            int start;
            int end;
            WordResult parent;

            WordResult(int start, int end) {
                this.start = start;
                this.end = end;
                this.parent = this;
            }

            void setLineOffset(int lineOffset) {
                // Mock implementation
            }
        }

        class LineResult {
            int lineNumber;
            int startOffset;
            int endOffset;

            LineResult(int lineNumber, int startOffset, int endOffset) {
                this.lineNumber = lineNumber;
                this.startOffset = startOffset;
                this.endOffset = endOffset;
            }

            void addWord(WordResult wordResult) {
                // Mock implementation
            }

            List<WordResult> getWordResults() {
                // Mock implementation
                return null;
            }
        }

        searchableTextPane.setText("This is a test.\nThis test is only a test.");
        WordResult wordResult = new WordResult(10, 14);
        LineResult lineResult = new LineResult(0, 0, 15);
        searchableTextPane.updateWordResult(wordResult, lineResult);
        assertEquals(1, wordResult.parent.lineNumber);
    }
}
```