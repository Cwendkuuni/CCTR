Sure, here is a comprehensive JUnit 4 test suite for the `AttributeModelComparator` class:

```java
package de.paragon.explorer.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class AttributeModelComparatorTest {

    private AttributeModelComparator comparator = new AttributeModelComparator();

    @Test
    public void testCompare_BothNull() {
        AttributeModel o1 = null;
        AttributeModel o2 = null;
        assertEquals(-1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_FirstNull() {
        AttributeModel o1 = null;
        AttributeModel o2 = new AttributeModel("test");
        assertEquals(-1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_SecondNull() {
        AttributeModel o1 = new AttributeModel("test");
        AttributeModel o2 = null;
        assertEquals(-1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_BothNotNull_EqualNames() {
        AttributeModel o1 = new AttributeModel("test");
        AttributeModel o2 = new AttributeModel("test");
        assertEquals(0, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_BothNotNull_DifferentNames() {
        AttributeModel o1 = new AttributeModel("apple");
        AttributeModel o2 = new AttributeModel("banana");
        assertTrue(comparator.compare(o1, o2) < 0);
    }

    @Test
    public void testCompare_BothNotNull_DifferentNames_Reverse() {
        AttributeModel o1 = new AttributeModel("banana");
        AttributeModel o2 = new AttributeModel("apple");
        assertTrue(comparator.compare(o1, o2) > 0);
    }

    @Test
    public void testCompare_BothNotNull_SpecialCase_A() {
        AttributeModel o1 = new AttributeModel("a");
        AttributeModel o2 = new AttributeModel("b");
        assertTrue(comparator.compare(o1, o2) < 0);
    }

    @Test
    public void testCompare_BothNotNull_SpecialCase_A_Reverse() {
        AttributeModel o1 = new AttributeModel("b");
        AttributeModel o2 = new AttributeModel("a");
        assertTrue(comparator.compare(o1, o2) > 0);
    }

    @Test
    public void testCompare_BothNotNull_SpecialCase_BeforeA() {
        AttributeModel o1 = new AttributeModel("A");
        AttributeModel o2 = new AttributeModel("b");
        assertTrue(comparator.compare(o1, o2) < 0);
    }

    @Test
    public void testCompare_BothNotNull_SpecialCase_BeforeA_Reverse() {
        AttributeModel o1 = new AttributeModel("b");
        AttributeModel o2 = new AttributeModel("A");
        assertTrue(comparator.compare(o1, o2) > 0);
    }

    @Test
    public void testCompare_BothNotNull_SpecialCase_AfterA() {
        AttributeModel o1 = new AttributeModel("b");
        AttributeModel o2 = new AttributeModel("a");
        assertTrue(comparator.compare(o1, o2) > 0);
    }

    @Test
    public void testCompare_BothNotNull_SpecialCase_AfterA_Reverse() {
        AttributeModel o1 = new AttributeModel("a");
        AttributeModel o2 = new AttributeModel("b");
        assertTrue(comparator.compare(o1, o2) < 0);
    }

    // Helper class to simulate AttributeModel
    private class AttributeModel {
        private String name;

        public AttributeModel(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }
}
```

This test suite covers various scenarios, including null values, equal names, different names, and special cases involving the letter 'a'. The `AttributeModel` class is simulated within the test suite for the sake of completeness.