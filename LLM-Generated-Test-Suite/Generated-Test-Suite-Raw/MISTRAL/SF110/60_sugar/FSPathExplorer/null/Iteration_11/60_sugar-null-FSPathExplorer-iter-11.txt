```java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import net.sf.sugar.fspath.FSPath;
import net.sf.sugar.fspath.FSPathFactory;
import net.sf.sugar.fspath.FSPathResult;
import net.sf.sugar.fspath.FSPathResultList;

public class FSPathExplorerTest {

    private FSPathExplorer explorer;
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();

    @Before
    public void setUp() {
        explorer = new FSPathExplorer();
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void tearDown() {
        System.setOut(null);
        System.setErr(null);
    }

    @Test
    public void testConstructor() {
        assertNotNull(explorer.out);
        assertNotNull(explorer.err);
        assertNotNull(explorer.prompt);
        assertEquals("fspath>", explorer.prompt.getPromptText());
    }

    @Test
    public void testShowWelcome() {
        FSPathExplorer.showWelcome();
        assertTrue(outContent.toString().contains("FSPathExplorer"));
    }

    @Test
    public void testShowHelp() {
        FSPathExplorer.showHelp();
        assertTrue(outContent.toString().contains("FSPathExplorer help"));
    }

    @Test
    public void testConfigureExplorer() {
        String[] args = {"-path", "/test/path", "-find", "query"};
        explorer.configureExplorer(args);
        assertEquals(new File("/test/path"), explorer.rootPath);
        assertEquals("query", explorer.fsPathQuery);
    }

    @Test
    public void testCreateFSPathWithRootPath() {
        explorer.rootPath = new File("/test/path");
        explorer.createFSPath();
        assertNotNull(explorer.fsPath);
        assertEquals("/test/path", explorer.fsPath.getRootDirectory().getPath());
    }

    @Test
    public void testCreateFSPathWithoutRootPath() {
        explorer.createFSPath();
        assertNotNull(explorer.fsPath);
    }

    @Test
    public void testStartWithExitCommand() throws Exception {
        explorer.prompt = new MockPrompt("exit");
        explorer.start();
        assertTrue(outContent.toString().contains("exiting....."));
    }

    @Test
    public void testStartWithPwdCommand() throws Exception {
        explorer.prompt = new MockPrompt("pwd");
        explorer.start();
        assertTrue(outContent.toString().contains("Current directory"));
    }

    @Test
    public void testStartWithCdCommand() throws Exception {
        explorer.prompt = new MockPrompt("cd /test/path");
        explorer.start();
        assertTrue(outContent.toString().contains("changed to : /test/path"));
    }

    @Test
    public void testStartWithHelpCommand() throws Exception {
        explorer.prompt = new MockPrompt("help");
        explorer.start();
        assertTrue(outContent.toString().contains("FSPathExplorer help"));
    }

    @Test
    public void testStartWithFSPathQuery() throws Exception {
        explorer.prompt = new MockPrompt("//dir[@name = 'test']");
        explorer.fsPath = new MockFSPath();
        explorer.start();
        assertTrue(outContent.toString().contains("test/path"));
    }

    private class MockPrompt extends Prompt {
        private String input;

        public MockPrompt(String input) {
            super(System.in, System.out, System.err);
            this.input = input;
        }

        @Override
        public String readLine() throws IOException {
            return input;
        }
    }

    private class MockFSPath extends FSPath {
        public MockFSPath() {
            super(new File("/"));
        }

        @Override
        public FSPathResultList query(String query) {
            FSPathResultList results = new FSPathResultList();
            results.add(new FSPathResult(new File("test/path")));
            return results;
        }
    }
}
```