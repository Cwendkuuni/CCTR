```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import net.sf.sugar.fspath.FSPath;
import net.sf.sugar.fspath.FSPathFactory;
import net.sf.sugar.fspath.FSPathResultList;

public class FSPathExplorerTest {

    private FSPathExplorer explorer;
    private ByteArrayOutputStream outContent;
    private ByteArrayOutputStream errContent;

    @Before
    public void setUp() {
        explorer = new FSPathExplorer();
        outContent = new ByteArrayOutputStream();
        errContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @Test
    public void testConstructor() {
        assertNotNull(explorer.out);
        assertNotNull(explorer.err);
        assertNotNull(explorer.prompt);
        assertEquals("fspath>", explorer.prompt.getPromptText());
    }

    @Test
    public void testShowWelcome() {
        FSPathExplorer.showWelcome();
        assertTrue(outContent.toString().contains("FSPathExplorer"));
    }

    @Test
    public void testShowHelp() {
        FSPathExplorer.showHelp();
        assertTrue(outContent.toString().contains("FSPathExplorer help"));
    }

    @Test
    public void testConfigureExplorer() {
        String[] args = {"-p", "/tmp", "-f", "//dir[@name='test']"};
        explorer.configureExplorer(args);
        assertEquals(new File("/tmp"), explorer.rootPath);
        assertEquals("//dir[@name='test']", explorer.fsPathQuery);
    }

    @Test
    public void testCreateFSPathWithRootPath() {
        explorer.rootPath = new File("/tmp");
        explorer.createFSPath();
        assertNotNull(explorer.fsPath);
        assertEquals("/tmp", explorer.fsPath.getRootDirectory().getAbsolutePath());
    }

    @Test
    public void testCreateFSPathWithoutRootPath() {
        explorer.createFSPath();
        assertNotNull(explorer.fsPath);
        assertNotNull(explorer.fsPath.getRootDirectory());
    }

    @Test
    public void testStartExitCommand() throws Exception {
        explorer.out = new PrintStream(outContent);
        explorer.prompt = new MockPrompt("exit");
        explorer.start();
        assertTrue(outContent.toString().contains("exiting....."));
    }

    @Test
    public void testStartPwdCommand() throws Exception {
        explorer.out = new PrintStream(outContent);
        explorer.prompt = new MockPrompt("pwd");
        explorer.fsPath = FSPathFactory.newFSPath(new File("/tmp"));
        explorer.start();
        assertTrue(outContent.toString().contains("Current directory : /tmp"));
    }

    @Test
    public void testStartCdCommand() throws Exception {
        explorer.out = new PrintStream(outContent);
        explorer.prompt = new MockPrompt("cd /tmp");
        explorer.start();
        assertTrue(outContent.toString().contains("changed to : /tmp"));
    }

    @Test
    public void testStartHelpCommand() throws Exception {
        explorer.out = new PrintStream(outContent);
        explorer.prompt = new MockPrompt("help");
        explorer.start();
        assertTrue(outContent.toString().contains("FSPathExplorer help"));
    }

    @Test
    public void testStartFSPathQuery() throws Exception {
        explorer.out = new PrintStream(outContent);
        explorer.prompt = new MockPrompt("//dir[@name='test']");
        explorer.fsPath = FSPathFactory.newFSPath(new File("/tmp"));
        explorer.start();
        // Assuming the query returns some results
        assertTrue(outContent.toString().contains("/tmp/test"));
    }

    private class MockPrompt extends Prompt {
        private String input;

        public MockPrompt(String input) {
            super(System.in, System.out, System.err);
            this.input = input;
        }

        @Override
        public String readLine() throws IOException {
            return input;
        }
    }
}
```