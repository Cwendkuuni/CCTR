```java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import java.util.Calendar;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class OracleIdentiteDaoTest {

    private OracleIdentiteDao dao;
    private EntityManagerFactory emf;
    private EntityManager em;
    private EntityTransaction tx;

    @Before
    public void setUp() {
        dao = new OracleIdentiteDao();
        emf = mock(EntityManagerFactory.class);
        em = mock(EntityManager.class);
        tx = mock(EntityTransaction.class);

        when(emf.createEntityManager()).thenReturn(em);
        when(em.getTransaction()).thenReturn(tx);
    }

    @After
    public void tearDown() {
        dao = null;
        emf = null;
        em = null;
        tx = null;
    }

    @Test
    public void testInsert() {
        Identite identite = mock(Identite.class);
        Calendar dateLimite = Calendar.getInstance();

        dao.insert(identite, "nomForm", dateLimite);

        verify(em).persist(identite);
        verify(tx).begin();
        verify(tx).commit();
    }

    @Test
    public void testInsertRollback() {
        Identite identite = mock(Identite.class);
        Calendar dateLimite = Calendar.getInstance();

        doThrow(new RuntimeException()).when(em).persist(identite);

        dao.insert(identite, "nomForm", dateLimite);

        verify(tx).begin();
        verify(tx).rollback();
    }

    @Test
    public void testUpdate() {
        Identite identite = mock(Identite.class);
        when(identite.getId()).thenReturn(1L);
        when(identite.getEmail()).thenReturn("test@example.com");
        when(identite.getNom()).thenReturn("Nom");
        when(identite.getPrenom()).thenReturn("Prenom");
        when(identite.getSex()).thenReturn("M");
        when(identite.getType()).thenReturn(Identite.TypeIdentite.CANDIDAT);

        when(em.find(Identite.class, 1L)).thenReturn(identite);

        dao.update(identite);

        verify(em).merge(identite);
        verify(tx).begin();
        verify(tx).commit();
    }

    @Test
    public void testUpdateRollback() {
        Identite identite = mock(Identite.class);
        when(identite.getId()).thenReturn(1L);

        doThrow(new RuntimeException()).when(em).merge(identite);

        dao.update(identite);

        verify(tx).begin();
        verify(tx).rollback();
    }

    @Test
    public void testDelete() {
        Identite identite = mock(Identite.class);
        when(identite.getId()).thenReturn(1L);

        when(em.find(Identite.class, 1L)).thenReturn(identite);

        dao.delete(identite);

        verify(em).remove(identite);
        verify(tx).begin();
        verify(tx).commit();
    }

    @Test
    public void testDeleteRollback() {
        Identite identite = mock(Identite.class);
        when(identite.getId()).thenReturn(1L);

        doThrow(new RuntimeException()).when(em).remove(identite);

        dao.delete(identite);

        verify(tx).begin();
        verify(tx).rollback();
    }

    @Test
    public void testFind() {
        List<Identite> identites = mock(List.class);
        when(em.createQuery(anyString()).getResultList()).thenReturn(identites);

        List<Identite> result = dao.find("Nom", "Prenom", "M", "test@example.com", Identite.TypeIdentite.CANDIDAT);

        assertEquals(identites, result);
    }

    @Test
    public void testFindCandidat() {
        List<Identite> identites = mock(List.class);
        when(em.createQuery(anyString()).getResultList()).thenReturn(identites);

        Candidat[] result = dao.findCandidat("Nom", "Prenom", "M", "test@example.com");

        assertNotNull(result);
    }

    @Test
    public void testFindRespForm() {
        List<Identite> identites = mock(List.class);
        when(em.createQuery(anyString()).getResultList()).thenReturn(identites);

        RespFormation[] result = dao.findRespForm("Nom", "Prenom", "M", "test@example.com");

        assertNotNull(result);
    }
}
```