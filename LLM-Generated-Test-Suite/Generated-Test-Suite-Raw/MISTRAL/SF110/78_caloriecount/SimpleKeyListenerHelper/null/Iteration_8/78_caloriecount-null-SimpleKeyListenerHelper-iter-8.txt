```java
package com.lts.event;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.Component;
import java.awt.event.KeyEvent;

public class SimpleKeyListenerHelperTest {

    private SimpleKeyListenerHelper helper;
    private Component component;

    @Before
    public void setUp() {
        component = new Component() {};
        helper = new SimpleKeyListenerHelper(component);
    }

    @After
    public void tearDown() {
        helper.detach();
    }

    @Test
    public void testConstructor() {
        assertNotNull(helper);
        assertSame(component, helper.getComponent());
    }

    @Test
    public void testDetach() {
        helper.detach();
        assertNull(helper.getComponent());
    }

    @Test
    public void testNotifyListener() {
        SimpleKeyListener mockListener = new SimpleKeyListener() {
            @Override
            public void enter(Component component) {
                // Mock implementation
            }

            @Override
            public void insert(Component component) {
                // Mock implementation
            }

            @Override
            public void delete(Component component) {
                // Mock implementation
            }

            @Override
            public void tab(Component component) {
                // Mock implementation
            }
        };

        helper.notifyListener(mockListener, 10, null);
        helper.notifyListener(mockListener, 155, null);
        helper.notifyListener(mockListener, 127, null);
        helper.notifyListener(mockListener, 9, null);
    }

    @Test
    public void testKeyPressed() {
        KeyEvent mockEvent = new KeyEvent(component, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_ENTER, ' ');
        helper.keyPressed(mockEvent);

        mockEvent = new KeyEvent(component, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_INSERT, ' ');
        helper.keyPressed(mockEvent);

        mockEvent = new KeyEvent(component, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_DELETE, ' ');
        helper.keyPressed(mockEvent);

        mockEvent = new KeyEvent(component, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_TAB, ' ');
        helper.keyPressed(mockEvent);
    }

    @Test
    public void testKeyReleased() {
        KeyEvent mockEvent = new KeyEvent(component, KeyEvent.KEY_RELEASED, System.currentTimeMillis(), 0, KeyEvent.VK_ENTER, ' ');
        helper.keyReleased(mockEvent);
    }

    @Test
    public void testKeyTyped() {
        KeyEvent mockEvent = new KeyEvent(component, KeyEvent.KEY_TYPED, System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, 'a');
        helper.keyTyped(mockEvent);
    }

    private Component getComponent() {
        return component;
    }
}
```

### Explanation:
1. **Setup and Teardown**:
   - `setUp()`: Initializes the `SimpleKeyListenerHelper` with a mock `Component`.
   - `tearDown()`: Detaches the listener to clean up.

2. **Constructor Test**:
   - `testConstructor()`: Verifies that the constructor initializes the helper correctly and attaches the listener to the component.

3. **Detach Test**:
   - `testDetach()`: Ensures that the `detach` method removes the listener and sets the component to `null`.

4. **Notify Listener Test**:
   - `testNotifyListener()`: Tests the `notifyListener` method by passing different event types and verifying that the corresponding listener methods are called.

5. **Key Event Tests**:
   - `testKeyPressed()`: Simulates key press events for different keys and verifies that the `fire` method is called.
   - `testKeyReleased()`: Simulates a key release event to ensure the method does not throw exceptions.
   - `testKeyTyped()`: Simulates a key typed event to ensure the method does not throw exceptions.

### Note:
- The `SimpleKeyListener` interface and its methods (`enter`, `insert`, `delete`, `tab`) are assumed to be part of the codebase.
- The `getComponent` method is a helper method to access the private `component` field for testing purposes. You might need to adjust this based on the actual implementation details of `SimpleKeyListenerHelper`.