```java
package com.lts.event;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.Component;
import java.awt.event.KeyEvent;

public class SimpleKeyListenerHelperTest {

    private SimpleKeyListenerHelper helper;
    private Component mockComponent;

    @Before
    public void setUp() {
        mockComponent = new Component() {};
        helper = new SimpleKeyListenerHelper(mockComponent);
    }

    @After
    public void tearDown() {
        helper.detach();
    }

    @Test
    public void testConstructor() {
        assertNotNull(helper);
        assertSame(mockComponent, helper.getComponent());
    }

    @Test
    public void testDetach() {
        helper.detach();
        assertNull(helper.getComponent());
    }

    @Test
    public void testNotifyListener() {
        SimpleKeyListener mockListener = new SimpleKeyListener() {
            @Override
            public void enter(Component component) {
                // Mock implementation
            }

            @Override
            public void insert(Component component) {
                // Mock implementation
            }

            @Override
            public void delete(Component component) {
                // Mock implementation
            }

            @Override
            public void tab(Component component) {
                // Mock implementation
            }
        };

        helper.notifyListener(mockListener, 10, null);
        helper.notifyListener(mockListener, 155, null);
        helper.notifyListener(mockListener, 127, null);
        helper.notifyListener(mockListener, 9, null);
    }

    @Test
    public void testKeyPressed() {
        KeyEvent mockEvent = new KeyEvent(mockComponent, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_ENTER, KeyEvent.CHAR_UNDEFINED);
        helper.keyPressed(mockEvent);

        mockEvent = new KeyEvent(mockComponent, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_INSERT, KeyEvent.CHAR_UNDEFINED);
        helper.keyPressed(mockEvent);

        mockEvent = new KeyEvent(mockComponent, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_DELETE, KeyEvent.CHAR_UNDEFINED);
        helper.keyPressed(mockEvent);

        mockEvent = new KeyEvent(mockComponent, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_TAB, KeyEvent.CHAR_UNDEFINED);
        helper.keyPressed(mockEvent);
    }

    @Test
    public void testKeyReleased() {
        KeyEvent mockEvent = new KeyEvent(mockComponent, KeyEvent.KEY_RELEASED, System.currentTimeMillis(), 0, KeyEvent.VK_ENTER, KeyEvent.CHAR_UNDEFINED);
        helper.keyReleased(mockEvent);
    }

    @Test
    public void testKeyTyped() {
        KeyEvent mockEvent = new KeyEvent(mockComponent, KeyEvent.KEY_TYPED, System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, 'a');
        helper.keyTyped(mockEvent);
    }

    private Component getComponent() {
        return mockComponent;
    }
}
```

Note:
1. The `SimpleKeyListener` interface and `ListenerHelper` class are assumed to be defined elsewhere in your codebase.
2. The `getComponent` method is assumed to exist in the `SimpleKeyListenerHelper` class for testing purposes. If it does not exist, you may need to add it or use reflection to access the private `component` field.
3. The test methods for `notifyListener`, `keyPressed`, `keyReleased`, and `keyTyped` are basic and may need to be expanded based on the actual behavior and requirements of your application.