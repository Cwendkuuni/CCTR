```java
package org.scribe.model;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ResponseTest {

    private HttpURLConnection mockConnection;
    private Response response;

    @Before
    public void setUp() throws IOException {
        mockConnection = Mockito.mock(HttpURLConnection.class);
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getInputStream()).thenReturn(new ByteArrayInputStream("Test Body".getBytes()));
        when(mockConnection.getErrorStream()).thenReturn(new ByteArrayInputStream("Error Body".getBytes()));

        Map<String, java.util.List<String>> headerFields = new HashMap<>();
        headerFields.put("Content-Type", java.util.Arrays.asList("application/json"));
        when(mockConnection.getHeaderFields()).thenReturn(headerFields);

        response = new Response(mockConnection);
    }

    @Test
    public void testGetBodySuccessful() throws IOException {
        assertEquals("Test Body", response.getBody());
    }

    @Test
    public void testGetBodyUnsuccessful() throws IOException {
        when(mockConnection.getResponseCode()).thenReturn(404);
        response = new Response(mockConnection);
        assertEquals("Error Body", response.getBody());
    }

    @Test
    public void testGetStreamSuccessful() throws IOException {
        InputStream stream = response.getStream();
        assertNotNull(stream);
        assertEquals("Test Body", new String(stream.readAllBytes()));
    }

    @Test
    public void testGetStreamUnsuccessful() throws IOException {
        when(mockConnection.getResponseCode()).thenReturn(404);
        response = new Response(mockConnection);
        InputStream stream = response.getStream();
        assertNotNull(stream);
        assertEquals("Error Body", new String(stream.readAllBytes()));
    }

    @Test
    public void testGetCode() throws IOException {
        assertEquals(200, response.getCode());
    }

    @Test
    public void testGetHeaders() throws IOException {
        Map<String, String> headers = response.getHeaders();
        assertNotNull(headers);
        assertEquals("application/json", headers.get("Content-Type"));
    }

    @Test
    public void testGetHeader() throws IOException {
        assertEquals("application/json", response.getHeader("Content-Type"));
    }

    @Test
    public void testUnknownHostException() throws IOException {
        doThrow(new UnknownHostException()).when(mockConnection).connect();
        response = new Response(mockConnection);
        assertEquals(404, response.getCode());
        assertEquals("", response.getBody());
    }

    @Test
    public void testWasSuccessful() throws IOException {
        assertTrue(response.wasSuccessful());

        when(mockConnection.getResponseCode()).thenReturn(404);
        response = new Response(mockConnection);
        assertFalse(response.wasSuccessful());
    }
}
```