```java
package org.scribe.model;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ResponseTest {

    private HttpURLConnection mockConnection;
    private Response response;

    @Before
    public void setUp() throws IOException {
        mockConnection = mock(HttpURLConnection.class);
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getInputStream()).thenReturn(new ByteArrayInputStream("Test Body".getBytes()));
        when(mockConnection.getErrorStream()).thenReturn(new ByteArrayInputStream("Error Body".getBytes()));

        Map<String, List<String>> headerFields = new HashMap<>();
        List<String> contentType = new ArrayList<>();
        contentType.add("application/json");
        headerFields.put("Content-Type", contentType);
        when(mockConnection.getHeaderFields()).thenReturn(headerFields);

        response = new Response(mockConnection);
    }

    @Test
    public void testConstructorSuccess() throws IOException {
        assertEquals(200, response.getCode());
        assertEquals("Test Body", response.getBody());
        assertNotNull(response.getStream());
        assertEquals("application/json", response.getHeader("Content-Type"));
    }

    @Test
    public void testConstructorFailure() throws IOException {
        when(mockConnection.getResponseCode()).thenThrow(new UnknownHostException());
        response = new Response(mockConnection);
        assertEquals(404, response.getCode());
        assertEquals("", response.getBody());
    }

    @Test
    public void testGetBody() {
        assertEquals("Test Body", response.getBody());
    }

    @Test
    public void testGetStream() {
        assertNotNull(response.getStream());
    }

    @Test
    public void testGetCode() {
        assertEquals(200, response.getCode());
    }

    @Test
    public void testGetHeaders() {
        Map<String, String> headers = response.getHeaders();
        assertNotNull(headers);
        assertEquals("application/json", headers.get("Content-Type"));
    }

    @Test
    public void testGetHeader() {
        assertEquals("application/json", response.getHeader("Content-Type"));
    }

    @Test
    public void testWasSuccessful() {
        assertTrue(response.wasSuccessful());
    }

    @Test
    public void testWasNotSuccessful() throws IOException {
        when(mockConnection.getResponseCode()).thenReturn(404);
        response = new Response(mockConnection);
        assertFalse(response.wasSuccessful());
    }

    @Test
    public void testParseBodyContents() {
        assertEquals("Test Body", response.getBody());
    }

    @Test
    public void testParseHeaders() throws IOException {
        Map<String, String> headers = response.getHeaders();
        assertNotNull(headers);
        assertEquals("application/json", headers.get("Content-Type"));
    }
}
```