```java
package lotus.core.phases;

import lotus.core.*;
import lotus.core.effect.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class PhaseTest {

    private Phase mockPhase;
    private Game mockGame;

    @Before
    public void setUp() {
        mockPhase = mock(Phase.class);
        mockGame = mock(Game.class);
        Game.currentPhase = mockPhase;
        Game.playingPlayer = 1;
    }

    @Test
    public void testNextPhaseFromUntapPhase() {
        when(mockPhase instanceof UntapPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(UpkeepPhase.class);
    }

    @Test
    public void testNextPhaseFromUpkeepPhase() {
        when(mockPhase instanceof UpkeepPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(DrawPhase.class);
    }

    @Test
    public void testNextPhaseFromDrawPhase() {
        when(mockPhase instanceof DrawPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(Main1Phase.class);
    }

    @Test
    public void testNextPhaseFromMain1Phase() {
        when(mockPhase instanceof Main1Phase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(CombatBeginningPhase.class);
    }

    @Test
    public void testNextPhaseFromCombatBeginningPhase() {
        when(mockPhase instanceof CombatBeginningPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(DeclareAttackersPhase.class);
    }

    @Test
    public void testNextPhaseFromDeclareAttackersPhase() {
        when(mockPhase instanceof DeclareAttackersPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(DeclareBlockersPhase.class);
    }

    @Test
    public void testNextPhaseFromDeclareBlockersPhase() {
        when(mockPhase instanceof DeclareBlockersPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(CombatDamagePhase.class);
    }

    @Test
    public void testNextPhaseFromCombatDamagePhase() {
        when(mockPhase instanceof CombatDamagePhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(CombatEndPhase.class);
    }

    @Test
    public void testNextPhaseFromCombatEndPhase() {
        when(mockPhase instanceof CombatEndPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(Main2Phase.class);
    }

    @Test
    public void testNextPhaseFromMain2Phase() {
        when(mockPhase instanceof Main2Phase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(EndOfTurnPhase.class);
    }

    @Test
    public void testNextPhaseFromEndOfTurnPhase() {
        when(mockPhase instanceof EndOfTurnPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(CleanupPhase.class);
    }

    @Test
    public void testNextPhaseFromCleanupPhase() {
        when(mockPhase instanceof CleanupPhase).thenReturn(true);
        Phase.nextPhase();
        verify(mockGame).currentPhase = any(PlayerChangePhase.class);
    }

    @Test
    public void testNextPhaseFromPlayerChangePhase() {
        when(mockPhase instanceof PlayerChangePhase).thenReturn(true);
        Phase.nextPhase();
        assertEquals(2, Game.playingPlayer);
        verify(mockGame).currentPhase = any(UntapPhase.class);
    }

    @Test
    public void testNextPhaseFromUnknownPhase() {
        when(mockPhase instanceof Phase).thenReturn(false);
        Phase.nextPhase();
        verify(mockGame, never()).currentPhase = any(Phase.class);
    }
}
```