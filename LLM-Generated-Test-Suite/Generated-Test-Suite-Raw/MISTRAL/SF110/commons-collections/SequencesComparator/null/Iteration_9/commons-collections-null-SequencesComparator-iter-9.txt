```java
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class SequencesComparatorTest {

    private List<Integer> sequence1;
    private List<Integer> sequence2;
    private SequencesComparator<Integer> comparator;

    @Before
    public void setUp() {
        sequence1 = Arrays.asList(1, 2, 3, 4, 5);
        sequence2 = Arrays.asList(2, 3, 4, 5, 6);
        comparator = new SequencesComparator<>(sequence1, sequence2);
    }

    @Test
    public void testConstructorWithDefaultEquator() {
        SequencesComparator<Integer> comparator = new SequencesComparator<>(sequence1, sequence2);
        assertNotNull(comparator);
        assertEquals(DefaultEquator.defaultEquator(), comparator.getEquator());
    }

    @Test
    public void testConstructorWithCustomEquator() {
        Equator<Integer> customEquator = new Equator<Integer>() {
            @Override
            public boolean equate(Integer o1, Integer o2) {
                return o1.equals(o2);
            }

            @Override
            public int hash(Integer o) {
                return o.hashCode();
            }
        };
        SequencesComparator<Integer> comparator = new SequencesComparator<>(sequence1, sequence2, customEquator);
        assertNotNull(comparator);
        assertEquals(customEquator, comparator.getEquator());
    }

    @Test
    public void testGetScript() {
        EditScript<Integer> script = comparator.getScript();
        assertNotNull(script);
        assertEquals(5, script.size());
    }

    @Test
    public void testGetScriptWithEmptySequences() {
        List<Integer> emptySequence1 = Arrays.asList();
        List<Integer> emptySequence2 = Arrays.asList();
        SequencesComparator<Integer> emptyComparator = new SequencesComparator<>(emptySequence1, emptySequence2);
        EditScript<Integer> script = emptyComparator.getScript();
        assertNotNull(script);
        assertEquals(0, script.size());
    }

    @Test
    public void testGetScriptWithIdenticalSequences() {
        List<Integer> identicalSequence1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> identicalSequence2 = Arrays.asList(1, 2, 3, 4, 5);
        SequencesComparator<Integer> identicalComparator = new SequencesComparator<>(identicalSequence1, identicalSequence2);
        EditScript<Integer> script = identicalComparator.getScript();
        assertNotNull(script);
        assertEquals(5, script.size());
    }

    @Test
    public void testGetScriptWithDifferentSequences() {
        List<Integer> differentSequence1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> differentSequence2 = Arrays.asList(6, 7, 8, 9, 10);
        SequencesComparator<Integer> differentComparator = new SequencesComparator<>(differentSequence1, differentSequence2);
        EditScript<Integer> script = differentComparator.getScript();
        assertNotNull(script);
        assertEquals(10, script.size());
    }

    @Test
    public void testGetScriptWithSubsetSequences() {
        List<Integer> subsetSequence1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> subsetSequence2 = Arrays.asList(3, 4, 5);
        SequencesComparator<Integer> subsetComparator = new SequencesComparator<>(subsetSequence1, subsetSequence2);
        EditScript<Integer> script = subsetComparator.getScript();
        assertNotNull(script);
        assertEquals(5, script.size());
    }

    @Test
    public void testGetScriptWithSupersetSequences() {
        List<Integer> supersetSequence1 = Arrays.asList(3, 4, 5);
        List<Integer> supersetSequence2 = Arrays.asList(1, 2, 3, 4, 5);
        SequencesComparator<Integer> supersetComparator = new SequencesComparator<>(supersetSequence1, supersetSequence2);
        EditScript<Integer> script = supersetComparator.getScript();
        assertNotNull(script);
        assertEquals(5, script.size());
    }

    @Test
    public void testGetScriptWithMixedSequences() {
        List<Integer> mixedSequence1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> mixedSequence2 = Arrays.asList(3, 4, 5, 6, 7);
        SequencesComparator<Integer> mixedComparator = new SequencesComparator<>(mixedSequence1, mixedSequence2);
        EditScript<Integer> script = mixedComparator.getScript();
        assertNotNull(script);
        assertEquals(7, script.size());
    }
}
```