```java
package org.apache.commons.collections4.sequence;

import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class SequencesComparatorTest {

    private List<Integer> sequence1;
    private List<Integer> sequence2;
    private Equator<Integer> equator;
    private SequencesComparator<Integer> comparator;

    @Before
    public void setUp() {
        sequence1 = Arrays.asList(1, 2, 3, 4, 5);
        sequence2 = Arrays.asList(2, 3, 4, 6, 7);
        equator = DefaultEquator.defaultEquator();
        comparator = new SequencesComparator<>(sequence1, sequence2, equator);
    }

    @Test
    public void testConstructorWithDefaultEquator() {
        SequencesComparator<Integer> comparator = new SequencesComparator<>(sequence1, sequence2);
        assertNotNull(comparator);
    }

    @Test
    public void testConstructorWithCustomEquator() {
        SequencesComparator<Integer> comparator = new SequencesComparator<>(sequence1, sequence2, equator);
        assertNotNull(comparator);
    }

    @Test
    public void testGetScript() {
        EditScript<Integer> script = comparator.getScript();
        assertNotNull(script);
        assertFalse(script.getCommands().isEmpty());
    }

    @Test
    public void testBuildSnake() {
        SequencesComparator<Integer>.Snake snake = comparator.buildSnake(0, 0, sequence1.size(), sequence2.size());
        assertNotNull(snake);
        assertEquals(0, snake.getStart());
        assertEquals(3, snake.getEnd());
        assertEquals(0, snake.getDiag());
    }

    @Test
    public void testGetMiddleSnake() {
        SequencesComparator<Integer>.Snake snake = comparator.getMiddleSnake(0, sequence1.size(), 0, sequence2.size());
        assertNotNull(snake);
        assertEquals(0, snake.getStart());
        assertEquals(3, snake.getEnd());
        assertEquals(0, snake.getDiag());
    }

    @Test
    public void testBuildScript() {
        EditScript<Integer> script = new EditScript<>();
        comparator.buildScript(0, sequence1.size(), 0, sequence2.size(), script);
        assertNotNull(script);
        assertFalse(script.getCommands().isEmpty());
    }

    @Test
    public void testSnakeClass() {
        SequencesComparator<Integer>.Snake snake = new SequencesComparator.Snake(0, 3, 0);
        assertEquals(0, snake.getStart());
        assertEquals(3, snake.getEnd());
        assertEquals(0, snake.getDiag());
    }
}
```