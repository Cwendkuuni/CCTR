```java
package org.apache.commons.collections4.sequence;

import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class SequencesComparatorTest {

    private List<String> sequence1;
    private List<String> sequence2;
    private SequencesComparator<String> comparator;

    @Before
    public void setUp() {
        sequence1 = Arrays.asList("a", "b", "c", "d");
        sequence2 = Arrays.asList("a", "c", "d", "e");
        comparator = new SequencesComparator<>(sequence1, sequence2);
    }

    @Test
    public void testConstructorWithDefaultEquator() {
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence2);
        assertNotNull(comparator);
        assertEquals(DefaultEquator.defaultEquator(), comparator.getEquator());
    }

    @Test
    public void testConstructorWithCustomEquator() {
        Equator<String> customEquator = (o1, o2) -> o1.equalsIgnoreCase(o2);
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence2, customEquator);
        assertNotNull(comparator);
        assertEquals(customEquator, comparator.getEquator());
    }

    @Test
    public void testGetScript() {
        EditScript<String> script = comparator.getScript();
        assertNotNull(script);
        assertEquals(5, script.size());
        assertEquals("a", script.get(0).getObject());
        assertEquals("b", script.get(1).getObject());
        assertEquals("c", script.get(2).getObject());
        assertEquals("d", script.get(3).getObject());
        assertEquals("e", script.get(4).getObject());
    }

    @Test
    public void testBuildSnake() {
        // This method is private and cannot be directly tested.
        // However, it is indirectly tested through the getScript method.
    }

    @Test
    public void testGetMiddleSnake() {
        // This method is private and cannot be directly tested.
        // However, it is indirectly tested through the getScript method.
    }

    @Test
    public void testBuildScript() {
        // This method is private and cannot be directly tested.
        // However, it is indirectly tested through the getScript method.
    }

    @Test
    public void testSnakeClass() {
        SequencesComparator<String>.Snake snake = new SequencesComparator<String>.Snake(1, 3, 2);
        assertEquals(1, snake.getStart());
        assertEquals(3, snake.getEnd());
        assertEquals(2, snake.getDiag());
    }

    // Additional tests can be added to cover more scenarios and edge cases.
}
```