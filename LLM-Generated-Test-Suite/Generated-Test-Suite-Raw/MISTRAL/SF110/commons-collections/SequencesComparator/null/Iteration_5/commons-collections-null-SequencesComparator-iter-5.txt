```java
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class SequencesComparatorTest {

    private List<Integer> sequence1;
    private List<Integer> sequence2;
    private SequencesComparator<Integer> comparator;

    @Before
    public void setUp() {
        sequence1 = Arrays.asList(1, 2, 3, 4, 5);
        sequence2 = Arrays.asList(2, 3, 4, 5, 6);
        comparator = new SequencesComparator<>(sequence1, sequence2);
    }

    @Test
    public void testConstructorWithDefaultEquator() {
        SequencesComparator<Integer> comparator = new SequencesComparator<>(sequence1, sequence2);
        assertNotNull(comparator);
        assertEquals(DefaultEquator.defaultEquator(), comparator.getEquator());
    }

    @Test
    public void testConstructorWithCustomEquator() {
        Equator<Integer> customEquator = new Equator<Integer>() {
            @Override
            public boolean equate(Integer o1, Integer o2) {
                return o1.equals(o2);
            }

            @Override
            public int hash(Integer o) {
                return o.hashCode();
            }
        };
        SequencesComparator<Integer> comparator = new SequencesComparator<>(sequence1, sequence2, customEquator);
        assertNotNull(comparator);
        assertEquals(customEquator, comparator.getEquator());
    }

    @Test
    public void testGetScript() {
        EditScript<Integer> script = comparator.getScript();
        assertNotNull(script);
        assertEquals(5, script.size());
    }

    @Test
    public void testBuildSnake() {
        // This method is private, so we can't test it directly.
        // Instead, we test the public method that uses it.
        EditScript<Integer> script = comparator.getScript();
        assertNotNull(script);
    }

    @Test
    public void testGetMiddleSnake() {
        // This method is private, so we can't test it directly.
        // Instead, we test the public method that uses it.
        EditScript<Integer> script = comparator.getScript();
        assertNotNull(script);
    }

    @Test
    public void testBuildScript() {
        // This method is private, so we can't test it directly.
        // Instead, we test the public method that uses it.
        EditScript<Integer> script = comparator.getScript();
        assertNotNull(script);
    }

    @Test
    public void testSnakeClass() {
        SequencesComparator<Integer>.Snake snake = new SequencesComparator<>(sequence1, sequence2).new Snake(1, 3, 2);
        assertEquals(1, snake.getStart());
        assertEquals(3, snake.getEnd());
        assertEquals(2, snake.getDiag());
    }

    // Additional tests can be added to cover more scenarios and edge cases.
}
```