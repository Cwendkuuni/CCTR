```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;

import net.sf.sugar.fspath.FSPath;
import net.sf.sugar.fspath.FSPathFactory;
import net.sf.sugar.fspath.FSPathResult;
import net.sf.sugar.fspath.FSPathResultList;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class FSPathExplorerTest {

    private FSPathExplorer explorer;
    private ByteArrayOutputStream outContent;
    private ByteArrayOutputStream errContent;
    private PrintStream originalOut;
    private PrintStream originalErr;

    @Before
    public void setUp() {
        explorer = new FSPathExplorer();
        outContent = new ByteArrayOutputStream();
        errContent = new ByteArrayOutputStream();
        originalOut = System.out;
        originalErr = System.err;
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void tearDown() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    public void testShowWelcome() {
        FSPathExplorer.showWelcome();
        String output = outContent.toString();
        assertTrue(output.contains("FSPathExplorer"));
        assertTrue(output.contains("Type 'help' for commands..."));
    }

    @Test
    public void testShowHelp() {
        FSPathExplorer.showHelp();
        String output = outContent.toString();
        assertTrue(output.contains("FSPathExplorer help :"));
        assertTrue(output.contains("Examples :"));
        assertTrue(output.contains("Attributes :"));
        assertTrue(output.contains("Commands :"));
    }

    @Test
    public void testConfigureExplorerWithPathAndQuery() {
        String[] args = {"-path", "/some/path", "-find", "//dir[@name='foo']"};
        explorer.configureExplorer(args);
        assertEquals(new File("/some/path"), explorer.rootPath);
        assertEquals("//dir[@name='foo']", explorer.fsPathQuery);
    }

    @Test
    public void testConfigureExplorerWithOnlyQuery() {
        String[] args = {"-find", "//dir[@name='foo']"};
        explorer.configureExplorer(args);
        assertNull(explorer.rootPath);
        assertEquals("//dir[@name='foo']", explorer.fsPathQuery);
    }

    @Test
    public void testCreateFSPathWithRootPath() {
        explorer.rootPath = new File("/some/path");
        explorer.createFSPath();
        assertNotNull(explorer.fsPath);
    }

    @Test
    public void testCreateFSPathWithoutRootPath() {
        explorer.createFSPath();
        assertNotNull(explorer.fsPath);
    }

    @Test
    public void testStartWithExitCommand() throws IOException {
        String input = "exit\n";
        System.setIn(new ByteArrayInputStream(input.getBytes()));
        explorer.start();
        String output = outContent.toString();
        assertTrue(output.contains("exiting....."));
    }

    @Test
    public void testStartWithPwdCommand() throws IOException {
        FSPath mockFSPath = mock(FSPath.class);
        when(mockFSPath.getRootDirectory()).thenReturn(new File("/current/directory"));
        explorer.fsPath = mockFSPath;

        String input = "pwd\nexit\n";
        System.setIn(new ByteArrayInputStream(input.getBytes()));
        explorer.start();
        String output = outContent.toString();
        assertTrue(output.contains("Current directory : /current/directory"));
    }

    @Test
    public void testStartWithCdCommand() throws IOException {
        String input = "cd /new/directory\nexit\n";
        System.setIn(new ByteArrayInputStream(input.getBytes()));
        explorer.start();
        String output = outContent.toString();
        assertTrue(output.contains("unable to change to /new/directory"));
    }

    @Test
    public void testStartWithHelpCommand() throws IOException {
        String input = "help\nexit\n";
        System.setIn(new ByteArrayInputStream(input.getBytes()));
        explorer.start();
        String output = outContent.toString();
        assertTrue(output.contains("FSPathExplorer help :"));
    }

    @Test
    public void testStartWithFSPathQuery() throws IOException {
        FSPath mockFSPath = mock(FSPath.class);
        FSPathResultList mockResultList = mock(FSPathResultList.class);
        FSPathResult mockResult = mock(FSPathResult.class);
        when(mockResult.getFile()).thenReturn(new File("/some/file"));
        when(mockResultList.iterator()).thenReturn(java.util.Collections.singletonList(mockResult).iterator());
        when(mockFSPath.query(anyString())).thenReturn(mockResultList);
        explorer.fsPath = mockFSPath;

        String input = "//dir[@name='foo']\nexit\n";
        System.setIn(new ByteArrayInputStream(input.getBytes()));
        explorer.start();
        String output = outContent.toString();
        assertTrue(output.contains("/some/file"));
    }
}
```