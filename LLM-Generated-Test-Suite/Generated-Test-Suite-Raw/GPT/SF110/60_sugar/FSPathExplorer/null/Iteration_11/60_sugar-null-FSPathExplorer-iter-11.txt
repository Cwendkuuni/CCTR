```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;

import net.sf.sugar.fspath.FSPath;
import net.sf.sugar.fspath.FSPathFactory;
import net.sf.sugar.fspath.FSPathResult;
import net.sf.sugar.fspath.FSPathResultList;
import org.junit.Before;
import org.junit.Test;

public class FSPathExplorerTest {

    private FSPathExplorer explorer;
    private PrintStream mockOut;
    private PrintStream mockErr;
    private Prompt mockPrompt;
    private FSPath mockFSPath;

    @Before
    public void setUp() {
        mockOut = mock(PrintStream.class);
        mockErr = mock(PrintStream.class);
        mockPrompt = mock(Prompt.class);
        mockFSPath = mock(FSPath.class);

        explorer = new FSPathExplorer();
        explorer.out = mockOut;
        explorer.err = mockErr;
        explorer.prompt = mockPrompt;
        explorer.fsPath = mockFSPath;
    }

    @Test
    public void testConfigureExplorerWithPathAndQuery() {
        String[] args = {"-path", "/some/path", "-find", "//dir[@name='foo']"};
        explorer.configureExplorer(args);

        assertEquals(new File("/some/path"), explorer.rootPath);
        assertEquals("//dir[@name='foo']", explorer.fsPathQuery);
    }

    @Test
    public void testConfigureExplorerWithOnlyQuery() {
        String[] args = {"-find", "//dir[@name='foo']"};
        explorer.configureExplorer(args);

        assertNull(explorer.rootPath);
        assertEquals("//dir[@name='foo']", explorer.fsPathQuery);
    }

    @Test
    public void testCreateFSPathWithRootPath() {
        explorer.rootPath = new File("/some/path");
        explorer.createFSPath();

        assertNotNull(explorer.fsPath);
    }

    @Test
    public void testCreateFSPathWithoutRootPath() {
        explorer.rootPath = null;
        explorer.createFSPath();

        assertNotNull(explorer.fsPath);
    }

    @Test
    public void testStartWithExitCommand() throws IOException {
        when(mockPrompt.readLine()).thenReturn("exit");

        explorer.start();

        verify(mockOut).println("exiting.....");
    }

    @Test
    public void testStartWithPwdCommand() throws IOException {
        when(mockPrompt.readLine()).thenReturn("pwd");
        when(mockFSPath.getRootDirectory()).thenReturn(new File("/current/directory"));

        explorer.start();

        verify(mockOut).println("Current directory : /current/directory");
    }

    @Test
    public void testStartWithCdCommand() throws IOException {
        when(mockPrompt.readLine()).thenReturn("cd /new/directory");
        File mockNewDir = mock(File.class);
        when(mockNewDir.exists()).thenReturn(true);
        when(mockNewDir.isDirectory()).thenReturn(true);
        when(mockNewDir.canRead()).thenReturn(true);
        when(mockNewDir.getAbsolutePath()).thenReturn("/new/directory");
        whenNew(File.class).withArguments("/new/directory").thenReturn(mockNewDir);

        explorer.start();

        verify(mockOut).println("changed to : /new/directory");
    }

    @Test
    public void testStartWithHelpCommand() throws IOException {
        when(mockPrompt.readLine()).thenReturn("help");

        explorer.start();

        verify(mockOut, atLeastOnce()).println(anyString());
    }

    @Test
    public void testStartWithFSPathQuery() throws IOException {
        when(mockPrompt.readLine()).thenReturn("//dir[@name='foo']");
        FSPathResultList mockResults = mock(FSPathResultList.class);
        when(mockFSPath.query("//dir[@name='foo']")).thenReturn(mockResults);
        FSPathResult mockResult = mock(FSPathResult.class);
        when(mockResults.iterator()).thenReturn(Arrays.asList(mockResult).iterator());
        when(mockResult.getFile()).thenReturn(new File("/some/path/foo"));

        explorer.start();

        verify(mockOut).println("/some/path/foo");
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `FSPathExplorer` class. It covers the main functionalities of the class, including configuration, command execution, and FSPath query handling. Note that some parts of the code, such as file creation and command execution, are mocked to isolate the unit tests from the file system and other dependencies.