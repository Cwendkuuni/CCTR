Certainly! Below is a JUnit 4 test suite for the `Memory` class. This suite tests the various methods of the class to ensure they function as expected.

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import weka.core.Memory;

public class MemoryTest {

    private Memory memory;

    @Before
    public void setUp() {
        memory = new Memory();
    }

    @Test
    public void testIsEnabled() {
        assertTrue(memory.isEnabled());
        memory.setEnabled(false);
        assertFalse(memory.isEnabled());
    }

    @Test
    public void testSetEnabled() {
        memory.setEnabled(false);
        assertFalse(memory.isEnabled());
        memory.setEnabled(true);
        assertTrue(memory.isEnabled());
    }

    @Test
    public void testGetUseGUI() {
        Memory memoryWithGUI = new Memory(true);
        assertTrue(memoryWithGUI.getUseGUI());
        assertFalse(memory.getUseGUI());
    }

    @Test
    public void testGetInitial() {
        assertEquals(Runtime.getRuntime().totalMemory(), memory.getInitial());
    }

    @Test
    public void testGetCurrent() {
        long currentMemory = Runtime.getRuntime().totalMemory();
        assertEquals(currentMemory, memory.getCurrent());
    }

    @Test
    public void testGetMax() {
        long maxMemory = Runtime.getRuntime().maxMemory();
        assertEquals(maxMemory, memory.getMax());
    }

    @Test
    public void testIsOutOfMemory() {
        memory.setEnabled(true);
        Memory.m_Initial = memory.getMax() - 100000L;
        assertTrue(memory.isOutOfMemory());
        Memory.m_Initial = 0;
        assertFalse(memory.isOutOfMemory());
    }

    @Test
    public void testToMegaByte() {
        assertEquals(1.0, Memory.toMegaByte(1048576L), 0.0001);
        assertEquals(0.5, Memory.toMegaByte(524288L), 0.0001);
    }

    @Test
    public void testShowOutOfMemory() {
        // This test is tricky because it involves GUI and System.err output.
        // We can test it by ensuring no exceptions are thrown.
        memory.setEnabled(true);
        memory.showOutOfMemory();
    }

    @Test
    public void testStopThreads() {
        // This test is difficult to implement correctly because it involves stopping threads.
        // We can test it by ensuring no exceptions are thrown.
        memory.stopThreads();
    }

    @Test
    public void testGetRevision() {
        assertNotNull(memory.getRevision());
    }
}
```

### Explanation:
- **setUp Method**: Initializes a `Memory` object before each test.
- **Test Methods**: Each method tests a specific functionality of the `Memory` class.
- **Assertions**: Used to verify expected outcomes.
- **Complex Methods**: For methods like `showOutOfMemory` and `stopThreads`, the tests ensure no exceptions are thrown, as their effects are not easily verifiable in a unit test.

This test suite covers the basic functionality of the `Memory` class. Note that some methods, especially those involving GUI or system resources, are challenging to test thoroughly in a unit test environment.