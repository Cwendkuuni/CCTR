Certainly! Below is a JUnit 4 test suite for the `Memory` class. This suite aims to cover the functionality of each method in the class.

```java
import org.junit.Before;
import org.junit.Test;
import weka.core.Memory;

import static org.junit.Assert.*;

public class MemoryTest {

    private Memory memory;

    @Before
    public void setUp() {
        memory = new Memory();
    }

    @Test
    public void testIsEnabled() {
        assertTrue(memory.isEnabled());
        memory.setEnabled(false);
        assertFalse(memory.isEnabled());
    }

    @Test
    public void testSetEnabled() {
        memory.setEnabled(false);
        assertFalse(memory.isEnabled());
        memory.setEnabled(true);
        assertTrue(memory.isEnabled());
    }

    @Test
    public void testGetUseGUI() {
        Memory memoryWithGUI = new Memory(true);
        assertTrue(memoryWithGUI.getUseGUI());
        assertFalse(memory.getUseGUI());
    }

    @Test
    public void testGetInitial() {
        assertEquals(Runtime.getRuntime().totalMemory(), memory.getInitial());
    }

    @Test
    public void testGetCurrent() {
        long currentMemory = Runtime.getRuntime().totalMemory();
        assertEquals(currentMemory, memory.getCurrent());
    }

    @Test
    public void testGetMax() {
        long maxMemory = Runtime.getRuntime().maxMemory();
        assertEquals(maxMemory, memory.getMax());
    }

    @Test
    public void testIsOutOfMemory() {
        memory.setEnabled(true);
        Memory.m_Initial = memory.getMax() - 100000L;
        assertTrue(memory.isOutOfMemory());

        Memory.m_Initial = memory.getMax() - 300000L;
        assertFalse(memory.isOutOfMemory());
    }

    @Test
    public void testToMegaByte() {
        assertEquals(1.0, Memory.toMegaByte(1048576L), 0.0001);
        assertEquals(0.5, Memory.toMegaByte(524288L), 0.0001);
    }

    @Test
    public void testShowOutOfMemory() {
        memory.setEnabled(true);
        Memory.m_Initial = memory.getMax() - 100000L;
        memory.showOutOfMemory(); // This will print to System.err and possibly show a dialog if GUI is enabled
    }

    @Test
    public void testStopThreads() {
        // This is a tricky method to test due to its nature of stopping threads.
        // We will just call it to ensure no exceptions are thrown.
        memory.stopThreads();
    }

    @Test
    public void testGetRevision() {
        assertNotNull(memory.getRevision());
    }
}
```

### Notes:
- The `testShowOutOfMemory` method will print a message to `System.err` and may show a dialog if GUI is enabled. This is not ideal for automated testing, but it ensures the method runs without exceptions.
- The `testStopThreads` method is difficult to test thoroughly due to its nature of stopping threads. The test ensures that calling the method does not throw exceptions.
- The `Memory` class uses static fields (`m_Enabled` and `m_Initial`), which can lead to test interference if tests are run in parallel or in a different order. This is a limitation of the class design.