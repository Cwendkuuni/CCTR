Certainly! Below is a JUnit 4 test suite for the `XMLEncoder` class. This suite aims to cover various scenarios for each method in the class.

```java
import org.junit.Before;
import org.junit.Test;
import org.znerd.xmlenc.XMLEncoder;

import java.io.IOException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;

import static org.junit.Assert.*;

public class XMLEncoderTest {

    private XMLEncoder utf8Encoder;
    private XMLEncoder asciiEncoder;

    @Before
    public void setUp() throws UnsupportedEncodingException {
        utf8Encoder = XMLEncoder.getEncoder("UTF-8");
        asciiEncoder = XMLEncoder.getEncoder("US-ASCII");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetEncoderWithNullEncoding() throws UnsupportedEncodingException {
        XMLEncoder.getEncoder(null);
    }

    @Test(expected = UnsupportedEncodingException.class)
    public void testGetEncoderWithUnsupportedEncoding() throws UnsupportedEncodingException {
        XMLEncoder.getEncoder("UNSUPPORTED");
    }

    @Test
    public void testGetEncoding() {
        assertEquals("UTF-8", utf8Encoder.getEncoding());
        assertEquals("US-ASCII", asciiEncoder.getEncoding());
    }

    @Test
    public void testDeclaration() throws IOException {
        StringWriter writer = new StringWriter();
        utf8Encoder.declaration(writer);
        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", writer.toString());
    }

    @Test
    public void testTextWithEscapeAmpersands() throws IOException, InvalidXMLException {
        StringWriter writer = new StringWriter();
        utf8Encoder.text(writer, "Hello & World", true);
        assertEquals("Hello &amp; World", writer.toString());
    }

    @Test
    public void testTextWithoutEscapeAmpersands() throws IOException, InvalidXMLException {
        StringWriter writer = new StringWriter();
        utf8Encoder.text(writer, "Hello & World", false);
        assertEquals("Hello & World", writer.toString());
    }

    @Test(expected = InvalidXMLException.class)
    public void testTextWithInvalidCharacter() throws IOException, InvalidXMLException {
        StringWriter writer = new StringWriter();
        asciiEncoder.text(writer, "\u007f", false);
    }

    @Test
    public void testTextWithValidCharacter() throws IOException, InvalidXMLException {
        StringWriter writer = new StringWriter();
        utf8Encoder.text(writer, '<');
        assertEquals("&lt;", writer.toString());
    }

    @Test
    public void testWhitespace() throws IOException, InvalidXMLException {
        StringWriter writer = new StringWriter();
        utf8Encoder.whitespace(writer, "   ");
        assertEquals("   ", writer.toString());
    }

    @Test
    public void testAttributeWithQuote() throws IOException {
        StringWriter writer = new StringWriter();
        utf8Encoder.attribute(writer, "name", "value", '"', true);
        assertEquals(" name=\"value\"", writer.toString());
    }

    @Test
    public void testAttributeWithApostrophe() throws IOException {
        StringWriter writer = new StringWriter();
        utf8Encoder.attribute(writer, "name", "value", '\'', true);
        assertEquals(" name='value'", writer.toString());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAttributeWithInvalidQuotationMark() throws IOException {
        StringWriter writer = new StringWriter();
        utf8Encoder.attribute(writer, "name", "value", 'x', true);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes two `XMLEncoder` instances, one for UTF-8 and another for US-ASCII.
- **Tests for `getEncoder`**: These tests check for null and unsupported encodings.
- **Tests for `getEncoding`**: Verifies that the encoding returned matches the expected value.
- **Tests for `declaration`**: Ensures the XML declaration is correctly written.
- **Tests for `text`**: Covers scenarios with and without escaping ampersands, and checks for invalid characters.
- **Tests for `whitespace`**: Validates that whitespace is correctly written.
- **Tests for `attribute`**: Checks attribute writing with both quote and apostrophe, and tests for invalid quotation marks.

This suite should provide a comprehensive test coverage for the `XMLEncoder` class.