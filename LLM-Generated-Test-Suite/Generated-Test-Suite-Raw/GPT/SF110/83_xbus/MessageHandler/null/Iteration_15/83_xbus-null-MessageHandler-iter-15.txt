```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.*;

@RunWith(JUnit4.class)
public class MessageHandlerTest {

    private MessageHandler messageHandler;
    private static final String BASENAME = "testMessages";

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance(BASENAME);
    }

    @Test
    public void testGetMessageWithExistingKey() {
        // Assuming the message file contains a key "greeting" with value "Hello, $1$!"
        List<String> params = new ArrayList<>();
        params.add("World");
        String result = messageHandler.getMessage("greeting", params);
        assertEquals("Hello, World!", result);
    }

    @Test
    public void testGetMessageWithNonExistingKey() {
        String result = messageHandler.getMessage("nonExistingKey", null);
        assertEquals("Key: nonExistingKey not found in message file", result);
    }

    @Test
    public void testGetMessageOptionalWithExistingKey() {
        // Assuming the message file contains a key "farewell" with value "Goodbye, $1$!"
        List<String> params = new ArrayList<>();
        params.add("Friend");
        String result = messageHandler.getMessageOptional("farewell", params);
        assertEquals("Goodbye, Friend!", result);
    }

    @Test
    public void testGetMessageOptionalWithNonExistingKey() {
        String result = messageHandler.getMessageOptional("nonExistingKey", null);
        assertNull(result);
    }

    @Test
    public void testGetMessageOptionalWithNullParams() {
        // Assuming the message file contains a key "simpleMessage" with value "Hello!"
        String result = messageHandler.getMessageOptional("simpleMessage", null);
        assertEquals("Hello!", result);
    }

    @Test
    public void testGetInstanceReturnsSameInstance() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance(BASENAME);
        assertSame(instance1, instance2);
    }

    @Test
    public void testGetInstanceWithDifferentBasename() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance("anotherBasename");
        assertNotSame(instance1, instance2);
    }
}
```

### Explanation:

1. **Setup**: The `setUp` method initializes a `MessageHandler` instance using a test basename. This is done before each test to ensure a fresh state.

2. **Test Methods**:
   - **`testGetMessageWithExistingKey`**: Tests `getMessage` with a key that exists in the message file, ensuring parameters are replaced correctly.
   - **`testGetMessageWithNonExistingKey`**: Tests `getMessage` with a non-existing key, expecting a specific error message.
   - **`testGetMessageOptionalWithExistingKey`**: Similar to the first test but for `getMessageOptional`.
   - **`testGetMessageOptionalWithNonExistingKey`**: Tests `getMessageOptional` with a non-existing key, expecting a `null` result.
   - **`testGetMessageOptionalWithNullParams`**: Tests `getMessageOptional` with a key that doesn't require parameters.
   - **`testGetInstanceReturnsSameInstance`**: Ensures that calling `getInstance` with the same basename returns the same instance.
   - **`testGetInstanceWithDifferentBasename`**: Ensures that calling `getInstance` with different basenames returns different instances.

### Note:
- The test assumes the existence of certain keys in the message files. You may need to adjust the test cases based on the actual content of your message files.
- The `MessageHandler` class relies on external files and configurations, which are not provided. The test suite assumes these dependencies are correctly set up in the test environment.