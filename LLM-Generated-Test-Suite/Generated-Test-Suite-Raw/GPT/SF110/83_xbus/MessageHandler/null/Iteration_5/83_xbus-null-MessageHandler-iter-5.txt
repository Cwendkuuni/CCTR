```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.*;

@RunWith(JUnit4.class)
public class MessageHandlerTest {

    private MessageHandler messageHandler;
    private static final String BASENAME = "testMessages";

    @Before
    public void setUp() {
        // Initialize the MessageHandler instance
        messageHandler = MessageHandler.getInstance(BASENAME);
    }

    @Test
    public void testGetMessageWithExistingKey() {
        // Assuming the message file contains a key "greeting" with value "Hello, $1$!"
        List<String> params = new ArrayList<>();
        params.add("World");
        String result = messageHandler.getMessage("greeting", params);
        assertEquals("Hello, World!", result);
    }

    @Test
    public void testGetMessageWithNonExistingKey() {
        List<String> params = new ArrayList<>();
        String result = messageHandler.getMessage("nonExistingKey", params);
        assertEquals("Key: nonExistingKey not found in message file", result);
    }

    @Test
    public void testGetMessageOptionalWithExistingKey() {
        // Assuming the message file contains a key "farewell" with value "Goodbye, $1$!"
        List<String> params = new ArrayList<>();
        params.add("Friend");
        String result = messageHandler.getMessageOptional("farewell", params);
        assertEquals("Goodbye, Friend!", result);
    }

    @Test
    public void testGetMessageOptionalWithNonExistingKey() {
        List<String> params = new ArrayList<>();
        String result = messageHandler.getMessageOptional("nonExistingKey", params);
        assertNull(result);
    }

    @Test
    public void testGetMessageOptionalWithNullParams() {
        // Assuming the message file contains a key "simple" with value "Simple message"
        String result = messageHandler.getMessageOptional("simple", null);
        assertEquals("Simple message", result);
    }

    @Test
    public void testGetInstanceReturnsSameInstance() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance(BASENAME);
        assertSame(instance1, instance2);
    }

    @Test
    public void testGetInstanceWithDifferentBasename() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance("anotherBasename");
        assertNotSame(instance1, instance2);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `MessageHandler` instance using a test basename.
- **Test Methods**: Each test method checks a specific functionality of the `MessageHandler` class:
  - `testGetMessageWithExistingKey`: Tests retrieval of a message with parameters.
  - `testGetMessageWithNonExistingKey`: Tests retrieval of a non-existing message key.
  - `testGetMessageOptionalWithExistingKey`: Tests optional message retrieval with parameters.
  - `testGetMessageOptionalWithNonExistingKey`: Tests optional message retrieval for a non-existing key.
  - `testGetMessageOptionalWithNullParams`: Tests message retrieval with null parameters.
  - `testGetInstanceReturnsSameInstance`: Ensures `getInstance` returns the same instance for the same basename.
  - `testGetInstanceWithDifferentBasename`: Ensures `getInstance` returns different instances for different basenames.

### Note:
- The test assumes certain keys and values exist in the message files. You may need to adjust these based on the actual content of your message files.
- The `MessageHandler` class relies on external files and configurations, which are not provided. Ensure these dependencies are correctly set up in your test environment.