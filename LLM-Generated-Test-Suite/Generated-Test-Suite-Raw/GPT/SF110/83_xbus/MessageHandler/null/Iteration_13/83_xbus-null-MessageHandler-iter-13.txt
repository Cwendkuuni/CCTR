```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;

    @Before
    public void setUp() {
        // Assuming "testBase" is a valid basename for testing purposes
        messageHandler = MessageHandler.getInstance("testBase");
    }

    @Test
    public void testGetMessageWithExistingKey() {
        // Assuming "existingKey" is a key present in the message files
        String key = "existingKey";
        List<String> params = Arrays.asList("param1", "param2");
        String expectedMessage = "Message with param1 and param2"; // Expected message format
        String actualMessage = messageHandler.getMessage(key, params);
        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetMessageWithNonExistingKey() {
        String key = "nonExistingKey";
        List<String> params = Arrays.asList("param1", "param2");
        String expectedMessage = "Key: nonExistingKey not found in message file";
        String actualMessage = messageHandler.getMessage(key, params);
        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetMessageOptionalWithExistingKey() {
        // Assuming "existingKey" is a key present in the message files
        String key = "existingKey";
        List<String> params = Arrays.asList("param1", "param2");
        String expectedMessage = "Message with param1 and param2"; // Expected message format
        String actualMessage = messageHandler.getMessageOptional(key, params);
        assertEquals(expectedMessage, actualMessage);
    }

    @Test
    public void testGetMessageOptionalWithNonExistingKey() {
        String key = "nonExistingKey";
        List<String> params = Arrays.asList("param1", "param2");
        String actualMessage = messageHandler.getMessageOptional(key, params);
        assertNull(actualMessage);
    }

    @Test
    public void testGetMessageOptionalWithNullMessages() {
        // Simulate null mMessages
        messageHandler = new MessageHandler("emptyBase");
        String key = "anyKey";
        List<String> params = Arrays.asList("param1", "param2");
        String actualMessage = messageHandler.getMessageOptional(key, params);
        assertNull(actualMessage);
    }

    @Test
    public void testGetInstanceWithSameBasename() {
        MessageHandler instance1 = MessageHandler.getInstance("testBase");
        MessageHandler instance2 = MessageHandler.getInstance("testBase");
        assertSame(instance1, instance2);
    }

    @Test
    public void testGetInstanceWithDifferentBasename() {
        MessageHandler instance1 = MessageHandler.getInstance("testBase1");
        MessageHandler instance2 = MessageHandler.getInstance("testBase2");
        assertNotSame(instance1, instance2);
    }
}
```

### Notes:
- The test suite assumes that there are message files available for the `testBase` basename and that they contain certain keys like `existingKey` for testing purposes.
- The `expectedMessage` strings in the tests should be adjusted to match the actual format of the messages in your properties files.
- The `setUp` method initializes the `MessageHandler` instance before each test.
- The `testGetInstanceWithSameBasename` and `testGetInstanceWithDifferentBasename` tests check the singleton behavior of the `getInstance` method.
- The `testGetMessageOptionalWithNullMessages` simulates a scenario where `mMessages` is null by creating a new `MessageHandler` with a basename that doesn't load any messages.