```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.After;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;
    private static final String BASENAME = "testMessages";

    @Before
    public void setUp() {
        // Initialize the MessageHandler instance
        messageHandler = MessageHandler.getInstance(BASENAME);
    }

    @After
    public void tearDown() {
        // Clean up after each test if necessary
    }

    @Test
    public void testGetMessageWithExistingKey() {
        // Assuming the message file contains a key "greeting" with value "Hello, $1$!"
        List<String> params = new ArrayList<>();
        params.add("World");
        String result = messageHandler.getMessage("greeting", params);
        assertEquals("Hello, World!", result);
    }

    @Test
    public void testGetMessageWithNonExistingKey() {
        List<String> params = new ArrayList<>();
        String result = messageHandler.getMessage("nonExistingKey", params);
        assertEquals("Key: nonExistingKey not found in message file", result);
    }

    @Test
    public void testGetMessageOptionalWithExistingKey() {
        // Assuming the message file contains a key "farewell" with value "Goodbye, $1$!"
        List<String> params = new ArrayList<>();
        params.add("Friend");
        String result = messageHandler.getMessageOptional("farewell", params);
        assertEquals("Goodbye, Friend!", result);
    }

    @Test
    public void testGetMessageOptionalWithNonExistingKey() {
        List<String> params = new ArrayList<>();
        String result = messageHandler.getMessageOptional("nonExistingKey", params);
        assertNull(result);
    }

    @Test
    public void testGetMessageOptionalWithNullParams() {
        // Assuming the message file contains a key "simpleMessage" with value "Hello!"
        String result = messageHandler.getMessageOptional("simpleMessage", null);
        assertEquals("Hello!", result);
    }

    @Test
    public void testGetInstance() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance(BASENAME);
        assertSame(instance1, instance2);
    }

    @Test
    public void testAddMessages() {
        // This is a private method, so we can't test it directly.
        // However, we can indirectly test it by checking if messages are loaded correctly.
        List<String> params = new ArrayList<>();
        params.add("Tester");
        String result = messageHandler.getMessage("welcome", params);
        assertEquals("Welcome, Tester!", result);
    }
}
```

### Notes:
- The test suite assumes that there are message files available with specific keys and values. You may need to adjust the test cases based on the actual content of your message files.
- The `addMessages` method is private, so it cannot be tested directly. Instead, its functionality is indirectly tested by verifying that messages are loaded correctly.
- The `getInstance` method is tested to ensure that it returns the same instance for the same basename, confirming the singleton behavior.
- The `tearDown` method is included for completeness, but it is currently empty. You can add cleanup code if necessary.