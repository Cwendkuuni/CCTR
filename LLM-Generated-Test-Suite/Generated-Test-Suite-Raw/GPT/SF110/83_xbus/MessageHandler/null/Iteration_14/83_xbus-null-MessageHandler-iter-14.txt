```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.After;
import java.util.*;

public class MessageHandlerTest {

    private MessageHandler messageHandler;
    private static final String BASENAME = "testMessages";

    @Before
    public void setUp() {
        // Initialize the MessageHandler instance
        messageHandler = MessageHandler.getInstance(BASENAME);
    }

    @Test
    public void testGetMessageWithExistingKey() {
        // Assuming the message file contains a key "greeting" with value "Hello, $1$!"
        List<String> params = new ArrayList<>();
        params.add("World");
        String result = messageHandler.getMessage("greeting", params);
        assertEquals("Hello, World!", result);
    }

    @Test
    public void testGetMessageWithNonExistingKey() {
        List<String> params = new ArrayList<>();
        String result = messageHandler.getMessage("nonExistingKey", params);
        assertEquals("Key: nonExistingKey not found in message file", result);
    }

    @Test
    public void testGetMessageOptionalWithExistingKey() {
        // Assuming the message file contains a key "farewell" with value "Goodbye, $1$!"
        List<String> params = new ArrayList<>();
        params.add("Friend");
        String result = messageHandler.getMessageOptional("farewell", params);
        assertEquals("Goodbye, Friend!", result);
    }

    @Test
    public void testGetMessageOptionalWithNonExistingKey() {
        List<String> params = new ArrayList<>();
        String result = messageHandler.getMessageOptional("nonExistingKey", params);
        assertNull(result);
    }

    @Test
    public void testGetMessageOptionalWithNullParams() {
        // Assuming the message file contains a key "simple" with value "Simple message"
        String result = messageHandler.getMessageOptional("simple", null);
        assertEquals("Simple message", result);
    }

    @Test
    public void testGetInstance() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance(BASENAME);
        assertSame(instance1, instance2);
    }

    @After
    public void tearDown() {
        // Clean up resources if necessary
    }
}
```

### Explanation:
- **Setup and Teardown**: The `setUp` method initializes the `MessageHandler` instance before each test. The `tearDown` method is provided for any necessary cleanup, although it's not used here.
- **Test Cases**:
  - `testGetMessageWithExistingKey`: Tests `getMessage` with a key that exists in the message file.
  - `testGetMessageWithNonExistingKey`: Tests `getMessage` with a key that does not exist, expecting a specific error message.
  - `testGetMessageOptionalWithExistingKey`: Tests `getMessageOptional` with a key that exists.
  - `testGetMessageOptionalWithNonExistingKey`: Tests `getMessageOptional` with a key that does not exist, expecting `null`.
  - `testGetMessageOptionalWithNullParams`: Tests `getMessageOptional` with `null` parameters.
  - `testGetInstance`: Ensures that `getInstance` returns the same instance for the same basename, verifying the singleton pattern.

### Note:
- The test suite assumes the existence of certain keys in the message files. You may need to adjust the test cases based on the actual content of your message files.
- The `MessageHandler` class relies on external files and directories, which are not provided here. Ensure these resources are available in your test environment.