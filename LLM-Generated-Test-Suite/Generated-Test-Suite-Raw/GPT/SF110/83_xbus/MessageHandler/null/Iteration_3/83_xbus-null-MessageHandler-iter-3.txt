```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.*;

@RunWith(JUnit4.class)
public class MessageHandlerTest {

    private MessageHandler messageHandler;
    private static final String BASENAME = "testMessages";

    @Before
    public void setUp() {
        messageHandler = MessageHandler.getInstance(BASENAME);
    }

    @Test
    public void testGetMessageWithExistingKey() {
        // Assuming the message file contains a key "greeting" with value "Hello, $1$!"
        List<String> params = new ArrayList<>();
        params.add("World");
        String message = messageHandler.getMessage("greeting", params);
        assertEquals("Hello, World!", message);
    }

    @Test
    public void testGetMessageWithNonExistingKey() {
        String message = messageHandler.getMessage("nonExistingKey", null);
        assertEquals("Key: nonExistingKey not found in message file", message);
    }

    @Test
    public void testGetMessageOptionalWithExistingKey() {
        // Assuming the message file contains a key "farewell" with value "Goodbye, $1$!"
        List<String> params = new ArrayList<>();
        params.add("Friend");
        String message = messageHandler.getMessageOptional("farewell", params);
        assertEquals("Goodbye, Friend!", message);
    }

    @Test
    public void testGetMessageOptionalWithNonExistingKey() {
        String message = messageHandler.getMessageOptional("nonExistingKey", null);
        assertNull(message);
    }

    @Test
    public void testGetMessageOptionalWithNullParams() {
        // Assuming the message file contains a key "simpleMessage" with value "This is a simple message."
        String message = messageHandler.getMessageOptional("simpleMessage", null);
        assertEquals("This is a simple message.", message);
    }

    @Test
    public void testGetInstance() {
        MessageHandler instance1 = MessageHandler.getInstance(BASENAME);
        MessageHandler instance2 = MessageHandler.getInstance(BASENAME);
        assertSame(instance1, instance2);
    }

    @Test
    public void testGetMessageWithNullParams() {
        // Assuming the message file contains a key "simpleMessage" with value "This is a simple message."
        String message = messageHandler.getMessage("simpleMessage", null);
        assertEquals("This is a simple message.", message);
    }

    @Test
    public void testGetMessageWithNullMessageFile() {
        // Assuming the message file does not exist or is not loaded
        MessageHandler emptyHandler = new MessageHandler("nonExistingBase");
        String message = emptyHandler.getMessage("anyKey", null);
        assertEquals("Key: anyKey not found in message file", message);
    }
}
```

### Notes:
- The test suite assumes that there are message files available with specific keys and values. You may need to adjust the test cases based on the actual content of your message files.
- The `MessageHandler` class relies on external files and directories, which means the tests might need to be run in an environment where these files are accessible.
- The `getInstance` method is tested to ensure that it returns the same instance for the same basename, which is a typical behavior for a singleton pattern.
- The `MessageHandler` constructor and `addMessages` method are not directly tested because they are private. However, their functionality is indirectly tested through the public methods that rely on them.