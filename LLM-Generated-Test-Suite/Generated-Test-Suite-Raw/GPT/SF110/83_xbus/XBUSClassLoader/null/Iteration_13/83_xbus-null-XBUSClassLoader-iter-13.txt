```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.After;
import org.junit.BeforeClass;
import org.junit.AfterClass;
import java.net.URL;
import java.net.MalformedURLException;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Vector;
import net.sf.xbus.base.core.reflection.XBUSClassLoader;

public class XBUSClassLoaderTest {

    private static final String TEST_DIR = "test/lib";
    private static final String TEST_JAR = "test.jar";
    private static final String TEST_ZIP = "test.zip";
    private static File testDir;
    private static File testJar;
    private static File testZip;

    @BeforeClass
    public static void setUpClass() throws Exception {
        // Set up test directory and files
        testDir = new File(TEST_DIR);
        testDir.mkdirs();
        testJar = new File(testDir, TEST_JAR);
        testJar.createNewFile();
        testZip = new File(testDir, TEST_ZIP);
        testZip.createNewFile();
        
        // Set XBUS_HOME to the test directory
        System.setProperty("XBUS_HOME", testDir.getAbsolutePath());
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
        // Clean up test files and directory
        testJar.delete();
        testZip.delete();
        testDir.delete();
    }

    @Before
    public void setUp() throws Exception {
        // Reset the singleton instance before each test
        Field instanceField = XBUSClassLoader.class.getDeclaredField("mClassLoader");
        instanceField.setAccessible(true);
        instanceField.set(null, null);
    }

    @After
    public void tearDown() throws Exception {
        // Reset the singleton instance after each test
        Field instanceField = XBUSClassLoader.class.getDeclaredField("mClassLoader");
        instanceField.setAccessible(true);
        instanceField.set(null, null);
    }

    @Test
    public void testGetInstance() {
        ClassLoader parent = getClass().getClassLoader();
        XBUSClassLoader loader = XBUSClassLoader.getInstance(parent);
        assertNotNull(loader);
        assertEquals(loader, XBUSClassLoader.getInstance(parent));
    }

    @Test
    public void testCreateClassLoader() throws Exception {
        ClassLoader parent = getClass().getClassLoader();
        XBUSClassLoader loader = XBUSClassLoader.getInstance(parent);
        assertNotNull(loader);

        // Check if URLs are correctly added
        URL[] urls = loader.getURLs();
        assertTrue(urls.length > 0);
        boolean jarFound = false;
        boolean zipFound = false;
        for (URL url : urls) {
            if (url.toString().endsWith(TEST_JAR)) {
                jarFound = true;
            }
            if (url.toString().endsWith(TEST_ZIP)) {
                zipFound = true;
            }
        }
        assertTrue(jarFound);
        assertTrue(zipFound);
    }

    @Test
    public void testAddUrls() throws MalformedURLException {
        Vector<URL> urls = new Vector<>();
        XBUSClassLoader.addUrls(urls, testDir.getAbsolutePath());
        assertEquals(2, urls.size());
        assertTrue(urls.get(0).toString().endsWith(TEST_JAR));
        assertTrue(urls.get(1).toString().endsWith(TEST_ZIP));
    }
}
```

### Explanation:
- **Setup and Teardown**: The `@BeforeClass` and `@AfterClass` methods are used to create and clean up a test directory and files. This simulates the environment expected by the `XBUSClassLoader`.
- **Singleton Reset**: The `@Before` and `@After` methods reset the singleton instance of `XBUSClassLoader` to ensure each test runs independently.
- **Test Methods**:
  - `testGetInstance`: Verifies that the `getInstance` method returns a non-null instance and that it behaves as a singleton.
  - `testCreateClassLoader`: Checks that the class loader is created correctly and that it includes the expected URLs.
  - `testAddUrls`: Ensures that the `addUrls` method correctly adds URLs for `.jar` and `.zip` files in the specified directory.