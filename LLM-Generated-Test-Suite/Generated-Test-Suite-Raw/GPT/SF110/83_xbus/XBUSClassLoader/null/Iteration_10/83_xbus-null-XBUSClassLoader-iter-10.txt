Certainly! Below is a JUnit 4 test suite for the `XBUSClassLoader` class. This test suite aims to cover the methods within the class, including the singleton pattern and URL addition logic. Note that due to the nature of the class, some methods and behaviors (like `System.exit`) are challenging to test directly without additional setup or mocking frameworks like PowerMock.

```java
import net.sf.xbus.base.core.reflection.XBUSClassLoader;
import org.junit.*;
import java.net.URL;
import java.net.URLClassLoader;
import java.io.File;
import java.util.Vector;
import static org.junit.Assert.*;

public class XBUSClassLoaderTest {

    private static final String TEST_DIR = "test/resources";

    @BeforeClass
    public static void setUpClass() {
        // Set up any necessary environment variables or configurations
        System.setProperty("XBUS_HOME", TEST_DIR);
    }

    @AfterClass
    public static void tearDownClass() {
        // Clean up any configurations
        System.clearProperty("XBUS_HOME");
    }

    @Test
    public void testGetInstance() {
        ClassLoader parent = getClass().getClassLoader();
        XBUSClassLoader instance = XBUSClassLoader.getInstance(parent);
        assertNotNull("Instance should not be null", instance);
        assertTrue("Instance should be of type XBUSClassLoader", instance instanceof XBUSClassLoader);
    }

    @Test
    public void testSingletonProperty() {
        ClassLoader parent = getClass().getClassLoader();
        XBUSClassLoader instance1 = XBUSClassLoader.getInstance(parent);
        XBUSClassLoader instance2 = XBUSClassLoader.getInstance(parent);
        assertSame("Instances should be the same", instance1, instance2);
    }

    @Test
    public void testAddUrls() {
        Vector<URL> urls = new Vector<>();
        XBUSClassLoader.addUrls(urls, TEST_DIR + "/lib");
        assertFalse("URLs should not be empty", urls.isEmpty());
    }

    @Test
    public void testAddUrlsWithInvalidDirectory() {
        Vector<URL> urls = new Vector<>();
        XBUSClassLoader.addUrls(urls, "invalid/directory");
        assertTrue("URLs should be empty for invalid directory", urls.isEmpty());
    }

    @Test(expected = NullPointerException.class)
    public void testCreateClassLoaderWithoutXBUSHome() {
        System.clearProperty("XBUS_HOME");
        ClassLoader parent = getClass().getClassLoader();
        XBUSClassLoader.createClassLoader(parent);
    }

    // Additional tests can be added here to cover more edge cases and scenarios
}
```

### Notes:
1. **Environment Setup**: The test suite assumes that the `XBUS_HOME` environment variable is set correctly. This is simulated using `System.setProperty` in the `setUpClass` method.
2. **Singleton Pattern**: The test suite checks that the `XBUSClassLoader` follows the singleton pattern by ensuring the same instance is returned on multiple calls.
3. **URL Addition**: The `addUrls` method is tested to ensure it correctly adds URLs from a directory.
4. **Error Handling**: The test for `createClassLoader` without `XBUS_HOME` set is expected to throw a `NullPointerException` due to the `System.exit` call, which is not directly testable without a mocking framework.
5. **Mocking and PowerMock**: For more comprehensive testing, especially for methods that call `System.exit`, consider using a mocking framework like PowerMock to mock static methods and constructors.