To create a comprehensive JUnit 4 test suite for the `SimplexTableau` class, we need to test its public and protected methods. The test suite will include tests for constructors, methods that manipulate the tableau, and methods that provide information about the tableau. Note that some methods are dependent on the state of the tableau, so we'll need to set up appropriate test data.

Below is a JUnit 4 test suite for the `SimplexTableau` class:

```java
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.util.Precision;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;

public class SimplexTableauTest {

    private LinearObjectiveFunction f;
    private List<LinearConstraint> constraints;
    private SimplexTableau simplexTableau;

    @Before
    public void setUp() {
        RealVector coefficients = new ArrayRealVector(new double[]{1, 2});
        f = new LinearObjectiveFunction(coefficients, 0);

        constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 2));
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 1}, Relationship.GEQ, 0));

        simplexTableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, 1e-6);
    }

    @Test
    public void testConstructor() {
        assertNotNull(simplexTableau);
    }

    @Test
    public void testInitializeColumnLabels() {
        List<String> expectedLabels = Arrays.asList("Z", "x0", "x1", "s0", "s1", "s2", "RHS");
        assertEquals(expectedLabels, simplexTableau.columnLabels);
    }

    @Test
    public void testCreateTableau() {
        assertNotNull(simplexTableau.getData());
    }

    @Test
    public void testNormalizeConstraints() {
        List<LinearConstraint> normalizedConstraints = simplexTableau.normalizeConstraints(constraints);
        assertEquals(constraints.size(), normalizedConstraints.size());
    }

    @Test
    public void testIsOptimal() {
        assertFalse(simplexTableau.isOptimal());
    }

    @Test
    public void testGetSolution() {
        assertNotNull(simplexTableau.getSolution());
    }

    @Test
    public void testDivideRow() {
        simplexTableau.divideRow(1, 2);
        assertEquals(0.5, simplexTableau.getEntry(1, 0), 1e-6);
    }

    @Test
    public void testSubtractRow() {
        simplexTableau.subtractRow(1, 2, 1);
        assertEquals(1, simplexTableau.getEntry(1, 0), 1e-6);
    }

    @Test
    public void testGetWidth() {
        assertEquals(7, simplexTableau.getWidth());
    }

    @Test
    public void testGetHeight() {
        assertEquals(4, simplexTableau.getHeight());
    }

    @Test
    public void testGetEntry() {
        assertEquals(1, simplexTableau.getEntry(1, 0), 1e-6);
    }

    @Test
    public void testSetEntry() {
        simplexTableau.setEntry(1, 0, 5);
        assertEquals(5, simplexTableau.getEntry(1, 0), 1e-6);
    }

    @Test
    public void testEqualsAndHashCode() {
        SimplexTableau other = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, 1e-6);
        assertTrue(simplexTableau.equals(other));
        assertEquals(simplexTableau.hashCode(), other.hashCode());
    }

    @Test
    public void testGetNumObjectiveFunctions() {
        assertEquals(1, simplexTableau.getNumObjectiveFunctions());
    }

    @Test
    public void testGetNumDecisionVariables() {
        assertEquals(2, simplexTableau.getNumDecisionVariables());
    }

    @Test
    public void testGetNumSlackVariables() {
        assertEquals(3, simplexTableau.getNumSlackVariables());
    }

    @Test
    public void testGetNumArtificialVariables() {
        assertEquals(0, simplexTableau.getNumArtificialVariables());
    }

    @Test
    public void testGetData() {
        assertNotNull(simplexTableau.getData());
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `SimplexTableau` instance with a simple linear objective function and constraints.
- **Tests**: Each test method checks a specific functionality of the `SimplexTableau` class, such as the constructor, tableau creation, normalization of constraints, and various getters.
- **Assertions**: The tests use assertions to verify that the methods behave as expected, checking for correct values, non-null objects, and equality.
- **Equality and Hash Code**: Tests for `equals` and `hashCode` ensure that two `SimplexTableau` instances with the same data are considered equal.

This test suite provides a comprehensive set of tests for the `SimplexTableau` class, covering its main functionalities.