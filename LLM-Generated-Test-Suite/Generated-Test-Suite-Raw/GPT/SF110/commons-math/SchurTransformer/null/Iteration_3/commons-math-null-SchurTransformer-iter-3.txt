To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods and ensure that the class behaves as expected under various conditions. The primary methods to test are `getP()`, `getPT()`, and `getT()`. Additionally, we should test the constructor to ensure it handles both valid and invalid inputs correctly.

Below is a JUnit 4 test suite for the `SchurTransformer` class:

```java
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Assert;
import org.junit.Test;

public class SchurTransformerTest {

    @Test
    public void testGetP() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix P = transformer.getP();
        Assert.assertNotNull(P);
        Assert.assertEquals(matrix.getRowDimension(), P.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), P.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix PT = transformer.getPT();
        Assert.assertNotNull(PT);
        Assert.assertEquals(matrix.getRowDimension(), PT.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), PT.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix T = transformer.getT();
        Assert.assertNotNull(T);
        Assert.assertEquals(matrix.getRowDimension(), T.getRowDimension());
        Assert.assertEquals(matrix.getColumnDimension(), T.getColumnDimension());
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testNonSquareMatrixException() {
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(new double[][] {
            {1, 2, 3},
            {4, 5, 6}
        });
        new SchurTransformer(nonSquareMatrix);
    }

    @Test
    public void testIdentityMatrix() {
        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);
        SchurTransformer transformer = new SchurTransformer(identityMatrix);
        RealMatrix P = transformer.getP();
        RealMatrix PT = transformer.getPT();
        RealMatrix T = transformer.getT();

        Assert.assertEquals(identityMatrix, P);
        Assert.assertEquals(identityMatrix, PT);
        Assert.assertEquals(identityMatrix, T);
    }

    @Test
    public void testZeroMatrix() {
        RealMatrix zeroMatrix = MatrixUtils.createRealMatrix(new double[][] {
            {0, 0, 0},
            {0, 0, 0},
            {0, 0, 0}
        });
        SchurTransformer transformer = new SchurTransformer(zeroMatrix);
        RealMatrix T = transformer.getT();

        Assert.assertEquals(zeroMatrix, T);
    }
}
```

### Explanation:
- **testGetP, testGetPT, testGetT**: These tests check that the `getP()`, `getPT()`, and `getT()` methods return matrices of the correct dimensions and are not null.
- **testNonSquareMatrixException**: This test ensures that the constructor throws a `NonSquareMatrixException` when a non-square matrix is provided.
- **testIdentityMatrix**: This test checks that when an identity matrix is used, the Schur decomposition returns the identity matrix for P, PT, and T.
- **testZeroMatrix**: This test checks that when a zero matrix is used, the Schur decomposition returns a zero matrix for T.

These tests cover the basic functionality and edge cases for the `SchurTransformer` class.