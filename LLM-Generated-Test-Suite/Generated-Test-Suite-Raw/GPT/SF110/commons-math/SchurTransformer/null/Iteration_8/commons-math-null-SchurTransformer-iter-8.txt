To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods and handle potential exceptions. The class has three public methods: `getP()`, `getPT()`, and `getT()`. We will also test the constructor to ensure it handles non-square matrices correctly. 

Here's a JUnit 4 test suite for the `SchurTransformer` class:

```java
import static org.junit.Assert.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Before;
import org.junit.Test;

public class SchurTransformerTest {

    private RealMatrix squareMatrix;
    private RealMatrix nonSquareMatrix;
    private SchurTransformer transformer;

    @Before
    public void setUp() {
        // Initialize a 3x3 square matrix
        squareMatrix = MatrixUtils.createRealMatrix(new double[][] {
            { 1.0, 2.0, 3.0 },
            { 4.0, 5.0, 6.0 },
            { 7.0, 8.0, 9.0 }
        });

        // Initialize a 2x3 non-square matrix
        nonSquareMatrix = MatrixUtils.createRealMatrix(new double[][] {
            { 1.0, 2.0, 3.0 },
            { 4.0, 5.0, 6.0 }
        });

        // Initialize the SchurTransformer with a square matrix
        transformer = new SchurTransformer(squareMatrix);
    }

    @Test
    public void testGetP() {
        RealMatrix P = transformer.getP();
        assertNotNull("Matrix P should not be null", P);
        assertEquals("Matrix P should have the same row dimension as the input matrix", squareMatrix.getRowDimension(), P.getRowDimension());
        assertEquals("Matrix P should have the same column dimension as the input matrix", squareMatrix.getColumnDimension(), P.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix PT = transformer.getPT();
        assertNotNull("Matrix PT should not be null", PT);
        assertEquals("Matrix PT should have the same row dimension as the input matrix", squareMatrix.getRowDimension(), PT.getRowDimension());
        assertEquals("Matrix PT should have the same column dimension as the input matrix", squareMatrix.getColumnDimension(), PT.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix T = transformer.getT();
        assertNotNull("Matrix T should not be null", T);
        assertEquals("Matrix T should have the same row dimension as the input matrix", squareMatrix.getRowDimension(), T.getRowDimension());
        assertEquals("Matrix T should have the same column dimension as the input matrix", squareMatrix.getColumnDimension(), T.getColumnDimension());
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testConstructorWithNonSquareMatrix() {
        // This should throw a NonSquareMatrixException
        new SchurTransformer(nonSquareMatrix);
    }
}
```

### Explanation:

1. **Setup**: We initialize a square matrix and a non-square matrix. The `SchurTransformer` is initialized with the square matrix.

2. **Test `getP()`**: We verify that the `getP()` method returns a non-null matrix with the same dimensions as the input matrix.

3. **Test `getPT()`**: We verify that the `getPT()` method returns a non-null matrix with the same dimensions as the input matrix.

4. **Test `getT()`**: We verify that the `getT()` method returns a non-null matrix with the same dimensions as the input matrix.

5. **Test Constructor with Non-Square Matrix**: We ensure that the constructor throws a `NonSquareMatrixException` when initialized with a non-square matrix.

This test suite covers the basic functionality and exception handling of the `SchurTransformer` class.