To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods and ensure that the class behaves as expected under various conditions. The primary methods to test are `getP()`, `getPT()`, and `getT()`. We also need to handle exceptions, such as when a non-square matrix is provided.

Below is a JUnit 4 test suite for the `SchurTransformer` class:

```java
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class SchurTransformerTest {

    private RealMatrix squareMatrix;
    private RealMatrix nonSquareMatrix;
    private SchurTransformer schurTransformer;

    @Before
    public void setUp() {
        // Initialize a 3x3 square matrix
        squareMatrix = MatrixUtils.createRealMatrix(new double[][]{
            {4, 1, -2},
            {1, 2, 0},
            {-2, 0, 3}
        });

        // Initialize a non-square matrix
        nonSquareMatrix = MatrixUtils.createRealMatrix(new double[][]{
            {1, 2, 3},
            {4, 5, 6}
        });

        // Initialize SchurTransformer with a square matrix
        schurTransformer = new SchurTransformer(squareMatrix);
    }

    @Test
    public void testGetP() {
        RealMatrix P = schurTransformer.getP();
        assertNotNull("Matrix P should not be null", P);
        assertEquals("Matrix P should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), P.getRowDimension());
        assertEquals("Matrix P should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), P.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix PT = schurTransformer.getPT();
        assertNotNull("Matrix PT should not be null", PT);
        assertEquals("Matrix PT should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), PT.getRowDimension());
        assertEquals("Matrix PT should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), PT.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix T = schurTransformer.getT();
        assertNotNull("Matrix T should not be null", T);
        assertEquals("Matrix T should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), T.getRowDimension());
        assertEquals("Matrix T should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), T.getColumnDimension());
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testNonSquareMatrixException() {
        // This should throw a NonSquareMatrixException
        new SchurTransformer(nonSquareMatrix);
    }
}
```

### Explanation:

1. **Setup**: We initialize a square matrix and a non-square matrix. The `SchurTransformer` is initialized with the square matrix.

2. **Test `getP()`**: We verify that the `getP()` method returns a non-null matrix with the same dimensions as the input matrix.

3. **Test `getPT()`**: We verify that the `getPT()` method returns a non-null matrix with the same dimensions as the input matrix.

4. **Test `getT()`**: We verify that the `getT()` method returns a non-null matrix with the same dimensions as the input matrix.

5. **Test Exception**: We test that a `NonSquareMatrixException` is thrown when a non-square matrix is used to initialize the `SchurTransformer`.

This test suite covers the primary functionalities and exception handling of the `SchurTransformer` class.