To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods and ensure that the class behaves correctly under various conditions. The primary methods to test are `getP()`, `getPT()`, and `getT()`. We also need to ensure that the constructor handles both valid and invalid input matrices correctly.

Below is a JUnit 4 test suite for the `SchurTransformer` class:

```java
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Test;
import static org.junit.Assert.*;

public class SchurTransformerTest {

    @Test
    public void testGetP() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {1, 2},
            {3, 4}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix P = transformer.getP();
        assertNotNull("P matrix should not be null", P);
        assertEquals("P matrix should have the same dimensions as input", matrix.getRowDimension(), P.getRowDimension());
        assertEquals("P matrix should have the same dimensions as input", matrix.getColumnDimension(), P.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {1, 2},
            {3, 4}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix PT = transformer.getPT();
        assertNotNull("PT matrix should not be null", PT);
        assertEquals("PT matrix should have the same dimensions as input", matrix.getRowDimension(), PT.getRowDimension());
        assertEquals("PT matrix should have the same dimensions as input", matrix.getColumnDimension(), PT.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {1, 2},
            {3, 4}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix T = transformer.getT();
        assertNotNull("T matrix should not be null", T);
        assertEquals("T matrix should have the same dimensions as input", matrix.getRowDimension(), T.getRowDimension());
        assertEquals("T matrix should have the same dimensions as input", matrix.getColumnDimension(), T.getColumnDimension());
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testNonSquareMatrixException() {
        RealMatrix nonSquareMatrix = MatrixUtils.createRealMatrix(new double[][] {
            {1, 2, 3},
            {4, 5, 6}
        });
        new SchurTransformer(nonSquareMatrix);
    }

    @Test
    public void testIdentityMatrix() {
        RealMatrix identityMatrix = MatrixUtils.createRealIdentityMatrix(3);
        SchurTransformer transformer = new SchurTransformer(identityMatrix);
        RealMatrix P = transformer.getP();
        RealMatrix PT = transformer.getPT();
        RealMatrix T = transformer.getT();

        assertTrue("P should be identity for identity input", P.isIdentity());
        assertTrue("PT should be identity for identity input", PT.isIdentity());
        assertTrue("T should be identity for identity input", T.isIdentity());
    }

    @Test
    public void testCachedMatrices() {
        RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
            {1, 2},
            {3, 4}
        });
        SchurTransformer transformer = new SchurTransformer(matrix);
        RealMatrix P1 = transformer.getP();
        RealMatrix P2 = transformer.getP();
        RealMatrix PT1 = transformer.getPT();
        RealMatrix PT2 = transformer.getPT();
        RealMatrix T1 = transformer.getT();
        RealMatrix T2 = transformer.getT();

        assertSame("Cached P matrices should be the same instance", P1, P2);
        assertSame("Cached PT matrices should be the same instance", PT1, PT2);
        assertSame("Cached T matrices should be the same instance", T1, T2);
    }
}
```

### Explanation:
- **testGetP, testGetPT, testGetT**: These tests verify that the matrices returned by `getP()`, `getPT()`, and `getT()` are not null and have the correct dimensions.
- **testNonSquareMatrixException**: This test ensures that the constructor throws a `NonSquareMatrixException` when a non-square matrix is provided.
- **testIdentityMatrix**: This test checks that when an identity matrix is used as input, the resulting matrices `P`, `PT`, and `T` are also identity matrices.
- **testCachedMatrices**: This test ensures that the cached matrices are reused and not recalculated, by checking that subsequent calls return the same instance.

This test suite covers the primary functionalities and edge cases for the `SchurTransformer` class.