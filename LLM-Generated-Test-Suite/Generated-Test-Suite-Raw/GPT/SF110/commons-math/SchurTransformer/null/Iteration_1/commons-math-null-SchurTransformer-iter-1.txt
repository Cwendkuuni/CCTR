To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods and handle potential exceptions. The class has three public methods: `getP()`, `getPT()`, and `getT()`. Additionally, we should test the constructor to ensure it handles non-square matrices correctly by throwing a `NonSquareMatrixException`.

Below is a JUnit 4 test suite for the `SchurTransformer` class:

```java
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class SchurTransformerTest {

    private RealMatrix squareMatrix;
    private RealMatrix nonSquareMatrix;
    private SchurTransformer schurTransformer;

    @Before
    public void setUp() {
        // Initialize a 3x3 square matrix
        squareMatrix = MatrixUtils.createRealMatrix(new double[][]{
            {4, 1, 2},
            {1, 3, 1},
            {2, 1, 3}
        });

        // Initialize a 2x3 non-square matrix
        nonSquareMatrix = MatrixUtils.createRealMatrix(new double[][]{
            {1, 2, 3},
            {4, 5, 6}
        });

        // Initialize SchurTransformer with a square matrix
        schurTransformer = new SchurTransformer(squareMatrix);
    }

    @Test
    public void testGetP() {
        RealMatrix P = schurTransformer.getP();
        assertNotNull("Matrix P should not be null", P);
        assertEquals("Matrix P should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), P.getRowDimension());
        assertEquals("Matrix P should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), P.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix PT = schurTransformer.getPT();
        assertNotNull("Matrix PT should not be null", PT);
        assertEquals("Matrix PT should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), PT.getRowDimension());
        assertEquals("Matrix PT should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), PT.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix T = schurTransformer.getT();
        assertNotNull("Matrix T should not be null", T);
        assertEquals("Matrix T should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), T.getRowDimension());
        assertEquals("Matrix T should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), T.getColumnDimension());
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testConstructorWithNonSquareMatrix() {
        new SchurTransformer(nonSquareMatrix);
    }
}
```

### Explanation:
- **Setup**: We create a 3x3 square matrix and a 2x3 non-square matrix. The `SchurTransformer` is initialized with the square matrix.
- **Tests for `getP()`, `getPT()`, and `getT()`**: Each method is tested to ensure it returns a non-null matrix with the same dimensions as the input matrix.
- **Exception Test**: The constructor is tested with a non-square matrix to ensure it throws a `NonSquareMatrixException`.

This test suite covers the basic functionality and exception handling of the `SchurTransformer` class.