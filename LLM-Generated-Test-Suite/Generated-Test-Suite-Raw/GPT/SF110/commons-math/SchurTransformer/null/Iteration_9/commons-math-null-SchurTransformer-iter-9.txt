To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods `getP()`, `getPT()`, and `getT()`. Additionally, we should test the constructor to ensure it handles both valid and invalid inputs correctly. Since the class relies on the `HessenbergTransformer` and `RealMatrix`, we'll need to mock or create instances of these dependencies. 

Here's a complete JUnit 4 test suite for the `SchurTransformer` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Before;
import org.junit.Test;

public class SchurTransformerTest {

    private RealMatrix squareMatrix;
    private RealMatrix nonSquareMatrix;
    private SchurTransformer transformer;

    @Before
    public void setUp() {
        // Create a mock RealMatrix for a square matrix
        squareMatrix = mock(RealMatrix.class);
        when(squareMatrix.isSquare()).thenReturn(true);
        when(squareMatrix.getRowDimension()).thenReturn(3);
        when(squareMatrix.getColumnDimension()).thenReturn(3);

        // Create a mock RealMatrix for a non-square matrix
        nonSquareMatrix = mock(RealMatrix.class);
        when(nonSquareMatrix.isSquare()).thenReturn(false);
        when(nonSquareMatrix.getRowDimension()).thenReturn(3);
        when(nonSquareMatrix.getColumnDimension()).thenReturn(2);

        // Mock HessenbergTransformer behavior
        HessenbergTransformer hessenbergTransformer = mock(HessenbergTransformer.class);
        when(hessenbergTransformer.getH()).thenReturn(squareMatrix);
        when(hessenbergTransformer.getP()).thenReturn(squareMatrix);

        // Initialize the SchurTransformer with a square matrix
        transformer = new SchurTransformer(squareMatrix);
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testConstructorWithNonSquareMatrix() {
        new SchurTransformer(nonSquareMatrix);
    }

    @Test
    public void testGetP() {
        RealMatrix p = transformer.getP();
        assertNotNull("P matrix should not be null", p);
        assertEquals("P matrix should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), p.getRowDimension());
        assertEquals("P matrix should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), p.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        RealMatrix pt = transformer.getPT();
        assertNotNull("PT matrix should not be null", pt);
        assertEquals("PT matrix should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), pt.getRowDimension());
        assertEquals("PT matrix should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), pt.getColumnDimension());
    }

    @Test
    public void testGetT() {
        RealMatrix t = transformer.getT();
        assertNotNull("T matrix should not be null", t);
        assertEquals("T matrix should have the same dimensions as the input matrix", 
                     squareMatrix.getRowDimension(), t.getRowDimension());
        assertEquals("T matrix should have the same dimensions as the input matrix", 
                     squareMatrix.getColumnDimension(), t.getColumnDimension());
    }
}
```

### Explanation:
- **Mocks**: We use Mockito to create mock objects for `RealMatrix` and `HessenbergTransformer`. This allows us to simulate the behavior of these dependencies without needing their actual implementations.
- **Setup**: The `setUp` method initializes the mock objects and sets up the expected behavior for the methods used in the `SchurTransformer`.
- **Tests**:
  - **Constructor Test**: We test the constructor with a non-square matrix to ensure it throws a `NonSquareMatrixException`.
  - **`getP` Test**: We verify that the `getP` method returns a non-null matrix with the correct dimensions.
  - **`getPT` Test**: We verify that the `getPT` method returns a non-null matrix with the correct dimensions.
  - **`getT` Test**: We verify that the `getT` method returns a non-null matrix with the correct dimensions.

This test suite covers the basic functionality of the `SchurTransformer` class. Additional tests could be added to verify the correctness of the transformations if the actual matrix data were available.