To create a comprehensive JUnit 4 test suite for the `SchurTransformer` class, we need to test the public methods and ensure that the class behaves as expected under various conditions. The primary methods to test are `getP()`, `getPT()`, and `getT()`. Additionally, we should test the constructor to ensure it handles both valid and invalid inputs correctly.

Below is a JUnit 4 test suite for the `SchurTransformer` class:

```java
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.apache.commons.math3.exception.NonSquareMatrixException;
import org.junit.Test;
import static org.junit.Assert.*;

public class SchurTransformerTest {

    @Test
    public void testConstructorWithSquareMatrix() {
        double[][] data = {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        SchurTransformer transformer = new SchurTransformer(matrix);

        assertNotNull(transformer);
    }

    @Test(expected = NonSquareMatrixException.class)
    public void testConstructorWithNonSquareMatrix() {
        double[][] data = {
            {1, 2, 3},
            {4, 5, 6}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        new SchurTransformer(matrix);
    }

    @Test
    public void testGetP() {
        double[][] data = {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        SchurTransformer transformer = new SchurTransformer(matrix);

        RealMatrix P = transformer.getP();
        assertNotNull(P);
        assertEquals(matrix.getRowDimension(), P.getRowDimension());
        assertEquals(matrix.getColumnDimension(), P.getColumnDimension());
    }

    @Test
    public void testGetPT() {
        double[][] data = {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        SchurTransformer transformer = new SchurTransformer(matrix);

        RealMatrix PT = transformer.getPT();
        assertNotNull(PT);
        assertEquals(matrix.getRowDimension(), PT.getRowDimension());
        assertEquals(matrix.getColumnDimension(), PT.getColumnDimension());
    }

    @Test
    public void testGetT() {
        double[][] data = {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        SchurTransformer transformer = new SchurTransformer(matrix);

        RealMatrix T = transformer.getT();
        assertNotNull(T);
        assertEquals(matrix.getRowDimension(), T.getRowDimension());
        assertEquals(matrix.getColumnDimension(), T.getColumnDimension());
    }

    @Test
    public void testOrthogonalityOfP() {
        double[][] data = {
            {4, 1, -2, 2},
            {1, 2, 0, 1},
            {-2, 0, 3, -2},
            {2, 1, -2, -1}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        SchurTransformer transformer = new SchurTransformer(matrix);

        RealMatrix P = transformer.getP();
        RealMatrix PT = transformer.getPT();
        RealMatrix identity = P.multiply(PT);

        assertTrue(MatrixUtils.equals(identity, MatrixUtils.createRealIdentityMatrix(P.getRowDimension()), 1e-10));
    }
}
```

### Explanation:
- **Constructor Tests**: We test the constructor with both square and non-square matrices to ensure it behaves correctly.
- **Method Tests**: We test `getP()`, `getPT()`, and `getT()` to ensure they return matrices of the correct dimensions and are not null.
- **Orthogonality Test**: We verify that the matrix `P` is orthogonal by checking if `P * PT` equals the identity matrix.

This test suite covers the basic functionality and edge cases for the `SchurTransformer` class.