Certainly! Below is a JUnit 4 test suite for the `RectangularCholeskyDecomposition` class. This test suite aims to cover the main functionalities of the class, including the constructor and the methods `getRootMatrix` and `getRank`.

```java
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException;
import org.junit.Test;
import static org.junit.Assert.*;

public class RectangularCholeskyDecompositionTest {

    @Test
    public void testConstructorWithPositiveDefiniteMatrix() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);

        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(3, decomposition.getRank());
    }

    @Test
    public void testConstructorWithSmallParameter() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix, 1e-10);

        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(3, decomposition.getRank());
    }

    @Test(expected = NonPositiveDefiniteMatrixException.class)
    public void testConstructorWithNonPositiveDefiniteMatrix() {
        double[][] data = {
            {0, 1},
            {1, 0}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        new RectangularCholeskyDecomposition(matrix);
    }

    @Test
    public void testGetRootMatrix() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);

        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(3, rootMatrix.getColumnDimension());
    }

    @Test
    public void testGetRank() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);

        assertEquals(3, decomposition.getRank());
    }
}
```

### Explanation:
- **testConstructorWithPositiveDefiniteMatrix**: Tests the constructor with a positive definite matrix and checks if the root matrix is not null and the rank is as expected.
- **testConstructorWithSmallParameter**: Similar to the first test but includes a small parameter to ensure the constructor handles it correctly.
- **testConstructorWithNonPositiveDefiniteMatrix**: Tests the constructor with a non-positive definite matrix and expects a `NonPositiveDefiniteMatrixException`.
- **testGetRootMatrix**: Verifies that the `getRootMatrix` method returns a non-null matrix with the expected dimensions.
- **testGetRank**: Checks that the `getRank` method returns the correct rank of the matrix.

These tests aim to cover the main functionalities and edge cases of the `RectangularCholeskyDecomposition` class.