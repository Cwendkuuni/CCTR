Certainly! Below is a JUnit 4 test suite for the `RectangularCholeskyDecomposition` class. This test suite aims to cover the constructor and the methods `getRootMatrix` and `getRank`.

```java
import static org.junit.Assert.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException;
import org.junit.Test;

public class RectangularCholeskyDecompositionTest {

    @Test
    public void testConstructorWithPositiveDefiniteMatrix() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);

        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(3, decomposition.getRank());
    }

    @Test
    public void testConstructorWithSmallParameter() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix, 1e-10);

        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(3, decomposition.getRank());
    }

    @Test(expected = NonPositiveDefiniteMatrixException.class)
    public void testConstructorWithNonPositiveDefiniteMatrix() {
        double[][] data = {
            {1, 2, 3},
            {2, 1, 4},
            {3, 4, 1}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        new RectangularCholeskyDecomposition(matrix);
    }

    @Test
    public void testGetRootMatrix() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);

        RealMatrix rootMatrix = decomposition.getRootMatrix();
        assertNotNull(rootMatrix);
        assertEquals(3, rootMatrix.getColumnDimension());
    }

    @Test
    public void testGetRank() {
        double[][] data = {
            {4, 12, -16},
            {12, 37, -43},
            {-16, -43, 98}
        };
        RealMatrix matrix = MatrixUtils.createRealMatrix(data);
        RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(matrix);

        int rank = decomposition.getRank();
        assertEquals(3, rank);
    }
}
```

### Explanation:
- **Positive Definite Matrix Test**: This test checks if the constructor works correctly with a positive definite matrix.
- **Small Parameter Test**: This test checks the constructor with a small parameter to ensure it handles precision correctly.
- **Non-Positive Definite Matrix Test**: This test expects an exception when a non-positive definite matrix is used.
- **Get Root Matrix Test**: This test checks if the `getRootMatrix` method returns a non-null matrix with the expected dimensions.
- **Get Rank Test**: This test verifies that the `getRank` method returns the correct rank of the matrix.

Make sure to have the necessary dependencies for Apache Commons Math and JUnit 4 in your project to run these tests.