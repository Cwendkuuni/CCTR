Certainly! Below is a JUnit 4 test suite for the `MathUtils` class. This suite aims to cover various scenarios for each method, including edge cases and exceptions.

```java
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NotFiniteNumberException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.junit.Test;
import static org.junit.Assert.*;

public class MathUtilsTest {

    @Test
    public void testHashDouble() {
        assertEquals(Double.valueOf(0.0).hashCode(), MathUtils.hash(0.0));
        assertEquals(Double.valueOf(-1.0).hashCode(), MathUtils.hash(-1.0));
        assertEquals(Double.valueOf(Double.NaN).hashCode(), MathUtils.hash(Double.NaN));
    }

    @Test
    public void testHashDoubleArray() {
        assertEquals(Arrays.hashCode(new double[]{1.0, 2.0, 3.0}), MathUtils.hash(new double[]{1.0, 2.0, 3.0}));
        assertEquals(Arrays.hashCode(new double[]{}), MathUtils.hash(new double[]{}));
    }

    @Test
    public void testNormalizeAngle() {
        assertEquals(0.0, MathUtils.normalizeAngle(MathUtils.TWO_PI, 0.0), 1e-10);
        assertEquals(Math.PI, MathUtils.normalizeAngle(-Math.PI, 0.0), 1e-10);
    }

    @Test
    public void testReduce() {
        assertEquals(0.0, MathUtils.reduce(10.0, 5.0, 0.0), 1e-10);
        assertEquals(1.0, MathUtils.reduce(11.0, 5.0, 0.0), 1e-10);
    }

    @Test
    public void testCopySignByte() {
        assertEquals((byte) 1, MathUtils.copySign((byte) 1, (byte) 1));
        assertEquals((byte) -1, MathUtils.copySign((byte) 1, (byte) -1));
        assertEquals((byte) 1, MathUtils.copySign((byte) -1, (byte) 1));
        assertEquals((byte) -1, MathUtils.copySign((byte) -1, (byte) -1));
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignByteOverflow() {
        MathUtils.copySign((byte) -128, (byte) 1);
    }

    @Test
    public void testCopySignShort() {
        assertEquals((short) 1, MathUtils.copySign((short) 1, (short) 1));
        assertEquals((short) -1, MathUtils.copySign((short) 1, (short) -1));
        assertEquals((short) 1, MathUtils.copySign((short) -1, (short) 1));
        assertEquals((short) -1, MathUtils.copySign((short) -1, (short) -1));
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignShortOverflow() {
        MathUtils.copySign((short) -32768, (short) 1);
    }

    @Test
    public void testCopySignInt() {
        assertEquals(1, MathUtils.copySign(1, 1));
        assertEquals(-1, MathUtils.copySign(1, -1));
        assertEquals(1, MathUtils.copySign(-1, 1));
        assertEquals(-1, MathUtils.copySign(-1, -1));
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignIntOverflow() {
        MathUtils.copySign(Integer.MIN_VALUE, 1);
    }

    @Test
    public void testCopySignLong() {
        assertEquals(1L, MathUtils.copySign(1L, 1L));
        assertEquals(-1L, MathUtils.copySign(1L, -1L));
        assertEquals(1L, MathUtils.copySign(-1L, 1L));
        assertEquals(-1L, MathUtils.copySign(-1L, -1L));
    }

    @Test(expected = MathArithmeticException.class)
    public void testCopySignLongOverflow() {
        MathUtils.copySign(Long.MIN_VALUE, 1L);
    }

    @Test
    public void testCheckFiniteDouble() {
        MathUtils.checkFinite(1.0);
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteDoubleInfinite() {
        MathUtils.checkFinite(Double.POSITIVE_INFINITY);
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteDoubleNaN() {
        MathUtils.checkFinite(Double.NaN);
    }

    @Test
    public void testCheckFiniteDoubleArray() {
        MathUtils.checkFinite(new double[]{1.0, 2.0, 3.0});
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteDoubleArrayInfinite() {
        MathUtils.checkFinite(new double[]{1.0, Double.POSITIVE_INFINITY, 3.0});
    }

    @Test(expected = NotFiniteNumberException.class)
    public void testCheckFiniteDoubleArrayNaN() {
        MathUtils.checkFinite(new double[]{1.0, Double.NaN, 3.0});
    }

    @Test
    public void testCheckNotNull() {
        MathUtils.checkNotNull(new Object());
    }

    @Test(expected = NullArgumentException.class)
    public void testCheckNotNullThrows() {
        MathUtils.checkNotNull(null);
    }
}
```

This test suite covers all the methods in the `MathUtils` class, including edge cases and exceptions. Make sure to have the necessary dependencies for Apache Commons Math and JUnit 4 in your project to run these tests.