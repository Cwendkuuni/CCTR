To create a comprehensive JUnit 4 test suite for the `IntervalsSet` class, we need to test all its public methods and constructors. This includes testing different scenarios for each method to ensure they behave as expected. Below is a JUnit 4 test suite for the `IntervalsSet` class:

```java
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.junit.Test;
import org.junit.Before;
import java.util.*;

import static org.junit.Assert.*;

public class IntervalsSetTest {

    private IntervalsSet emptySet;
    private IntervalsSet finiteSet;
    private IntervalsSet infiniteSet;
    private IntervalsSet customTreeSet;

    @Before
    public void setUp() {
        emptySet = new IntervalsSet();
        finiteSet = new IntervalsSet(1.0, 5.0);
        infiniteSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        customTreeSet = new IntervalsSet(new BSPTree<Euclidean1D>(Boolean.TRUE));
    }

    @Test
    public void testEmptyConstructor() {
        assertNotNull(emptySet);
        assertTrue(emptySet.asList().isEmpty());
    }

    @Test
    public void testFiniteConstructor() {
        assertNotNull(finiteSet);
        List<Interval> intervals = finiteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 0.0);
        assertEquals(5.0, intervals.get(0).getSup(), 0.0);
    }

    @Test
    public void testInfiniteConstructor() {
        assertNotNull(infiniteSet);
        List<Interval> intervals = infiniteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 0.0);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 0.0);
    }

    @Test
    public void testCustomTreeConstructor() {
        assertNotNull(customTreeSet);
        List<Interval> intervals = customTreeSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 0.0);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 0.0);
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.FALSE);
        IntervalsSet newSet = finiteSet.buildNew(tree);
        assertNotNull(newSet);
        assertTrue(newSet.asList().isEmpty());
    }

    @Test
    public void testComputeGeometricalProperties() {
        finiteSet.computeGeometricalProperties();
        assertEquals(4.0, finiteSet.getSize(), 0.0);
        assertEquals(3.0, finiteSet.getBarycenter().getX(), 0.0);
    }

    @Test
    public void testGetInf() {
        assertEquals(Double.POSITIVE_INFINITY, emptySet.getInf(), 0.0);
        assertEquals(1.0, finiteSet.getInf(), 0.0);
        assertEquals(Double.NEGATIVE_INFINITY, infiniteSet.getInf(), 0.0);
    }

    @Test
    public void testGetSup() {
        assertEquals(Double.NEGATIVE_INFINITY, emptySet.getSup(), 0.0);
        assertEquals(5.0, finiteSet.getSup(), 0.0);
        assertEquals(Double.POSITIVE_INFINITY, infiniteSet.getSup(), 0.0);
    }

    @Test
    public void testAsList() {
        List<Interval> intervals = finiteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 0.0);
        assertEquals(5.0, intervals.get(0).getSup(), 0.0);

        intervals = infiniteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 0.0);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 0.0);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes different instances of `IntervalsSet` to be used in the tests.
- **Constructors**: Tests are provided for each constructor to ensure they initialize the object correctly.
- **Methods**: Each public method is tested with various scenarios to ensure they return the expected results.
- **Assertions**: The tests use assertions to verify that the actual output matches the expected output.

This test suite should cover the basic functionality of the `IntervalsSet` class. Depending on the complexity and additional requirements, more tests might be needed to cover edge cases and exceptions.