To create a comprehensive JUnit 4 test suite for the `IntervalsSet` class, we need to test all its public methods, including constructors and utility methods. The test suite will cover various scenarios, including edge cases like infinite bounds. Here's a complete JUnit 4 test suite:

```java
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;

public class IntervalsSetTest {

    @Test
    public void testDefaultConstructor() {
        IntervalsSet intervalsSet = new IntervalsSet();
        assertNotNull(intervalsSet);
    }

    @Test
    public void testConstructorWithBounds() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        assertNotNull(intervalsSet);
        assertEquals(1.0, intervalsSet.getInf(), 1e-10);
        assertEquals(5.0, intervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testConstructorWithInfiniteBounds() {
        IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        assertNotNull(intervalsSet);
        assertEquals(Double.NEGATIVE_INFINITY, intervalsSet.getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testConstructorWithTree() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet intervalsSet = new IntervalsSet(tree);
        assertNotNull(intervalsSet);
    }

    @Test
    public void testConstructorWithBoundary() {
        Collection<SubHyperplane<Euclidean1D>> boundary = new ArrayList<>();
        IntervalsSet intervalsSet = new IntervalsSet(boundary);
        assertNotNull(intervalsSet);
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet intervalsSet = new IntervalsSet();
        IntervalsSet newIntervalsSet = intervalsSet.buildNew(tree);
        assertNotNull(newIntervalsSet);
    }

    @Test
    public void testComputeGeometricalProperties() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        intervalsSet.computeGeometricalProperties();
        assertEquals(1.0, intervalsSet.getInf(), 1e-10);
        assertEquals(5.0, intervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testGetInf() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        assertEquals(1.0, intervalsSet.getInf(), 1e-10);
    }

    @Test
    public void testGetSup() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        assertEquals(5.0, intervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testAsList() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        List<Interval> intervals = intervalsSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 1e-10);
        assertEquals(5.0, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testAsListWithInfiniteBounds() {
        IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        List<Interval> intervals = intervalsSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 1e-10);
    }
}
```

### Explanation:
- **Constructors**: Tests are provided for all constructors, including default, bounds-based, tree-based, and boundary-based constructors.
- **Methods**: Each method (`buildNew`, `computeGeometricalProperties`, `getInf`, `getSup`, `asList`) is tested for expected behavior.
- **Edge Cases**: Tests include scenarios with infinite bounds to ensure the class handles these correctly.
- **Assertions**: The tests use assertions to verify that the methods return expected results, ensuring the correctness of the class implementation.