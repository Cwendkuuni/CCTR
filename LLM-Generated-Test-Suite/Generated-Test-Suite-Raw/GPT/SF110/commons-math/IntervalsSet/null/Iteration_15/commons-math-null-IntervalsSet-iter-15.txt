To create a comprehensive JUnit 4 test suite for the `IntervalsSet` class, we need to test all its public methods. This includes testing the constructors, `buildNew`, `computeGeometricalProperties`, `getInf`, `getSup`, and `asList` methods. Below is a test suite that covers these methods:

```java
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.Assert.*;

public class IntervalsSetTest {

    private IntervalsSet emptySet;
    private IntervalsSet finiteSet;
    private IntervalsSet infiniteSet;

    @Before
    public void setUp() {
        emptySet = new IntervalsSet();
        finiteSet = new IntervalsSet(1.0, 5.0);
        infiniteSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
    }

    @Test
    public void testEmptyConstructor() {
        assertNotNull(emptySet);
        assertTrue(emptySet.asList().isEmpty());
    }

    @Test
    public void testFiniteConstructor() {
        assertNotNull(finiteSet);
        List<Interval> intervals = finiteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 1e-10);
        assertEquals(5.0, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testInfiniteConstructor() {
        assertNotNull(infiniteSet);
        List<Interval> intervals = infiniteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet newSet = finiteSet.buildNew(tree);
        assertNotNull(newSet);
        assertEquals(tree, newSet.getTree(false));
    }

    @Test
    public void testComputeGeometricalProperties() {
        finiteSet.computeGeometricalProperties();
        assertEquals(4.0, finiteSet.getSize(), 1e-10);
        assertEquals(3.0, finiteSet.getBarycenter().getX(), 1e-10);
    }

    @Test
    public void testGetInf() {
        assertEquals(Double.POSITIVE_INFINITY, emptySet.getInf(), 1e-10);
        assertEquals(1.0, finiteSet.getInf(), 1e-10);
        assertEquals(Double.NEGATIVE_INFINITY, infiniteSet.getInf(), 1e-10);
    }

    @Test
    public void testGetSup() {
        assertEquals(Double.NEGATIVE_INFINITY, emptySet.getSup(), 1e-10);
        assertEquals(5.0, finiteSet.getSup(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, infiniteSet.getSup(), 1e-10);
    }

    @Test
    public void testAsList() {
        List<Interval> intervals = finiteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 1e-10);
        assertEquals(5.0, intervals.get(0).getSup(), 1e-10);

        intervals = infiniteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 1e-10);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes three `IntervalsSet` instances: an empty set, a finite interval set, and an infinite interval set.
- **Test Constructors**: Tests for the constructors ensure that the objects are created correctly and that the intervals are as expected.
- **Test `buildNew`**: Verifies that a new `IntervalsSet` can be built from a given BSP tree.
- **Test `computeGeometricalProperties`**: Checks that the size and barycenter are computed correctly for a finite interval.
- **Test `getInf` and `getSup`**: Ensures that the correct infimum and supremum are returned for different types of interval sets.
- **Test `asList`**: Confirms that the intervals are correctly listed for finite and infinite sets.

This test suite should provide a comprehensive check of the `IntervalsSet` class functionality.