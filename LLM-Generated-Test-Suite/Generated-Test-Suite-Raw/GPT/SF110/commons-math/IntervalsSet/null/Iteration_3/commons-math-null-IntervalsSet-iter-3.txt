To create a comprehensive JUnit 4 test suite for the `IntervalsSet` class, we need to test all its public methods, including constructors and utility methods. Below is a test suite that covers these methods:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class IntervalsSetTest {

    private IntervalsSet emptySet;
    private IntervalsSet finiteSet;
    private IntervalsSet infiniteSet;

    @Before
    public void setUp() {
        emptySet = new IntervalsSet();
        finiteSet = new IntervalsSet(1.0, 5.0);
        infiniteSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
    }

    @Test
    public void testEmptyConstructor() {
        assertNotNull(emptySet);
        assertTrue(emptySet.asList().isEmpty());
    }

    @Test
    public void testFiniteConstructor() {
        assertNotNull(finiteSet);
        List<Interval> intervals = finiteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 1e-10);
        assertEquals(5.0, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testInfiniteConstructor() {
        assertNotNull(infiniteSet);
        List<Interval> intervals = infiniteSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testBoundaryConstructor() {
        Collection<SubHyperplane<Euclidean1D>> boundary = new ArrayList<>();
        IntervalsSet boundarySet = new IntervalsSet(boundary);
        assertNotNull(boundarySet);
        assertTrue(boundarySet.asList().isEmpty());
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet newSet = finiteSet.buildNew(tree);
        assertNotNull(newSet);
        assertEquals(Double.NEGATIVE_INFINITY, newSet.getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, newSet.getSup(), 1e-10);
    }

    @Test
    public void testComputeGeometricalProperties() {
        finiteSet.computeGeometricalProperties();
        assertEquals(4.0, finiteSet.getSize(), 1e-10);
        assertEquals(3.0, finiteSet.getBarycenter().getX(), 1e-10);
    }

    @Test
    public void testGetInf() {
        assertEquals(Double.POSITIVE_INFINITY, emptySet.getInf(), 1e-10);
        assertEquals(1.0, finiteSet.getInf(), 1e-10);
        assertEquals(Double.NEGATIVE_INFINITY, infiniteSet.getInf(), 1e-10);
    }

    @Test
    public void testGetSup() {
        assertEquals(Double.NEGATIVE_INFINITY, emptySet.getSup(), 1e-10);
        assertEquals(5.0, finiteSet.getSup(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, infiniteSet.getSup(), 1e-10);
    }

    @Test
    public void testAsList() {
        List<Interval> emptyList = emptySet.asList();
        assertTrue(emptyList.isEmpty());

        List<Interval> finiteList = finiteSet.asList();
        assertEquals(1, finiteList.size());
        assertEquals(1.0, finiteList.get(0).getInf(), 1e-10);
        assertEquals(5.0, finiteList.get(0).getSup(), 1e-10);

        List<Interval> infiniteList = infiniteSet.asList();
        assertEquals(1, infiniteList.size());
        assertEquals(Double.NEGATIVE_INFINITY, infiniteList.get(0).getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, infiniteList.get(0).getSup(), 1e-10);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes three different `IntervalsSet` instances: an empty set, a finite interval set, and an infinite interval set.
- **Test Methods**: Each test method checks the functionality of a specific constructor or method in the `IntervalsSet` class.
- **Assertions**: The tests use assertions to verify that the methods return expected results, such as checking the size and bounds of intervals.
- **Precision**: A small delta (`1e-10`) is used in assertions involving floating-point comparisons to account for precision errors.

This test suite should provide a comprehensive check of the `IntervalsSet` class's functionality.