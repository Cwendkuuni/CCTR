To create a comprehensive JUnit 4 test suite for the `IntervalsSet` class, we need to test all its public methods and constructors. This includes testing the behavior of the class under various conditions, such as different interval boundaries and tree structures. Below is a JUnit 4 test suite that covers these aspects:

```java
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class IntervalsSetTest {

    @Test
    public void testDefaultConstructor() {
        IntervalsSet intervalsSet = new IntervalsSet();
        assertNotNull(intervalsSet);
        assertTrue(intervalsSet.asList().isEmpty());
    }

    @Test
    public void testConstructorWithBounds() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        List<Interval> intervals = intervalsSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 1e-10);
        assertEquals(5.0, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testConstructorWithInfiniteBounds() {
        IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        List<Interval> intervals = intervalsSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(Double.NEGATIVE_INFINITY, intervals.get(0).getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervals.get(0).getSup(), 1e-10);
    }

    @Test
    public void testConstructorWithTree() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet intervalsSet = new IntervalsSet(tree);
        assertNotNull(intervalsSet);
        assertEquals(Double.NEGATIVE_INFINITY, intervalsSet.getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, intervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testConstructorWithBoundary() {
        List<SubHyperplane<Euclidean1D>> boundary = new ArrayList<>();
        IntervalsSet intervalsSet = new IntervalsSet(boundary);
        assertNotNull(intervalsSet);
        assertTrue(intervalsSet.asList().isEmpty());
    }

    @Test
    public void testBuildNew() {
        BSPTree<Euclidean1D> tree = new BSPTree<>(Boolean.TRUE);
        IntervalsSet intervalsSet = new IntervalsSet();
        IntervalsSet newIntervalsSet = intervalsSet.buildNew(tree);
        assertNotNull(newIntervalsSet);
        assertEquals(Double.NEGATIVE_INFINITY, newIntervalsSet.getInf(), 1e-10);
        assertEquals(Double.POSITIVE_INFINITY, newIntervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testComputeGeometricalProperties() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        intervalsSet.computeGeometricalProperties();
        assertEquals(4.0, intervalsSet.getSize(), 1e-10);
    }

    @Test
    public void testGetInf() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        assertEquals(1.0, intervalsSet.getInf(), 1e-10);
    }

    @Test
    public void testGetSup() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        assertEquals(5.0, intervalsSet.getSup(), 1e-10);
    }

    @Test
    public void testAsList() {
        IntervalsSet intervalsSet = new IntervalsSet(1.0, 5.0);
        List<Interval> intervals = intervalsSet.asList();
        assertEquals(1, intervals.size());
        assertEquals(1.0, intervals.get(0).getInf(), 1e-10);
        assertEquals(5.0, intervals.get(0).getSup(), 1e-10);
    }
}
```

### Explanation:
- **Default Constructor Test**: Verifies that the default constructor creates an empty interval set.
- **Constructor with Bounds Test**: Checks if the constructor correctly initializes the interval with given bounds.
- **Constructor with Infinite Bounds Test**: Ensures the class handles infinite bounds correctly.
- **Constructor with Tree Test**: Tests initialization with a BSP tree.
- **Constructor with Boundary Test**: Verifies initialization with a boundary collection.
- **Build New Test**: Checks if a new `IntervalsSet` can be built from an existing tree.
- **Compute Geometrical Properties Test**: Validates the computation of size and barycenter.
- **Get Inf and Sup Tests**: Ensure correct retrieval of the lower and upper bounds.
- **As List Test**: Confirms that intervals are correctly listed.

This test suite should cover the main functionalities of the `IntervalsSet` class. Adjustments may be needed based on the actual behavior of the methods and the specific implementation details of the `AbstractRegion` and related classes.