```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.ProperFractionFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;

public class ProperFractionFormatTest {

    private ProperFractionFormat defaultFormat;
    private ProperFractionFormat customFormat;

    @Before
    public void setUp() {
        defaultFormat = new ProperFractionFormat();
        NumberFormat customWholeFormat = NumberFormat.getInstance();
        NumberFormat customNumeratorFormat = NumberFormat.getInstance();
        NumberFormat customDenominatorFormat = NumberFormat.getInstance();
        customFormat = new ProperFractionFormat(customWholeFormat, customNumeratorFormat, customDenominatorFormat);
    }

    @Test
    public void testFormatWholeNumber() {
        Fraction fraction = new Fraction(3, 1);
        StringBuffer result = defaultFormat.format(fraction, new StringBuffer(), new FieldPosition(0));
        assertEquals("3 / 1", result.toString());
    }

    @Test
    public void testFormatProperFraction() {
        Fraction fraction = new Fraction(1, 2);
        StringBuffer result = defaultFormat.format(fraction, new StringBuffer(), new FieldPosition(0));
        assertEquals("1 / 2", result.toString());
    }

    @Test
    public void testFormatMixedFraction() {
        Fraction fraction = new Fraction(7, 2);
        StringBuffer result = defaultFormat.format(fraction, new StringBuffer(), new FieldPosition(0));
        assertEquals("3 1 / 2", result.toString());
    }

    @Test
    public void testParseWholeNumber() {
        ParsePosition pos = new ParsePosition(0);
        Fraction fraction = defaultFormat.parse("3 / 1", pos);
        assertEquals(new Fraction(3, 1), fraction);
    }

    @Test
    public void testParseProperFraction() {
        ParsePosition pos = new ParsePosition(0);
        Fraction fraction = defaultFormat.parse("1 / 2", pos);
        assertEquals(new Fraction(1, 2), fraction);
    }

    @Test
    public void testParseMixedFraction() {
        ParsePosition pos = new ParsePosition(0);
        Fraction fraction = defaultFormat.parse("3 1 / 2", pos);
        assertEquals(new Fraction(7, 2), fraction);
    }

    @Test
    public void testParseInvalidFraction() {
        ParsePosition pos = new ParsePosition(0);
        Fraction fraction = defaultFormat.parse("invalid", pos);
        assertNull(fraction);
    }

    @Test
    public void testGetWholeFormat() {
        assertNotNull(defaultFormat.getWholeFormat());
    }

    @Test
    public void testSetWholeFormat() {
        NumberFormat newFormat = NumberFormat.getInstance();
        defaultFormat.setWholeFormat(newFormat);
        assertEquals(newFormat, defaultFormat.getWholeFormat());
    }

    @Test(expected = NullArgumentException.class)
    public void testSetWholeFormatNull() {
        defaultFormat.setWholeFormat(null);
    }

    @Test
    public void testCustomFormat() {
        Fraction fraction = new Fraction(7, 2);
        StringBuffer result = customFormat.format(fraction, new StringBuffer(), new FieldPosition(0));
        assertEquals("3 1 / 2", result.toString());
    }
}
```