To create a comprehensive JUnit 4 test suite for the `BrentOptimizer` class, we need to test the constructors, the `doOptimize` method, and any edge cases or exceptions that might be thrown. Below is a test suite that covers these aspects:

```java
import static org.junit.Assert.*;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optim.GoalType;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.junit.Test;

public class BrentOptimizerTest {

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorThrowsNumberIsTooSmallException() {
        new BrentOptimizer(1e-20, 1e-10);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorThrowsNotStrictlyPositiveException() {
        new BrentOptimizer(1e-8, 0.0);
    }

    @Test
    public void testConstructorWithValidParameters() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-8, 1e-10);
        assertNotNull(optimizer);
    }

    @Test
    public void testDoOptimizeMinimization() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-8, 1e-10);
        optimizer.setGoalType(GoalType.MINIMIZE);
        optimizer.setMin(0);
        optimizer.setMax(4);
        optimizer.setStartValue(2);
        optimizer.setConvergenceChecker(new SimpleConvergenceChecker());

        UnivariatePointValuePair result = optimizer.optimize();
        assertNotNull(result);
        assertEquals(0, result.getPoint(), 1e-8);
    }

    @Test
    public void testDoOptimizeMaximization() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-8, 1e-10);
        optimizer.setGoalType(GoalType.MAXIMIZE);
        optimizer.setMin(0);
        optimizer.setMax(4);
        optimizer.setStartValue(2);
        optimizer.setConvergenceChecker(new SimpleConvergenceChecker());

        UnivariatePointValuePair result = optimizer.optimize();
        assertNotNull(result);
        assertEquals(4, result.getPoint(), 1e-8);
    }

    // A simple convergence checker for testing purposes
    private static class SimpleConvergenceChecker implements ConvergenceChecker<UnivariatePointValuePair> {
        @Override
        public boolean converged(int iteration, UnivariatePointValuePair previous, UnivariatePointValuePair current) {
            return Math.abs(previous.getValue() - current.getValue()) < 1e-8;
        }
    }
}
```

### Explanation:

1. **Exception Tests**: 
   - We test the constructor to ensure it throws `NumberIsTooSmallException` when the relative tolerance is below the minimum.
   - We test the constructor to ensure it throws `NotStrictlyPositiveException` when the absolute tolerance is not positive.

2. **Constructor Test**:
   - We test the constructor with valid parameters to ensure it initializes correctly.

3. **Optimization Tests**:
   - We test the `doOptimize` method for both minimization and maximization goals. These tests assume a simple quadratic function where the minimum is at 0 and the maximum is at 4. The `SimpleConvergenceChecker` is used to determine convergence based on the value difference.

4. **Convergence Checker**:
   - A simple convergence checker is implemented to be used in the tests. It checks if the difference between consecutive values is below a threshold.

This test suite provides a basic framework for testing the `BrentOptimizer` class. Depending on the actual implementation details and the context in which this optimizer is used, additional tests might be necessary to cover more specific cases or edge conditions.