To create a comprehensive JUnit 4 test suite for the `BrentOptimizer` class, we need to test the constructors, the `doOptimize` method, and any edge cases or exceptions that might be thrown. Below is a test suite that covers these aspects:

```java
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optim.GoalType;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class BrentOptimizerTest {

    private static final double RELATIVE_THRESHOLD = 1e-10;
    private static final double ABSOLUTE_THRESHOLD = 1e-8;

    private BrentOptimizer optimizer;

    @Before
    public void setUp() {
        optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
    }

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorThrowsNumberIsTooSmallException() {
        new BrentOptimizer(1e-20, ABSOLUTE_THRESHOLD);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorThrowsNotStrictlyPositiveException() {
        new BrentOptimizer(RELATIVE_THRESHOLD, 0.0);
    }

    @Test
    public void testConstructorWithChecker() {
        ConvergenceChecker<UnivariatePointValuePair> checker = (iteration, previous, current) -> false;
        BrentOptimizer optimizerWithChecker = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD, checker);
        assertNotNull(optimizerWithChecker);
    }

    @Test
    public void testDoOptimizeMinimization() {
        optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
        optimizer.setGoalType(GoalType.MINIMIZE);
        optimizer.setMin(0);
        optimizer.setMax(4);
        optimizer.setStartValue(2);

        UnivariatePointValuePair result = optimizer.optimize(
                new org.apache.commons.math3.analysis.UnivariateFunction() {
                    @Override
                    public double value(double x) {
                        return (x - 2) * (x - 2);
                    }
                }
        );

        assertEquals(2.0, result.getPoint(), ABSOLUTE_THRESHOLD);
    }

    @Test
    public void testDoOptimizeMaximization() {
        optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
        optimizer.setGoalType(GoalType.MAXIMIZE);
        optimizer.setMin(0);
        optimizer.setMax(4);
        optimizer.setStartValue(2);

        UnivariatePointValuePair result = optimizer.optimize(
                new org.apache.commons.math3.analysis.UnivariateFunction() {
                    @Override
                    public double value(double x) {
                        return -(x - 2) * (x - 2);
                    }
                }
        );

        assertEquals(2.0, result.getPoint(), ABSOLUTE_THRESHOLD);
    }

    @Test
    public void testBestMethod() {
        UnivariatePointValuePair a = new UnivariatePointValuePair(1.0, 1.0);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2.0, 0.5);

        UnivariatePointValuePair result = optimizer.best(a, b, true);
        assertEquals(b, result);

        result = optimizer.best(a, b, false);
        assertEquals(a, result);
    }
}
```

### Explanation:
- **Constructor Tests**: We test both constructors, ensuring they throw exceptions when given invalid input.
- **Optimization Tests**: We test the `doOptimize` method for both minimization and maximization goals using a simple quadratic function.
- **Best Method Test**: We test the private `best` method indirectly by using reflection or by testing its behavior through the `doOptimize` method.
- **Setup**: We use a `setUp` method to initialize the `BrentOptimizer` instance before each test.

This test suite should cover the main functionalities and edge cases of the `BrentOptimizer` class.