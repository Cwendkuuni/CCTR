To create a comprehensive JUnit 4 test suite for the `BrentOptimizer` class, we need to test the constructors, the `doOptimize` method, and any edge cases or exceptions that might be thrown. Here's a basic test suite that covers these aspects:

```java
import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.GoalType;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.util.FastMath;

public class BrentOptimizerTest {

    private static final double RELATIVE_THRESHOLD = 1e-8;
    private static final double ABSOLUTE_THRESHOLD = 1e-8;

    @Test(expected = NumberIsTooSmallException.class)
    public void testConstructorThrowsNumberIsTooSmallException() {
        new BrentOptimizer(1e-16, ABSOLUTE_THRESHOLD);
    }

    @Test(expected = NotStrictlyPositiveException.class)
    public void testConstructorThrowsNotStrictlyPositiveException() {
        new BrentOptimizer(RELATIVE_THRESHOLD, 0.0);
    }

    @Test
    public void testConstructorWithValidParameters() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
        assertNotNull(optimizer);
    }

    @Test
    public void testDoOptimizeMinimization() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
        optimizer.setGoalType(GoalType.MINIMIZE);
        optimizer.setMin(0);
        optimizer.setMax(4);
        optimizer.setStartValue(2);

        UnivariatePointValuePair result = optimizer.optimize(new ConvergenceChecker<UnivariatePointValuePair>() {
            @Override
            public boolean converged(int iteration, UnivariatePointValuePair previous, UnivariatePointValuePair current) {
                return FastMath.abs(current.getValue() - previous.getValue()) < ABSOLUTE_THRESHOLD;
            }
        });

        assertNotNull(result);
        assertEquals(0, result.getPoint(), ABSOLUTE_THRESHOLD);
    }

    @Test
    public void testDoOptimizeMaximization() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
        optimizer.setGoalType(GoalType.MAXIMIZE);
        optimizer.setMin(0);
        optimizer.setMax(4);
        optimizer.setStartValue(2);

        UnivariatePointValuePair result = optimizer.optimize(new ConvergenceChecker<UnivariatePointValuePair>() {
            @Override
            public boolean converged(int iteration, UnivariatePointValuePair previous, UnivariatePointValuePair current) {
                return FastMath.abs(current.getValue() - previous.getValue()) < ABSOLUTE_THRESHOLD;
            }
        });

        assertNotNull(result);
        assertEquals(4, result.getPoint(), ABSOLUTE_THRESHOLD);
    }

    @Test
    public void testBestMethod() {
        BrentOptimizer optimizer = new BrentOptimizer(RELATIVE_THRESHOLD, ABSOLUTE_THRESHOLD);
        UnivariatePointValuePair a = new UnivariatePointValuePair(1, 2);
        UnivariatePointValuePair b = new UnivariatePointValuePair(2, 1);

        UnivariatePointValuePair resultMin = optimizer.best(a, b, true);
        assertEquals(a, resultMin);

        UnivariatePointValuePair resultMax = optimizer.best(a, b, false);
        assertEquals(b, resultMax);
    }
}
```

### Explanation:

1. **Constructor Tests**:
   - Tests for exceptions when invalid parameters are passed to the constructor.
   - Tests for successful creation of a `BrentOptimizer` object with valid parameters.

2. **Optimization Tests**:
   - Tests the `doOptimize` method for both minimization and maximization goals.
   - Uses a simple convergence checker to determine when the optimization should stop.

3. **Best Method Test**:
   - Tests the `best` method to ensure it correctly identifies the best point-value pair based on the goal type.

This test suite assumes that the `BrentOptimizer` class is correctly integrated with the necessary Apache Commons Math library components. Adjustments may be needed based on the actual behavior and requirements of the `BrentOptimizer` class.