```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.joda.time.*;
import org.joda.time.format.*;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.util.Locale;

public class DateTimeFormatterTest {

    private DateTimePrinter mockPrinter;
    private DateTimeParser mockParser;
    private DateTimeFormatter formatter;

    @Before
    public void setUp() {
        mockPrinter = mock(DateTimePrinter.class);
        mockParser = mock(DateTimeParser.class);
        formatter = new DateTimeFormatter(mockPrinter, mockParser);
    }

    @Test
    public void testIsPrinter() {
        assertTrue(formatter.isPrinter());
        DateTimeFormatter noPrinterFormatter = new DateTimeFormatter(null, mockParser);
        assertFalse(noPrinterFormatter.isPrinter());
    }

    @Test
    public void testGetPrinter() {
        assertEquals(mockPrinter, formatter.getPrinter());
    }

    @Test
    public void testIsParser() {
        assertTrue(formatter.isParser());
        DateTimeFormatter noParserFormatter = new DateTimeFormatter(mockPrinter, null);
        assertFalse(noParserFormatter.isParser());
    }

    @Test
    public void testGetParser() {
        assertEquals(mockParser, formatter.getParser());
    }

    @Test
    public void testWithLocale() {
        Locale locale = Locale.US;
        DateTimeFormatter newFormatter = formatter.withLocale(locale);
        assertEquals(locale, newFormatter.getLocale());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testGetLocale() {
        assertNull(formatter.getLocale());
    }

    @Test
    public void testWithOffsetParsed() {
        DateTimeFormatter newFormatter = formatter.withOffsetParsed();
        assertTrue(newFormatter.isOffsetParsed());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testIsOffsetParsed() {
        assertFalse(formatter.isOffsetParsed());
    }

    @Test
    public void testWithChronology() {
        Chronology chronology = ISOChronology.getInstance();
        DateTimeFormatter newFormatter = formatter.withChronology(chronology);
        assertEquals(chronology, newFormatter.getChronology());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testGetChronology() {
        assertNull(formatter.getChronology());
    }

    @Test
    public void testWithZoneUTC() {
        DateTimeFormatter newFormatter = formatter.withZoneUTC();
        assertEquals(DateTimeZone.UTC, newFormatter.getZone());
    }

    @Test
    public void testWithZone() {
        DateTimeZone zone = DateTimeZone.forID("Europe/London");
        DateTimeFormatter newFormatter = formatter.withZone(zone);
        assertEquals(zone, newFormatter.getZone());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testGetZone() {
        assertNull(formatter.getZone());
    }

    @Test
    public void testWithPivotYear() {
        Integer pivotYear = 2020;
        DateTimeFormatter newFormatter = formatter.withPivotYear(pivotYear);
        assertEquals(pivotYear, newFormatter.getPivotYear());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testGetPivotYear() {
        assertNull(formatter.getPivotYear());
    }

    @Test
    public void testWithDefaultYear() {
        int defaultYear = 2021;
        DateTimeFormatter newFormatter = formatter.withDefaultYear(defaultYear);
        assertEquals(defaultYear, newFormatter.getDefaultYear());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testGetDefaultYear() {
        assertEquals(2000, formatter.getDefaultYear());
    }

    @Test
    public void testPrintToStringBufferReadableInstant() {
        StringBuffer sb = new StringBuffer();
        ReadableInstant instant = new DateTime();
        formatter.printTo(sb, instant);
        verify(mockPrinter).printTo(eq(sb), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintToWriterReadableInstant() throws IOException {
        StringWriter writer = new StringWriter();
        ReadableInstant instant = new DateTime();
        formatter.printTo(writer, instant);
        verify(mockPrinter).printTo(eq(writer), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintToAppendableReadableInstant() throws IOException {
        StringBuilder appendable = new StringBuilder();
        ReadableInstant instant = new DateTime();
        formatter.printTo(appendable, instant);
        verify(mockPrinter).printTo(any(Appendable.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintToStringBufferLong() {
        StringBuffer sb = new StringBuffer();
        long millis = System.currentTimeMillis();
        formatter.printTo(sb, millis);
        verify(mockPrinter).printTo(eq(sb), eq(millis), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintToWriterLong() throws IOException {
        StringWriter writer = new StringWriter();
        long millis = System.currentTimeMillis();
        formatter.printTo(writer, millis);
        verify(mockPrinter).printTo(eq(writer), eq(millis), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintToAppendableLong() throws IOException {
        StringBuilder appendable = new StringBuilder();
        long millis = System.currentTimeMillis();
        formatter.printTo(appendable, millis);
        verify(mockPrinter).printTo(any(Appendable.class), eq(millis), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintToStringBufferReadablePartial() {
        StringBuffer sb = new StringBuffer();
        ReadablePartial partial = new LocalDate();
        formatter.printTo(sb, partial);
        verify(mockPrinter).printTo(eq(sb), eq(partial), eq(null));
    }

    @Test
    public void testPrintToWriterReadablePartial() throws IOException {
        StringWriter writer = new StringWriter();
        ReadablePartial partial = new LocalDate();
        formatter.printTo(writer, partial);
        verify(mockPrinter).printTo(eq(writer), eq(partial), eq(null));
    }

    @Test
    public void testPrintToAppendableReadablePartial() throws IOException {
        StringBuilder appendable = new StringBuilder();
        ReadablePartial partial = new LocalDate();
        formatter.printTo(appendable, partial);
        verify(mockPrinter).printTo(any(Appendable.class), eq(partial), eq(null));
    }

    @Test
    public void testPrintReadableInstant() {
        ReadableInstant instant = new DateTime();
        formatter.print(instant);
        verify(mockPrinter).printTo(any(StringBuffer.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintLong() {
        long millis = System.currentTimeMillis();
        formatter.print(millis);
        verify(mockPrinter).printTo(any(StringBuffer.class), eq(millis), any(Chronology.class), anyInt(), any(DateTimeZone.class), eq(null));
    }

    @Test
    public void testPrintReadablePartial() {
        ReadablePartial partial = new LocalDate();
        formatter.print(partial);
        verify(mockPrinter).printTo(any(StringBuffer.class), eq(partial), eq(null));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRequirePrinterThrowsException() {
        DateTimeFormatter noPrinterFormatter = new DateTimeFormatter(null, mockParser);
        noPrinterFormatter.print(System.currentTimeMillis());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRequireParserThrowsException() {
        DateTimeFormatter noParserFormatter = new DateTimeFormatter(mockPrinter, null);
        noParserFormatter.parseMillis("2021-01-01");
    }

    @Test
    public void testParseInto() {
        ReadWritableInstant mockInstant = mock(ReadWritableInstant.class);
        when(mockInstant.getMillis()).thenReturn(System.currentTimeMillis());
        when(mockInstant.getChronology()).thenReturn(ISOChronology.getInstance());

        String dateString = "2021-01-01";
        int position = formatter.parseInto(mockInstant, dateString, 0);

        assertTrue(position >= 0);
        verify(mockParser).parseInto(any(DateTimeParserBucket.class), eq(dateString), eq(0));
    }

    @Test
    public void testParseMillis() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        long millis = formatter.parseMillis("2021-01-01");
        assertTrue(millis >= 0);
    }

    @Test
    public void testParseLocalDate() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalDate localDate = formatter.parseLocalDate("2021-01-01");
        assertNotNull(localDate);
    }

    @Test
    public void testParseLocalTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalTime localTime = formatter.parseLocalTime("12:00:00");
        assertNotNull(localTime);
    }

    @Test
    public void testParseLocalDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalDateTime localDateTime = formatter.parseLocalDateTime("2021-01-01T12:00:00");
        assertNotNull(localDateTime);
    }

    @Test
    public void testParseDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        DateTime dateTime = formatter.parseDateTime("2021-01-01T12:00:00");
        assertNotNull(dateTime);
    }

    @Test
    public void testParseMutableDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        MutableDateTime mutableDateTime = formatter.parseMutableDateTime("2021-01-01T12:00:00");
        assertNotNull(mutableDateTime);
    }
}
```

This JUnit 4 test suite covers the methods in the `DateTimeFormatter` class. It uses Mockito to mock dependencies and verify interactions. The tests include checks for method functionality, exception handling, and object creation.