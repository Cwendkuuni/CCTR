```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.joda.time.*;
import org.joda.time.format.*;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.util.Locale;

public class DateTimeFormatterTest {

    private DateTimePrinter mockPrinter;
    private DateTimeParser mockParser;
    private DateTimeFormatter formatter;

    @Before
    public void setUp() {
        mockPrinter = mock(DateTimePrinter.class);
        mockParser = mock(DateTimeParser.class);
        formatter = new DateTimeFormatter(mockPrinter, mockParser);
    }

    @Test
    public void testIsPrinter() {
        assertTrue(formatter.isPrinter());
        DateTimeFormatter noPrinterFormatter = new DateTimeFormatter(null, mockParser);
        assertFalse(noPrinterFormatter.isPrinter());
    }

    @Test
    public void testGetPrinter() {
        assertEquals(mockPrinter, formatter.getPrinter());
    }

    @Test
    public void testIsParser() {
        assertTrue(formatter.isParser());
        DateTimeFormatter noParserFormatter = new DateTimeFormatter(mockPrinter, null);
        assertFalse(noParserFormatter.isParser());
    }

    @Test
    public void testGetParser() {
        assertEquals(mockParser, formatter.getParser());
    }

    @Test
    public void testWithLocale() {
        Locale locale = Locale.US;
        DateTimeFormatter newFormatter = formatter.withLocale(locale);
        assertEquals(locale, newFormatter.getLocale());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithOffsetParsed() {
        DateTimeFormatter newFormatter = formatter.withOffsetParsed();
        assertTrue(newFormatter.isOffsetParsed());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithChronology() {
        Chronology chronology = ISOChronology.getInstance();
        DateTimeFormatter newFormatter = formatter.withChronology(chronology);
        assertEquals(chronology, newFormatter.getChronology());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithZoneUTC() {
        DateTimeFormatter newFormatter = formatter.withZoneUTC();
        assertEquals(DateTimeZone.UTC, newFormatter.getZone());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithZone() {
        DateTimeZone zone = DateTimeZone.forID("America/New_York");
        DateTimeFormatter newFormatter = formatter.withZone(zone);
        assertEquals(zone, newFormatter.getZone());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithPivotYear() {
        Integer pivotYear = 2020;
        DateTimeFormatter newFormatter = formatter.withPivotYear(pivotYear);
        assertEquals(pivotYear, newFormatter.getPivotYear());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithDefaultYear() {
        int defaultYear = 1999;
        DateTimeFormatter newFormatter = formatter.withDefaultYear(defaultYear);
        assertEquals(defaultYear, newFormatter.getDefaultYear());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testPrintToStringBufferReadableInstant() {
        ReadableInstant instant = new DateTime(2023, 10, 1, 0, 0);
        StringBuffer sb = new StringBuffer();
        formatter.printTo(sb, instant);
        verify(mockPrinter).printTo(eq(sb), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToWriterReadableInstant() throws IOException {
        ReadableInstant instant = new DateTime(2023, 10, 1, 0, 0);
        StringWriter writer = new StringWriter();
        formatter.printTo(writer, instant);
        verify(mockPrinter).printTo(eq(writer), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToAppendableReadableInstant() throws IOException {
        ReadableInstant instant = new DateTime(2023, 10, 1, 0, 0);
        StringBuilder appendable = new StringBuilder();
        formatter.printTo(appendable, instant);
        verify(mockPrinter).printTo(any(Appendable.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToStringBufferLong() {
        long millis = System.currentTimeMillis();
        StringBuffer sb = new StringBuffer();
        formatter.printTo(sb, millis);
        verify(mockPrinter).printTo(eq(sb), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToWriterLong() throws IOException {
        long millis = System.currentTimeMillis();
        StringWriter writer = new StringWriter();
        formatter.printTo(writer, millis);
        verify(mockPrinter).printTo(eq(writer), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToAppendableLong() throws IOException {
        long millis = System.currentTimeMillis();
        StringBuilder appendable = new StringBuilder();
        formatter.printTo(appendable, millis);
        verify(mockPrinter).printTo(any(Appendable.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToStringBufferReadablePartial() {
        ReadablePartial partial = new LocalDate(2023, 10, 1);
        StringBuffer sb = new StringBuffer();
        formatter.printTo(sb, partial);
        verify(mockPrinter).printTo(eq(sb), eq(partial), any(Locale.class));
    }

    @Test
    public void testPrintToWriterReadablePartial() throws IOException {
        ReadablePartial partial = new LocalDate(2023, 10, 1);
        StringWriter writer = new StringWriter();
        formatter.printTo(writer, partial);
        verify(mockPrinter).printTo(eq(writer), eq(partial), any(Locale.class));
    }

    @Test
    public void testPrintToAppendableReadablePartial() throws IOException {
        ReadablePartial partial = new LocalDate(2023, 10, 1);
        StringBuilder appendable = new StringBuilder();
        formatter.printTo(appendable, partial);
        verify(mockPrinter).printTo(any(Appendable.class), eq(partial), any(Locale.class));
    }

    @Test
    public void testPrintReadableInstant() {
        ReadableInstant instant = new DateTime(2023, 10, 1, 0, 0);
        when(mockPrinter.estimatePrintedLength()).thenReturn(20);
        formatter.print(instant);
        verify(mockPrinter).printTo(any(StringBuffer.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintLong() {
        long millis = System.currentTimeMillis();
        when(mockPrinter.estimatePrintedLength()).thenReturn(20);
        formatter.print(millis);
        verify(mockPrinter).printTo(any(StringBuffer.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintReadablePartial() {
        ReadablePartial partial = new LocalDate(2023, 10, 1);
        when(mockPrinter.estimatePrintedLength()).thenReturn(20);
        formatter.print(partial);
        verify(mockPrinter).printTo(any(StringBuffer.class), eq(partial), any(Locale.class));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRequirePrinterThrowsException() {
        DateTimeFormatter noPrinterFormatter = new DateTimeFormatter(null, mockParser);
        noPrinterFormatter.print(new DateTime());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRequireParserThrowsException() {
        DateTimeFormatter noParserFormatter = new DateTimeFormatter(mockPrinter, null);
        noParserFormatter.parseMillis("2023-10-01");
    }

    @Test
    public void testParseInto() {
        ReadWritableInstant mockInstant = mock(ReadWritableInstant.class);
        when(mockInstant.getMillis()).thenReturn(System.currentTimeMillis());
        when(mockInstant.getChronology()).thenReturn(ISOChronology.getInstance());
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(0);

        int result = formatter.parseInto(mockInstant, "2023-10-01", 0);
        assertEquals(0, result);
    }

    @Test
    public void testParseMillis() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        long millis = formatter.parseMillis("2023-10-01");
        assertTrue(millis >= 0);
    }

    @Test
    public void testParseLocalDate() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalDate date = formatter.parseLocalDate("2023-10-01");
        assertNotNull(date);
    }

    @Test
    public void testParseLocalTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalTime time = formatter.parseLocalTime("12:00:00");
        assertNotNull(time);
    }

    @Test
    public void testParseLocalDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalDateTime dateTime = formatter.parseLocalDateTime("2023-10-01T12:00:00");
        assertNotNull(dateTime);
    }

    @Test
    public void testParseDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        DateTime dateTime = formatter.parseDateTime("2023-10-01T12:00:00");
        assertNotNull(dateTime);
    }

    @Test
    public void testParseMutableDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        MutableDateTime mutableDateTime = formatter.parseMutableDateTime("2023-10-01T12:00:00");
        assertNotNull(mutableDateTime);
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `DateTimeFormatter` class. It covers the construction of the formatter, its configuration methods, and its printing and parsing capabilities. The tests ensure that the formatter behaves correctly when configured with different locales, chronologies, zones, and pivot years. Additionally, it verifies that the formatter can print and parse dates and times correctly.