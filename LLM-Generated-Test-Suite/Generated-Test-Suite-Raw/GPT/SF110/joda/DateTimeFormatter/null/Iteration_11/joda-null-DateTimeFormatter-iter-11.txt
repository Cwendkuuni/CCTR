```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.joda.time.*;
import org.joda.time.format.*;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Locale;

public class DateTimeFormatterTest {

    private DateTimePrinter mockPrinter;
    private DateTimeParser mockParser;
    private DateTimeFormatter formatter;

    @Before
    public void setUp() {
        mockPrinter = mock(DateTimePrinter.class);
        mockParser = mock(DateTimeParser.class);
        formatter = new DateTimeFormatter(mockPrinter, mockParser);
    }

    @Test
    public void testIsPrinter() {
        assertTrue(formatter.isPrinter());
        DateTimeFormatter noPrinterFormatter = new DateTimeFormatter(null, mockParser);
        assertFalse(noPrinterFormatter.isPrinter());
    }

    @Test
    public void testGetPrinter() {
        assertEquals(mockPrinter, formatter.getPrinter());
    }

    @Test
    public void testIsParser() {
        assertTrue(formatter.isParser());
        DateTimeFormatter noParserFormatter = new DateTimeFormatter(mockPrinter, null);
        assertFalse(noParserFormatter.isParser());
    }

    @Test
    public void testGetParser() {
        assertEquals(mockParser, formatter.getParser());
    }

    @Test
    public void testWithLocale() {
        Locale locale = Locale.US;
        DateTimeFormatter newFormatter = formatter.withLocale(locale);
        assertEquals(locale, newFormatter.getLocale());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithOffsetParsed() {
        DateTimeFormatter newFormatter = formatter.withOffsetParsed();
        assertTrue(newFormatter.isOffsetParsed());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithChronology() {
        Chronology chronology = ISOChronology.getInstance();
        DateTimeFormatter newFormatter = formatter.withChronology(chronology);
        assertEquals(chronology, newFormatter.getChronology());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithZoneUTC() {
        DateTimeFormatter newFormatter = formatter.withZoneUTC();
        assertEquals(DateTimeZone.UTC, newFormatter.getZone());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithZone() {
        DateTimeZone zone = DateTimeZone.forID("Europe/London");
        DateTimeFormatter newFormatter = formatter.withZone(zone);
        assertEquals(zone, newFormatter.getZone());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithPivotYear() {
        Integer pivotYear = 2020;
        DateTimeFormatter newFormatter = formatter.withPivotYear(pivotYear);
        assertEquals(pivotYear, newFormatter.getPivotYear());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testWithDefaultYear() {
        int defaultYear = 1999;
        DateTimeFormatter newFormatter = formatter.withDefaultYear(defaultYear);
        assertEquals(defaultYear, newFormatter.getDefaultYear());
        assertNotSame(formatter, newFormatter);
    }

    @Test
    public void testPrintToStringBuffer() {
        StringBuffer sb = new StringBuffer();
        ReadableInstant instant = new DateTime();
        formatter.printTo(sb, instant);
        verify(mockPrinter).printTo(eq(sb), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToWriter() throws IOException {
        StringWriter writer = new StringWriter();
        ReadableInstant instant = new DateTime();
        formatter.printTo(writer, instant);
        verify(mockPrinter).printTo(eq(writer), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToAppendable() throws IOException {
        StringBuilder appendable = new StringBuilder();
        ReadableInstant instant = new DateTime();
        formatter.printTo(appendable, instant);
        verify(mockPrinter).printTo(any(Appendable.class), anyLong(), any(Chronology.class), anyInt(), any(DateTimeZone.class), any(Locale.class));
    }

    @Test
    public void testPrintToStringBufferWithPartial() {
        StringBuffer sb = new StringBuffer();
        ReadablePartial partial = new LocalDate();
        formatter.printTo(sb, partial);
        verify(mockPrinter).printTo(eq(sb), eq(partial), any(Locale.class));
    }

    @Test
    public void testPrintToWriterWithPartial() throws IOException {
        StringWriter writer = new StringWriter();
        ReadablePartial partial = new LocalDate();
        formatter.printTo(writer, partial);
        verify(mockPrinter).printTo(eq(writer), eq(partial), any(Locale.class));
    }

    @Test
    public void testPrintToAppendableWithPartial() throws IOException {
        StringBuilder appendable = new StringBuilder();
        ReadablePartial partial = new LocalDate();
        formatter.printTo(appendable, partial);
        verify(mockPrinter).printTo(any(Appendable.class), eq(partial), any(Locale.class));
    }

    @Test
    public void testPrintReadableInstant() {
        ReadableInstant instant = new DateTime();
        when(mockPrinter.estimatePrintedLength()).thenReturn(10);
        String result = formatter.print(instant);
        assertNotNull(result);
    }

    @Test
    public void testPrintLong() {
        long millis = System.currentTimeMillis();
        when(mockPrinter.estimatePrintedLength()).thenReturn(10);
        String result = formatter.print(millis);
        assertNotNull(result);
    }

    @Test
    public void testPrintReadablePartial() {
        ReadablePartial partial = new LocalDate();
        when(mockPrinter.estimatePrintedLength()).thenReturn(10);
        String result = formatter.print(partial);
        assertNotNull(result);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRequirePrinterThrowsException() {
        DateTimeFormatter noPrinterFormatter = new DateTimeFormatter(null, mockParser);
        noPrinterFormatter.print(new DateTime());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testRequireParserThrowsException() {
        DateTimeFormatter noParserFormatter = new DateTimeFormatter(mockPrinter, null);
        noParserFormatter.parseMillis("2023-10-10");
    }

    @Test
    public void testParseInto() {
        ReadWritableInstant instant = new MutableDateTime();
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(0);
        int result = formatter.parseInto(instant, "2023-10-10", 0);
        assertEquals(0, result);
    }

    @Test
    public void testParseMillis() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        long result = formatter.parseMillis("2023-10-10");
        assertNotNull(result);
    }

    @Test
    public void testParseLocalDate() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalDate result = formatter.parseLocalDate("2023-10-10");
        assertNotNull(result);
    }

    @Test
    public void testParseLocalTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalTime result = formatter.parseLocalTime("10:10:10");
        assertNotNull(result);
    }

    @Test
    public void testParseLocalDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        LocalDateTime result = formatter.parseLocalDateTime("2023-10-10T10:10:10");
        assertNotNull(result);
    }

    @Test
    public void testParseDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        DateTime result = formatter.parseDateTime("2023-10-10T10:10:10");
        assertNotNull(result);
    }

    @Test
    public void testParseMutableDateTime() {
        when(mockParser.parseInto(any(DateTimeParserBucket.class), anyString(), anyInt())).thenReturn(10);
        MutableDateTime result = formatter.parseMutableDateTime("2023-10-10T10:10:10");
        assertNotNull(result);
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `DateTimeFormatter` class. It covers the main functionalities of the class, including the creation of new formatter instances with different configurations, printing methods, and parsing methods. The tests use mock objects for `DateTimePrinter` and `DateTimeParser` to isolate the `DateTimeFormatter` class from its dependencies.