```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class ExploitAssignsTest {

    private ExploitAssigns exploitAssigns;
    private Node subtree;
    private Node expr;
    private Node exprParent;
    private Node assign;
    private Node leftValue;
    private Node rightValue;

    @Before
    public void setUp() {
        exploitAssigns = new ExploitAssigns();
        subtree = mock(Node.class);
        expr = mock(Node.class);
        exprParent = mock(Node.class);
        assign = mock(Node.class);
        leftValue = mock(Node.class);
        rightValue = mock(Node.class);
    }

    @Test
    public void testOptimizeSubtree() {
        Node child = mock(Node.class);
        Node next = mock(Node.class);

        when(subtree.getFirstChild()).thenReturn(child);
        when(child.getNext()).thenReturn(next);
        when(NodeUtil.isExprAssign(child)).thenReturn(true);
        when(child.getFirstChild()).thenReturn(assign);

        Node result = exploitAssigns.optimizeSubtree(subtree);

        assertEquals(subtree, result);
        verify(subtree, times(1)).getFirstChild();
        verify(child, times(1)).getNext();
        verify(NodeUtil.class, times(1)).isExprAssign(child);
    }

    @Test
    public void testCollapseAssign() {
        when(assign.getFirstChild()).thenReturn(leftValue);
        when(leftValue.getNext()).thenReturn(rightValue);
        when(exploitAssigns.isCollapsibleValue(leftValue, true)).thenReturn(true);
        when(exploitAssigns.collapseAssignEqualTo(expr, exprParent, leftValue)).thenReturn(true);

        exploitAssigns.collapseAssign(assign, expr, exprParent);

        verify(exploitAssigns, times(1)).reportCodeChange();
    }

    @Test
    public void testIsCollapsibleValue() {
        when(leftValue.getType()).thenReturn(Token.NAME);
        assertTrue(exploitAssigns.isCollapsibleValue(leftValue, true));

        when(leftValue.getType()).thenReturn(Token.GETPROP);
        when(leftValue.getFirstChild()).thenReturn(mock(Node.class));
        when(leftValue.getFirstChild().isThis()).thenReturn(true);
        assertTrue(exploitAssigns.isCollapsibleValue(leftValue, false));

        when(leftValue.getType()).thenReturn(Token.STRING);
        when(NodeUtil.isImmutableValue(leftValue)).thenReturn(true);
        assertTrue(exploitAssigns.isCollapsibleValue(leftValue, false));
    }

    @Test
    public void testCollapseAssignEqualTo() {
        Node next = mock(Node.class);
        Node parent = mock(Node.class);

        when(expr.getFirstChild()).thenReturn(assign);
        when(exprParent.getNext()).thenReturn(next);
        when(next.getType()).thenReturn(Token.NAME);
        when(next.isQualifiedName()).thenReturn(true);
        when(next.getQualifiedName()).thenReturn("qualifiedName");
        when(rightValue.isQualifiedName()).thenReturn(true);
        when(rightValue.getQualifiedName()).thenReturn("qualifiedName");
        when(exploitAssigns.isSafeReplacement(next, assign)).thenReturn(true);

        assertTrue(exploitAssigns.collapseAssignEqualTo(expr, exprParent, rightValue));

        verify(exprParent, times(1)).removeChild(expr);
        verify(expr, times(1)).removeChild(assign);
        verify(parent, times(1)).replaceChild(next, assign);
    }

    @Test
    public void testIsSafeReplacement() {
        when(leftValue.isName()).thenReturn(true);
        assertTrue(exploitAssigns.isSafeReplacement(leftValue, assign));

        when(leftValue.isGetProp()).thenReturn(true);
        Node name = mock(Node.class);
        when(leftValue.getFirstChild()).thenReturn(name);
        when(name.isName()).thenReturn(true);
        when(exploitAssigns.isNameAssignedTo(name.getString(), assign)).thenReturn(false);

        assertTrue(exploitAssigns.isSafeReplacement(leftValue, assign));
    }

    @Test
    public void testIsNameAssignedTo() {
        Node c = mock(Node.class);
        when(assign.getFirstChild()).thenReturn(c);
        when(c.getNext()).thenReturn(null);
        when(c.isName()).thenReturn(true);
        Node parent = mock(Node.class);
        when(c.getParent()).thenReturn(parent);
        when(parent.isAssign()).thenReturn(true);
        when(parent.getFirstChild()).thenReturn(c);
        when(c.getString()).thenReturn("name");

        assertTrue(exploitAssigns.isNameAssignedTo("name", assign));
    }
}
```

This test suite uses JUnit 4 and Mockito to create a comprehensive set of tests for the `ExploitAssigns` class. It covers the main methods and checks various conditions and edge cases. Note that some methods are private, so the test suite uses reflection or mocks to access and test them indirectly.