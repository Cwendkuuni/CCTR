```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class ExploitAssignsTest {

    private ExploitAssigns exploitAssigns;
    private Node subtree;
    private Node expr;
    private Node exprParent;
    private Node assign;
    private Node leftValue;
    private Node rightValue;

    @Before
    public void setUp() {
        exploitAssigns = new ExploitAssigns();
        subtree = mock(Node.class);
        expr = mock(Node.class);
        exprParent = mock(Node.class);
        assign = mock(Node.class);
        leftValue = mock(Node.class);
        rightValue = mock(Node.class);
    }

    @Test
    public void testOptimizeSubtree() {
        Node child = mock(Node.class);
        when(subtree.getFirstChild()).thenReturn(child);
        when(child.getNext()).thenReturn(null);
        when(NodeUtil.isExprAssign(child)).thenReturn(true);
        when(child.getFirstChild()).thenReturn(assign);

        exploitAssigns.optimizeSubtree(subtree);

        verify(subtree).getFirstChild();
        verify(child).getNext();
        verify(NodeUtil.class);
        NodeUtil.isExprAssign(child);
    }

    @Test
    public void testCollapseAssign() {
        when(assign.getFirstChild()).thenReturn(leftValue);
        when(leftValue.getNext()).thenReturn(rightValue);
        when(exploitAssigns.isCollapsibleValue(leftValue, true)).thenReturn(true);
        when(exploitAssigns.collapseAssignEqualTo(expr, exprParent, leftValue)).thenReturn(true);

        exploitAssigns.collapseAssign(assign, expr, exprParent);

        verify(assign).getFirstChild();
        verify(leftValue).getNext();
        verify(exploitAssigns).isCollapsibleValue(leftValue, true);
        verify(exploitAssigns).collapseAssignEqualTo(expr, exprParent, leftValue);
    }

    @Test
    public void testIsCollapsibleValue() {
        when(leftValue.getType()).thenReturn(Token.NAME);
        assertTrue(exploitAssigns.isCollapsibleValue(leftValue, true));

        when(leftValue.getType()).thenReturn(Token.GETPROP);
        when(leftValue.getFirstChild()).thenReturn(mock(Node.class));
        when(leftValue.getFirstChild().isThis()).thenReturn(true);
        assertTrue(exploitAssigns.isCollapsibleValue(leftValue, true));

        when(leftValue.getType()).thenReturn(Token.GETPROP);
        when(leftValue.getFirstChild().isThis()).thenReturn(false);
        assertFalse(exploitAssigns.isCollapsibleValue(leftValue, true));

        when(leftValue.getType()).thenReturn(Token.STRING);
        when(NodeUtil.isImmutableValue(leftValue)).thenReturn(true);
        assertTrue(exploitAssigns.isCollapsibleValue(leftValue, false));
    }

    @Test
    public void testCollapseAssignEqualTo() {
        Node next = mock(Node.class);
        when(expr.getFirstChild()).thenReturn(assign);
        when(expr.getNext()).thenReturn(next);
        when(next.getType()).thenReturn(Token.NAME);
        when(next.isQualifiedName()).thenReturn(true);
        when(next.getQualifiedName()).thenReturn("qualifiedName");
        when(rightValue.isQualifiedName()).thenReturn(true);
        when(rightValue.getQualifiedName()).thenReturn("qualifiedName");
        when(exploitAssigns.isSafeReplacement(next, assign)).thenReturn(true);

        assertTrue(exploitAssigns.collapseAssignEqualTo(expr, exprParent, rightValue));

        verify(expr).getFirstChild();
        verify(expr).getNext();
        verify(next).getType();
        verify(next).isQualifiedName();
        verify(next).getQualifiedName();
        verify(rightValue).isQualifiedName();
        verify(rightValue).getQualifiedName();
        verify(exploitAssigns).isSafeReplacement(next, assign);
    }

    @Test
    public void testIsSafeReplacement() {
        when(leftValue.isName()).thenReturn(true);
        assertTrue(exploitAssigns.isSafeReplacement(leftValue, assign));

        when(leftValue.isName()).thenReturn(false);
        when(leftValue.isGetProp()).thenReturn(true);
        Node name = mock(Node.class);
        when(leftValue.getFirstChild()).thenReturn(name);
        when(name.isName()).thenReturn(true);
        when(name.getString()).thenReturn("name");
        when(exploitAssigns.isNameAssignedTo("name", assign)).thenReturn(false);

        assertTrue(exploitAssigns.isSafeReplacement(leftValue, assign));

        when(exploitAssigns.isNameAssignedTo("name", assign)).thenReturn(true);
        assertFalse(exploitAssigns.isSafeReplacement(leftValue, assign));
    }

    @Test
    public void testIsNameAssignedTo() {
        Node child = mock(Node.class);
        when(assign.getFirstChild()).thenReturn(child);
        when(child.getNext()).thenReturn(null);
        when(child.isName()).thenReturn(true);
        when(child.getString()).thenReturn("name");
        Node parent = mock(Node.class);
        when(child.getParent()).thenReturn(parent);
        when(parent.isAssign()).thenReturn(true);
        when(parent.getFirstChild()).thenReturn(child);

        assertTrue(exploitAssigns.isNameAssignedTo("name", assign));

        when(child.getString()).thenReturn("otherName");
        assertFalse(exploitAssigns.isNameAssignedTo("name", assign));
    }
}
```

This test suite uses Mockito to mock the `Node` class and its interactions, allowing us to focus on testing the logic within the `ExploitAssigns` class. Each test method corresponds to a method in the `ExploitAssigns` class, ensuring comprehensive coverage.