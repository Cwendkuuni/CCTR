```java
import org.junit.Test;
import org.scribe.model.Token;
import static org.junit.Assert.*;

public class TokenTest {

    @Test
    public void testGetToken() {
        Token token = new Token("testToken", "testSecret");
        assertEquals("testToken", token.getToken());
    }

    @Test
    public void testGetSecret() {
        Token token = new Token("testToken", "testSecret");
        assertEquals("testSecret", token.getSecret());
    }

    @Test
    public void testGetRawResponseWithNull() {
        Token token = new Token("testToken", "testSecret");
        try {
            token.getRawResponse();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("This token object was not constructed by scribe and does not have a rawResponse", e.getMessage());
        }
    }

    @Test
    public void testGetRawResponseWithNonNull() {
        Token token = new Token("testToken", "testSecret", "rawResponse");
        assertEquals("rawResponse", token.getRawResponse());
    }

    @Test
    public void testToString() {
        Token token = new Token("testToken", "testSecret");
        assertEquals("Token[testToken , testSecret]", token.toString());
    }

    @Test
    public void testSerialization() throws IOException, ClassNotFoundException {
        Token originalToken = new Token("testToken", "testSecret", "rawResponse");

        // Serialize the token
        ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();
        ObjectOutputStream outStream = new ObjectOutputStream(byteOutStream);
        outStream.writeObject(originalToken);
        outStream.flush();
        outStream.close();

        // Deserialize the token
        ByteArrayInputStream byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray());
        ObjectInputStream inStream = new ObjectInputStream(byteInStream);
        Token deserializedToken = (Token) inStream.readObject();
        inStream.close();

        // Verify the deserialized object
        assertEquals(originalToken.getToken(), deserializedToken.getToken());
        assertEquals(originalToken.getSecret(), deserializedToken.getSecret());
        assertEquals(originalToken.getRawResponse(), deserializedToken.getRawResponse());
    }
}
```