```java
package org.scribe.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class TokenTest {

    @Test
    public void testConstructorWithTwoParameters() {
        String token = "testToken";
        String secret = "testSecret";
        Token t = new Token(token, secret);

        assertEquals("Token should match", token, t.getToken());
        assertEquals("Secret should match", secret, t.getSecret());
        try {
            t.getRawResponse();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("Exception message should match", "This token object was not constructed by scribe and does not have a rawResponse", e.getMessage());
        }
    }

    @Test
    public void testConstructorWithThreeParameters() {
        String token = "testToken";
        String secret = "testSecret";
        String rawResponse = "testRawResponse";
        Token t = new Token(token, secret, rawResponse);

        assertEquals("Token should match", token, t.getToken());
        assertEquals("Secret should match", secret, t.getSecret());
        assertEquals("RawResponse should match", rawResponse, t.getRawResponse());
    }

    @Test
    public void testGetToken() {
        String token = "testToken";
        Token t = new Token(token, "testSecret");

        assertEquals("Token should match", token, t.getToken());
    }

    @Test
    public void testGetSecret() {
        String secret = "testSecret";
        Token t = new Token("testToken", secret);

        assertEquals("Secret should match", secret, t.getSecret());
    }

    @Test
    public void testGetRawResponseWithNull() {
        Token t = new Token("testToken", "testSecret");

        try {
            t.getRawResponse();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("Exception message should match", "This token object was not constructed by scribe and does not have a rawResponse", e.getMessage());
        }
    }

    @Test
    public void testGetRawResponseWithNonNull() {
        String rawResponse = "testRawResponse";
        Token t = new Token("testToken", "testSecret", rawResponse);

        assertEquals("RawResponse should match", rawResponse, t.getRawResponse());
    }

    @Test
    public void testToString() {
        String token = "testToken";
        String secret = "testSecret";
        Token t = new Token(token, secret);

        assertEquals("String representation should match", "Token[testToken , testSecret]", t.toString());
    }
}
```