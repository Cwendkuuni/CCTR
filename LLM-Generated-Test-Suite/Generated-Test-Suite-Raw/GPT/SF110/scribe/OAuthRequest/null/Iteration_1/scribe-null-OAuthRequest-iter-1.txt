```java
import org.junit.Before;
import org.junit.Test;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Verb;

import java.util.Map;

import static org.junit.Assert.*;

public class OAuthRequestTest {

    private OAuthRequest oAuthRequest;

    @Before
    public void setUp() {
        oAuthRequest = new OAuthRequest(Verb.GET, "http://example.com");
    }

    @Test
    public void testAddOAuthParameter_ValidKey() {
        oAuthRequest.addOAuthParameter("oauth_token", "tokenValue");
        Map<String, String> oauthParameters = oAuthRequest.getOauthParameters();
        assertEquals("tokenValue", oauthParameters.get("oauth_token"));
    }

    @Test
    public void testAddOAuthParameter_ValidScopeKey() {
        oAuthRequest.addOAuthParameter("scope", "read");
        Map<String, String> oauthParameters = oAuthRequest.getOauthParameters();
        assertEquals("read", oauthParameters.get("scope"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddOAuthParameter_InvalidKey() {
        oAuthRequest.addOAuthParameter("invalid_key", "value");
    }

    @Test
    public void testGetOauthParameters_Empty() {
        Map<String, String> oauthParameters = oAuthRequest.getOauthParameters();
        assertTrue(oauthParameters.isEmpty());
    }

    @Test
    public void testGetOauthParameters_NonEmpty() {
        oAuthRequest.addOAuthParameter("oauth_token", "tokenValue");
        Map<String, String> oauthParameters = oAuthRequest.getOauthParameters();
        assertFalse(oauthParameters.isEmpty());
        assertEquals(1, oauthParameters.size());
    }

    @Test
    public void testToString() {
        String expected = "@OAuthRequest(GET, http://example.com)";
        assertEquals(expected, oAuthRequest.toString());
    }
}
```