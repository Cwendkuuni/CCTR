Certainly! Below is a JUnit 4 test suite for the `OAuthRequest` class. This test suite covers the constructor, `addOAuthParameter`, `getOauthParameters`, and `toString` methods, as well as the private `checkKey` method using reflection.

```java
import org.junit.Before;
import org.junit.Test;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Verb;

import java.lang.reflect.Method;
import java.util.Map;

import static org.junit.Assert.*;

public class OAuthRequestTest {

    private OAuthRequest request;

    @Before
    public void setUp() {
        request = new OAuthRequest(Verb.GET, "http://example.com");
    }

    @Test
    public void testConstructor() {
        assertNotNull("OAuth parameters map should be initialized", request.getOauthParameters());
        assertTrue("OAuth parameters map should be empty", request.getOauthParameters().isEmpty());
    }

    @Test
    public void testAddOAuthParameterValidKey() {
        request.addOAuthParameter("oauth_token", "tokenValue");
        Map<String, String> params = request.getOauthParameters();
        assertEquals("OAuth parameters map should contain one entry", 1, params.size());
        assertEquals("OAuth parameter value should match", "tokenValue", params.get("oauth_token"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddOAuthParameterInvalidKey() {
        request.addOAuthParameter("invalid_key", "value");
    }

    @Test
    public void testAddOAuthParameterScopeKey() {
        request.addOAuthParameter("scope", "read");
        Map<String, String> params = request.getOauthParameters();
        assertEquals("OAuth parameters map should contain one entry", 1, params.size());
        assertEquals("OAuth parameter value should match", "read", params.get("scope"));
    }

    @Test
    public void testGetOauthParameters() {
        request.addOAuthParameter("oauth_token", "tokenValue");
        Map<String, String> params = request.getOauthParameters();
        assertNotNull("OAuth parameters map should not be null", params);
        assertEquals("OAuth parameters map should contain one entry", 1, params.size());
        assertEquals("OAuth parameter value should match", "tokenValue", params.get("oauth_token"));
    }

    @Test
    public void testToString() {
        String expected = "@OAuthRequest(GET, http://example.com)";
        assertEquals("toString method should return expected format", expected, request.toString());
    }

    @Test
    public void testCheckKeyValid() throws Exception {
        Method checkKeyMethod = OAuthRequest.class.getDeclaredMethod("checkKey", String.class);
        checkKeyMethod.setAccessible(true);

        String result = (String) checkKeyMethod.invoke(request, "oauth_token");
        assertEquals("checkKey should return the same key for valid input", "oauth_token", result);

        result = (String) checkKeyMethod.invoke(request, "scope");
        assertEquals("checkKey should return the same key for 'scope'", "scope", result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCheckKeyInvalid() throws Exception {
        Method checkKeyMethod = OAuthRequest.class.getDeclaredMethod("checkKey", String.class);
        checkKeyMethod.setAccessible(true);

        checkKeyMethod.invoke(request, "invalid_key");
    }
}
```

This test suite uses reflection to test the private `checkKey` method, ensuring that both valid and invalid keys are handled correctly. The suite also verifies the behavior of the `addOAuthParameter`, `getOauthParameters`, and `toString` methods.