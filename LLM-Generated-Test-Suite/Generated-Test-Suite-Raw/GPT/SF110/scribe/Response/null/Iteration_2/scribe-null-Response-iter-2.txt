Certainly! Below is a JUnit 4 test suite for the `Response` class. This test suite aims to cover the functionality of all the methods in the class. Note that some methods, such as `parseHeaders` and `parseBodyContents`, are private and cannot be directly tested. Instead, their functionality is indirectly tested through the public methods that use them.

```java
import org.junit.*;
import org.mockito.*;
import java.io.*;
import java.net.*;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ResponseTest {

    @Mock
    private HttpURLConnection mockConnection;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testResponseConstructorSuccess() throws Exception {
        InputStream mockInputStream = new ByteArrayInputStream("response body".getBytes());
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getInputStream()).thenReturn(mockInputStream);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        assertEquals(200, response.getCode());
        assertEquals("response body", response.getBody());
        assertEquals("value1", response.getHeader("header1"));
        assertEquals("value2", response.getHeader("header2"));
    }

    @Test
    public void testResponseConstructorFailure() throws Exception {
        InputStream mockErrorStream = new ByteArrayInputStream("error body".getBytes());
        when(mockConnection.getResponseCode()).thenReturn(404);
        when(mockConnection.getErrorStream()).thenReturn(mockErrorStream);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        assertEquals(404, response.getCode());
        assertEquals("error body", response.getBody());
        assertEquals("value1", response.getHeader("header1"));
        assertEquals("value2", response.getHeader("header2"));
    }

    @Test
    public void testResponseConstructorUnknownHostException() throws Exception {
        when(mockConnection.connect()).thenThrow(new UnknownHostException());

        Response response = new Response(mockConnection);

        assertEquals(404, response.getCode());
        assertEquals("", response.getBody());
    }

    @Test
    public void testGetBody() throws Exception {
        InputStream mockInputStream = new ByteArrayInputStream("response body".getBytes());
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getInputStream()).thenReturn(mockInputStream);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        assertEquals("response body", response.getBody());
    }

    @Test
    public void testGetStream() throws Exception {
        InputStream mockInputStream = new ByteArrayInputStream("response body".getBytes());
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getInputStream()).thenReturn(mockInputStream);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        assertEquals(mockInputStream, response.getStream());
    }

    @Test
    public void testGetCode() throws Exception {
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        assertEquals(200, response.getCode());
    }

    @Test
    public void testGetHeaders() throws Exception {
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        Map<String, String> headers = response.getHeaders();
        assertEquals(2, headers.size());
        assertEquals("value1", headers.get("header1"));
        assertEquals("value2", headers.get("header2"));
    }

    @Test
    public void testGetHeader() throws Exception {
        when(mockConnection.getResponseCode()).thenReturn(200);
        when(mockConnection.getHeaderFields()).thenReturn(createMockHeaders());

        Response response = new Response(mockConnection);

        assertEquals("value1", response.getHeader("header1"));
        assertEquals("value2", response.getHeader("header2"));
        assertNull(response.getHeader("nonexistent"));
    }

    private Map<String, List<String>> createMockHeaders() {
        Map<String, List<String>> headers = new HashMap<>();
        headers.put("header1", Collections.singletonList("value1"));
        headers.put("header2", Collections.singletonList("value2"));
        return headers;
    }
}
```

### Explanation:
- **Mockito** is used to mock the `HttpURLConnection` object, allowing us to simulate different responses and header configurations.
- **Test Methods**:
  - `testResponseConstructorSuccess`: Tests the constructor when a successful response is received.
  - `testResponseConstructorFailure`: Tests the constructor when an error response is received.
  - `testResponseConstructorUnknownHostException`: Tests the constructor handling of `UnknownHostException`.
  - `testGetBody`, `testGetStream`, `testGetCode`, `testGetHeaders`, `testGetHeader`: Test the respective getter methods.
- **Helper Method**:
  - `createMockHeaders`: Creates a mock header map to simulate HTTP headers.

This test suite should provide comprehensive coverage for the `Response` class.