Certainly! Below is a JUnit 4 test suite for the `MainMenu` class. This test suite aims to cover the functionality of the methods within the class, including the creation of menus and menu items, as well as handling of shortcuts and icons.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.allenstudio.ir.core.InspirentoMediator;
import com.allenstudio.ir.util.InspirentoUtilities;
import com.allenstudio.ir.util.UIResources;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.util.MissingResourceException;

@RunWith(MockitoJUnitRunner.class)
public class MainMenuTest {

    @Mock
    private InspirentoMediator mockMediator;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testMainMenuConstructor() {
        // Mock the UIResources and InspirentoUtilities
        mockStatic(UIResources.class);
        mockStatic(InspirentoUtilities.class);

        // Define the behavior of the mocked methods
        when(UIResources.getString("menu")).thenReturn("file edit view");
        when(InspirentoUtilities.tokenize("file edit view")).thenReturn(new String[]{"file", "edit", "view"});

        // Create an instance of MainMenu
        MainMenu mainMenu = new MainMenu(mockMediator);

        // Verify that the menus are added
        assertEquals(3, mainMenu.getMenuCount());
    }

    @Test
    public void testCreateMenu() {
        // Mock the UIResources and InspirentoUtilities
        mockStatic(UIResources.class);
        mockStatic(InspirentoUtilities.class);

        // Define the behavior of the mocked methods
        when(UIResources.getString("fileLabel")).thenReturn("File*F");
        when(UIResources.getString("file")).thenReturn("new open save");
        when(InspirentoUtilities.tokenize("new open save")).thenReturn(new String[]{"new", "open", "save"});

        // Create an instance of MainMenu
        MainMenu mainMenu = new MainMenu(mockMediator);

        // Use reflection to access the private createMenu method
        JMenu fileMenu = mainMenu.createMenu("file");

        // Verify the menu and its items
        assertEquals("File", fileMenu.getText());
        assertEquals(3, fileMenu.getItemCount());
        assertEquals("new", fileMenu.getItem(0).getText());
        assertEquals("open", fileMenu.getItem(1).getText());
        assertEquals("save", fileMenu.getItem(2).getText());
    }

    @Test
    public void testAddShortcutAndIcon() {
        // Mock the UIResources
        mockStatic(UIResources.class);

        // Define the behavior of the mocked methods
        when(UIResources.getString("newShortcut")).thenReturn("ctrl N");
        when(UIResources.getString("newIcon")).thenReturn("/icons/new.png");

        // Create an instance of MainMenu
        MainMenu mainMenu = new MainMenu(mockMediator);

        // Create a JMenuItem
        JMenuItem menuItem = new JMenuItem("New");

        // Use reflection to access the private addShortcutAndIcon method
        mainMenu.addShortcutAndIcon(menuItem, "new");

        // Verify the shortcut and icon
        assertEquals(KeyStroke.getKeyStroke("ctrl N"), menuItem.getAccelerator());
        assertNotNull(menuItem.getIcon());
    }

    @Test
    public void testChanged() {
        // Create an instance of MainMenu
        MainMenu mainMenu = new MainMenu(mockMediator);

        // Call the changed method
        mainMenu.changed();

        // Verify that no exception is thrown
        assertTrue(true);
    }
}
```

### Explanation:
- **Mocking**: The test suite uses Mockito to mock dependencies like `InspirentoMediator`, `UIResources`, and `InspirentoUtilities`.
- **Reflection**: Since `createMenu` and `addShortcutAndIcon` are private methods, the test suite assumes they are accessible for testing purposes. In practice, you might need to adjust the visibility or use reflection to test private methods.
- **Assertions**: The tests include assertions to verify that menus and menu items are created correctly, and that shortcuts and icons are set as expected.
- **Error Handling**: The test suite assumes that `MissingResourceException` is handled gracefully within the methods, as indicated by the original code.

This test suite provides a comprehensive approach to testing the `MainMenu` class, ensuring that its methods behave as expected under various conditions.