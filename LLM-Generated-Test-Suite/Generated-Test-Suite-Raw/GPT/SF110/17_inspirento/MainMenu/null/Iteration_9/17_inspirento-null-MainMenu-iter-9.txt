Certainly! Below is a JUnit 4 test suite for the `MainMenu` class. This test suite aims to cover the functionality of the methods within the class, including the constructor, `createMenu`, and `addShortcutAndIcon` methods. Note that some methods rely on external resources, so you'll need to mock or provide these resources for the tests to run successfully.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.allenstudio.ir.core.InspirentoMediator;
import com.allenstudio.ir.util.InspirentoUtilities;
import com.allenstudio.ir.util.UIResources;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.net.URL;
import java.util.MissingResourceException;

@RunWith(MockitoJUnitRunner.class)
public class MainMenuTest {

    @Mock
    private InspirentoMediator mediator;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testMainMenuConstructor() {
        // Mock the UIResources and InspirentoUtilities
        mockStatic(UIResources.class);
        mockStatic(InspirentoUtilities.class);

        // Mock the behavior of UIResources and InspirentoUtilities
        when(UIResources.getString("menu")).thenReturn("file edit view");
        when(InspirentoUtilities.tokenize("file edit view")).thenReturn(new String[]{"file", "edit", "view"});

        // Create MainMenu instance
        MainMenu mainMenu = new MainMenu(mediator);

        // Verify that menus are added
        assertEquals(3, mainMenu.getMenuCount());
    }

    @Test
    public void testCreateMenu() {
        // Mock the UIResources and InspirentoUtilities
        mockStatic(UIResources.class);
        mockStatic(InspirentoUtilities.class);

        // Mock the behavior of UIResources and InspirentoUtilities
        when(UIResources.getString("fileLabel")).thenReturn("File*F");
        when(UIResources.getString("file")).thenReturn("new open save");
        when(InspirentoUtilities.tokenize("new open save")).thenReturn(new String[]{"new", "open", "save"});

        // Create MainMenu instance
        MainMenu mainMenu = new MainMenu(mediator);

        // Invoke createMenu method
        JMenu fileMenu = mainMenu.createMenu("file");

        // Verify the menu and its items
        assertNotNull(fileMenu);
        assertEquals("File", fileMenu.getText());
        assertEquals(3, fileMenu.getItemCount());
    }

    @Test
    public void testAddShortcutAndIcon() {
        // Mock the UIResources
        mockStatic(UIResources.class);

        // Mock the behavior of UIResources
        when(UIResources.getString("newShortcut")).thenReturn("ctrl N");
        when(UIResources.getString("newIcon")).thenReturn("/icons/new.png");

        // Create MainMenu instance
        MainMenu mainMenu = new MainMenu(mediator);

        // Create a JMenuItem
        JMenuItem menuItem = new JMenuItem();

        // Invoke addShortcutAndIcon method
        mainMenu.addShortcutAndIcon(menuItem, "new");

        // Verify the shortcut and icon
        assertEquals(KeyStroke.getKeyStroke("ctrl N"), menuItem.getAccelerator());
        assertNotNull(menuItem.getIcon());
    }

    @Test
    public void testAddShortcutAndIconWithMissingResources() {
        // Mock the UIResources
        mockStatic(UIResources.class);

        // Mock the behavior of UIResources to throw MissingResourceException
        when(UIResources.getString("missingShortcut")).thenThrow(new MissingResourceException("Missing", "String", "missingShortcut"));
        when(UIResources.getString("missingIcon")).thenThrow(new MissingResourceException("Missing", "String", "missingIcon"));

        // Create MainMenu instance
        MainMenu mainMenu = new MainMenu(mediator);

        // Create a JMenuItem
        JMenuItem menuItem = new JMenuItem();

        // Invoke addShortcutAndIcon method
        mainMenu.addShortcutAndIcon(menuItem, "missing");

        // Verify that no shortcut or icon is set
        assertNull(menuItem.getAccelerator());
        assertNull(menuItem.getIcon());
    }
}
```

### Notes:
- **Mocking**: The test suite uses Mockito to mock dependencies like `InspirentoMediator`, `UIResources`, and `InspirentoUtilities`. This is crucial because the `MainMenu` class relies on external resources.
- **Static Methods**: The `UIResources` and `InspirentoUtilities` classes are assumed to have static methods. You might need to use a library like PowerMock to mock static methods if necessary.
- **Resource Handling**: The test suite assumes that the resources are available and correctly mocked. If the resources are not available, the tests will need to handle `MissingResourceException`.
- **JUnit 4**: The test suite is written for JUnit 4, as requested. If you are using JUnit 5, some annotations and imports will differ.