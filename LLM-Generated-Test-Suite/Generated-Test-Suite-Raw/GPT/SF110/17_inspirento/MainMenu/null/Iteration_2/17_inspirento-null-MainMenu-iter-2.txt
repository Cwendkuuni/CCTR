```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.util.MissingResourceException;

@RunWith(MockitoJUnitRunner.class)
public class MainMenuTest {

    @Mock
    private InspirentoMediator mockMediator;

    private MainMenu mainMenu;

    @Before
    public void setUp() {
        mainMenu = new MainMenu(mockMediator);
    }

    @Test
    public void testMainMenuInitialization() {
        assertNotNull("MainMenu should be initialized", mainMenu);
    }

    @Test
    public void testCreateMenuWithValidMenu() {
        // Assuming UIResources and InspirentoUtilities are properly mocked or set up
        String menuName = "file";
        JMenu menu = mainMenu.createMenu(menuName);
        assertNotNull("Menu should be created", menu);
        assertEquals("Menu name should match", UIResources.getString(menuName + "Label"), menu.getText());
    }

    @Test
    public void testCreateMenuWithInvalidMenu() {
        String invalidMenuName = "invalidMenu";
        try {
            mainMenu.createMenu(invalidMenuName);
            fail("Expected MissingResourceException to be thrown");
        } catch (MissingResourceException e) {
            // Expected exception
        }
    }

    @Test
    public void testAddShortcutAndIconWithValidKey() {
        JMenuItem menuItem = new JMenuItem();
        String validKey = "open";
        mainMenu.addShortcutAndIcon(menuItem, validKey);

        // Assuming UIResources.getString(validKey + "Shortcut") returns a valid shortcut
        assertNotNull("Shortcut should be set", menuItem.getAccelerator());

        // Assuming UIResources.getString(validKey + "Icon") returns a valid path
        assertNotNull("Icon should be set", menuItem.getIcon());
    }

    @Test
    public void testAddShortcutAndIconWithInvalidKey() {
        JMenuItem menuItem = new JMenuItem();
        String invalidKey = "invalidKey";
        mainMenu.addShortcutAndIcon(menuItem, invalidKey);

        // No exception should be thrown, but no shortcut or icon should be set
        assertNull("Shortcut should not be set", menuItem.getAccelerator());
        assertNull("Icon should not be set", menuItem.getIcon());
    }

    @Test
    public void testChangedMethod() {
        // This method does nothing, so just ensure it can be called without exception
        mainMenu.changed();
    }
}
```

### Explanation:
- **Mocking**: The `InspirentoMediator` is mocked using Mockito to isolate the `MainMenu` class for testing.
- **Setup**: The `setUp` method initializes the `MainMenu` instance before each test.
- **Tests**:
  - **Initialization**: Verifies that the `MainMenu` is initialized correctly.
  - **Menu Creation**: Tests the `createMenu` method with both valid and invalid menu names.
  - **Shortcut and Icon**: Tests the `addShortcutAndIcon` method with both valid and invalid keys.
  - **Changed Method**: Ensures the `changed` method can be called without exceptions.

### Note:
- The test suite assumes that `UIResources` and `InspirentoUtilities` are properly set up or mocked to return expected values for the tests to pass.
- The `createMenu` and `addShortcutAndIcon` methods are private in the original class. For testing purposes, you might need to change their visibility to package-private or use reflection.