To create a comprehensive JUnit 4 test suite for the `SimpleSector` class, we need to test each method, ensuring that they behave as expected under various conditions. Below is a test suite that covers the functionality of the `SimpleSector` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.util.HashSet;
import java.util.Set;

public class SimpleSectorTest {

    private SimpleSector sector;
    private CharacterClass mockClass;
    private CombatantSide mockSide;
    private SectorObserver mockObserver;
    private Area mockArea;
    private Combatant mockCombatant;
    private Weapon mockWeapon;

    @Before
    public void setUp() {
        mockClass = Mockito.mock(CharacterClass.class);
        mockSide = Mockito.mock(CombatantSide.class);
        mockObserver = Mockito.mock(SectorObserver.class);
        mockArea = Mockito.mock(Area.class);
        mockCombatant = Mockito.mock(Combatant.class);
        mockWeapon = Mockito.mock(Weapon.class);

        sector = new SimpleSector(10, true, false, 5, 3, true, 2, mockClass);
    }

    @Test
    public void testFree() {
        sector.gainControl(mockSide);
        sector.free();
        assertNull(sector.getOccupier());
        assertFalse(sector.isOccupied());
    }

    @Test
    public void testGainControl() {
        sector.gainControl(mockSide);
        assertEquals(mockSide, sector.getOccupier());
        assertTrue(sector.isOccupied());
    }

    @Test
    public void testGetHeight() {
        assertEquals(10, sector.getHeight());
    }

    @Test
    public void testIsDefenderSpawn() {
        assertTrue(sector.isDefenderSpawn());
    }

    @Test
    public void testIsAttackerSpawn() {
        assertFalse(sector.isAttackerSpawn());
    }

    @Test
    public void testIsFlag() {
        assertTrue(sector.isFlag());
    }

    @Test
    public void testGetBonus() {
        Mockito.when(mockArea.isOccupied()).thenReturn(true);
        Mockito.when(mockArea.getOccupier()).thenReturn(mockCombatant);
        Mockito.when(mockCombatant.getWeapon()).thenReturn(mockWeapon);
        Mockito.when(mockWeapon.getSectorBonus(SectorBonus.BonusType.ATTACK)).thenReturn(1);
        Mockito.when(mockWeapon.getSectorBonus(SectorBonus.BonusType.DEFENSE)).thenReturn(1);
        Mockito.when(mockWeapon.getSectorBonus(SectorBonus.BonusType.DAMAGE)).thenReturn(1);

        sector._addArea(mockArea);

        SectorBonus bonus = sector.getBonus(mockClass);
        assertEquals(8, bonus.getAttackBonus());
        assertEquals(6, bonus.getDefenseBonus());
        assertEquals(1, bonus.getDamageBonus());
    }

    @Test
    public void testAddObserver() {
        sector.addObserver(mockObserver);
        sector.gainControl(mockSide);
        Mockito.verify(mockObserver).occupierChanged();
    }

    @Test
    public void testRemoveObserver() {
        sector.addObserver(mockObserver);
        sector.removeObserver(mockObserver);
        sector.gainControl(mockSide);
        Mockito.verify(mockObserver, Mockito.never()).occupierChanged();
    }

    @Test
    public void testGetAreas() {
        Set<Area> areas = sector.getAreas();
        assertNotNull(areas);
        assertTrue(areas.isEmpty());
    }

    @Test
    public void testAddArea() {
        sector._addArea(mockArea);
        assertTrue(sector.getAreas().contains(mockArea));
    }

    @Test
    public void testEqualsAndHashCode() {
        SimpleSector sameSector = new SimpleSector(10, true, false, 5, 3, true, 2, mockClass);
        assertEquals(sector, sameSector);
        assertEquals(sector.hashCode(), sameSector.hashCode());

        SimpleSector differentSector = new SimpleSector(9, false, true, 4, 2, false, 1, mockClass);
        assertNotEquals(sector, differentSector);
        assertNotEquals(sector.hashCode(), differentSector.hashCode());
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes the `SimpleSector` instance and mocks necessary dependencies using Mockito.
- **Test Methods**: Each test method checks a specific functionality of the `SimpleSector` class.
  - `testFree` and `testGainControl` check the occupier management.
  - `testGetHeight`, `testIsDefenderSpawn`, `testIsAttackerSpawn`, and `testIsFlag` verify the properties of the sector.
  - `testGetBonus` checks the calculation of bonuses.
  - `testAddObserver` and `testRemoveObserver` verify observer notification.
  - `testGetAreas` and `testAddArea` ensure area management works correctly.
  - `testEqualsAndHashCode` checks the equality and hash code contract.

This test suite uses Mockito to mock dependencies and verify interactions, ensuring comprehensive coverage of the `SimpleSector` class.