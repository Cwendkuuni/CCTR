To create a comprehensive JUnit 4 test suite for the `Convert` class, we need to consider testing the constructors, the `init` method, the `run` method, the `Transcode` method, and the `matrix` method. However, due to the complexity and dependencies of the `Convert` class, such as the `GUI` class and file system interactions, we will need to mock these dependencies to isolate the unit tests.

Below is a JUnit 4 test suite for the `Convert` class. Note that this test suite uses the Mockito framework to mock dependencies and interactions. You will need to include Mockito in your project's dependencies to run these tests.

```java
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ConvertTest {

    @Mock
    private GUI mockGUI;

    @InjectMocks
    private Convert convert;

    @Before
    public void setUp() {
        // Initialize the Convert object with mock GUI
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
    }

    @Test
    public void testConstructorWithFormatAndAspectRatio() {
        Convert convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        assertEquals("dvd-ntsc", convert.m_Format);
        assertEquals("16:9", convert.m_AspectRatio);
        assertEquals(29.97, convert.m_fps, 0.01);
    }

    @Test
    public void testConstructorWithQualityFormatAndAspectRatio() {
        Convert convert = new Convert(1, "dvd-pal", "4:3", mockGUI);
        assertEquals(1, convert.m_Quality);
        assertEquals("dvd-pal", convert.m_Format);
        assertEquals("4:3", convert.m_AspectRatio);
        assertEquals(25.0, convert.m_fps, 0.01);
    }

    @Test
    public void testInitWhenMenuChkThreadIsSelected() throws InterruptedException {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(true);
        Thread mockThread = mock(Thread.class);
        convert.m_Thread = mockThread;

        boolean result = convert.init();

        verify(mockThread).start();
        verify(mockThread).join();
        assertFalse(result);
    }

    @Test
    public void testInitWhenMenuChkThreadIsNotSelected() {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(false);

        boolean result = convert.init();

        assertFalse(result);
    }

    @Test
    public void testRun() {
        convert.run();
        // Since run calls Transcode, we can verify Transcode behavior
        // However, Transcode is complex and interacts with the file system
        // We would need to mock file system interactions for a complete test
    }

    @Test
    public void testTranscode() {
        // Mock file system interactions
        File mockListDir = mock(File.class);
        when(mockListDir.list()).thenReturn(new String[]{"video1.dv", "video2.dv"});
        convert.video_files = mockListDir.list();

        // Call the method
        convert.Transcode();

        // Verify GUI interactions
        verify(mockGUI).lblConvert.setEnabled(true);
        verify(mockGUI).prgConvert.setEnabled(true);
        verify(mockGUI).lblConvertProg.setEnabled(true);
    }

    @Test
    public void testMatrix() throws IOException {
        // Call the method
        convert.matrix();

        // Verify file interactions
        File matrixFile = new File(mockGUI.strOutputDir + "/matrix.txt");
        assertTrue(matrixFile.exists());
        // Clean up
        matrixFile.delete();
    }
}
```

### Key Points:
- **Mockito** is used to mock the `GUI` class and its interactions.
- **File interactions** are mocked to avoid actual file system dependencies.
- **Assertions** are used to verify the state of the `Convert` object after operations.
- **Verification** is used to ensure that methods on the mocked `GUI` object are called as expected.

This test suite provides a starting point for testing the `Convert` class. Depending on the actual implementation of the `GUI` class and other dependencies, additional setup or mocking might be necessary.