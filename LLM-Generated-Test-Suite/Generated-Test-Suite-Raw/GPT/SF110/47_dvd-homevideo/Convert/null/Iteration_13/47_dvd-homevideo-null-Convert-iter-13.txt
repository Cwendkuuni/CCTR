To create a comprehensive JUnit 4 test suite for the `Convert` class, we need to consider testing the constructors, the `init` method, the `Transcode` method, and the `matrix` method. Since the `Convert` class interacts heavily with the `GUI` class and the file system, we'll need to mock these dependencies to isolate the tests. 

Below is a JUnit 4 test suite for the `Convert` class:

```java
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ConvertTest {

    @Mock
    private GUI mockGUI;

    private Convert convert;

    @Before
    public void setUp() {
        // Set up default behavior for the mock GUI
        when(mockGUI.strOutputDir).thenReturn("output");
        when(mockGUI.menuChkThread.isSelected()).thenReturn(false);
        when(mockGUI.ErrorCheck(anyString())).thenReturn(false);
        when(mockGUI.spnMinutes.getValue()).thenReturn(0);
        when(mockGUI.spnSeconds.getValue()).thenReturn(0);
    }

    @Test
    public void testConstructorWithFormatAndAspectRatio() {
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        assertEquals("dvd-ntsc", convert.m_Format);
        assertEquals("16:9", convert.m_AspectRatio);
        assertEquals(29.97, convert.m_fps, 0.01);
    }

    @Test
    public void testConstructorWithQualityFormatAndAspectRatio() {
        convert = new Convert(1, "dvd-pal", "4:3", mockGUI);
        assertEquals(1, convert.m_Quality);
        assertEquals("dvd-pal", convert.m_Format);
        assertEquals("4:3", convert.m_AspectRatio);
        assertEquals(25.0, convert.m_fps, 0.01);
    }

    @Test
    public void testInitWithoutThread() {
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        boolean result = convert.init();
        assertFalse(result);
        verify(mockGUI, times(1)).ErrorCheck("output/log/transcode.log");
        verify(mockGUI, times(1)).ErrorCheck("output/log/mplex.log");
    }

    @Test
    public void testInitWithThread() throws InterruptedException {
        when(mockGUI.menuChkThread.isSelected()).thenReturn(true);
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        boolean result = convert.init();
        assertFalse(result);
        verify(mockGUI, times(1)).ErrorCheck("output/log/transcode.log");
        verify(mockGUI, times(1)).ErrorCheck("output/log/mplex.log");
    }

    @Test
    public void testTranscode() {
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        convert.Transcode();
        verify(mockGUI, times(1)).lblConvert.setEnabled(true);
        verify(mockGUI, times(1)).prgConvert.setEnabled(true);
        verify(mockGUI, times(1)).lblConvertProg.setEnabled(true);
    }

    @Test
    public void testMatrix() {
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        convert.matrix();
        File matrixFile = new File("output/matrix.txt");
        assertTrue(matrixFile.exists());
        matrixFile.delete(); // Clean up after test
    }

    @Test
    public void testTranscodeHandlesIOException() {
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        doThrow(new IOException()).when(mockGUI).MessageBox(anyString(), anyInt());
        convert.Transcode();
        assertTrue(convert.m_Error);
    }

    @Test
    public void testMatrixHandlesIOException() {
        convert = new Convert("dvd-ntsc", "16:9", mockGUI);
        doThrow(new IOException()).when(mockGUI).MessageBox(anyString(), anyInt());
        convert.matrix();
        assertTrue(convert.m_Error);
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the `GUI` class, which allows us to simulate its behavior without needing an actual GUI implementation.
- **Constructor Tests**: We test both constructors to ensure they correctly initialize the `Convert` object.
- **`init` Method Tests**: We test the `init` method both with and without threading enabled.
- **`Transcode` Method Test**: We verify that the GUI components are enabled during the transcode process.
- **`matrix` Method Test**: We check that the matrix file is created correctly.
- **Exception Handling Tests**: We simulate exceptions to ensure that the `Convert` class handles them as expected.

This test suite provides a comprehensive set of tests for the `Convert` class, covering its main functionalities and interactions.