Certainly! Below is a JUnit 4 test suite for the `AddressToUsAddressFunctor` class. This test suite aims to cover various scenarios for the `execute` method, including cases with different levels of nested objects and null checks.

```java
import geo.google.mapping.AddressToUsAddressFunctor;
import geo.google.datamodel.GeoAddress;
import geo.google.datamodel.GeoUsAddress;
import geo.google.datamodel.GeoException;
import oasis.names.tc.ciq.xsdschema.xal._2.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class AddressToUsAddressFunctorTest {

    private AddressToUsAddressFunctor functor;

    @Before
    public void setUp() {
        functor = AddressToUsAddressFunctor.getInstance();
    }

    @Test
    public void testExecuteWithCompleteAddress() {
        GeoAddress geoAddress = createCompleteGeoAddress();
        GeoUsAddress usAddress = functor.execute(geoAddress);

        assertEquals("US", usAddress.getCountry());
        assertEquals("California", usAddress.getState());
        assertEquals("Los Angeles County", usAddress.getCounty());
        assertEquals("Los Angeles", usAddress.getCity());
        assertEquals("90001", usAddress.getPostalCode());
        assertEquals("123 Main St", usAddress.getAddressLine1());
        assertEquals("Apt 4", usAddress.getAddressLine2());
        assertNotNull(usAddress.getCoordinate());
        assertEquals(5, usAddress.getAccuracy());
    }

    @Test
    public void testExecuteWithNullCountry() {
        GeoAddress geoAddress = new GeoAddress();
        geoAddress.setAddressDetails(new AddressDetails());
        GeoUsAddress usAddress = functor.execute(geoAddress);

        assertNull(usAddress.getCountry());
        assertNull(usAddress.getState());
        assertNull(usAddress.getCounty());
        assertNull(usAddress.getCity());
        assertNull(usAddress.getPostalCode());
        assertNull(usAddress.getAddressLine1());
        assertNull(usAddress.getAddressLine2());
        assertNull(usAddress.getCoordinate());
        assertEquals(0, usAddress.getAccuracy());
    }

    @Test
    public void testExecuteWithPartialAddress() {
        GeoAddress geoAddress = createPartialGeoAddress();
        GeoUsAddress usAddress = functor.execute(geoAddress);

        assertEquals("US", usAddress.getCountry());
        assertEquals("California", usAddress.getState());
        assertNull(usAddress.getCounty());
        assertEquals("Los Angeles", usAddress.getCity());
        assertNull(usAddress.getPostalCode());
        assertNull(usAddress.getAddressLine1());
        assertNull(usAddress.getAddressLine2());
        assertNull(usAddress.getCoordinate());
        assertEquals(3, usAddress.getAccuracy());
    }

    private GeoAddress createCompleteGeoAddress() {
        GeoAddress geoAddress = new GeoAddress();
        geoAddress.setAddressDetails(new AddressDetails());

        AddressDetails.Country country = new AddressDetails.Country();
        country.getCountryNameCode().add(new AddressDetails.Country.CountryNameCode("US"));
        geoAddress.getAddressDetails().setCountry(country);

        AdministrativeArea adminArea = new AdministrativeArea();
        adminArea.getAdministrativeAreaName().add(new AdministrativeArea.AdministrativeAreaName("California"));
        country.setAdministrativeArea(adminArea);

        AdministrativeArea.SubAdministrativeArea subAdminArea = new AdministrativeArea.SubAdministrativeArea();
        subAdminArea.getSubAdministrativeAreaName().add(new AdministrativeArea.SubAdministrativeArea.SubAdministrativeAreaName("Los Angeles County"));
        adminArea.setSubAdministrativeArea(subAdminArea);

        Locality locality = new Locality();
        locality.getLocalityName().add(new Locality.LocalityName("Los Angeles"));
        subAdminArea.setLocality(locality);

        PostalCode postalCode = new PostalCode();
        postalCode.getPostalCodeNumber().add(new PostalCode.PostalCodeNumber("90001"));
        locality.setPostalCode(postalCode);

        Thoroughfare thoroughfare = new Thoroughfare();
        thoroughfare.getThoroughfareName().add(new ThoroughfareNameType("123 Main St"));
        thoroughfare.getThoroughfareName().add(new ThoroughfareNameType("Apt 4"));
        locality.setThoroughfare(thoroughfare);

        geoAddress.setCoordinate(new GeoCoordinate(34.0522, -118.2437));
        geoAddress.setAccuracy(5);

        return geoAddress;
    }

    private GeoAddress createPartialGeoAddress() {
        GeoAddress geoAddress = new GeoAddress();
        geoAddress.setAddressDetails(new AddressDetails());

        AddressDetails.Country country = new AddressDetails.Country();
        country.getCountryNameCode().add(new AddressDetails.Country.CountryNameCode("US"));
        geoAddress.getAddressDetails().setCountry(country);

        AdministrativeArea adminArea = new AdministrativeArea();
        adminArea.getAdministrativeAreaName().add(new AdministrativeArea.AdministrativeAreaName("California"));
        country.setAdministrativeArea(adminArea);

        Locality locality = new Locality();
        locality.getLocalityName().add(new Locality.LocalityName("Los Angeles"));
        adminArea.setLocality(locality);

        geoAddress.setAccuracy(3);

        return geoAddress;
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes the `AddressToUsAddressFunctor` instance before each test.
- **Test Cases**:
  - `testExecuteWithCompleteAddress`: Tests the `execute` method with a fully populated `GeoAddress`.
  - `testExecuteWithNullCountry`: Tests the `execute` method with a `GeoAddress` that has no country information.
  - `testExecuteWithPartialAddress`: Tests the `execute` method with a partially populated `GeoAddress`.
- **Helper Methods**:
  - `createCompleteGeoAddress`: Constructs a `GeoAddress` with all fields populated.
  - `createPartialGeoAddress`: Constructs a `GeoAddress` with some fields populated.

This test suite ensures that the `execute` method is tested under various scenarios, including complete, partial, and null data conditions.