To create a comprehensive JUnit 4 test suite for the `AddressToUsAddressFunctor` class, we need to test various scenarios, including cases where different parts of the address are missing or present. Below is a test suite that covers these scenarios:

```java
import geo.google.mapping.AddressToUsAddressFunctor;
import geo.google.datamodel.GeoAddress;
import geo.google.datamodel.GeoUsAddress;
import geo.google.datamodel.GeoException;
import oasis.names.tc.ciq.xsdschema.xal._2.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class AddressToUsAddressFunctorTest {

    private AddressToUsAddressFunctor functor;

    @Before
    public void setUp() {
        functor = AddressToUsAddressFunctor.getInstance();
    }

    @Test
    public void testExecuteWithCompleteAddress() {
        GeoAddress geoAddress = mock(GeoAddress.class);
        AddressDetails addressDetails = mock(AddressDetails.class);
        AddressDetails.Country country = mock(AddressDetails.Country.class);
        AdministrativeArea adminArea = mock(AdministrativeArea.class);
        Locality locality = mock(Locality.class);
        PostalCode postalCode = mock(PostalCode.class);
        Thoroughfare thoroughfare = mock(Thoroughfare.class);

        when(geoAddress.getAddressDetails()).thenReturn(addressDetails);
        when(addressDetails.getCountry()).thenReturn(country);

        // Mock country name code
        AddressDetails.Country.CountryNameCode countryNameCode = mock(AddressDetails.Country.CountryNameCode.class);
        when(countryNameCode.getContent()).thenReturn("US");
        when(country.getCountryNameCode()).thenReturn(Collections.singletonList(countryNameCode));

        // Mock administrative area
        AdministrativeArea.AdministrativeAreaName adminAreaName = mock(AdministrativeArea.AdministrativeAreaName.class);
        when(adminAreaName.getContent()).thenReturn("California");
        when(adminArea.getAdministrativeAreaName()).thenReturn(Collections.singletonList(adminAreaName));
        when(country.getAdministrativeArea()).thenReturn(adminArea);

        // Mock locality
        Locality.LocalityName localityName = mock(Locality.LocalityName.class);
        when(localityName.getContent()).thenReturn("Los Angeles");
        when(locality.getLocalityName()).thenReturn(Collections.singletonList(localityName));
        when(adminArea.getLocality()).thenReturn(locality);

        // Mock postal code
        PostalCode.PostalCodeNumber postalCodeNumber = mock(PostalCode.PostalCodeNumber.class);
        when(postalCodeNumber.getContent()).thenReturn("90001");
        when(postalCode.getPostalCodeNumber()).thenReturn(Collections.singletonList(postalCodeNumber));
        when(locality.getPostalCode()).thenReturn(postalCode);

        // Mock thoroughfare
        ThoroughfareNameType thoroughfareName1 = mock(ThoroughfareNameType.class);
        when(thoroughfareName1.getContent()).thenReturn("123 Main St");
        ThoroughfareNameType thoroughfareName2 = mock(ThoroughfareNameType.class);
        when(thoroughfareName2.getContent()).thenReturn("Apt 4B");
        when(thoroughfare.getThoroughfareName()).thenReturn(Arrays.asList(thoroughfareName1, thoroughfareName2));
        when(locality.getThoroughfare()).thenReturn(thoroughfare);

        // Mock coordinate and accuracy
        when(geoAddress.getCoordinate()).thenReturn(null);
        when(geoAddress.getAccuracy()).thenReturn(1);

        GeoUsAddress result = functor.execute(geoAddress);

        assertEquals("US", result.getCountry());
        assertEquals("California", result.getState());
        assertEquals("Los Angeles", result.getCity());
        assertEquals("90001", result.getPostalCode());
        assertEquals("123 Main St", result.getAddressLine1());
        assertEquals("Apt 4B", result.getAddressLine2());
        assertEquals(1, result.getAccuracy());
    }

    @Test
    public void testExecuteWithMissingCountry() {
        GeoAddress geoAddress = mock(GeoAddress.class);
        AddressDetails addressDetails = mock(AddressDetails.class);

        when(geoAddress.getAddressDetails()).thenReturn(addressDetails);
        when(addressDetails.getCountry()).thenReturn(null);

        GeoUsAddress result = functor.execute(geoAddress);

        assertNull(result.getCountry());
        assertNull(result.getState());
        assertNull(result.getCity());
        assertNull(result.getPostalCode());
        assertNull(result.getAddressLine1());
        assertNull(result.getAddressLine2());
    }

    @Test
    public void testExecuteWithMissingAdministrativeArea() {
        GeoAddress geoAddress = mock(GeoAddress.class);
        AddressDetails addressDetails = mock(AddressDetails.class);
        AddressDetails.Country country = mock(AddressDetails.Country.class);

        when(geoAddress.getAddressDetails()).thenReturn(addressDetails);
        when(addressDetails.getCountry()).thenReturn(country);
        when(country.getAdministrativeArea()).thenReturn(null);

        GeoUsAddress result = functor.execute(geoAddress);

        assertNull(result.getState());
        assertNull(result.getCity());
        assertNull(result.getPostalCode());
        assertNull(result.getAddressLine1());
        assertNull(result.getAddressLine2());
    }

    @Test
    public void testExecuteWithMissingLocality() {
        GeoAddress geoAddress = mock(GeoAddress.class);
        AddressDetails addressDetails = mock(AddressDetails.class);
        AddressDetails.Country country = mock(AddressDetails.Country.class);
        AdministrativeArea adminArea = mock(AdministrativeArea.class);

        when(geoAddress.getAddressDetails()).thenReturn(addressDetails);
        when(addressDetails.getCountry()).thenReturn(country);
        when(country.getAdministrativeArea()).thenReturn(adminArea);
        when(adminArea.getLocality()).thenReturn(null);

        GeoUsAddress result = functor.execute(geoAddress);

        assertNull(result.getCity());
        assertNull(result.getPostalCode());
        assertNull(result.getAddressLine1());
        assertNull(result.getAddressLine2());
    }

    @Test
    public void testExecuteWithMissingPostalCode() {
        GeoAddress geoAddress = mock(GeoAddress.class);
        AddressDetails addressDetails = mock(AddressDetails.class);
        AddressDetails.Country country = mock(AddressDetails.Country.class);
        AdministrativeArea adminArea = mock(AdministrativeArea.class);
        Locality locality = mock(Locality.class);

        when(geoAddress.getAddressDetails()).thenReturn(addressDetails);
        when(addressDetails.getCountry()).thenReturn(country);
        when(country.getAdministrativeArea()).thenReturn(adminArea);
        when(adminArea.getLocality()).thenReturn(locality);
        when(locality.getPostalCode()).thenReturn(null);

        GeoUsAddress result = functor.execute(geoAddress);

        assertNull(result.getPostalCode());
    }

    @Test
    public void testExecuteWithMissingThoroughfare() {
        GeoAddress geoAddress = mock(GeoAddress.class);
        AddressDetails addressDetails = mock(AddressDetails.class);
        AddressDetails.Country country = mock(AddressDetails.Country.class);
        AdministrativeArea adminArea = mock(AdministrativeArea.class);
        Locality locality = mock(Locality.class);

        when(geoAddress.getAddressDetails()).thenReturn(addressDetails);
        when(addressDetails.getCountry()).thenReturn(country);
        when(country.getAdministrativeArea()).thenReturn(adminArea);
        when(adminArea.getLocality()).thenReturn(locality);
        when(locality.getThoroughfare()).thenReturn(null);

        GeoUsAddress result = functor.execute(geoAddress);

        assertNull(result.getAddressLine1());
        assertNull(result.getAddressLine2());
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes the `AddressToUsAddressFunctor` instance.
- **Mocks**: We use Mockito to create mock objects for the various components of a `GeoAddress`.
- **Test Cases**:
  - **Complete Address**: Tests the conversion of a fully populated `GeoAddress` to `GeoUsAddress`.
  - **Missing Components**: Tests scenarios where certain components (country, administrative area, locality, postal code, thoroughfare) are missing to ensure the method handles these gracefully.
- **Assertions**: Each test case uses assertions to verify that the `GeoUsAddress` object is populated correctly based on the input `GeoAddress`.