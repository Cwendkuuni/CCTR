To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and specific method naming conventions (e.g., methods starting with "get"), we'll create a mock subclass of `IFXObject` with some getter methods to facilitate testing.

Here's a complete JUnit 4 test suite:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class IFXObjectTest {

    private IFXObject obj1;
    private IFXObject obj2;
    private IFXObject obj3;

    // Mock subclass of IFXObject for testing
    public class MockIFXObject extends IFXObject {
        private String name;
        private int value;

        public MockIFXObject(String name, int value) {
            this.name = name;
            this.value = value;
        }

        public String getName() {
            return name;
        }

        public int getValue() {
            return value;
        }
    }

    @Before
    public void setUp() {
        obj1 = new MockIFXObject("Test", 123);
        obj2 = new MockIFXObject("Test", 123);
        obj3 = new MockIFXObject("Different", 456);
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(obj1.equals(obj1));
    }

    @Test
    public void testEquals_EqualObjects() {
        assertTrue(obj1.equals(obj2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        assertFalse(obj1.equals(obj3));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(obj1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(obj1.equals("String"));
    }

    @Test
    public void testToString() {
        String expected = "org.sourceforge.ifx.basetypes.IFXObjectTest$MockIFXObject = {\n" +
                          "  Name = Test\n" +
                          "  Value = 123\n" +
                          "}";
        assertEquals(expected, obj1.toString());
    }

    @Test
    public void testToString_NullValues() {
        MockIFXObject objWithNull = new MockIFXObject(null, 0);
        String expected = "org.sourceforge.ifx.basetypes.IFXObjectTest$MockIFXObject = {\n" +
                          "  Name = NULL\n" +
                          "  Value = 0\n" +
                          "}";
        assertEquals(expected, objWithNull.toString());
    }
}
```

### Explanation:

1. **Mock Subclass**: `MockIFXObject` is a simple subclass of `IFXObject` with two properties and corresponding getter methods. This allows us to test the reflection-based logic in `IFXObject`.

2. **Setup**: The `setUp` method initializes three instances of `MockIFXObject` for testing equality and string representation.

3. **Equality Tests**: We test various scenarios for the `equals` method, including comparing the same object, equal objects, different objects, null, and objects of different classes.

4. **String Representation Tests**: We test the `toString` method to ensure it correctly formats the string representation of the object, including handling of null values.

This test suite should cover the primary functionality of the `IFXObject` class.