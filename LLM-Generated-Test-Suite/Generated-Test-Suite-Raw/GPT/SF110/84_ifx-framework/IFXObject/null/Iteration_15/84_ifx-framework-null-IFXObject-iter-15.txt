To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and assumes the presence of getter methods, we'll need to create a mock subclass with some getter methods to test these functionalities effectively.

Below is a JUnit 4 test suite for the `IFXObject` class:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class IFXObjectTest {

    private IFXObject obj1;
    private IFXObject obj2;
    private IFXObject obj3;

    @Before
    public void setUp() {
        obj1 = new MockIFXObject("value1", 10);
        obj2 = new MockIFXObject("value1", 10);
        obj3 = new MockIFXObject("value2", 20);
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(obj1.equals(obj1));
    }

    @Test
    public void testEquals_EqualObjects() {
        assertTrue(obj1.equals(obj2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        assertFalse(obj1.equals(obj3));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(obj1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(obj1.equals(new Object()));
    }

    @Test
    public void testToString() {
        String expected = "org.sourceforge.ifx.basetypes.IFXObjectTest$MockIFXObject = {\n" +
                          "  StringValue = value1\n" +
                          "  IntValue = 10\n" +
                          "}";
        assertEquals(expected, obj1.toString().trim());
    }

    // Mock subclass to test IFXObject
    private class MockIFXObject extends IFXObject {
        private String stringValue;
        private int intValue;

        public MockIFXObject(String stringValue, int intValue) {
            this.stringValue = stringValue;
            this.intValue = intValue;
        }

        public String getStringValue() {
            return stringValue;
        }

        public int getIntValue() {
            return intValue;
        }
    }
}
```

### Explanation:

1. **Mock Subclass**: `MockIFXObject` is a subclass of `IFXObject` with two getter methods (`getStringValue` and `getIntValue`). This allows us to test the reflection-based methods in `IFXObject`.

2. **Test Setup**: The `setUp` method initializes three instances of `MockIFXObject` with different values to test equality and string representation.

3. **Equality Tests**: 
   - `testEquals_SameObject` checks if an object is equal to itself.
   - `testEquals_EqualObjects` checks if two objects with the same values are considered equal.
   - `testEquals_DifferentObjects` checks if objects with different values are not equal.
   - `testEquals_NullObject` ensures that an object is not equal to `null`.
   - `testEquals_DifferentClass` ensures that an object is not equal to an instance of a different class.

4. **String Representation Test**: `testToString` verifies that the `toString` method produces the expected string representation of the object.

This test suite covers the main functionalities of the `IFXObject` class, ensuring that its methods behave as expected.