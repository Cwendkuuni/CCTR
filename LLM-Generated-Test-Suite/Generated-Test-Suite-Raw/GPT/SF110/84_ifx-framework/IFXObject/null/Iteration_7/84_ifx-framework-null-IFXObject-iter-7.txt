To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and assumes the presence of getter methods, we'll create a mock subclass with some getter methods to facilitate testing.

Here's the complete JUnit 4 test suite:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class IFXObjectTest {

    private TestIFXObject obj1;
    private TestIFXObject obj2;
    private TestIFXObject obj3;

    @Before
    public void setUp() {
        obj1 = new TestIFXObject("value1", 123);
        obj2 = new TestIFXObject("value1", 123);
        obj3 = new TestIFXObject("value2", 456);
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(obj1.equals(obj1));
    }

    @Test
    public void testEquals_EqualObjects() {
        assertTrue(obj1.equals(obj2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        assertFalse(obj1.equals(obj3));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(obj1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(obj1.equals("Some String"));
    }

    @Test
    public void testToString() {
        String expected = "org.sourceforge.ifx.basetypes.IFXObjectTest$TestIFXObject = {\n" +
                          "  StringField = value1\n" +
                          "  IntField = 123\n" +
                          "}";
        assertEquals(expected, obj1.toString().trim());
    }

    // Mock subclass to facilitate testing
    public static class TestIFXObject extends IFXObject {
        private String stringField;
        private int intField;

        public TestIFXObject(String stringField, int intField) {
            this.stringField = stringField;
            this.intField = intField;
        }

        public String getStringField() {
            return stringField;
        }

        public int getIntField() {
            return intField;
        }
    }
}
```

### Explanation:

1. **Test Setup**: We create a mock subclass `TestIFXObject` with two fields and corresponding getter methods. This allows us to test the reflection-based methods in `IFXObject`.

2. **Equals Method Tests**:
   - **Same Object**: Tests if an object is equal to itself.
   - **Equal Objects**: Tests if two objects with the same field values are considered equal.
   - **Different Objects**: Tests if objects with different field values are not considered equal.
   - **Null Object**: Tests if an object is not equal to `null`.
   - **Different Class**: Tests if an object is not equal to an object of a different class.

3. **ToString Method Test**: Verifies the output of the `toString` method, which relies on the `stringify` method.

This test suite provides a comprehensive check of the `IFXObject` class's functionality, focusing on its reflection-based methods.