To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and assumes the presence of getter methods, we'll need to create a mock subclass of `IFXObject` with some sample getter methods to test these functionalities effectively.

Here's a complete JUnit 4 test suite for the `IFXObject` class:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class IFXObjectTest {

    private IFXObject obj1;
    private IFXObject obj2;
    private IFXObject obj3;

    // Mock subclass of IFXObject for testing
    public class MockIFXObject extends IFXObject {
        private String name;
        private int[] numbers;

        public MockIFXObject(String name, int[] numbers) {
            this.name = name;
            this.numbers = numbers;
        }

        public String getName() {
            return name;
        }

        public int[] getNumbers() {
            return numbers;
        }
    }

    @Before
    public void setUp() {
        obj1 = new MockIFXObject("Test", new int[]{1, 2, 3});
        obj2 = new MockIFXObject("Test", new int[]{1, 2, 3});
        obj3 = new MockIFXObject("Different", new int[]{4, 5, 6});
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(obj1.equals(obj1));
    }

    @Test
    public void testEquals_EqualObjects() {
        assertTrue(obj1.equals(obj2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        assertFalse(obj1.equals(obj3));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(obj1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(obj1.equals("Some String"));
    }

    @Test
    public void testToString() {
        String expected = "org.sourceforge.ifx.basetypes.IFXObjectTest$MockIFXObject = {\n" +
                          "  Name = Test\n" +
                          "  Numbers = [\n" +
                          "    [0]:org.sourceforge.ifx.basetypes.IFXObject = {\n" +
                          "    }\n" +
                          "    [1]:org.sourceforge.ifx.basetypes.IFXObject = {\n" +
                          "    }\n" +
                          "    [2]:org.sourceforge.ifx.basetypes.IFXObject = {\n" +
                          "    }\n" +
                          "  ]\n" +
                          "}";
        assertEquals(expected, obj1.toString());
    }
}
```

### Explanation:

1. **Mock Subclass**: `MockIFXObject` is a subclass of `IFXObject` with two getter methods (`getName` and `getNumbers`) to simulate the behavior expected by `IFXObject`.

2. **Setup**: The `setUp` method initializes three objects: `obj1` and `obj2` are equal, while `obj3` is different.

3. **Tests for `equals`**:
   - `testEquals_SameObject`: Tests equality with itself.
   - `testEquals_EqualObjects`: Tests equality with another object with the same state.
   - `testEquals_DifferentObjects`: Tests inequality with an object with a different state.
   - `testEquals_NullObject`: Tests inequality with `null`.
   - `testEquals_DifferentClass`: Tests inequality with an object of a different class.

4. **Test for `toString`**:
   - `testToString`: Verifies the string representation of the object. Note that the expected string is a simplified version and may need adjustments based on the actual output format of `stringify`.

This test suite covers the main functionalities of the `IFXObject` class. Adjustments may be needed based on the actual behavior of the `stringify` method and the `IBaseType` interface, which is not defined in the provided code.