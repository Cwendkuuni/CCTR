To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and the `IBaseType` interface, we'll need to create mock or stub implementations for testing purposes. Here's a complete test suite:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import java.lang.reflect.Method;

public class IFXObjectTest {

    private IFXObject obj1;
    private IFXObject obj2;
    private IFXObject obj3;
    private IBaseType baseTypeMock;

    @Before
    public void setUp() {
        obj1 = new TestIFXObject();
        obj2 = new TestIFXObject();
        obj3 = new DifferentIFXObject();
        baseTypeMock = Mockito.mock(IBaseType.class);
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(obj1.equals(obj1));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(obj1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(obj1.equals(obj3));
    }

    @Test
    public void testEquals_EqualObjects() {
        assertTrue(obj1.equals(obj2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        ((TestIFXObject) obj2).setValue("Different Value");
        assertFalse(obj1.equals(obj2));
    }

    @Test
    public void testToString() {
        String expected = "org.sourceforge.ifx.basetypes.TestIFXObject = {\n" +
                          "  Value = Test Value\n" +
                          "}";
        assertEquals(expected, obj1.toString());
    }

    @Test
    public void testToString_WithNullValue() {
        ((TestIFXObject) obj1).setValue(null);
        String expected = "org.sourceforge.ifx.basetypes.TestIFXObject = {\n" +
                          "  Value = NULL\n" +
                          "}";
        assertEquals(expected, obj1.toString());
    }

    @Test
    public void testToString_WithIBaseType() {
        Mockito.when(baseTypeMock.getString()).thenReturn("BaseTypeValue");
        ((TestIFXObject) obj1).setBaseType(baseTypeMock);
        String expected = "org.sourceforge.ifx.basetypes.TestIFXObject = {\n" +
                          "  Value = Test Value\n" +
                          "  BaseType = BaseTypeValue\n" +
                          "}";
        assertEquals(expected, obj1.toString());
    }

    // Mock classes for testing
    private class TestIFXObject extends IFXObject {
        private String value = "Test Value";
        private IBaseType baseType;

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public IBaseType getBaseType() {
            return baseType;
        }

        public void setBaseType(IBaseType baseType) {
            this.baseType = baseType;
        }
    }

    private class DifferentIFXObject extends IFXObject {
        private String differentValue = "Different Value";

        public String getDifferentValue() {
            return differentValue;
        }
    }

    // Mock interface for IBaseType
    private interface IBaseType {
        String getString();
    }
}
```

### Explanation:

1. **Test Setup**: We create instances of `IFXObject` and a mock `IBaseType` using Mockito for testing purposes.

2. **Equals Method Tests**:
   - Test equality with the same object.
   - Test equality with `null`.
   - Test equality with an object of a different class.
   - Test equality with another object of the same class with the same values.
   - Test inequality with another object of the same class with different values.

3. **ToString Method Tests**:
   - Test the `toString` method with a normal value.
   - Test the `toString` method with a `null` value.
   - Test the `toString` method with an `IBaseType` mock.

4. **Mock Classes**: 
   - `TestIFXObject` is a subclass of `IFXObject` with a `String` and `IBaseType` field to test the reflection-based methods.
   - `DifferentIFXObject` is another subclass to test the `equals` method with different classes.
   - `IBaseType` is a mock interface to simulate the behavior of objects implementing this interface.

This test suite covers the main functionalities of the `IFXObject` class, ensuring that its methods behave as expected under various conditions.