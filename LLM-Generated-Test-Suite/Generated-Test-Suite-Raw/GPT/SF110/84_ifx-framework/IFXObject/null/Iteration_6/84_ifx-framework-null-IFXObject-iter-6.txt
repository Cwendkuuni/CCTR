To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and assumes the presence of getter methods, we'll need to create a mock subclass with some getter methods to test these functionalities effectively.

Here's a complete JUnit 4 test suite for the `IFXObject` class:

```java
import org.junit.Test;
import static org.junit.Assert.*;
import org.sourceforge.ifx.basetypes.IFXObject;

public class IFXObjectTest {

    // Mock subclass to test IFXObject
    public static class MockIFXObject extends IFXObject {
        private String name;
        private int[] numbers;
        
        public MockIFXObject(String name, int[] numbers) {
            this.name = name;
            this.numbers = numbers;
        }
        
        public String getName() {
            return name;
        }
        
        public int[] getNumbers() {
            return numbers;
        }
    }

    @Test
    public void testEquals_SameObject() {
        MockIFXObject obj1 = new MockIFXObject("Test", new int[]{1, 2, 3});
        assertTrue(obj1.equals(obj1));
    }

    @Test
    public void testEquals_EqualObjects() {
        MockIFXObject obj1 = new MockIFXObject("Test", new int[]{1, 2, 3});
        MockIFXObject obj2 = new MockIFXObject("Test", new int[]{1, 2, 3});
        assertTrue(obj1.equals(obj2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        MockIFXObject obj1 = new MockIFXObject("Test", new int[]{1, 2, 3});
        MockIFXObject obj2 = new MockIFXObject("Test", new int[]{4, 5, 6});
        assertFalse(obj1.equals(obj2));
    }

    @Test
    public void testEquals_NullObject() {
        MockIFXObject obj1 = new MockIFXObject("Test", new int[]{1, 2, 3});
        assertFalse(obj1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        MockIFXObject obj1 = new MockIFXObject("Test", new int[]{1, 2, 3});
        assertFalse(obj1.equals(new Object()));
    }

    @Test
    public void testToString() {
        MockIFXObject obj = new MockIFXObject("Test", new int[]{1, 2, 3});
        String expected = "org.sourceforge.ifx.basetypes.IFXObjectTest$MockIFXObject = {\n" +
                          "  Name = Test\n" +
                          "  Numbers = [\n" +
                          "    [0]:org.sourceforge.ifx.basetypes.IFXObject = {\n" +
                          "    }\n" +
                          "    [1]:org.sourceforge.ifx.basetypes.IFXObject = {\n" +
                          "    }\n" +
                          "    [2]:org.sourceforge.ifx.basetypes.IFXObject = {\n" +
                          "    }\n" +
                          "  ]\n" +
                          "}";
        assertEquals(expected, obj.toString());
    }
}
```

### Explanation:

1. **MockIFXObject Class**: This is a subclass of `IFXObject` with some getter methods (`getName` and `getNumbers`) to facilitate testing. The `getNumbers` method returns an array to test array handling in `stringify` and `doCheckEquals`.

2. **Test Methods**:
   - `testEquals_SameObject`: Tests if an object is equal to itself.
   - `testEquals_EqualObjects`: Tests if two objects with the same state are considered equal.
   - `testEquals_DifferentObjects`: Tests if two objects with different states are not considered equal.
   - `testEquals_NullObject`: Tests if an object is not equal to `null`.
   - `testEquals_DifferentClass`: Tests if an object is not equal to an instance of a different class.
   - `testToString`: Tests the `toString` method to ensure it produces the expected string representation.

This test suite covers the main functionalities of the `IFXObject` class, ensuring that its methods behave as expected under various conditions.