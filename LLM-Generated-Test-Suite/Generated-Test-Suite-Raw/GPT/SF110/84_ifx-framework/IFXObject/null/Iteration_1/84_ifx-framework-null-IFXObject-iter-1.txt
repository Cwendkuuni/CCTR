To create a comprehensive JUnit 4 test suite for the `IFXObject` class, we need to test the `equals`, `toString`, and indirectly the `stringify` and `doCheckEquals` methods. Since `IFXObject` relies on reflection and the `IBaseType` interface, we'll need to create mock or stub implementations for testing purposes. Here's a complete JUnit 4 test suite:

```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class IFXObjectTest {

    private IFXObject ifxObject1;
    private IFXObject ifxObject2;
    private IFXObject ifxObject3;
    private IBaseType baseTypeMock;

    @Before
    public void setUp() {
        ifxObject1 = new IFXObject();
        ifxObject2 = new IFXObject();
        ifxObject3 = new IFXObject();
        baseTypeMock = mock(IBaseType.class);
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(ifxObject1.equals(ifxObject1));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(ifxObject1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(ifxObject1.equals(new Object()));
    }

    @Test
    public void testEquals_EqualObjects() {
        assertTrue(ifxObject1.equals(ifxObject2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        // Assuming IFXObject has some state that can be different
        // Here we mock a difference using IBaseType
        when(baseTypeMock.getString()).thenReturn("value1", "value2");
        assertFalse(ifxObject1.equals(ifxObject3));
    }

    @Test
    public void testToString() {
        String result = ifxObject1.toString();
        assertNotNull(result);
        assertTrue(result.contains("org.sourceforge.ifx.basetypes.IFXObject"));
    }

    @Test
    public void testStringify_NullArray() {
        // Assuming we have a method that returns an array
        // Here we mock a null array return
        IFXObject objWithArray = Mockito.spy(new IFXObject());
        doReturn(null).when(objWithArray).getArrayMethod();
        String result = objWithArray.toString();
        assertTrue(result.contains("NULL"));
    }

    @Test
    public void testStringify_NonNullArray() {
        // Assuming we have a method that returns an array
        // Here we mock a non-null array return
        IFXObject objWithArray = Mockito.spy(new IFXObject());
        IFXObject[] array = {new IFXObject(), new IFXObject()};
        doReturn(array).when(objWithArray).getArrayMethod();
        String result = objWithArray.toString();
        assertTrue(result.contains("[0]:"));
        assertTrue(result.contains("[1]:"));
    }

    @Test
    public void testStringify_IBaseType() {
        // Assuming we have a method that returns an IBaseType
        IFXObject objWithBaseType = Mockito.spy(new IFXObject());
        doReturn(baseTypeMock).when(objWithBaseType).getBaseTypeMethod();
        when(baseTypeMock.getString()).thenReturn("baseTypeValue");
        String result = objWithBaseType.toString();
        assertTrue(result.contains("baseTypeValue"));
    }
}
```

### Notes:
1. **Mocking and Stubbing**: The test suite uses Mockito to mock the `IBaseType` interface and to stub methods that might return arrays or `IBaseType` instances. This is necessary because `IFXObject` relies on reflection and method invocation.
   
2. **Assumptions**: The test suite assumes that `IFXObject` has methods that return arrays and `IBaseType` instances. These methods are mocked using `Mockito.spy` and `doReturn`.

3. **Test Coverage**: The test suite covers:
   - Equality checks for the same object, null, different classes, equal objects, and different objects.
   - String representation of the object, including handling of arrays and `IBaseType` instances.

4. **Dependencies**: Ensure that Mockito is included in your project's dependencies to run these tests.

This test suite provides a comprehensive set of tests for the `IFXObject` class, focusing on its public methods and the behavior of its internal logic.