To create a comprehensive JUnit 4 test suite for the `SimpleCharStream` class, we need to test all public and protected methods. Given the static nature of the class, we'll need to handle the static fields carefully to ensure tests are isolated. Below is a JUnit 4 test suite that covers the methods in the `SimpleCharStream` class.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.io.*;

public class SimpleCharStreamTest {

    private SimpleCharStream stream;
    private Reader reader;

    @Before
    public void setUp() throws Exception {
        String input = "Hello\nWorld\r\nTest\tString";
        reader = new StringReader(input);
        stream = new SimpleCharStream(reader);
    }

    @Test
    public void testBeginToken() throws IOException {
        char c = SimpleCharStream.BeginToken();
        assertEquals('H', c);
    }

    @Test
    public void testReadChar() throws IOException {
        char c = SimpleCharStream.readChar();
        assertEquals('H', c);
        c = SimpleCharStream.readChar();
        assertEquals('e', c);
    }

    @Test
    public void testGetColumn() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(3, SimpleCharStream.getColumn());
    }

    @Test
    public void testGetLine() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(1, SimpleCharStream.getLine());
    }

    @Test
    public void testGetEndColumn() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(3, SimpleCharStream.getEndColumn());
    }

    @Test
    public void testGetEndLine() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(1, SimpleCharStream.getEndLine());
    }

    @Test
    public void testGetBeginColumn() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        assertEquals(1, SimpleCharStream.getBeginColumn());
    }

    @Test
    public void testGetBeginLine() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        assertEquals(1, SimpleCharStream.getBeginLine());
    }

    @Test
    public void testBackup() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        SimpleCharStream.backup(1);
        assertEquals('e', SimpleCharStream.readChar());
    }

    @Test
    public void testGetImage() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals("He", SimpleCharStream.GetImage());
    }

    @Test
    public void testGetSuffix() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        char[] suffix = SimpleCharStream.GetSuffix(2);
        assertArrayEquals(new char[]{'H', 'e'}, suffix);
    }

    @Test
    public void testDone() {
        SimpleCharStream.Done();
        assertNull(SimpleCharStream.buffer);
        assertNull(SimpleCharStream.bufline);
        assertNull(SimpleCharStream.bufcolumn);
    }

    @Test
    public void testAdjustBeginLineColumn() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        SimpleCharStream.adjustBeginLineColumn(2, 5);
        assertEquals(2, SimpleCharStream.getBeginLine());
        assertEquals(5, SimpleCharStream.getBeginColumn());
    }

    @Test
    public void testExpandBuff() {
        // This method is protected and static, so we need to test it indirectly.
        // We can test it by ensuring the buffer expands when needed.
        SimpleCharStream.bufsize = 2;
        SimpleCharStream.available = 2;
        SimpleCharStream.buffer = new char[2];
        SimpleCharStream.bufline = new int[2];
        SimpleCharStream.bufcolumn = new int[2];
        SimpleCharStream.bufpos = 1;
        SimpleCharStream.tokenBegin = 0;
        SimpleCharStream.ExpandBuff(false);
        assertEquals(2050, SimpleCharStream.bufsize);
    }

    @Test
    public void testFillBuff() throws IOException {
        // This method is protected and static, so we need to test it indirectly.
        // We can test it by ensuring the buffer fills when needed.
        SimpleCharStream.bufsize = 2;
        SimpleCharStream.available = 2;
        SimpleCharStream.buffer = new char[2];
        SimpleCharStream.bufline = new int[2];
        SimpleCharStream.bufcolumn = new int[2];
        SimpleCharStream.bufpos = 1;
        SimpleCharStream.tokenBegin = 0;
        SimpleCharStream.maxNextCharInd = 2;
        SimpleCharStream.FillBuff();
        assertTrue(SimpleCharStream.maxNextCharInd > 2);
    }
}
```

### Notes:
- The test suite initializes a `SimpleCharStream` with a `StringReader` for testing.
- Each test method checks a specific functionality of the `SimpleCharStream` class.
- The `ExpandBuff` and `FillBuff` methods are tested indirectly by setting up conditions that require buffer expansion or filling.
- The `Done` method is tested to ensure it nullifies the buffers.
- The `adjustBeginLineColumn` method is tested by adjusting the line and column and verifying the changes.
- The `@Before` setup method ensures each test starts with a fresh instance of `SimpleCharStream`.

This test suite should provide a comprehensive coverage of the `SimpleCharStream` class's functionality.