To create a comprehensive JUnit 4 test suite for the `SimpleCharStream` class, we need to test all the public and protected methods. Given the static nature of the class, we will need to handle the static fields carefully to ensure tests are isolated and do not interfere with each other. Here's a test suite that covers the methods in the `SimpleCharStream` class:

```java
import JSci.maths.symbolic.SimpleCharStream;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

import static org.junit.Assert.*;

public class SimpleCharStreamTest {

    private SimpleCharStream simpleCharStream;
    private Reader reader;

    @Before
    public void setUp() {
        reader = new StringReader("Hello\nWorld\r\nTest");
        simpleCharStream = new SimpleCharStream(reader);
    }

    @After
    public void tearDown() {
        SimpleCharStream.Done();
    }

    @Test
    public void testBeginToken() throws IOException {
        char c = SimpleCharStream.BeginToken();
        assertEquals('H', c);
    }

    @Test
    public void testReadChar() throws IOException {
        char c = SimpleCharStream.readChar();
        assertEquals('H', c);
        c = SimpleCharStream.readChar();
        assertEquals('e', c);
    }

    @Test
    public void testGetColumn() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(3, SimpleCharStream.getColumn());
    }

    @Test
    public void testGetLine() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(1, SimpleCharStream.getLine());
    }

    @Test
    public void testGetEndColumn() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(3, SimpleCharStream.getEndColumn());
    }

    @Test
    public void testGetEndLine() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(1, SimpleCharStream.getEndLine());
    }

    @Test
    public void testGetBeginColumn() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        assertEquals(1, SimpleCharStream.getBeginColumn());
    }

    @Test
    public void testGetBeginLine() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        assertEquals(1, SimpleCharStream.getBeginLine());
    }

    @Test
    public void testBackup() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        SimpleCharStream.backup(1);
        assertEquals('e', SimpleCharStream.readChar());
    }

    @Test
    public void testGetImage() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals("He", SimpleCharStream.GetImage());
    }

    @Test
    public void testGetSuffix() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        char[] suffix = SimpleCharStream.GetSuffix(2);
        assertArrayEquals(new char[]{'H', 'e'}, suffix);
    }

    @Test
    public void testAdjustBeginLineColumn() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        SimpleCharStream.adjustBeginLineColumn(2, 5);
        assertEquals(2, SimpleCharStream.getBeginLine());
        assertEquals(5, SimpleCharStream.getBeginColumn());
    }

    @Test
    public void testReInitReader() throws IOException {
        Reader newReader = new StringReader("New Content");
        simpleCharStream.ReInit(newReader);
        assertEquals('N', SimpleCharStream.readChar());
    }

    @Test
    public void testReInitInputStream() throws IOException {
        Reader newReader = new StringReader("New Content");
        simpleCharStream.ReInit(newReader);
        assertEquals('N', SimpleCharStream.readChar());
    }
}
```

### Explanation:
- **Setup and Teardown**: We use `@Before` and `@After` to initialize and clean up the `SimpleCharStream` instance and its static fields.
- **Test Methods**: Each method in the `SimpleCharStream` class is tested with a corresponding test method. We ensure that the methods behave as expected by asserting the expected outcomes.
- **Static Fields**: Since the class uses static fields, we reset the state using `SimpleCharStream.Done()` in the `tearDown` method to ensure tests do not interfere with each other.
- **Reader**: We use a `StringReader` to simulate input for the `SimpleCharStream`.

This test suite should provide comprehensive coverage for the `SimpleCharStream` class.