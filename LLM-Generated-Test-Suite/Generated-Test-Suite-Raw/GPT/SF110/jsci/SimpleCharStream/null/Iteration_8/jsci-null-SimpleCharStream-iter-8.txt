To create a comprehensive JUnit 4 test suite for the `SimpleCharStream` class, we need to test all public and protected methods. Given the static nature of the class, we will need to handle the static fields carefully to ensure that each test is independent. Below is a JUnit 4 test suite that covers the methods in the `SimpleCharStream` class.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.io.*;

public class SimpleCharStreamTest {

    private SimpleCharStream stream;
    private String testString = "Hello\nWorld\r\nThis is a test.";
    private Reader reader;

    @Before
    public void setUp() {
        reader = new StringReader(testString);
        stream = new SimpleCharStream(reader);
    }

    @Test
    public void testBeginToken() throws IOException {
        char c = SimpleCharStream.BeginToken();
        assertEquals('H', c);
    }

    @Test
    public void testReadChar() throws IOException {
        char c = SimpleCharStream.readChar();
        assertEquals('H', c);
        c = SimpleCharStream.readChar();
        assertEquals('e', c);
    }

    @Test
    public void testGetColumn() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(3, SimpleCharStream.getColumn());
    }

    @Test
    public void testGetLine() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(1, SimpleCharStream.getLine());
    }

    @Test
    public void testGetEndColumn() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(3, SimpleCharStream.getEndColumn());
    }

    @Test
    public void testGetEndLine() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals(1, SimpleCharStream.getEndLine());
    }

    @Test
    public void testGetBeginColumn() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        assertEquals(1, SimpleCharStream.getBeginColumn());
    }

    @Test
    public void testGetBeginLine() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        assertEquals(1, SimpleCharStream.getBeginLine());
    }

    @Test
    public void testBackup() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        SimpleCharStream.backup(1);
        assertEquals('e', SimpleCharStream.readChar());
    }

    @Test
    public void testGetImage() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        assertEquals("He", SimpleCharStream.GetImage());
    }

    @Test
    public void testGetSuffix() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.readChar(); // e
        char[] suffix = SimpleCharStream.GetSuffix(2);
        assertArrayEquals(new char[]{'H', 'e'}, suffix);
    }

    @Test
    public void testDone() {
        SimpleCharStream.Done();
        assertNull(SimpleCharStream.buffer);
        assertNull(SimpleCharStream.bufline);
        assertNull(SimpleCharStream.bufcolumn);
    }

    @Test
    public void testAdjustBeginLineColumn() throws IOException {
        SimpleCharStream.BeginToken();
        SimpleCharStream.readChar(); // H
        SimpleCharStream.adjustBeginLineColumn(2, 5);
        assertEquals(2, SimpleCharStream.getBeginLine());
        assertEquals(5, SimpleCharStream.getBeginColumn());
    }

    @Test
    public void testReInitReader() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.ReInit(new StringReader("New Stream"));
        assertEquals('N', SimpleCharStream.readChar());
    }

    @Test
    public void testReInitInputStream() throws IOException {
        SimpleCharStream.readChar(); // H
        SimpleCharStream.ReInit(new ByteArrayInputStream("New Stream".getBytes()));
        assertEquals('N', SimpleCharStream.readChar());
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `SimpleCharStream` with a `StringReader` containing a test string.
- **Tests**: Each test method checks a specific functionality of the `SimpleCharStream` class. The tests cover reading characters, getting line and column information, backing up, getting images and suffixes, and reinitializing the stream.
- **Static Nature**: Since the class uses static fields, the `Done` method is called to clean up after tests that modify the static state.
- **Reinitialization**: Tests for `ReInit` methods ensure that the stream can be reset with a new input source.

This test suite should provide a comprehensive check of the `SimpleCharStream` class's functionality.