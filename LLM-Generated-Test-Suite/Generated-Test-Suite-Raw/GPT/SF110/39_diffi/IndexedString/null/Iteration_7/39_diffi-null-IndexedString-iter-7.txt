Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `IndexedString` class. This test suite covers the constructor, the `count` method (indirectly through the constructor), and the `indexOf` method.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

import org.junit.Before;
import org.junit.Test;

public class IndexedStringTest {

    private IndexedString indexedString;

    @Before
    public void setUp() {
        indexedString = new IndexedString("hello world");
    }

    @Test
    public void testConstructor() {
        assertNotNull("Values array should not be null", indexedString.values);
        assertNotNull("Index array should not be null", indexedString.index);
        assertEquals("Values array length should match input string length", 11, indexedString.values.length);
    }

    @Test
    public void testIndexArrayInitialization() {
        IndexedString testString = new IndexedString("aabbcc");
        assertArrayEquals("Index for 'a' should be [0, 1]", new int[]{0, 1}, testString.index['a']);
        assertArrayEquals("Index for 'b' should be [2, 3]", new int[]{2, 3}, testString.index['b']);
        assertArrayEquals("Index for 'c' should be [4, 5]", new int[]{4, 5}, testString.index['c']);
    }

    @Test
    public void testIndexOfFound() {
        assertEquals("Index of 'hello' should be 0", 0, indexedString.indexOf("hello".toCharArray()));
        assertEquals("Index of 'world' should be 6", 6, indexedString.indexOf("world".toCharArray()));
    }

    @Test
    public void testIndexOfNotFound() {
        assertEquals("Index of 'bye' should be -1", -1, indexedString.indexOf("bye".toCharArray()));
        assertEquals("Index of 'helloo' should be -1", -1, indexedString.indexOf("helloo".toCharArray()));
    }

    @Test
    public void testIndexOfEmptyTarget() {
        assertEquals("Index of empty target should be -1", -1, indexedString.indexOf("".toCharArray()));
    }

    @Test
    public void testIndexOfSingleCharacter() {
        assertEquals("Index of 'h' should be 0", 0, indexedString.indexOf("h".toCharArray()));
        assertEquals("Index of 'w' should be 6", 6, indexedString.indexOf("w".toCharArray()));
    }

    @Test
    public void testIndexOfFullString() {
        assertEquals("Index of full string should be 0", 0, indexedString.indexOf("hello world".toCharArray()));
    }

    @Test
    public void testIndexOfNonExistentCharacter() {
        assertEquals("Index of 'z' should be -1", -1, indexedString.indexOf("z".toCharArray()));
    }
}
```

### Explanation:
- **Constructor Tests**: Ensure that the `values` and `index` arrays are initialized correctly.
- **Index Array Initialization**: Verify that the `index` array is populated correctly for a given string.
- **IndexOf Tests**: Check various scenarios for the `indexOf` method, including:
  - Finding a substring at the beginning, middle, and end.
  - Handling cases where the substring is not found.
  - Edge cases like empty target strings and single-character searches.
- **Non-Existent Character**: Ensure that searching for characters not in the string returns `-1`.

This test suite should provide comprehensive coverage for the `IndexedString` class.