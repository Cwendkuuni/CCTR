Certainly! Below is a JUnit 4 test suite for the `IndexedString` class. This suite tests the constructor, the `count` method indirectly through the constructor, and the `indexOf` method.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

import org.junit.Before;
import org.junit.Test;

public class IndexedStringTest {

    private IndexedString indexedString;

    @Before
    public void setUp() {
        indexedString = new IndexedString("hello world");
    }

    @Test
    public void testConstructor() {
        assertNotNull("IndexedString object should not be null", indexedString);
    }

    @Test
    public void testIndexInitialization() {
        // Test if the index array is initialized correctly
        int[] expectedIndexForH = {0};
        int[] expectedIndexForL = {2, 3, 9};
        int[] expectedIndexForO = {4, 7};

        assertArrayEquals("Index for 'h' should be [0]", expectedIndexForH, indexedString.index['h']);
        assertArrayEquals("Index for 'l' should be [2, 3, 9]", expectedIndexForL, indexedString.index['l']);
        assertArrayEquals("Index for 'o' should be [4, 7]", expectedIndexForO, indexedString.index['o']);
    }

    @Test
    public void testIndexOf() {
        // Test finding a substring
        assertEquals("Index of 'hello' should be 0", 0, indexedString.indexOf("hello".toCharArray()));
        assertEquals("Index of 'world' should be 6", 6, indexedString.indexOf("world".toCharArray()));
        assertEquals("Index of 'lo wo' should be 3", 3, indexedString.indexOf("lo wo".toCharArray()));
    }

    @Test
    public void testIndexOfNotFound() {
        // Test finding a substring that does not exist
        assertEquals("Index of 'bye' should be -1", -1, indexedString.indexOf("bye".toCharArray()));
        assertEquals("Index of 'helloo' should be -1", -1, indexedString.indexOf("helloo".toCharArray()));
    }

    @Test
    public void testIndexOfEmptyTarget() {
        // Test finding an empty substring
        assertEquals("Index of empty string should be -1", -1, indexedString.indexOf("".toCharArray()));
    }

    @Test
    public void testIndexOfSingleCharacter() {
        // Test finding a single character
        assertEquals("Index of 'h' should be 0", 0, indexedString.indexOf("h".toCharArray()));
        assertEquals("Index of 'w' should be 6", 6, indexedString.indexOf("w".toCharArray()));
        assertEquals("Index of 'z' should be -1", -1, indexedString.indexOf("z".toCharArray()));
    }
}
```

### Explanation:
- **Constructor Test**: Ensures that the `IndexedString` object is created successfully.
- **Index Initialization Test**: Verifies that the index array is correctly initialized for specific characters.
- **IndexOf Tests**: 
  - Tests for finding substrings that exist within the string.
  - Tests for substrings that do not exist.
  - Tests for edge cases like an empty target string and single character searches.

This test suite should cover the basic functionality of the `IndexedString` class. Adjustments may be needed based on additional requirements or edge cases specific to your application.