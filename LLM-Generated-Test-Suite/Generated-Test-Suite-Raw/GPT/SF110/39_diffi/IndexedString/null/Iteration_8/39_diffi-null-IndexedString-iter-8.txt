Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `IndexedString` class. This suite includes tests for the constructor, the `count` method (indirectly tested through the constructor), and the `indexOf` method.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

import org.junit.Before;
import org.junit.Test;

import de.beiri22.stringincrementor.helper.IndexedString;

public class IndexedStringTest {

    private IndexedString indexedString;

    @Before
    public void setUp() {
        indexedString = new IndexedString("hello world");
    }

    @Test
    public void testConstructor() {
        assertNotNull("Values array should not be null", indexedString.values);
        assertNotNull("Index array should not be null", indexedString.index);
        assertEquals("Values array length should match input string length", 11, indexedString.values.length);
    }

    @Test
    public void testIndexOfSingleCharacter() {
        assertEquals("Index of 'h' should be 0", 0, indexedString.indexOf(new char[]{'h'}));
        assertEquals("Index of 'e' should be 1", 1, indexedString.indexOf(new char[]{'e'}));
        assertEquals("Index of 'w' should be 6", 6, indexedString.indexOf(new char[]{'w'}));
    }

    @Test
    public void testIndexOfMultipleCharacters() {
        assertEquals("Index of 'hello' should be 0", 0, indexedString.indexOf(new char[]{'h', 'e', 'l', 'l', 'o'}));
        assertEquals("Index of 'world' should be 6", 6, indexedString.indexOf(new char[]{'w', 'o', 'r', 'l', 'd'}));
    }

    @Test
    public void testIndexOfNonExistentCharacter() {
        assertEquals("Index of 'x' should be -1", -1, indexedString.indexOf(new char[]{'x'}));
    }

    @Test
    public void testIndexOfNonExistentSequence() {
        assertEquals("Index of 'helloo' should be -1", -1, indexedString.indexOf(new char[]{'h', 'e', 'l', 'l', 'o', 'o'}));
    }

    @Test
    public void testIndexOfEmptyTarget() {
        assertEquals("Index of empty target should be -1", -1, indexedString.indexOf(new char[]{}));
    }

    @Test
    public void testIndexOfFullString() {
        assertEquals("Index of full string should be 0", 0, indexedString.indexOf("hello world".toCharArray()));
    }

    @Test
    public void testIndexArrayInitialization() {
        IndexedString indexedString = new IndexedString("aabbcc");
        assertArrayEquals("Index array for 'a' should be [0, 1]", new int[]{0, 1}, indexedString.index['a']);
        assertArrayEquals("Index array for 'b' should be [2, 3]", new int[]{2, 3}, indexedString.index['b']);
        assertArrayEquals("Index array for 'c' should be [4, 5]", new int[]{4, 5}, indexedString.index['c']);
    }
}
```

### Explanation:
- **Constructor Test**: Verifies that the `values` and `index` arrays are initialized correctly.
- **IndexOf Tests**: These tests cover various scenarios for the `indexOf` method, including:
  - Single character search.
  - Multiple character search.
  - Non-existent character and sequence.
  - Empty target array.
  - Full string search.
- **Index Array Initialization Test**: Ensures that the `index` array is correctly populated for each character in the input string.

This test suite should provide comprehensive coverage for the `IndexedString` class.