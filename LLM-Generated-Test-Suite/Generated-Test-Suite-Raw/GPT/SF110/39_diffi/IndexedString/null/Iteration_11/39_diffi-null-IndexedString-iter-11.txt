Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `IndexedString` class. This suite includes tests for the constructor, the `count` method (indirectly tested through the constructor), and the `indexOf` method.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

import org.junit.Before;
import org.junit.Test;

public class IndexedStringTest {

    private IndexedString indexedString;

    @Before
    public void setUp() {
        indexedString = new IndexedString("hello world");
    }

    @Test
    public void testConstructor() {
        assertNotNull("Values array should not be null", indexedString.values);
        assertNotNull("Index array should not be null", indexedString.index);
        assertEquals("Values array length should match input string length", 11, indexedString.values.length);
    }

    @Test
    public void testIndexArrayInitialization() {
        // Test that the index array is correctly initialized
        int[] expectedIndexForH = {0};
        int[] expectedIndexForL = {2, 3, 9};
        int[] expectedIndexForO = {4, 7};

        assertArrayEquals("Index for 'h' should be correct", expectedIndexForH, indexedString.index['h']);
        assertArrayEquals("Index for 'l' should be correct", expectedIndexForL, indexedString.index['l']);
        assertArrayEquals("Index for 'o' should be correct", expectedIndexForO, indexedString.index['o']);
    }

    @Test
    public void testIndexOfFound() {
        // Test finding a substring
        assertEquals("Index of 'hello' should be 0", 0, indexedString.indexOf("hello".toCharArray()));
        assertEquals("Index of 'world' should be 6", 6, indexedString.indexOf("world".toCharArray()));
    }

    @Test
    public void testIndexOfNotFound() {
        // Test not finding a substring
        assertEquals("Index of 'test' should be -1", -1, indexedString.indexOf("test".toCharArray()));
        assertEquals("Index of 'helloworld' should be -1", -1, indexedString.indexOf("helloworld".toCharArray()));
    }

    @Test
    public void testIndexOfEmptyTarget() {
        // Test with an empty target
        assertEquals("Index of empty target should be -1", -1, indexedString.indexOf("".toCharArray()));
    }

    @Test
    public void testIndexOfSingleCharacter() {
        // Test finding a single character
        assertEquals("Index of 'h' should be 0", 0, indexedString.indexOf("h".toCharArray()));
        assertEquals("Index of 'w' should be 6", 6, indexedString.indexOf("w".toCharArray()));
    }

    @Test
    public void testIndexOfFullString() {
        // Test finding the full string
        assertEquals("Index of 'hello world' should be 0", 0, indexedString.indexOf("hello world".toCharArray()));
    }
}
```

### Explanation:
- **Constructor Tests**: Ensure that the `values` and `index` arrays are initialized correctly.
- **Index Array Initialization Test**: Verify that the `index` array is populated correctly for specific characters.
- **IndexOf Tests**: Check various scenarios for the `indexOf` method, including:
  - Finding substrings at different positions.
  - Handling cases where the substring is not found.
  - Edge cases like empty target strings and single-character searches.
  - Searching for the entire string.

This test suite should provide comprehensive coverage for the `IndexedString` class.