Certainly! Below is a JUnit 4 test suite for the `TucsonSimple` class. This suite includes tests for each method in the class, including both public and private methods. Note that testing private methods directly is not a common practice, but for the sake of completeness, I've included them using reflection.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import corina.formats.TucsonSimple;
import corina.Sample;
import corina.Year;
import corina.Range;
import corina.WrongFiletypeException;
import corina.util.I18n;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class TucsonSimpleTest {

    private TucsonSimple tucsonSimple;
    private Sample sample;
    private BufferedWriter writer;

    @Before
    public void setUp() {
        tucsonSimple = new TucsonSimple();
        sample = mock(Sample.class);
        writer = new BufferedWriter(new StringWriter());
    }

    @Test
    public void testToString() {
        assertEquals("format.tucsonsimple", tucsonSimple.toString());
    }

    @Test
    public void testGetDefaultExtension() {
        assertEquals(".RWL", tucsonSimple.getDefaultExtension());
    }

    @Test(expected = WrongFiletypeException.class)
    public void testLoad() throws IOException {
        BufferedReader reader = mock(BufferedReader.class);
        tucsonSimple.load(reader);
    }

    @Test
    public void testMake6digitCode() throws Exception {
        Method method = TucsonSimple.class.getDeclaredMethod("make6digitCode", Sample.class);
        method.setAccessible(true);

        Map<String, Object> meta = new HashMap<>();
        meta.put("id", "1234567");
        when(sample.meta).thenReturn(meta);

        String code = (String) method.invoke(tucsonSimple, sample);
        assertEquals("123456", code);

        meta.put("id", "123");
        code = (String) method.invoke(tucsonSimple, sample);
        assertEquals("123   ", code);

        meta.remove("id");
        code = (String) method.invoke(tucsonSimple, sample);
        assertEquals("000000", code);
    }

    @Test
    public void testSaveRowHeader() throws Exception {
        Method method = TucsonSimple.class.getDeclaredMethod("saveRowHeader", BufferedWriter.class, Sample.class, String.class, int.class, Year.class);
        method.setAccessible(true);

        Range range = mock(Range.class);
        Year startYear = new Year(2000);
        when(range.getStart()).thenReturn(startYear);
        when(sample.range).thenReturn(range);

        method.invoke(tucsonSimple, writer, sample, "123456", 6, new Year(1999));
        writer.flush();
        assertEquals("2000", writer.toString().trim());
    }

    @Test
    public void testSaveData() throws Exception {
        Method method = TucsonSimple.class.getDeclaredMethod("saveData", Sample.class, BufferedWriter.class);
        method.setAccessible(true);

        Range range = mock(Range.class);
        Year startYear = new Year(2000);
        Year endYear = new Year(2005);
        when(range.getStart()).thenReturn(startYear);
        when(range.getEnd()).thenReturn(endYear);
        when(sample.range).thenReturn(range);

        Map<Integer, Integer> data = new HashMap<>();
        data.put(0, 100);
        data.put(1, 200);
        when(sample.data).thenReturn(data);

        method.invoke(tucsonSimple, sample, writer);
        writer.flush();
        assertTrue(writer.toString().contains("100"));
        assertTrue(writer.toString().contains("200"));
    }

    @Test
    public void testComputeRange() throws Exception {
        Method method = TucsonSimple.class.getDeclaredMethod("computeRange", Sample.class);
        method.setAccessible(true);

        Range range = mock(Range.class);
        Year startYear = new Year(500);
        when(range.getStart()).thenReturn(startYear);
        when(sample.range).thenReturn(range);

        Range computedRange = (Range) method.invoke(tucsonSimple, sample);
        assertNotNull(computedRange);
    }

    @Test
    public void testSave() throws IOException {
        tucsonSimple.save(sample, writer);
        writer.flush();
        assertNotNull(writer.toString());
    }
}
```

### Explanation:
- **Mockito** is used to mock dependencies like `Sample`, `BufferedReader`, and `BufferedWriter`.
- **Reflection** is used to test private methods (`make6digitCode`, `saveRowHeader`, `saveData`, and `computeRange`).
- **Assertions** are used to verify the expected outcomes of each method.
- **Exception Testing** is done for the `load` method to ensure it throws `WrongFiletypeException`.

This test suite should cover the functionality of the `TucsonSimple` class comprehensively.