Certainly! Below is a JUnit 4 test suite for the `TucsonSimple` class. This suite tests the public methods and some of the private methods using reflection. Note that testing private methods directly is generally not recommended, but it can be done using reflection for completeness in this case.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.lang.reflect.Method;

public class TucsonSimpleTest {

    private TucsonSimple tucsonSimple;

    @Before
    public void setUp() {
        tucsonSimple = new TucsonSimple();
    }

    @Test
    public void testToString() {
        assertEquals("format.tucsonsimple", tucsonSimple.toString());
    }

    @Test
    public void testGetDefaultExtension() {
        assertEquals(".RWL", tucsonSimple.getDefaultExtension());
    }

    @Test(expected = WrongFiletypeException.class)
    public void testLoad() throws IOException {
        BufferedReader reader = Mockito.mock(BufferedReader.class);
        tucsonSimple.load(reader);
    }

    @Test
    public void testMake6digitCode() throws Exception {
        Sample sample = Mockito.mock(Sample.class);
        Mockito.when(sample.meta.containsKey("id")).thenReturn(true);
        Mockito.when(sample.meta.get("id")).thenReturn("123456789");

        Method method = TucsonSimple.class.getDeclaredMethod("make6digitCode", Sample.class);
        method.setAccessible(true);
        String result = (String) method.invoke(tucsonSimple, sample);

        assertEquals("123456", result);
    }

    @Test
    public void testSaveRowHeader() throws Exception {
        Sample sample = Mockito.mock(Sample.class);
        BufferedWriter writer = new BufferedWriter(new StringWriter());
        Year year = Mockito.mock(Year.class);
        Mockito.when(year.toString()).thenReturn("2000");
        Mockito.when(sample.range.getStart()).thenReturn(year);

        Method method = TucsonSimple.class.getDeclaredMethod("saveRowHeader", BufferedWriter.class, Sample.class, String.class, int.class, Year.class);
        method.setAccessible(true);
        method.invoke(tucsonSimple, writer, sample, "123456", 6, year);

        writer.flush();
        assertEquals("123456 2000", writer.toString().trim());
    }

    @Test
    public void testSaveData() throws Exception {
        Sample sample = Mockito.mock(Sample.class);
        BufferedWriter writer = new BufferedWriter(new StringWriter());
        Range range = Mockito.mock(Range.class);
        Year startYear = Mockito.mock(Year.class);
        Year endYear = Mockito.mock(Year.class);

        Mockito.when(sample.range).thenReturn(range);
        Mockito.when(range.getStart()).thenReturn(startYear);
        Mockito.when(range.getEnd()).thenReturn(endYear);
        Mockito.when(startYear.compareTo(Mockito.any(Year.class))).thenReturn(0);
        Mockito.when(endYear.compareTo(Mockito.any(Year.class))).thenReturn(0);

        Method method = TucsonSimple.class.getDeclaredMethod("saveData", Sample.class, BufferedWriter.class);
        method.setAccessible(true);
        method.invoke(tucsonSimple, sample, writer);

        writer.flush();
        assertTrue(writer.toString().contains("999"));
    }

    @Test
    public void testComputeRange() throws Exception {
        Sample sample = Mockito.mock(Sample.class);
        Range range = Mockito.mock(Range.class);
        Year startYear = Mockito.mock(Year.class);

        Mockito.when(sample.range).thenReturn(range);
        Mockito.when(range.getStart()).thenReturn(startYear);
        Mockito.when(startYear.compareTo(Mockito.any(Year.class))).thenReturn(1);

        Method method = TucsonSimple.class.getDeclaredMethod("computeRange", Sample.class);
        method.setAccessible(true);
        Range result = (Range) method.invoke(tucsonSimple, sample);

        assertEquals(range, result);
    }

    @Test
    public void testSave() throws IOException {
        Sample sample = Mockito.mock(Sample.class);
        BufferedWriter writer = new BufferedWriter(new StringWriter());

        tucsonSimple.save(sample, writer);

        writer.flush();
        assertTrue(writer.toString().contains("999"));
    }
}
```

### Explanation:
- **Mockito** is used to mock dependencies like `Sample`, `BufferedReader`, `BufferedWriter`, `Range`, and `Year`.
- **Reflection** is used to test private methods (`make6digitCode`, `saveRowHeader`, `saveData`, `computeRange`) by making them accessible.
- **Assertions** are used to verify the expected outcomes of method calls.
- **Expected Exceptions** are tested using the `@Test(expected = Exception.class)` annotation.

This test suite provides a comprehensive test coverage for the `TucsonSimple` class.