Certainly! Below is a JUnit 4 test suite for the `AttributeModelComparator` class. This test suite assumes the existence of an `AttributeModel` class with a `getName()` method that returns a `String`.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import de.paragon.explorer.model.AttributeModel;
import de.paragon.explorer.model.AttributeModelComparator;
import org.junit.Before;
import org.junit.Test;

public class AttributeModelComparatorTest {

    private AttributeModelComparator comparator;

    @Before
    public void setUp() {
        comparator = new AttributeModelComparator();
    }

    @Test
    public void testCompare_BothNull() {
        int result = comparator.compare(null, null);
        assertEquals(0, result);
    }

    @Test
    public void testCompare_FirstNull() {
        AttributeModel o2 = new MockAttributeModel("b");
        int result = comparator.compare(null, o2);
        assertEquals(-1, result);
    }

    @Test
    public void testCompare_SecondNull() {
        AttributeModel o1 = new MockAttributeModel("b");
        int result = comparator.compare(o1, null);
        assertEquals(-1, result);
    }

    @Test
    public void testCompare_BothEqual() {
        AttributeModel o1 = new MockAttributeModel("a");
        AttributeModel o2 = new MockAttributeModel("a");
        int result = comparator.compare(o1, o2);
        assertEquals(0, result);
    }

    @Test
    public void testCompare_FirstLessThanSecond() {
        AttributeModel o1 = new MockAttributeModel("a");
        AttributeModel o2 = new MockAttributeModel("b");
        int result = comparator.compare(o1, o2);
        assertEquals(-1, result);
    }

    @Test
    public void testCompare_SecondLessThanFirst() {
        AttributeModel o1 = new MockAttributeModel("b");
        AttributeModel o2 = new MockAttributeModel("a");
        int result = comparator.compare(o1, o2);
        assertEquals(1, result);
    }

    @Test
    public void testCompare_FirstBeforeA_SecondAfterA() {
        AttributeModel o1 = new MockAttributeModel("A");
        AttributeModel o2 = new MockAttributeModel("b");
        int result = comparator.compare(o1, o2);
        assertEquals(1, result);
    }

    @Test
    public void testCompare_FirstAfterA_SecondBeforeA() {
        AttributeModel o1 = new MockAttributeModel("b");
        AttributeModel o2 = new MockAttributeModel("A");
        int result = comparator.compare(o1, o2);
        assertEquals(-1, result);
    }

    // Mock class for AttributeModel
    private static class MockAttributeModel implements AttributeModel {
        private final String name;

        public MockAttributeModel(String name) {
            this.name = name;
        }

        @Override
        public String getName() {
            return name;
        }
    }
}
```

### Explanation:
- **MockAttributeModel**: A mock implementation of `AttributeModel` is used to simulate the behavior of the `getName()` method.
- **Test Cases**: The test suite covers various scenarios, including:
  - Both objects being `null`.
  - One object being `null`.
  - Both objects having equal names.
  - The first object's name being lexicographically less than or greater than the second object's name.
  - Special cases where names are compared around the character "a" to test the custom logic in the comparator.

Make sure to replace `AttributeModel` with the actual implementation if it differs from the assumed interface.