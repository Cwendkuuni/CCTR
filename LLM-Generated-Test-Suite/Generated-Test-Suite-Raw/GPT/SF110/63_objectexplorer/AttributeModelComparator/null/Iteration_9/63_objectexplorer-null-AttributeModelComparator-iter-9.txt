Certainly! Below is a JUnit 4 test suite for the `AttributeModelComparator` class. This test suite covers various scenarios to ensure the `compare` method behaves as expected.

```java
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;
import java.util.Comparator;
import de.paragon.explorer.model.AttributeModel;
import de.paragon.explorer.model.AttributeModelComparator;

public class AttributeModelComparatorTest {

    private Comparator<AttributeModel> comparator;

    @Before
    public void setUp() {
        comparator = new AttributeModelComparator();
    }

    @Test
    public void testCompare_BothNull() {
        assertEquals(0, comparator.compare(null, null));
    }

    @Test
    public void testCompare_FirstNull() {
        AttributeModel o2 = new AttributeModel("b");
        assertEquals(-1, comparator.compare(null, o2));
    }

    @Test
    public void testCompare_SecondNull() {
        AttributeModel o1 = new AttributeModel("b");
        assertEquals(1, comparator.compare(o1, null));
    }

    @Test
    public void testCompare_BothEqual() {
        AttributeModel o1 = new AttributeModel("b");
        AttributeModel o2 = new AttributeModel("b");
        assertEquals(0, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_FirstLessThanSecond() {
        AttributeModel o1 = new AttributeModel("a");
        AttributeModel o2 = new AttributeModel("b");
        assertEquals(-1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_SecondLessThanFirst() {
        AttributeModel o1 = new AttributeModel("b");
        AttributeModel o2 = new AttributeModel("a");
        assertEquals(1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_FirstLessThanSecond_BothBeforeA() {
        AttributeModel o1 = new AttributeModel("A");
        AttributeModel o2 = new AttributeModel("B");
        assertEquals(-1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_SecondLessThanFirst_BothBeforeA() {
        AttributeModel o1 = new AttributeModel("B");
        AttributeModel o2 = new AttributeModel("A");
        assertEquals(1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_FirstBeforeA_SecondAfterA() {
        AttributeModel o1 = new AttributeModel("A");
        AttributeModel o2 = new AttributeModel("b");
        assertEquals(1, comparator.compare(o1, o2));
    }

    @Test
    public void testCompare_FirstAfterA_SecondBeforeA() {
        AttributeModel o1 = new AttributeModel("b");
        AttributeModel o2 = new AttributeModel("A");
        assertEquals(-1, comparator.compare(o1, o2));
    }
}
```

### Explanation:
- **Test Setup**: The `setUp` method initializes the `AttributeModelComparator` before each test.
- **Null Checks**: Tests are included to handle cases where one or both `AttributeModel` objects are `null`.
- **Equality and Order**: Tests check for equality and order based on the `compareToIgnoreCase` method.
- **Boundary Conditions**: Tests are included for names around the boundary condition of "a" to ensure the custom logic is correctly applied.

### Note:
- The `AttributeModel` class is assumed to have a constructor that takes a `String` name and a `getName()` method that returns the name. Adjust the test code if the actual `AttributeModel` class differs.