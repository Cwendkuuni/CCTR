To create a comprehensive JUnit 4 test suite for the `LagoonCLI` class, we need to consider the behavior of the `main` method and the two private static methods: `getProperty` and `showTime`. Since `main` is a static method and interacts with the system environment (e.g., `System.out`, `System.err`, `System.exit`), testing it requires capturing output streams and handling system exits. The private methods can be tested using reflection.

Here's a complete JUnit 4 test suite for the `LagoonCLI` class:

```java
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.lang.reflect.Method;
import java.util.Properties;
import nu.staldal.lagoon.LagoonCLI;
import nu.staldal.lagoon.core.LagoonException;

public class LagoonCLITest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    public void testMainNoArgs() {
        LagoonCLI.main(new String[]{});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"test.properties", "invalid"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainNegativeInterval() {
        LagoonCLI.main(new String[]{"test.properties", "-1"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainBuild() {
        // This test assumes the presence of a valid sitemap file and properties file
        // LagoonCLI.main(new String[]{"test.sitemap", "build"});
        // assertTrue(outContent.toString().contains("Building website..."));
    }

    @Test
    public void testMainForce() {
        // This test assumes the presence of a valid sitemap file and properties file
        // LagoonCLI.main(new String[]{"test.sitemap", "force"});
        // assertTrue(outContent.toString().contains("Force building website..."));
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties props = new Properties();
        props.setProperty("testKey", "testValue");
        LagoonCLI.properties = props;

        Method method = LagoonCLI.class.getDeclaredMethod("getProperty", String.class);
        method.setAccessible(true);

        String result = (String) method.invoke(null, "testKey");
        assertEquals("testValue", result);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyException() throws Exception {
        Properties props = new Properties();
        LagoonCLI.properties = props;

        Method method = LagoonCLI.class.getDeclaredMethod("getProperty", String.class);
        method.setAccessible(true);

        method.invoke(null, "missingKey");
    }

    @Test
    public void testShowTime() throws Exception {
        Method method = LagoonCLI.class.getDeclaredMethod("showTime", long.class);
        method.setAccessible(true);

        method.invoke(null, 5000L);
        assertTrue(outContent.toString().contains("in 5000 ms"));

        outContent.reset();

        method.invoke(null, 15000L);
        assertTrue(outContent.toString().contains("in 15 s"));
    }
}
```

### Explanation:
- **Stream Redirection**: The `setUpStreams` and `restoreStreams` methods redirect `System.out` and `System.err` to capture output for assertions.
- **Testing `main` Method**: Tests like `testMainNoArgs`, `testMainInvalidInterval`, and `testMainNegativeInterval` check the output for invalid inputs. Tests for valid inputs like `testMainBuild` and `testMainForce` are commented out because they require specific files and environment setup.
- **Reflection for Private Methods**: The `getProperty` and `showTime` methods are tested using reflection to access and invoke them.
- **Exception Testing**: `testGetPropertyException` checks that a `LagoonException` is thrown when a property is missing.

This test suite provides a foundation for testing the `LagoonCLI` class, but additional setup and teardown might be necessary for a complete test environment, especially for tests involving file I/O and system properties.