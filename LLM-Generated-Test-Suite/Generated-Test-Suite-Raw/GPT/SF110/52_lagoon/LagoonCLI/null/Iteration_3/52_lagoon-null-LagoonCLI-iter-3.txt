To create a comprehensive JUnit 4 test suite for the `LagoonCLI` class, we need to consider the behavior of the `main` method and the two private static methods: `getProperty` and `showTime`. Since `main` is a static method and interacts with the system environment (e.g., reading files, printing to the console), testing it directly can be challenging. We can use mocking and redirection of system streams to test its behavior. For private methods, we can use reflection to test them.

Here is a JUnit 4 test suite for the `LagoonCLI` class:

```java
import org.junit.*;
import org.junit.rules.ExpectedException;
import org.junit.rules.TemporaryFolder;

import java.io.*;
import java.lang.reflect.Method;
import java.util.Properties;

import static org.junit.Assert.*;

public class LagoonCLITest {

    @Rule
    public TemporaryFolder tempFolder = new TemporaryFolder();

    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    public void testMainNoArgs() {
        LagoonCLI.main(new String[]{});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"test.xml", "invalid"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainNegativeInterval() {
        LagoonCLI.main(new String[]{"test.xml", "-1"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainFileNotFound() {
        LagoonCLI.main(new String[]{"nonexistent.xml"});
        assertTrue(errContent.toString().contains("File not found:"));
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties props = new Properties();
        props.setProperty("testKey", "testValue");
        LagoonCLI.properties = props;

        Method method = LagoonCLI.class.getDeclaredMethod("getProperty", String.class);
        method.setAccessible(true);
        String result = (String) method.invoke(null, "testKey");
        assertEquals("testValue", result);
    }

    @Test
    public void testGetPropertyThrowsException() throws Exception {
        expectedException.expectCause(org.hamcrest.Matchers.instanceOf(LagoonException.class));
        expectedException.expectMessage("Property testKey not specified");

        Method method = LagoonCLI.class.getDeclaredMethod("getProperty", String.class);
        method.setAccessible(true);
        method.invoke(null, "testKey");
    }

    @Test
    public void testShowTimeLessThan10Seconds() throws Exception {
        Method method = LagoonCLI.class.getDeclaredMethod("showTime", long.class);
        method.setAccessible(true);
        method.invoke(null, 5000L);
        assertTrue(outContent.toString().contains("in 5000 ms"));
    }

    @Test
    public void testShowTimeMoreThan10Seconds() throws Exception {
        Method method = LagoonCLI.class.getDeclaredMethod("showTime", long.class);
        method.setAccessible(true);
        method.invoke(null, 15000L);
        assertTrue(outContent.toString().contains("in 15 s"));
    }
}
```

### Explanation:

1. **Stream Redirection**: We redirect `System.out` and `System.err` to `ByteArrayOutputStream` to capture console output for assertions.

2. **Testing `main` Method**:
   - We test various scenarios such as no arguments, invalid interval, negative interval, and file not found.
   - We assert the output to ensure the correct error messages are printed.

3. **Testing `getProperty` Method**:
   - We use reflection to access the private `getProperty` method.
   - We test both successful retrieval and exception throwing when a property is not found.

4. **Testing `showTime` Method**:
   - We use reflection to access the private `showTime` method.
   - We test the output for time less than and greater than 10 seconds.

This test suite provides a comprehensive set of tests for the `LagoonCLI` class, covering its main functionalities and edge cases.