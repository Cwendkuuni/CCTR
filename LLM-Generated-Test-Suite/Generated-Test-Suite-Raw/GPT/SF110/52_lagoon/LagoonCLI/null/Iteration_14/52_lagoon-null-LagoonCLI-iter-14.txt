To create a comprehensive JUnit 4 test suite for the `LagoonCLI` class, we need to focus on testing the static methods `main`, `getProperty`, and `showTime`. Since `main` is the entry point and involves a lot of interactions, we will use mocking to simulate different scenarios. The `getProperty` and `showTime` methods are more straightforward and can be tested directly.

Here's a complete JUnit 4 test suite for the `LagoonCLI` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.*;
import java.util.Properties;

import nu.staldal.lagoon.LagoonCLI;
import nu.staldal.lagoon.core.LagoonException;
import org.junit.*;
import org.mockito.*;

public class LagoonCLITest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    public void testMainNoArgs() {
        LagoonCLI.main(new String[]{});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"test.properties", "invalid"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainNegativeInterval() {
        LagoonCLI.main(new String[]{"test.properties", "-1"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainBuild() {
        // Mock LagoonProcessor and related dependencies
        LagoonProcessor mockProcessor = mock(LagoonProcessor.class);
        when(mockProcessor.build(false)).thenReturn(true);

        // Simulate the scenario
        LagoonCLI.main(new String[]{"test.sitemap", "build"});

        assertTrue(outContent.toString().contains("Building website..."));
    }

    @Test
    public void testMainForce() {
        // Mock LagoonProcessor and related dependencies
        LagoonProcessor mockProcessor = mock(LagoonProcessor.class);
        when(mockProcessor.build(true)).thenReturn(true);

        // Simulate the scenario
        LagoonCLI.main(new String[]{"test.sitemap", "force"});

        assertTrue(outContent.toString().contains("Force building website..."));
    }

    @Test
    public void testGetProperty() throws LagoonException {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");
        LagoonCLI.properties = properties;

        String value = LagoonCLI.getProperty("testKey");
        assertEquals("testValue", value);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyException() throws LagoonException {
        Properties properties = new Properties();
        LagoonCLI.properties = properties;

        LagoonCLI.getProperty("missingKey");
    }

    @Test
    public void testShowTimeMilliseconds() {
        LagoonCLI.showTime(5000);
        assertTrue(outContent.toString().contains("in 5000 ms"));
    }

    @Test
    public void testShowTimeSeconds() {
        LagoonCLI.showTime(15000);
        assertTrue(outContent.toString().contains("in 15 s"));
    }
}
```

### Explanation:

1. **Setup and Teardown**: We redirect `System.out` and `System.err` to capture the output for assertions. This is reset after each test.

2. **Test Cases**:
   - **`testMainNoArgs`**: Tests the scenario where no arguments are provided.
   - **`testMainInvalidInterval`**: Tests the scenario where an invalid interval is provided.
   - **`testMainNegativeInterval`**: Tests the scenario where a negative interval is provided.
   - **`testMainBuild`**: Tests the scenario where the "build" command is used.
   - **`testMainForce`**: Tests the scenario where the "force" command is used.
   - **`testGetProperty`**: Tests the `getProperty` method for a valid key.
   - **`testGetPropertyException`**: Tests the `getProperty` method for a missing key, expecting an exception.
   - **`testShowTimeMilliseconds`**: Tests the `showTime` method for a time less than 10 seconds.
   - **`testShowTimeSeconds`**: Tests the `showTime` method for a time greater than 10 seconds.

3. **Mocking**: We use Mockito to mock the `LagoonProcessor` class to simulate the behavior of the `build` method without executing the actual logic.

This test suite provides a comprehensive coverage of the `LagoonCLI` class's functionality.