To create a comprehensive JUnit 4 test suite for the `LagoonCLI` class, we need to consider testing the main method and the private methods `getProperty` and `showTime`. Since `main` is a static method and interacts with the system environment (like `System.out` and `System.err`), we will use a library like `SystemLambda` to capture output streams. For private methods, we can use reflection to test them.

Here's a complete JUnit 4 test suite for the `LagoonCLI` class:

```java
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.Rule;
import org.junit.contrib.java.lang.system.SystemOutRule;
import org.junit.contrib.java.lang.system.SystemErrRule;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;
import java.io.*;
import java.lang.reflect.Method;
import java.util.Properties;
import nu.staldal.lagoon.LagoonCLI;
import nu.staldal.lagoon.core.LagoonException;

public class LagoonCLITest {

    @Rule
    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();

    @Rule
    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog();

    @Rule
    public final ExpectedSystemExit exit = ExpectedSystemExit.none();

    private Properties originalProperties;

    @Before
    public void setUp() {
        originalProperties = new Properties();
        originalProperties.putAll(System.getProperties());
    }

    @After
    public void tearDown() {
        System.setProperties(originalProperties);
    }

    @Test
    public void testMainNoArguments() {
        LagoonCLI.main(new String[]{});
        assertTrue(systemOutRule.getLog().contains("Syntax:"));
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"test.properties", "invalid"});
        assertTrue(systemOutRule.getLog().contains("Syntax:"));
    }

    @Test
    public void testMainValidInterval() {
        exit.expectSystemExitWithStatus(0);
        LagoonCLI.main(new String[]{"test.properties", "10"});
        assertTrue(systemOutRule.getLog().contains("Lagoon initialized successfully"));
    }

    @Test
    public void testMainBuild() {
        exit.expectSystemExitWithStatus(0);
        LagoonCLI.main(new String[]{"test.properties", "build"});
        assertTrue(systemOutRule.getLog().contains("Building website..."));
    }

    @Test
    public void testMainForce() {
        exit.expectSystemExitWithStatus(0);
        LagoonCLI.main(new String[]{"test.properties", "force"});
        assertTrue(systemOutRule.getLog().contains("Force building website..."));
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties props = new Properties();
        props.setProperty("testKey", "testValue");
        LagoonCLI.properties = props;

        Method method = LagoonCLI.class.getDeclaredMethod("getProperty", String.class);
        method.setAccessible(true);
        String result = (String) method.invoke(null, "testKey");
        assertEquals("testValue", result);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyException() throws Exception {
        Properties props = new Properties();
        LagoonCLI.properties = props;

        Method method = LagoonCLI.class.getDeclaredMethod("getProperty", String.class);
        method.setAccessible(true);
        method.invoke(null, "missingKey");
    }

    @Test
    public void testShowTime() throws Exception {
        Method method = LagoonCLI.class.getDeclaredMethod("showTime", long.class);
        method.setAccessible(true);

        method.invoke(null, 5000L);
        assertTrue(systemOutRule.getLog().contains("in 5000 ms"));

        systemOutRule.clearLog();

        method.invoke(null, 15000L);
        assertTrue(systemOutRule.getLog().contains("in 15 s"));
    }
}
```

### Explanation:

1. **System Rules**: We use `SystemOutRule` and `SystemErrRule` to capture `System.out` and `System.err` outputs. `ExpectedSystemExit` is used to handle `System.exit` calls.

2. **Test Cases**:
   - **testMainNoArguments**: Tests the scenario where no arguments are passed.
   - **testMainInvalidInterval**: Tests the scenario where an invalid interval is passed.
   - **testMainValidInterval**: Tests the scenario with a valid interval.
   - **testMainBuild**: Tests the scenario where "build" is passed as an argument.
   - **testMainForce**: Tests the scenario where "force" is passed as an argument.
   - **testGetProperty**: Tests the `getProperty` method for a valid key.
   - **testGetPropertyException**: Tests the `getProperty` method for an invalid key, expecting a `LagoonException`.
   - **testShowTime**: Tests the `showTime` method for different time values.

3. **Reflection**: Used to access and test private methods `getProperty` and `showTime`.

4. **Setup and Teardown**: Ensures that system properties are restored after each test.

This test suite covers the main functionalities and edge cases of the `LagoonCLI` class.