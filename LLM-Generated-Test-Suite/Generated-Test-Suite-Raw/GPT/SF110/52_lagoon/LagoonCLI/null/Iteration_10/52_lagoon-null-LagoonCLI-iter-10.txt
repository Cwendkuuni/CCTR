To create a comprehensive JUnit 4 test suite for the `LagoonCLI` class, we need to focus on testing the static methods `main`, `getProperty`, and `showTime`. Since `main` is the entry point and involves a lot of interactions, we will simulate different scenarios using mock objects and system output capturing. The `getProperty` method will be tested for both valid and invalid property retrievals, and `showTime` will be tested for its output formatting.

Here's a complete JUnit 4 test suite for the `LagoonCLI` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.*;
import java.util.Properties;

import nu.staldal.lagoon.LagoonCLI;
import nu.staldal.lagoon.core.LagoonException;
import org.junit.*;
import org.mockito.*;

public class LagoonCLITest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    public void testMainNoArguments() {
        LagoonCLI.main(new String[]{});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainInvalidInterval() {
        LagoonCLI.main(new String[]{"test.properties", "invalid"});
        assertTrue(outContent.toString().contains("Syntax:"));
    }

    @Test
    public void testMainValidInterval() {
        // Mocking LagoonProcessor and related classes would be necessary here
        // This is a placeholder to show where such a test would go
    }

    @Test
    public void testMainBuildOption() {
        // Mocking LagoonProcessor and related classes would be necessary here
        // This is a placeholder to show where such a test would go
    }

    @Test
    public void testMainForceOption() {
        // Mocking LagoonProcessor and related classes would be necessary here
        // This is a placeholder to show where such a test would go
    }

    @Test
    public void testGetPropertyValid() throws LagoonException {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");
        LagoonCLI.properties = properties;
        assertEquals("testValue", LagoonCLI.getProperty("testKey"));
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyInvalid() throws LagoonException {
        Properties properties = new Properties();
        LagoonCLI.properties = properties;
        LagoonCLI.getProperty("invalidKey");
    }

    @Test
    public void testShowTimeMilliseconds() {
        LagoonCLI.showTime(5000);
        assertTrue(outContent.toString().contains("in 5000 ms"));
    }

    @Test
    public void testShowTimeSeconds() {
        LagoonCLI.showTime(15000);
        assertTrue(outContent.toString().contains("in 15 s"));
    }
}
```

### Explanation:
- **Stream Redirection**: We redirect `System.out` and `System.err` to capture the output for assertions.
- **Test Cases**:
  - **`testMainNoArguments`**: Tests the scenario where no arguments are provided.
  - **`testMainInvalidInterval`**: Tests the scenario where an invalid interval is provided.
  - **`testMainValidInterval`, `testMainBuildOption`, `testMainForceOption`**: These are placeholders for tests that would require mocking of `LagoonProcessor` and other dependencies.
  - **`testGetPropertyValid`**: Tests retrieving a valid property.
  - **`testGetPropertyInvalid`**: Tests retrieving an invalid property, expecting a `LagoonException`.
  - **`testShowTimeMilliseconds` and `testShowTimeSeconds`**: Test the output of `showTime` for different time values.

### Note:
- The `LagoonProcessor` and other dependencies are not mocked here due to the complexity of the class interactions. In a real-world scenario, you would use a mocking framework like Mockito to simulate these interactions.
- The test suite assumes that the `LagoonCLI` class is accessible and that its static fields and methods can be manipulated directly for testing purposes.