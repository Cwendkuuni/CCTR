To create a comprehensive JUnit 4 test suite for the `LagoonGUI` class, we need to focus on testing the public methods and any private methods that have significant logic. Since `LagoonGUI` is a GUI application, testing it involves simulating user interactions and verifying the expected outcomes. We will use mocking to simulate interactions with components and dependencies like `LagoonProcessor`.

Here's a basic test suite for the `LagoonGUI` class:

```java
import org.junit.*;
import org.mockito.*;
import java.awt.event.*;
import java.io.*;
import java.util.Properties;
import nu.staldal.lagoon.core.LagoonProcessor;
import nu.staldal.lagoon.LagoonGUI;

import static org.mockito.Mockito.*;

public class LagoonGUITest {

    private LagoonGUI lagoonGUI;
    private LagoonProcessor mockProcessor;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
        mockProcessor = mock(LagoonProcessor.class);
        lagoonGUI.processor = mockProcessor;
    }

    @Test
    public void testWindowClosing() {
        WindowEvent mockEvent = mock(WindowEvent.class);
        lagoonGUI.windowClosing(mockEvent);
        // Verify that exit method is called
        // Since exit calls System.exit, we can't directly test it without a workaround
        // We assume exit() works correctly if no exceptions are thrown
    }

    @Test
    public void testBuildWithoutForce() throws Exception {
        when(mockProcessor.build(false)).thenReturn(true);
        lagoonGUI.build(false);
        verify(mockProcessor).build(false);
    }

    @Test
    public void testBuildWithForce() throws Exception {
        when(mockProcessor.build(true)).thenReturn(true);
        lagoonGUI.build(true);
        verify(mockProcessor).build(true);
    }

    @Test
    public void testLoadProperties() throws Exception {
        File tempFile = File.createTempFile("test", ".properties");
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write("sitemapFile=testSitemap\n");
            writer.write("sourceDir=testSourceDir\n");
            writer.write("targetURL=testTargetURL\n");
            writer.write("password=testPassword\n");
        }

        lagoonGUI.loadProperties(tempFile);

        Assert.assertEquals("testSitemap", lagoonGUI.sitemapFile.getValue());
        Assert.assertEquals("testSourceDir", lagoonGUI.sourceDir.getValue());
        Assert.assertEquals("testTargetURL", lagoonGUI.targetURL.getValue());
        Assert.assertEquals("testPassword", lagoonGUI.password);
    }

    @Test
    public void testSaveProperties() throws Exception {
        // This test would require a way to simulate user interaction with dialogs
        // and verify file output, which is complex in a unit test
        // Consider using a library like AssertJ-Swing for GUI testing
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties props = new Properties();
        props.setProperty("testKey", "testValue");
        String value = LagoonGUI.getProperty(props, "testKey");
        Assert.assertEquals("testValue", value);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyThrowsException() throws Exception {
        Properties props = new Properties();
        LagoonGUI.getProperty(props, "missingKey");
    }

    @After
    public void tearDown() {
        lagoonGUI = null;
        mockProcessor = null;
    }
}
```

### Notes:
- **Mocking**: We use Mockito to mock the `LagoonProcessor` and simulate its behavior.
- **File Handling**: Temporary files are used to test file-related methods.
- **GUI Testing**: GUI interactions are complex to test with JUnit alone. Consider using a GUI testing framework like AssertJ-Swing for more comprehensive tests.
- **System.exit**: Direct testing of `System.exit` is avoided as it would terminate the test JVM. Consider using a library like System Rules to handle this if needed.
- **Dialogs**: Testing dialogs requires simulating user input, which is not covered here.