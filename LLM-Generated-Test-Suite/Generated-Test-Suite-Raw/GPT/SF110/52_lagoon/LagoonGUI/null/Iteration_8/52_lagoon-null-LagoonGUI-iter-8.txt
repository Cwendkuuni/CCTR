To create a comprehensive JUnit 4 test suite for the `LagoonGUI` class, we need to focus on testing the public methods and any private methods that have significant logic. Since `LagoonGUI` is a GUI application, testing it involves simulating user interactions and verifying the expected outcomes. We will use mocking to handle dependencies like `LagoonProcessor` and other components that are not defined in the provided code.

Below is a JUnit 4 test suite for the `LagoonGUI` class:

```java
import org.junit.*;
import org.mockito.*;
import java.awt.event.*;
import java.io.*;
import java.util.Properties;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LagoonGUITest {

    private LagoonGUI lagoonGUI;
    private LagoonProcessor mockProcessor;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
        mockProcessor = mock(LagoonProcessor.class);
        lagoonGUI.processor = mockProcessor;
    }

    @Test
    public void testWindowClosing() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowClosing(event);
        // Verify that exit() method is called, which calls System.exit(0)
        // Since System.exit() is called, we can't directly test it, but we can ensure no exceptions occur
    }

    @Test
    public void testBuildWithoutForce() throws Exception {
        when(mockProcessor.build(false)).thenReturn(true);
        lagoonGUI.build(false);
        verify(mockProcessor).build(false);
        assertEquals("Ready", lagoonGUI.statusLabel.getText());
    }

    @Test
    public void testBuildWithForce() throws Exception {
        when(mockProcessor.build(true)).thenReturn(true);
        lagoonGUI.build(true);
        verify(mockProcessor).build(true);
        assertEquals("Ready", lagoonGUI.statusLabel.getText());
    }

    @Test
    public void testBuildWithException() throws Exception {
        when(mockProcessor.build(false)).thenThrow(new IOException("Test Exception"));
        lagoonGUI.build(false);
        assertEquals("Ready", lagoonGUI.statusLabel.getText());
    }

    @Test
    public void testLoadProperties() throws Exception {
        File tempFile = File.createTempFile("test", ".properties");
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write("sitemapFile=testSitemap\n");
            writer.write("sourceDir=testSourceDir\n");
            writer.write("targetURL=testTargetURL\n");
            writer.write("password=testPassword\n");
        }

        lagoonGUI.loadProperties(tempFile);

        assertEquals("testSitemap", lagoonGUI.sitemapFile.getValue());
        assertEquals("testSourceDir", lagoonGUI.sourceDir.getValue());
        assertEquals("testTargetURL", lagoonGUI.targetURL.getValue());
        assertEquals("testPassword", lagoonGUI.password);
    }

    @Test
    public void testSaveProperties() throws Exception {
        lagoonGUI.sitemapFile.setValue("testSitemap");
        lagoonGUI.sourceDir.setValue("testSourceDir");
        lagoonGUI.targetURL.setValue("testTargetURL");
        lagoonGUI.password = "testPassword";

        File tempFile = File.createTempFile("test", ".properties");
        lagoonGUI.savePropertyFile(tempFile);

        Properties properties = new Properties();
        try (FileInputStream fis = new FileInputStream(tempFile)) {
            properties.load(fis);
        }

        assertEquals("testSitemap", properties.getProperty("sitemapFile"));
        assertEquals("testSourceDir", properties.getProperty("sourceDir"));
        assertEquals("testTargetURL", properties.getProperty("targetURL"));
        assertEquals("testPassword", properties.getProperty("password"));
    }

    @Test
    public void testGetProperty() throws LagoonException {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");
        String value = LagoonGUI.getProperty(properties, "testKey");
        assertEquals("testValue", value);
    }

    @Test(expected = LagoonException.class)
    public void testGetPropertyThrowsException() throws LagoonException {
        Properties properties = new Properties();
        LagoonGUI.getProperty(properties, "missingKey");
    }

    @Test
    public void testShowTime() {
        assertEquals("in 500 ms", LagoonGUI.showTime(500));
        assertEquals("in 5 s", LagoonGUI.showTime(5000));
    }
}
```

### Explanation:
- **Setup and Teardown**: We initialize the `LagoonGUI` and mock dependencies in the `setUp` method.
- **Window Events**: We test the `windowClosing` method to ensure it calls the `exit` method.
- **Build Method**: We test the `build` method with and without the `force` flag, including handling exceptions.
- **Property Loading and Saving**: We test loading and saving properties to ensure they are correctly read and written.
- **Utility Methods**: We test the `getProperty` and `showTime` methods to ensure they behave as expected.

### Note:
- The `exit` method calls `System.exit(0)`, which terminates the JVM. In a real test environment, you might want to use a library like `System Rules` to handle `System.exit` calls.
- GUI components and dialogs are not directly tested here. For comprehensive GUI testing, consider using a GUI testing framework like `AssertJ-Swing` or `Fest`.