To create a comprehensive JUnit 4 test suite for the `LagoonGUI` class, we need to focus on testing the public methods and any private methods that have significant logic. Since `LagoonGUI` is a GUI application, testing it involves simulating user interactions and verifying the expected outcomes. Note that GUI testing can be complex and may require additional libraries like AssertJ-Swing or FEST for more advanced scenarios. However, for simplicity, I'll provide a basic test suite using JUnit 4.

```java
import org.junit.*;
import org.mockito.*;
import java.awt.event.*;
import java.io.*;
import java.util.Properties;
import nu.staldal.lagoon.LagoonGUI;

import static org.mockito.Mockito.*;

public class LagoonGUITest {

    private LagoonGUI lagoonGUI;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
    }

    @Test
    public void testWindowOpened() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowOpened(event);
        // No specific action to verify, just ensure no exceptions
    }

    @Test
    public void testWindowClosing() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowClosing(event);
        // Verify that the application exits
        // Note: System.exit() is called, which is hard to test directly
    }

    @Test
    public void testWindowClosed() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowClosed(event);
        // No specific action to verify, just ensure no exceptions
    }

    @Test
    public void testWindowIconified() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowIconified(event);
        // No specific action to verify, just ensure no exceptions
    }

    @Test
    public void testWindowDeiconified() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowDeiconified(event);
        // No specific action to verify, just ensure no exceptions
    }

    @Test
    public void testWindowActivated() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowActivated(event);
        // No specific action to verify, just ensure no exceptions
    }

    @Test
    public void testWindowDeactivated() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowDeactivated(event);
        // No specific action to verify, just ensure no exceptions
    }

    @Test
    public void testLoadPropertyFile() {
        // This method opens a FileDialog, which is hard to test without a GUI testing framework
        // You can mock the FileDialog if needed
    }

    @Test
    public void testLoadProperties() throws Exception {
        File tempFile = File.createTempFile("test", ".properties");
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write("sitemapFile=testSitemap\nsourceDir=testSource\ntargetURL=testURL\npassword=testPassword\n");
        }

        lagoonGUI.loadProperties(tempFile);

        // Verify that the properties are loaded correctly
        Assert.assertEquals("testSitemap", lagoonGUI.sitemapFile.getValue());
        Assert.assertEquals("testSource", lagoonGUI.sourceDir.getValue());
        Assert.assertEquals("testURL", lagoonGUI.targetURL.getValue());
        Assert.assertEquals("testPassword", lagoonGUI.password);
    }

    @Test
    public void testSavePropertyFile() {
        // This method opens a FileDialog, which is hard to test without a GUI testing framework
        // You can mock the FileDialog if needed
    }

    @Test
    public void testBuild() {
        // This method involves complex interactions and would require mocking LagoonProcessor and other components
        // Consider using a GUI testing framework for more comprehensive tests
    }

    @Test
    public void testExit() {
        // This method calls System.exit(), which is hard to test directly
        // Consider using a library like System Rules to test System.exit()
    }

    @Test
    public void testInit() {
        // This method involves complex interactions and would require mocking LagoonProcessor and other components
        // Consider using a GUI testing framework for more comprehensive tests
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");

        String value = LagoonGUI.getProperty(properties, "testKey");
        Assert.assertEquals("testValue", value);

        try {
            LagoonGUI.getProperty(properties, "missingKey");
            Assert.fail("Expected LagoonException for missing property");
        } catch (LagoonException e) {
            // Expected exception
        }
    }

    @Test
    public void testShowTime() {
        Assert.assertEquals("in 500 ms", LagoonGUI.showTime(500));
        Assert.assertEquals("in 10 s", LagoonGUI.showTime(10000));
    }
}
```

### Notes:
- **GUI Testing**: Testing GUI components often requires simulating user interactions, which can be complex with plain JUnit. Consider using libraries like AssertJ-Swing or FEST for more advanced GUI testing.
- **System.exit()**: Directly testing methods that call `System.exit()` is challenging. You might use libraries like System Rules to handle this.
- **FileDialog**: Testing methods that open file dialogs is difficult without a GUI testing framework. You might need to mock these components or use a framework that supports GUI testing.
- **Complex Interactions**: Methods like `build()` and `init()` involve complex interactions with other components. Mocking these components or using a GUI testing framework can help in testing these methods effectively.