To create a comprehensive JUnit 4 test suite for the `LagoonGUI` class, we need to consider testing the public methods and any private methods that have significant logic. However, testing GUI components and private methods can be challenging and often requires the use of mock objects or reflection. Below is a basic test suite that focuses on the public methods and some of the private methods using reflection. Note that GUI testing often requires a different approach, such as using a GUI testing framework like FEST or AssertJ-Swing.

```java
import nu.staldal.lagoon.LagoonGUI;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Properties;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LagoonGUITest {

    private LagoonGUI lagoonGUI;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
    }

    @Test
    public void testWindowOpened() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowOpened(event);
        // No exception means pass, as the method is empty
    }

    @Test
    public void testWindowClosing() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI = spy(lagoonGUI);
        doNothing().when(lagoonGUI).exit();
        lagoonGUI.windowClosing(event);
        verify(lagoonGUI, times(1)).exit();
    }

    @Test
    public void testWindowClosed() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowClosed(event);
        // No exception means pass, as the method is empty
    }

    @Test
    public void testWindowIconified() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowIconified(event);
        // No exception means pass, as the method is empty
    }

    @Test
    public void testWindowDeiconified() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowDeiconified(event);
        // No exception means pass, as the method is empty
    }

    @Test
    public void testWindowActivated() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowActivated(event);
        // No exception means pass, as the method is empty
    }

    @Test
    public void testWindowDeactivated() {
        WindowEvent event = mock(WindowEvent.class);
        lagoonGUI.windowDeactivated(event);
        // No exception means pass, as the method is empty
    }

    @Test
    public void testLoadProperties() throws Exception {
        File tempFile = File.createTempFile("test", ".properties");
        tempFile.deleteOnExit();
        lagoonGUI.loadProperties(tempFile);
        // Check if properties are loaded correctly
        // This requires knowledge of the file content
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");

        Method method = LagoonGUI.class.getDeclaredMethod("getProperty", Properties.class, String.class);
        method.setAccessible(true);

        String result = (String) method.invoke(null, properties, "testKey");
        assertEquals("testValue", result);
    }

    @Test(expected = Exception.class)
    public void testGetPropertyThrowsException() throws Exception {
        Properties properties = new Properties();

        Method method = LagoonGUI.class.getDeclaredMethod("getProperty", Properties.class, String.class);
        method.setAccessible(true);

        method.invoke(null, properties, "missingKey");
    }

    @Test
    public void testShowTime() throws Exception {
        Method method = LagoonGUI.class.getDeclaredMethod("showTime", long.class);
        method.setAccessible(true);

        String result = (String) method.invoke(null, 5000L);
        assertEquals("in 5000 ms", result);

        result = (String) method.invoke(null, 15000L);
        assertEquals("in 15 s", result);
    }

    // Additional tests for private methods like build, init, loadPropertyFile, savePropertyFile, etc.
    // would require more complex setups and possibly mocking or reflection.
}
```

### Notes:
1. **GUI Testing**: This test suite does not cover GUI interactions. For GUI testing, consider using a dedicated GUI testing framework.
2. **Private Methods**: Testing private methods directly is generally discouraged. Instead, test them indirectly through public methods. Here, reflection is used for demonstration purposes.
3. **Mocking**: The `Mockito` library is used to mock objects and verify interactions, especially for methods like `exit()` which terminate the application.
4. **File Handling**: The test for `loadProperties` assumes a temporary file is used. Adjust the test to match the actual file content and expected behavior.
5. **Exception Handling**: Tests for exception scenarios are included to ensure robustness.

This test suite provides a starting point and should be expanded with more detailed tests based on the specific requirements and behaviors of the `LagoonGUI` class.