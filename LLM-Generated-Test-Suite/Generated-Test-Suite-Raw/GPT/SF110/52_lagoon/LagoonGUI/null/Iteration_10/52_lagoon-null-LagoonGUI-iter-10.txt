To create a comprehensive JUnit 4 test suite for the `LagoonGUI` class, we need to consider testing the public methods and any significant private methods that can be accessed indirectly. Since `LagoonGUI` is a GUI application, testing it involves simulating user interactions and verifying the outcomes. Note that GUI testing can be complex and might require additional libraries like AssertJ-Swing or FEST for more advanced scenarios. However, I'll provide a basic test suite using JUnit 4 that focuses on the logic that can be tested without a full GUI testing framework.

```java
import nu.staldal.lagoon.LagoonGUI;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.Properties;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LagoonGUITest {

    private LagoonGUI lagoonGUI;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
    }

    @Test
    public void testWindowClosing() {
        WindowEvent mockEvent = mock(WindowEvent.class);
        lagoonGUI.windowClosing(mockEvent);
        // Since exit() calls System.exit(0), we can't directly test it without a special library.
        // Instead, we can verify that the method is called.
        // This test is more of a placeholder to show where you would test windowClosing.
    }

    @Test
    public void testLoadProperties() throws Exception {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.isFile()).thenReturn(true);

        lagoonGUI.loadProperties(mockFile);

        // Verify that properties are loaded correctly
        // This is a placeholder as we can't directly verify private fields without reflection or modifying access.
    }

    @Test
    public void testSavePropertyFile() {
        // This test would require mocking the FileDialog and verifying the file operations.
        // Since it's GUI related, it would be more complex without a GUI testing framework.
    }

    @Test
    public void testBuild() {
        // This test would require mocking the LagoonProcessor and verifying the build process.
        // Since it's GUI related, it would be more complex without a GUI testing framework.
    }

    @Test
    public void testInit() {
        // This test would require mocking the LagoonProcessor and verifying the initialization process.
        // Since it's GUI related, it would be more complex without a GUI testing framework.
    }

    @Test
    public void testGetProperty() throws Exception {
        Properties props = new Properties();
        props.setProperty("testKey", "testValue");

        String value = LagoonGUI.getProperty(props, "testKey");
        assertEquals("testValue", value);

        try {
            LagoonGUI.getProperty(props, "missingKey");
            fail("Expected LagoonException for missing property");
        } catch (LagoonException e) {
            // Expected exception
        }
    }

    @Test
    public void testShowTime() {
        assertEquals("in 500 ms", LagoonGUI.showTime(500));
        assertEquals("in 10 s", LagoonGUI.showTime(10000));
    }
}
```

### Notes:
- **GUI Testing**: The `LagoonGUI` class is a GUI application, and testing GUI components typically requires a GUI testing framework. The above tests are placeholders for where you would implement such tests.
- **System.exit()**: The `exit()` method calls `System.exit(0)`, which will terminate the JVM. Testing this directly requires a special library or approach to handle the JVM exit.
- **Mocking**: The test suite uses Mockito to mock objects and interactions. This is useful for simulating file operations and other interactions without performing actual I/O.
- **Private Methods**: The test suite indirectly tests private methods through public methods. Direct testing of private methods is generally not recommended unless necessary.

For a more comprehensive test suite, especially for GUI components, consider using a library like AssertJ-Swing or FEST to simulate user interactions and verify GUI states.