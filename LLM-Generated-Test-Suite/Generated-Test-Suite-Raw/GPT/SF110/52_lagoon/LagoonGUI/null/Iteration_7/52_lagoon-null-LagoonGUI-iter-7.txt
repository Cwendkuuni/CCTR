To create a comprehensive JUnit 4 test suite for the `LagoonGUI` class, we need to consider testing the public methods and any significant private methods that can be accessed indirectly. Since `LagoonGUI` is a GUI application, testing it involves simulating user interactions and verifying the expected outcomes. Below is a basic test suite that covers the main functionalities of the `LagoonGUI` class. Note that GUI testing can be complex, and additional tools like FEST or AssertJ-Swing might be needed for more advanced GUI testing.

```java
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.mockito.*;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Properties;

import static org.mockito.Mockito.*;

@RunWith(JUnit4.class)
public class LagoonGUITest {

    private LagoonGUI lagoonGUI;

    @Before
    public void setUp() {
        lagoonGUI = new LagoonGUI();
    }

    @Test
    public void testWindowClosing() {
        WindowEvent windowEvent = mock(WindowEvent.class);
        lagoonGUI.windowClosing(windowEvent);
        // Since exit() calls System.exit(0), we can't directly test it.
        // Instead, we can verify if the method is called.
        // This requires refactoring the exit method to be testable.
    }

    @Test
    public void testBuildWithoutForce() {
        lagoonGUI.build(false);
        // Verify the state changes and interactions
        // This requires mocking dependencies and verifying interactions
    }

    @Test
    public void testBuildWithForce() {
        lagoonGUI.build(true);
        // Verify the state changes and interactions
        // This requires mocking dependencies and verifying interactions
    }

    @Test
    public void testLoadPropertyFile() {
        // Simulate loading a property file
        lagoonGUI.loadPropertyFile();
        // Verify the expected state changes
    }

    @Test
    public void testSavePropertyFile() {
        // Simulate saving a property file
        lagoonGUI.savePropertyFile();
        // Verify the expected state changes
    }

    @Test
    public void testLoadProperties() throws Exception {
        File tempFile = File.createTempFile("test", ".properties");
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write("sitemapFile=testSitemap\n");
            writer.write("sourceDir=testSourceDir\n");
            writer.write("targetURL=testTargetURL\n");
            writer.write("password=testPassword\n");
        }

        lagoonGUI.loadProperties(tempFile);

        // Verify that the properties are loaded correctly
        Assert.assertEquals("testSitemap", lagoonGUI.sitemapFile.getValue());
        Assert.assertEquals("testSourceDir", lagoonGUI.sourceDir.getValue());
        Assert.assertEquals("testTargetURL", lagoonGUI.targetURL.getValue());
        Assert.assertEquals("testPassword", lagoonGUI.password);
    }

    @Test
    public void testGetProperty() throws LagoonException {
        Properties properties = new Properties();
        properties.setProperty("testKey", "testValue");

        String value = LagoonGUI.getProperty(properties, "testKey");
        Assert.assertEquals("testValue", value);

        try {
            LagoonGUI.getProperty(properties, "missingKey");
            Assert.fail("Expected LagoonException for missing property");
        } catch (LagoonException e) {
            // Expected exception
        }
    }

    @Test
    public void testShowTime() {
        Assert.assertEquals("in 500 ms", LagoonGUI.showTime(500));
        Assert.assertEquals("in 10 s", LagoonGUI.showTime(10000));
    }

    @After
    public void tearDown() {
        lagoonGUI = null;
    }
}
```

### Notes:
- **GUI Testing**: Testing GUI components often requires simulating user interactions. This test suite provides a basic structure, but for more comprehensive GUI testing, consider using libraries like AssertJ-Swing or FEST.
- **System.exit(0)**: The `exit()` method calls `System.exit(0)`, which will terminate the JVM. To test this method, you might need to refactor it to make it testable, such as by using a `SystemExitHandler` interface.
- **Mocking**: The test suite uses Mockito for mocking dependencies. This is useful for isolating the class under test and verifying interactions.
- **Temporary Files**: The test for `loadProperties` creates a temporary file to simulate loading properties. This ensures the test does not depend on external files.