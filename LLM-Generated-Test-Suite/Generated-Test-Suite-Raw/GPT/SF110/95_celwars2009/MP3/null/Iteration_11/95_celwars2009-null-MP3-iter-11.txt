Certainly! Below is a JUnit 4 test suite designed to test the `MP3` class. This test suite will focus on testing the constructor and the `run` method. Since the `run` method involves file I/O and audio processing, the tests will primarily focus on ensuring that exceptions are handled correctly and that the class can be instantiated without errors.

```java
import org.junit.*;
import static org.junit.Assert.*;
import java.io.*;

public class MP3Test {

    private static final String VALID_MP3_FILE = "valid.mp3";
    private static final String INVALID_MP3_FILE = "invalid.mp3";
    private static final String NON_EXISTENT_FILE = "nonexistent.mp3";

    @BeforeClass
    public static void setUpClass() throws Exception {
        // Create a dummy valid MP3 file for testing
        File validFile = new File(VALID_MP3_FILE);
        if (!validFile.exists()) {
            try (FileOutputStream fos = new FileOutputStream(validFile)) {
                fos.write(new byte[1024]); // Write dummy data
            }
        }
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
        // Clean up the dummy files
        File validFile = new File(VALID_MP3_FILE);
        if (validFile.exists()) {
            validFile.delete();
        }
    }

    @Test
    public void testConstructorWithValidFile() {
        try {
            MP3 mp3 = new MP3(VALID_MP3_FILE);
            assertNotNull(mp3);
        } catch (Exception e) {
            fail("Constructor threw an exception with a valid file: " + e.getMessage());
        }
    }

    @Test
    public void testConstructorWithInvalidFile() {
        try {
            MP3 mp3 = new MP3(INVALID_MP3_FILE);
            assertNotNull(mp3);
        } catch (Exception e) {
            fail("Constructor threw an exception with an invalid file: " + e.getMessage());
        }
    }

    @Test
    public void testConstructorWithNonExistentFile() {
        try {
            MP3 mp3 = new MP3(NON_EXISTENT_FILE);
            assertNotNull(mp3);
        } catch (Exception e) {
            fail("Constructor threw an exception with a non-existent file: " + e.getMessage());
        }
    }

    @Test
    public void testRunMethodWithValidFile() {
        try {
            MP3 mp3 = new MP3(VALID_MP3_FILE);
            mp3.run();
            // Since run() doesn't return anything, we are testing for exceptions
        } catch (Exception e) {
            fail("Run method threw an exception with a valid file: " + e.getMessage());
        }
    }

    @Test
    public void testRunMethodWithInvalidFile() {
        try {
            MP3 mp3 = new MP3(INVALID_MP3_FILE);
            mp3.run();
            // Since run() doesn't return anything, we are testing for exceptions
        } catch (Exception e) {
            // Expected to catch exceptions due to invalid file format
            assertTrue(e instanceof UnsupportedAudioFileException || e instanceof IOException);
        }
    }

    @Test
    public void testRunMethodWithNonExistentFile() {
        try {
            MP3 mp3 = new MP3(NON_EXISTENT_FILE);
            mp3.run();
            // Since run() doesn't return anything, we are testing for exceptions
        } catch (Exception e) {
            // Expected to catch exceptions due to file not found
            assertTrue(e instanceof FileNotFoundException);
        }
    }
}
```

### Explanation:
- **Setup and Teardown**: The `setUpClass` method creates a dummy MP3 file for testing, and `tearDownClass` cleans it up after tests.
- **Constructor Tests**: These tests ensure that the `MP3` object can be instantiated with different types of file paths (valid, invalid, non-existent) without throwing unexpected exceptions.
- **Run Method Tests**: These tests invoke the `run` method and check for exceptions. The tests are designed to ensure that the method handles different scenarios gracefully, such as valid files, invalid files, and non-existent files.

Note: The actual audio processing and file I/O are not tested here due to the complexity and environment-specific nature of such operations. The focus is on ensuring that the class handles exceptions correctly.