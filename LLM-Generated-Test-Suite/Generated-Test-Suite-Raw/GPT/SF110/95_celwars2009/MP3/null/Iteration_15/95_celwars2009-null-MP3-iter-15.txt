To create a comprehensive JUnit 4 test suite for the `MP3` class, we need to consider testing the constructor and the `run` method. However, testing audio processing directly can be challenging due to its reliance on external files and hardware. Instead, we can focus on testing the behavior of the class, such as ensuring that exceptions are handled and that the thread starts correctly.

Here's a basic JUnit 4 test suite for the `MP3` class:

```java
import org.junit.*;
import static org.junit.Assert.*;
import java.io.*;

public class MP3Test {

    private static final String VALID_MP3_FILE = "valid.mp3";
    private static final String INVALID_MP3_FILE = "invalid.mp3";

    @BeforeClass
    public static void setUpClass() throws Exception {
        // Create a dummy valid MP3 file for testing
        File validFile = new File(VALID_MP3_FILE);
        if (!validFile.exists()) {
            try (FileOutputStream fos = new FileOutputStream(validFile)) {
                fos.write(new byte[100]); // Write some dummy data
            }
        }
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
        // Clean up the dummy files
        File validFile = new File(VALID_MP3_FILE);
        if (validFile.exists()) {
            validFile.delete();
        }
    }

    @Test
    public void testConstructor() {
        MP3 mp3 = new MP3(VALID_MP3_FILE);
        assertNotNull("MP3 object should not be null", mp3);
        assertEquals("Filename should be set correctly", VALID_MP3_FILE, mp3.filename);
    }

    @Test
    public void testRunWithValidFile() {
        MP3 mp3 = new MP3(VALID_MP3_FILE);
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            fail("Thread was interrupted");
        }
        // Since the run method doesn't return anything, we can't assert much here.
        // We are mainly checking that no exceptions are thrown.
    }

    @Test
    public void testRunWithInvalidFile() {
        MP3 mp3 = new MP3(INVALID_MP3_FILE);
        try {
            mp3.join(); // Wait for the thread to finish
        } catch (InterruptedException e) {
            fail("Thread was interrupted");
        }
        // Again, we can't assert much here, but we can check that no unhandled exceptions are thrown.
    }
}
```

### Explanation:
- **Setup and Teardown**: We create a dummy MP3 file for testing purposes. This is a simple file with some bytes written to it, not a real MP3 file. We clean up this file after the tests.
- **Constructor Test**: We verify that the `MP3` object is created correctly and that the filename is set.
- **Run Method Tests**: We test the `run` method with both a valid and an invalid filename. The main goal here is to ensure that no exceptions are thrown during execution. Since the `run` method doesn't return any value or change any accessible state, we can't assert much beyond this.

Note: This test suite assumes that the `MP3` class is designed to handle exceptions internally and that the primary concern is ensuring that the thread runs without crashing.