To create a comprehensive JUnit 4 test suite for the `MP3` class, we need to consider testing the constructor and the `run` method. However, testing audio processing and threading can be challenging due to the need for actual audio files and the asynchronous nature of threads. Below is a basic test suite that checks the initialization and execution of the `MP3` class. Note that this suite assumes the presence of a valid MP3 file named "test.mp3" in the working directory for testing purposes.

```java
import org.junit.*;
import static org.junit.Assert.*;
import java.io.File;

public class MP3Test {

    private static final String TEST_FILE = "test.mp3";

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
        // Ensure the test file exists
        File file = new File(TEST_FILE);
        if (!file.exists()) {
            throw new FileNotFoundException("Test MP3 file not found: " + TEST_FILE);
        }
    }

    @Test
    public void testMP3Constructor() {
        MP3 mp3 = new MP3(TEST_FILE);
        assertNotNull("MP3 object should not be null", mp3);
        assertEquals("Filename should be set correctly", TEST_FILE, mp3.filename);
    }

    @Test
    public void testRunMethod() {
        MP3 mp3 = new MP3(TEST_FILE);
        try {
            // Allow some time for the thread to start and process
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            fail("Thread was interrupted");
        }
        // Since the run method doesn't return anything or change state that we can check,
        // we rely on the absence of exceptions and the correct setup of the thread.
        assertTrue("Thread should be alive", mp3.isAlive());
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
        // Clean up resources if needed
    }
}
```

### Key Points:
- **Test Setup**: The `setUpBeforeClass` method checks for the existence of a test MP3 file. This is crucial because the `MP3` class expects a valid file to process.
- **Constructor Test**: Verifies that the `MP3` object is created correctly and that the filename is set as expected.
- **Run Method Test**: Starts the `MP3` thread and waits briefly to allow it to process. Since the `run` method doesn't provide a direct way to verify its success, the test checks that the thread is alive, indicating it started correctly.
- **Thread Handling**: The test suite uses `Thread.sleep` to give the `MP3` thread time to execute. This is a simple way to handle asynchronous execution in tests.

This test suite is basic and assumes the presence of a valid MP3 file. For more robust testing, consider using mocking frameworks like Mockito to simulate audio processing without needing actual files.