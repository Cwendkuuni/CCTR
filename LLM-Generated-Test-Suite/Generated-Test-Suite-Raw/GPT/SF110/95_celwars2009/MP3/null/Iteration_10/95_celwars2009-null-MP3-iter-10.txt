To create a comprehensive JUnit 4 test suite for the `MP3` class, we need to consider testing the constructor and the `run` method. However, testing audio processing directly can be challenging due to the need for actual audio files and the side effects of audio playback. For the purpose of this test suite, we'll focus on ensuring that the class can be instantiated and that the `run` method can be invoked without exceptions. We'll use mocking to simulate the audio system interactions.

Here's a basic test suite using JUnit 4:

```java
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MP3Test {

    @Mock
    private AudioInputStream mockAudioInputStream;

    @Mock
    private SourceDataLine mockSourceDataLine;

    @Mock
    private File mockFile;

    @Before
    public void setUp() throws Exception {
        // Mock the AudioSystem static methods
        Mockito.mockStatic(AudioSystem.class);
        when(AudioSystem.getAudioInputStream(any(File.class))).thenReturn(mockAudioInputStream);
        when(AudioSystem.getLine(any(DataLine.Info.class))).thenReturn(mockSourceDataLine);

        // Mock the AudioInputStream methods
        when(mockAudioInputStream.getFormat()).thenReturn(new AudioFormat(44100, 16, 2, true, false));
        when(mockAudioInputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);

        // Mock the SourceDataLine methods
        doNothing().when(mockSourceDataLine).open(any(AudioFormat.class));
        doNothing().when(mockSourceDataLine).start();
        doNothing().when(mockSourceDataLine).write(any(byte[].class), anyInt(), anyInt());
        doNothing().when(mockSourceDataLine).drain();
        doNothing().when(mockSourceDataLine).stop();
        doNothing().when(mockSourceDataLine).close();
    }

    @Test
    public void testMP3Constructor() {
        MP3 mp3 = new MP3("test.mp3");
        Assert.assertNotNull(mp3);
    }

    @Test
    public void testRunMethod() {
        MP3 mp3 = new MP3("test.mp3");
        mp3.run();
        // Verify that the audio input stream was read
        try {
            verify(mockAudioInputStream, atLeastOnce()).read(any(byte[].class), anyInt(), anyInt());
        } catch (IOException e) {
            e.printStackTrace();
        }
        // Verify that the line was opened, started, and closed
        verify(mockSourceDataLine).open(any(AudioFormat.class));
        verify(mockSourceDataLine).start();
        verify(mockSourceDataLine).drain();
        verify(mockSourceDataLine).stop();
        verify(mockSourceDataLine).close();
    }

    @After
    public void tearDown() {
        // Clear the static mocks
        Mockito.clearAllCaches();
    }
}
```

### Explanation:
- **Mockito**: We use Mockito to mock the `AudioSystem`, `AudioInputStream`, and `SourceDataLine` classes. This allows us to simulate the behavior of these classes without needing actual audio files or hardware.
- **Mocking Static Methods**: We mock static methods of `AudioSystem` using `Mockito.mockStatic`.
- **Test Constructor**: We test that the `MP3` object can be instantiated without issues.
- **Test `run` Method**: We invoke the `run` method and verify that the mocked methods are called as expected, ensuring that the method logic is executed without exceptions.
- **Tear Down**: We clear all caches to ensure no interference between tests.

This test suite provides a basic framework for testing the `MP3` class. For more comprehensive testing, you would need to handle actual audio files and possibly use integration tests.