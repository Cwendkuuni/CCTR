To create a comprehensive JUnit 4 test suite for the `MP3` class, we need to consider testing the constructor and the `run` method. However, testing audio playback in a unit test can be challenging due to the need for audio hardware and the side effects involved. Instead, we can focus on testing the behavior of the class, such as handling of file paths and exceptions.

Below is a JUnit 4 test suite for the `MP3` class. Note that this test suite uses mocking to simulate the behavior of the audio system components, which allows us to test the class without requiring actual audio hardware.

```java
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import javax.sound.sampled.*;
import java.io.*;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MP3Test {

    @Mock
    private AudioInputStream mockAudioInputStream;

    @Mock
    private SourceDataLine mockSourceDataLine;

    @Mock
    private File mockFile;

    @Before
    public void setUp() throws Exception {
        // Mocking AudioSystem static methods
        Mockito.mockStatic(AudioSystem.class);
        when(AudioSystem.getAudioInputStream(any(File.class))).thenReturn(mockAudioInputStream);
        when(AudioSystem.getLine(any(DataLine.Info.class))).thenReturn(mockSourceDataLine);

        // Mocking AudioInputStream methods
        when(mockAudioInputStream.getFormat()).thenReturn(new AudioFormat(44100, 16, 2, true, false));
        when(mockAudioInputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);

        // Mocking SourceDataLine methods
        doNothing().when(mockSourceDataLine).open(any(AudioFormat.class));
        doNothing().when(mockSourceDataLine).start();
        doNothing().when(mockSourceDataLine).write(any(byte[].class), anyInt(), anyInt());
        doNothing().when(mockSourceDataLine).drain();
        doNothing().when(mockSourceDataLine).stop();
        doNothing().when(mockSourceDataLine).close();
    }

    @Test
    public void testConstructor() {
        MP3 mp3 = new MP3("test.mp3");
        Assert.assertEquals("test.mp3", mp3.filename);
    }

    @Test
    public void testRunMethod() throws Exception {
        MP3 mp3 = new MP3("test.mp3");
        mp3.run();

        // Verify that the audio input stream was obtained
        verify(AudioSystem.class);
        AudioSystem.getAudioInputStream(any(File.class));

        // Verify that the line was opened and started
        verify(mockSourceDataLine).open(any(AudioFormat.class));
        verify(mockSourceDataLine).start();

        // Verify that the line was drained, stopped, and closed
        verify(mockSourceDataLine).drain();
        verify(mockSourceDataLine).stop();
        verify(mockSourceDataLine).close();
    }

    @Test
    public void testRunMethodWithException() throws Exception {
        // Simulate an exception when getting the audio input stream
        when(AudioSystem.getAudioInputStream(any(File.class))).thenThrow(new UnsupportedAudioFileException());

        MP3 mp3 = new MP3("test.mp3");
        mp3.run();

        // Verify that the exception was caught and handled
        verify(mockSourceDataLine, never()).open(any(AudioFormat.class));
        verify(mockSourceDataLine, never()).start();
    }
}
```

### Explanation:
- **Mockito** is used to mock the `AudioSystem`, `AudioInputStream`, and `SourceDataLine` classes to simulate their behavior without requiring actual audio hardware.
- **Static Methods**: `Mockito.mockStatic` is used to mock static methods of `AudioSystem`.
- **Constructor Test**: Verifies that the filename is correctly set in the constructor.
- **Run Method Test**: Verifies that the `run` method correctly interacts with the mocked audio components.
- **Exception Handling Test**: Simulates an exception when obtaining the audio input stream to ensure that the exception is handled gracefully.

This test suite provides a basic framework for testing the `MP3` class. Depending on the actual environment and requirements, additional tests and configurations may be necessary.