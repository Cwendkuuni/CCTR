To create a comprehensive JUnit 4 test suite for the `MP3` class, we need to consider the following aspects:

1. **Constructor Testing**: Verify that the constructor initializes the object correctly.
2. **Thread Execution**: Since `MP3` extends `Thread`, we need to test the `run` method indirectly by starting the thread.
3. **Exception Handling**: Ensure that exceptions are handled gracefully.

Given the nature of the class, which involves audio processing, testing it fully would typically require integration tests with actual audio files. However, for unit testing, we can mock the file interactions and audio system components.

Here's a basic JUnit 4 test suite for the `MP3` class:

```java
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import javax.sound.sampled.*;
import java.io.*;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MP3Test {

    @Mock
    private AudioInputStream mockAudioInputStream;

    @Mock
    private SourceDataLine mockSourceDataLine;

    @Mock
    private File mockFile;

    @Before
    public void setUp() throws Exception {
        // Mock the AudioSystem static methods
        Mockito.mockStatic(AudioSystem.class);
        when(AudioSystem.getAudioInputStream(any(File.class))).thenReturn(mockAudioInputStream);
        when(AudioSystem.getLine(any(DataLine.Info.class))).thenReturn(mockSourceDataLine);

        // Mock the AudioInputStream methods
        when(mockAudioInputStream.getFormat()).thenReturn(new AudioFormat(44100, 16, 2, true, false));
        when(mockAudioInputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);

        // Mock the SourceDataLine methods
        doNothing().when(mockSourceDataLine).open(any(AudioFormat.class));
        doNothing().when(mockSourceDataLine).start();
        doNothing().when(mockSourceDataLine).drain();
        doNothing().when(mockSourceDataLine).stop();
        doNothing().when(mockSourceDataLine).close();
    }

    @Test
    public void testConstructor() {
        MP3 mp3 = new MP3("test.mp3");
        Assert.assertEquals("test.mp3", mp3.filename);
    }

    @Test
    public void testRunMethod() throws Exception {
        MP3 mp3 = new MP3("test.mp3");
        mp3.run();

        // Verify that the audio input stream was obtained
        verify(AudioSystem.class, times(1)).getAudioInputStream(any(File.class));

        // Verify that the line was opened and started
        verify(mockSourceDataLine, times(1)).open(any(AudioFormat.class));
        verify(mockSourceDataLine, times(1)).start();

        // Verify that the line was drained, stopped, and closed
        verify(mockSourceDataLine, times(1)).drain();
        verify(mockSourceDataLine, times(1)).stop();
        verify(mockSourceDataLine, times(1)).close();
    }

    @Test
    public void testExceptionHandling() throws Exception {
        // Simulate an exception when getting the audio input stream
        when(AudioSystem.getAudioInputStream(any(File.class))).thenThrow(new UnsupportedAudioFileException());

        MP3 mp3 = new MP3("test.mp3");
        mp3.run();

        // Verify that the exception was caught and handled
        verify(mockSourceDataLine, never()).open(any(AudioFormat.class));
    }
}
```

### Explanation:
- **Mockito** is used to mock the `AudioSystem` and its components, allowing us to simulate the behavior of the audio processing without needing actual audio files.
- **Static Methods**: `Mockito.mockStatic` is used to mock static methods of `AudioSystem`.
- **Test Methods**:
  - `testConstructor`: Verifies that the constructor initializes the filename correctly.
  - `testRunMethod`: Tests the `run` method by verifying interactions with mocked components.
  - `testExceptionHandling`: Ensures that exceptions are handled without crashing the application.

This test suite provides a basic framework for testing the `MP3` class. For more comprehensive testing, especially for audio processing, integration tests with actual audio files would be necessary.