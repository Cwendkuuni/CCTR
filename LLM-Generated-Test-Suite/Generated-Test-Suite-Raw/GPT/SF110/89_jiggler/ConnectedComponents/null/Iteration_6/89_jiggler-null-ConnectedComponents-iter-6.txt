Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ConnectedComponents` class. This test suite includes tests for the constructor and the `apply` method, covering various scenarios such as different neighbor configurations and background settings.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import jigl.image.ops.ConnectedComponents;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.exceptions.InvalidArgumentException;

public class ConnectedComponentsTest {

    private BinaryImage binaryImage;

    @Before
    public void setUp() {
        // Initialize a simple binary image for testing
        binaryImage = new BinaryImage(3, 3);
        binaryImage.set(0, 0, 1);
        binaryImage.set(0, 1, 1);
        binaryImage.set(0, 2, 0);
        binaryImage.set(1, 0, 0);
        binaryImage.set(1, 1, 1);
        binaryImage.set(1, 2, 0);
        binaryImage.set(2, 0, 0);
        binaryImage.set(2, 1, 0);
        binaryImage.set(2, 2, 1);
    }

    @Test
    public void testConstructorValidArguments() {
        try {
            ConnectedComponents cc = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
            assertNotNull(cc);
            cc = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 1);
            assertNotNull(cc);
        } catch (InvalidArgumentException e) {
            fail("Constructor threw InvalidArgumentException for valid arguments");
        }
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidNeighbors() throws InvalidArgumentException {
        new ConnectedComponents(2, 0);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidBackground() throws InvalidArgumentException {
        new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 2);
    }

    @Test
    public void testApplyFourConnected() {
        try {
            ConnectedComponents cc = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
            GrayImage result = cc.apply(binaryImage);
            assertNotNull(result);
            assertEquals(1, result.get(0, 0));
            assertEquals(1, result.get(0, 1));
            assertEquals(0, result.get(0, 2));
            assertEquals(0, result.get(1, 0));
            assertEquals(1, result.get(1, 1));
            assertEquals(0, result.get(1, 2));
            assertEquals(0, result.get(2, 0));
            assertEquals(0, result.get(2, 1));
            assertEquals(2, result.get(2, 2));
        } catch (InvalidArgumentException e) {
            fail("Unexpected InvalidArgumentException");
        }
    }

    @Test
    public void testApplyEightConnected() {
        try {
            ConnectedComponents cc = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 0);
            GrayImage result = cc.apply(binaryImage);
            assertNotNull(result);
            assertEquals(1, result.get(0, 0));
            assertEquals(1, result.get(0, 1));
            assertEquals(0, result.get(0, 2));
            assertEquals(0, result.get(1, 0));
            assertEquals(1, result.get(1, 1));
            assertEquals(0, result.get(1, 2));
            assertEquals(0, result.get(2, 0));
            assertEquals(0, result.get(2, 1));
            assertEquals(1, result.get(2, 2));
        } catch (InvalidArgumentException e) {
            fail("Unexpected InvalidArgumentException");
        }
    }
}
```

### Explanation:
- **Setup**: A simple 3x3 binary image is initialized in the `setUp` method to be used in the tests.
- **Constructor Tests**: Tests for valid and invalid constructor arguments ensure that the `ConnectedComponents` object is created correctly or throws an exception when expected.
- **Apply Method Tests**: Tests for both four-connected and eight-connected configurations verify that the `apply` method correctly labels connected components in the binary image.

This test suite should provide a comprehensive check of the `ConnectedComponents` class functionality.