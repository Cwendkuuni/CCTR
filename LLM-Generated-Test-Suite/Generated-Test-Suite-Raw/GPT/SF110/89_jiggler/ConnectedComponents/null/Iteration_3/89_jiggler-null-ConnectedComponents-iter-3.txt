Certainly! Below is a JUnit 4 test suite for the `ConnectedComponents` class. This test suite aims to cover the constructor and the `apply` method, ensuring that the class behaves as expected under various conditions.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import jigl.image.ops.ConnectedComponents;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.exceptions.InvalidArgumentException;

public class ConnectedComponentsTest {

    private BinaryImage binaryImage;
    private ConnectedComponents fourConnected;
    private ConnectedComponents eightConnected;

    @Before
    public void setUp() throws InvalidArgumentException {
        // Initialize a simple binary image for testing
        binaryImage = new BinaryImage(3, 3);
        binaryImage.set(0, 0, 1);
        binaryImage.set(0, 1, 1);
        binaryImage.set(1, 0, 1);
        binaryImage.set(1, 1, 0);
        binaryImage.set(2, 2, 1);

        // Initialize ConnectedComponents instances
        fourConnected = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
        eightConnected = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 0);
    }

    @Test
    public void testConstructorValidArguments() {
        try {
            new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
            new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 1);
        } catch (InvalidArgumentException e) {
            fail("Constructor threw InvalidArgumentException for valid arguments");
        }
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidNeighbors() throws InvalidArgumentException {
        new ConnectedComponents(2, 0);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidBackground() throws InvalidArgumentException {
        new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 2);
    }

    @Test
    public void testApplyFourConnected() {
        GrayImage result = fourConnected.apply(binaryImage);
        assertNotNull(result);
        assertEquals(3, result.X());
        assertEquals(3, result.Y());
        assertEquals(1, result.get(0, 0));
        assertEquals(1, result.get(0, 1));
        assertEquals(1, result.get(1, 0));
        assertEquals(0, result.get(1, 1));
        assertEquals(2, result.get(2, 2));
    }

    @Test
    public void testApplyEightConnected() {
        GrayImage result = eightConnected.apply(binaryImage);
        assertNotNull(result);
        assertEquals(3, result.X());
        assertEquals(3, result.Y());
        assertEquals(1, result.get(0, 0));
        assertEquals(1, result.get(0, 1));
        assertEquals(1, result.get(1, 0));
        assertEquals(0, result.get(1, 1));
        assertEquals(1, result.get(2, 2)); // Connected diagonally
    }

    @Test
    public void testApplyEmptyImage() {
        BinaryImage emptyImage = new BinaryImage(3, 3);
        GrayImage result = fourConnected.apply(emptyImage);
        assertNotNull(result);
        for (int x = 0; x < result.X(); x++) {
            for (int y = 0; y < result.Y(); y++) {
                assertEquals(0, result.get(x, y));
            }
        }
    }

    @Test
    public void testApplyFullImage() {
        BinaryImage fullImage = new BinaryImage(3, 3);
        for (int x = 0; x < fullImage.X(); x++) {
            for (int y = 0; y < fullImage.Y(); y++) {
                fullImage.set(x, y, 1);
            }
        }
        GrayImage result = eightConnected.apply(fullImage);
        assertNotNull(result);
        int label = result.get(0, 0);
        for (int x = 0; x < result.X(); x++) {
            for (int y = 0; y < result.Y(); y++) {
                assertEquals(label, result.get(x, y));
            }
        }
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a simple 3x3 binary image and two `ConnectedComponents` instances (one for four-connected and one for eight-connected).
- **Constructor Tests**: Tests are included to ensure that the constructor throws exceptions for invalid arguments and works correctly for valid ones.
- **Apply Method Tests**: The `apply` method is tested for both four-connected and eight-connected configurations. Additional tests are included for edge cases like an empty image and a fully filled image.
- **Assertions**: The tests use assertions to verify that the output image dimensions and pixel values are as expected.