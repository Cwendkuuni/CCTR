Certainly! Below is a JUnit 4 test suite for the `ConnectedComponents` class. This test suite aims to cover various scenarios, including constructor validation and the `apply` method functionality.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import jigl.image.ops.ConnectedComponents;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.exceptions.InvalidArgumentException;

public class ConnectedComponentsTest {

    private BinaryImage binaryImage;

    @Before
    public void setUp() {
        // Initialize a simple 3x3 binary image for testing
        binaryImage = new BinaryImage(3, 3);
        binaryImage.set(0, 0, 1);
        binaryImage.set(0, 1, 1);
        binaryImage.set(0, 2, 0);
        binaryImage.set(1, 0, 0);
        binaryImage.set(1, 1, 1);
        binaryImage.set(1, 2, 0);
        binaryImage.set(2, 0, 1);
        binaryImage.set(2, 1, 0);
        binaryImage.set(2, 2, 1);
    }

    @Test
    public void testConstructorValidArguments() {
        try {
            ConnectedComponents cc = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
            assertNotNull(cc);
            cc = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 1);
            assertNotNull(cc);
        } catch (InvalidArgumentException e) {
            fail("Constructor threw an exception for valid arguments");
        }
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidNeighbors() throws InvalidArgumentException {
        new ConnectedComponents(2, 0);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidBackground() throws InvalidArgumentException {
        new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 2);
    }

    @Test
    public void testApplyFourConnected() {
        try {
            ConnectedComponents cc = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
            GrayImage result = cc.apply(binaryImage);
            assertNotNull(result);
            assertEquals(3, result.X());
            assertEquals(3, result.Y());
            // Check some expected values
            assertEquals(1, result.get(0, 0));
            assertEquals(1, result.get(0, 1));
            assertEquals(0, result.get(0, 2));
            assertEquals(0, result.get(1, 0));
            assertEquals(1, result.get(1, 1));
            assertEquals(0, result.get(1, 2));
            assertEquals(2, result.get(2, 0));
            assertEquals(0, result.get(2, 1));
            assertEquals(3, result.get(2, 2));
        } catch (InvalidArgumentException e) {
            fail("Unexpected InvalidArgumentException");
        }
    }

    @Test
    public void testApplyEightConnected() {
        try {
            ConnectedComponents cc = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 0);
            GrayImage result = cc.apply(binaryImage);
            assertNotNull(result);
            assertEquals(3, result.X());
            assertEquals(3, result.Y());
            // Check some expected values
            assertEquals(1, result.get(0, 0));
            assertEquals(1, result.get(0, 1));
            assertEquals(0, result.get(0, 2));
            assertEquals(0, result.get(1, 0));
            assertEquals(1, result.get(1, 1));
            assertEquals(0, result.get(1, 2));
            assertEquals(1, result.get(2, 0));
            assertEquals(0, result.get(2, 1));
            assertEquals(2, result.get(2, 2));
        } catch (InvalidArgumentException e) {
            fail("Unexpected InvalidArgumentException");
        }
    }
}
```

### Explanation:
- **Constructor Tests**: These tests check if the constructor correctly handles valid and invalid arguments.
- **`apply` Method Tests**: These tests verify the behavior of the `apply` method for both four-connected and eight-connected scenarios using a simple 3x3 binary image. The expected results are based on the connectivity rules defined in the `ConnectedComponents` class.

This test suite should provide a good starting point for testing the `ConnectedComponents` class. Adjust the expected values in the `apply` method tests as needed based on the specific behavior of your implementation.