Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ConnectedComponents` class. This suite includes tests for the constructor and the `apply` method, covering different scenarios and edge cases.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import jigl.image.ops.ConnectedComponents;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.exceptions.InvalidArgumentException;

public class ConnectedComponentsTest {

    private ConnectedComponents fourConnected;
    private ConnectedComponents eightConnected;
    private BinaryImage binaryImage;

    @Before
    public void setUp() throws InvalidArgumentException {
        fourConnected = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
        eightConnected = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 0);
        binaryImage = new BinaryImage(5, 5);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidNeighbors() throws InvalidArgumentException {
        new ConnectedComponents(2, 0);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidBackground() throws InvalidArgumentException {
        new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 2);
    }

    @Test
    public void testApplyFourConnected() {
        // Set up a simple binary image with a single connected component
        binaryImage.set(1, 1, 1);
        binaryImage.set(1, 2, 1);
        binaryImage.set(2, 1, 1);
        binaryImage.set(2, 2, 1);

        GrayImage result = fourConnected.apply(binaryImage);

        // Check that all connected pixels have the same label
        int label = result.get(1, 1);
        assertEquals(label, result.get(1, 2));
        assertEquals(label, result.get(2, 1));
        assertEquals(label, result.get(2, 2));
    }

    @Test
    public void testApplyEightConnected() {
        // Set up a simple binary image with a single connected component
        binaryImage.set(1, 1, 1);
        binaryImage.set(1, 2, 1);
        binaryImage.set(2, 1, 1);
        binaryImage.set(2, 2, 1);
        binaryImage.set(0, 0, 1); // Diagonal connection

        GrayImage result = eightConnected.apply(binaryImage);

        // Check that all connected pixels have the same label
        int label = result.get(1, 1);
        assertEquals(label, result.get(1, 2));
        assertEquals(label, result.get(2, 1));
        assertEquals(label, result.get(2, 2));
        assertEquals(label, result.get(0, 0));
    }

    @Test
    public void testApplyDisconnectedComponents() {
        // Set up a binary image with two separate components
        binaryImage.set(0, 0, 1);
        binaryImage.set(4, 4, 1);

        GrayImage result = fourConnected.apply(binaryImage);

        // Check that the two components have different labels
        assertNotEquals(result.get(0, 0), result.get(4, 4));
    }

    @Test
    public void testApplyBackground() {
        // Set up a binary image with background
        binaryImage.set(0, 0, 1);
        binaryImage.set(1, 1, 0); // Background

        GrayImage result = fourConnected.apply(binaryImage);

        // Check that the background remains zero
        assertEquals(0, result.get(1, 1));
    }
}
```

### Explanation:
- **Constructor Tests**: These tests ensure that the constructor throws an `InvalidArgumentException` when invalid arguments are provided.
- **`apply` Method Tests**: These tests cover different scenarios:
  - **Single Connected Component**: Tests that all connected pixels are labeled the same.
  - **Eight-Connected Component**: Tests diagonal connections.
  - **Disconnected Components**: Ensures separate components have different labels.
  - **Background Handling**: Ensures background pixels remain zero.

This test suite should provide a comprehensive check of the `ConnectedComponents` class functionality.