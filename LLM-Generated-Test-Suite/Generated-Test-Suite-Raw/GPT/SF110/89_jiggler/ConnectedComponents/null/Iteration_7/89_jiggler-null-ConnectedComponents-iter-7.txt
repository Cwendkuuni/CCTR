Certainly! Below is a JUnit 4 test suite for the `ConnectedComponents` class. This test suite aims to cover the constructor and the `apply` method of the `ConnectedComponents` class. The tests include various scenarios to ensure comprehensive coverage.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import jigl.image.ops.ConnectedComponents;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.exceptions.InvalidArgumentException;

public class ConnectedComponentsTest {

    private BinaryImage binaryImage;
    private ConnectedComponents fourConnected;
    private ConnectedComponents eightConnected;

    @Before
    public void setUp() throws Exception {
        // Initialize a simple 3x3 binary image for testing
        binaryImage = new BinaryImage(3, 3);
        binaryImage.set(0, 0, 1);
        binaryImage.set(0, 1, 1);
        binaryImage.set(0, 2, 0);
        binaryImage.set(1, 0, 0);
        binaryImage.set(1, 1, 1);
        binaryImage.set(1, 2, 0);
        binaryImage.set(2, 0, 1);
        binaryImage.set(2, 1, 0);
        binaryImage.set(2, 2, 1);

        // Initialize ConnectedComponents instances
        fourConnected = new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 0);
        eightConnected = new ConnectedComponents(ConnectedComponents.EIGHT_CONNECTED, 0);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidNeighbors() throws InvalidArgumentException {
        new ConnectedComponents(2, 0);
    }

    @Test(expected = InvalidArgumentException.class)
    public void testConstructorInvalidBackground() throws InvalidArgumentException {
        new ConnectedComponents(ConnectedComponents.FOUR_CONNECTED, 2);
    }

    @Test
    public void testApplyFourConnected() {
        GrayImage result = fourConnected.apply(binaryImage);
        assertNotNull(result);
        assertEquals(3, result.X());
        assertEquals(3, result.Y());

        // Check the expected labels for four-connected components
        assertEquals(1, result.get(0, 0));
        assertEquals(1, result.get(0, 1));
        assertEquals(0, result.get(0, 2));
        assertEquals(0, result.get(1, 0));
        assertEquals(1, result.get(1, 1));
        assertEquals(0, result.get(1, 2));
        assertEquals(2, result.get(2, 0));
        assertEquals(0, result.get(2, 1));
        assertEquals(3, result.get(2, 2));
    }

    @Test
    public void testApplyEightConnected() {
        GrayImage result = eightConnected.apply(binaryImage);
        assertNotNull(result);
        assertEquals(3, result.X());
        assertEquals(3, result.Y());

        // Check the expected labels for eight-connected components
        assertEquals(1, result.get(0, 0));
        assertEquals(1, result.get(0, 1));
        assertEquals(0, result.get(0, 2));
        assertEquals(0, result.get(1, 0));
        assertEquals(1, result.get(1, 1));
        assertEquals(0, result.get(1, 2));
        assertEquals(1, result.get(2, 0));
        assertEquals(0, result.get(2, 1));
        assertEquals(2, result.get(2, 2));
    }
}
```

### Explanation:
- **Setup**: A simple 3x3 binary image is created for testing purposes.
- **Constructor Tests**: Tests are included to ensure that invalid arguments throw an `InvalidArgumentException`.
- **Apply Method Tests**: The `apply` method is tested for both four-connected and eight-connected configurations. The expected labels for connected components are checked to ensure correctness.

This test suite should provide a good starting point for testing the `ConnectedComponents` class. Adjust the binary image and expected results as needed to cover additional scenarios.