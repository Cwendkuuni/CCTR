To create a comprehensive JUnit 4 test suite for the `RobotRenderer` class, we need to test each public method and ensure that the rendering logic behaves as expected. Since the class primarily deals with rendering, we will focus on verifying the behavior of the boolean flags and the rendering logic using mock objects.

Here's a complete JUnit 4 test suite for the `RobotRenderer` class:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.awt.*;
import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import net.virtualinfinity.atrobots.gui.renderers.RobotRenderer;
import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;

public class RobotRendererTest {

    private RobotRenderer robotRenderer;
    private Graphics2D graphics;
    private RobotSnapshot robotSnapshot;
    private Set<Integer> selectedRobotIds;

    @Before
    public void setUp() {
        robotRenderer = new RobotRenderer();
        graphics = mock(Graphics2D.class);
        robotSnapshot = mock(RobotSnapshot.class);
        selectedRobotIds = new HashSet<>();
    }

    @Test
    public void testRenderDeadRobotWhenRenderDeadIsFalse() {
        when(robotSnapshot.isDead()).thenReturn(true);
        robotRenderer.setRenderDead(false);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, never()).fill(any(Shape.class));
    }

    @Test
    public void testRenderAliveRobot() {
        when(robotSnapshot.isDead()).thenReturn(false);
        when(robotSnapshot.getId()).thenReturn(1);
        selectedRobotIds.add(1);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, atLeastOnce()).fill(any(Shape.class));
    }

    @Test
    public void testRenderWithShowStatusBars() {
        when(robotSnapshot.isDead()).thenReturn(false);
        robotRenderer.setShowStatusBars(true);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, atLeastOnce()).fill(any(Shape.class));
    }

    @Test
    public void testRenderWithoutShowStatusBars() {
        when(robotSnapshot.isDead()).thenReturn(false);
        robotRenderer.setShowStatusBars(false);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, never()).fill(any(Rectangle2D.Double.class));
    }

    @Test
    public void testRenderWithShowName() {
        when(robotSnapshot.isDead()).thenReturn(false);
        when(robotSnapshot.getName()).thenReturn("TestRobot");
        robotRenderer.setShowName(true);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, atLeastOnce()).drawString(eq("TestRobot"), anyFloat(), anyFloat());
    }

    @Test
    public void testRenderWithoutShowName() {
        when(robotSnapshot.isDead()).thenReturn(false);
        robotRenderer.setShowName(false);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, never()).drawString(anyString(), anyFloat(), anyFloat());
    }

    @Test
    public void testRenderWithFillShield() {
        when(robotSnapshot.isDead()).thenReturn(false);
        when(robotSnapshot.isActiveShield()).thenReturn(true);
        robotRenderer.setFillShield(true);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, atLeastOnce()).fill(any(Ellipse2D.Double.class));
    }

    @Test
    public void testRenderWithoutFillShield() {
        when(robotSnapshot.isDead()).thenReturn(false);
        when(robotSnapshot.isActiveShield()).thenReturn(true);
        robotRenderer.setFillShield(false);

        robotRenderer.render(graphics, robotSnapshot, selectedRobotIds);

        verify(graphics, atLeastOnce()).draw(any(Ellipse2D.Double.class));
    }

    @Test
    public void testIsRenderDead() {
        robotRenderer.setRenderDead(true);
        assertTrue(robotRenderer.isRenderDead());

        robotRenderer.setRenderDead(false);
        assertFalse(robotRenderer.isRenderDead());
    }

    @Test
    public void testIsShowStatusBars() {
        robotRenderer.setShowStatusBars(true);
        assertTrue(robotRenderer.isShowStatusBars());

        robotRenderer.setShowStatusBars(false);
        assertFalse(robotRenderer.isShowStatusBars());
    }

    @Test
    public void testIsShowName() {
        robotRenderer.setShowName(true);
        assertTrue(robotRenderer.isShowName());

        robotRenderer.setShowName(false);
        assertFalse(robotRenderer.isShowName());
    }

    @Test
    public void testIsFillShield() {
        robotRenderer.setFillShield(true);
        assertTrue(robotRenderer.isFillShield());

        robotRenderer.setFillShield(false);
        assertFalse(robotRenderer.isFillShield());
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to create mock objects for `Graphics2D` and `RobotSnapshot` to simulate their behavior without needing actual implementations.
- **Boolean Flags**: We test the getter and setter methods for each boolean flag to ensure they work correctly.
- **Rendering Logic**: We verify that the rendering methods are called or not called based on the state of the `RobotSnapshot` and the boolean flags.
- **Selected Robots**: We test the rendering logic when a robot is selected by adding its ID to the `selectedRobotIds` set.

This test suite provides a comprehensive check of the `RobotRenderer` class's functionality.