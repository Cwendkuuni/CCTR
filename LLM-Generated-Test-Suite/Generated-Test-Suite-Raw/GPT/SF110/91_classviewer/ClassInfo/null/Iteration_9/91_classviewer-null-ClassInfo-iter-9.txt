To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method. Given the complexity and dependencies of the class, some methods may require mocking or specific setup. Below is a basic test suite that covers the main functionalities of the `ClassInfo` class. Note that this test suite assumes the existence of certain classes and methods (like `DirManager` and `StringTools`) and may require adjustments based on the actual implementations of these dependencies.

```java
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Method;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = mock(DirManager.class);
        when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
        classInfo = new ClassInfo("javax.swing.JButton", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("javax.swing.JButton", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("javax.swing", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("javax.swing.AbstractButton", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("addActionListener");
        assertNotNull(foundMethods);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] foundMethods = classInfo.srchMethods("addActionListener", new String[]{"javax.swing.JButton"});
        assertNotNull(foundMethods);
    }

    @Test
    public void testGetFoundMethod() {
        classInfo.srchMethods("addActionListener");
        MethodData methodData = classInfo.getFoundMethod(0);
        assertNotNull(methodData);
        assertEquals("addActionListener", methodData.getMethName());
    }
}
```

### Notes:
- **Dependencies**: The test suite uses Mockito to mock the `DirManager` class. Ensure that Mockito is included in your project's dependencies.
- **Test Coverage**: The test suite covers the main functionalities of the `ClassInfo` class. However, due to the complexity and dependencies of the class, some methods might require additional setup or mocking.
- **Adjustments**: Depending on the actual implementations of `DirManager`, `StringTools`, and other dependencies, you may need to adjust the test cases accordingly.
- **Environment**: Ensure that the necessary classes and packages are available in your test environment for the tests to run successfully.