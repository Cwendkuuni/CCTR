To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method. Given the complexity and dependencies of the class, some methods may require mocking or specific setup. Below is a basic test suite that covers the public methods of the `ClassInfo` class. Note that this suite assumes the existence of certain classes and methods (like `DirManager` and `StringTools`) which are not provided in your code snippet.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.lang.reflect.Method;
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = Mockito.mock(DirManager.class);
        Mockito.when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
        classInfo = new ClassInfo("javax.swing.JButton", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("javax.swing.JButton", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("javax.swing", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("javax.swing.AbstractButton", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
        assertTrue(fields.length > 0);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
        assertTrue(constructors.length > 0);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
        assertTrue(interfaces.length > 0);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("get");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] index = {"get"};
        String[] foundMethods = classInfo.srchMethods("get", index);
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testGetFoundMethod() {
        String[] foundMethods = classInfo.srchMethods("get");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
        MethodData methodData = classInfo.getFoundMethod(0);
        assertNotNull(methodData);
        assertNotNull(methodData.getMethClass());
        assertNotNull(methodData.getMethName());
    }
}
```

### Notes:
- **Dependencies**: This test suite uses Mockito for mocking dependencies like `DirManager`. Ensure you have Mockito in your classpath.
- **Test Coverage**: The suite covers all public methods. Some methods, like `getFoundMethod`, depend on the results of `srchMethods`.
- **Assumptions**: The test suite assumes that the `DirManager` and `StringTools` classes exist and behave as expected. Adjust the setup and assertions based on the actual behavior of these classes.
- **Environment**: Ensure that the JUnit 4 library is included in your project to run these tests.