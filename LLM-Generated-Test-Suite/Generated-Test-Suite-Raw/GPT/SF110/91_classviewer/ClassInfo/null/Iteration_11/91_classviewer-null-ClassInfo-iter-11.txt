To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method. Given the complexity and dependencies of the class, we'll need to mock some parts, especially where external classes or system resources are involved. Below is a basic test suite that covers the main functionalities of the `ClassInfo` class. Note that this is a starting point, and further tests may be needed based on the actual behavior and requirements of the class.

```java
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Method;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = mock(DirManager.class);
        when(mockDirManager.getPackageList()).thenReturn(new String[]{"com.example."});
        classInfo = new ClassInfo("java.lang.String", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("java.lang.String", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("java.lang", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("java.lang.Object", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
        assertTrue(fields.length > 0);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
        assertTrue(constructors.length > 0);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
        assertTrue(interfaces.length > 0);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("toString");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] foundMethods = classInfo.srchMethods("toString", new String[]{"java.lang.String"});
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testGetFoundMethod() {
        classInfo.srchMethods("toString");
        assertNotNull(classInfo.getFoundMethod(0));
    }

    @Test
    public void testGetDataFromMembers() {
        Method[] methods = String.class.getMethods();
        String[] data = ClassInfo.getData(methods);
        assertNotNull(data);
        assertTrue(data.length > 0);
    }

    @Test
    public void testGetDataFromClasses() {
        Class[] interfaces = String.class.getInterfaces();
        String[] data = ClassInfo.getData(interfaces);
        assertNotNull(data);
        assertTrue(data.length > 0);
    }
}
```

### Notes:
- **Mocking**: The `DirManager` is mocked to provide a controlled environment for testing.
- **Dependencies**: The test suite assumes that the `StringTools` and `StringList` classes are available and functioning as expected.
- **Assertions**: Basic assertions are used to verify the expected outcomes of method calls.
- **Setup**: The `setUp` method initializes the `ClassInfo` object with a known class (`java.lang.String`) for testing.

This test suite provides a foundation for testing the `ClassInfo` class. Depending on the actual implementation of `StringTools`, `StringList`, and other dependencies, additional tests and adjustments may be necessary.