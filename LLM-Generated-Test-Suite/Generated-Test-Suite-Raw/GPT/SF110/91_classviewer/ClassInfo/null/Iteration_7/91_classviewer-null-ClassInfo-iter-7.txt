To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method. Given the complexity and dependencies of the class, we'll need to mock some parts, especially the `DirManager` and any other dependencies. Here's a basic test suite to get you started:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = mock(DirManager.class);
        when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
    }

    @Test
    public void testIsAbstract() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.AbstractList");
        assertTrue(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.List");
        assertTrue(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.ArrayList", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.AbstractList", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
    }

    @Test
    public void testPrintMethods() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
    }

    @Test
    public void testPrintMethodsWithParam() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
    }

    @Test
    public void testPrintConstructors() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
    }

    @Test
    public void testPrintInterfaces() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
    }

    @Test
    public void testSrchMethods() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] foundMethods = classInfo.srchMethods("add");
        assertNotNull(foundMethods);
    }

    @Test
    public void testSrchMethodsWithIndex() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] foundMethods = classInfo.srchMethods("add", new String[]{"add"});
        assertNotNull(foundMethods);
    }

    @Test
    public void testGetFoundMethod() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList");
        classInfo.srchMethods("add");
        assertNotNull(classInfo.getFoundMethod(0));
    }

    @Test(expected = ClassNotFoundException.class)
    public void testClassNotFoundException() throws ClassNotFoundException {
        new ClassInfo("non.existent.Class");
    }

    @Test
    public void testConstructorWithDirManager() throws ClassNotFoundException {
        classInfo = new ClassInfo("java.util.ArrayList", mockDirManager);
        assertNotNull(classInfo);
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the `DirManager` dependency.
- **Setup**: The `setUp` method initializes the mock objects before each test.
- **Tests**: Each test method corresponds to a method in the `ClassInfo` class. We test both constructors and all public methods.
- **Exception Handling**: We test for `ClassNotFoundException` to ensure the class handles non-existent classes correctly.

This test suite provides a basic structure. Depending on the actual behavior and dependencies of `ClassInfo`, you might need to adjust the tests, especially if there are more complex interactions or side effects.