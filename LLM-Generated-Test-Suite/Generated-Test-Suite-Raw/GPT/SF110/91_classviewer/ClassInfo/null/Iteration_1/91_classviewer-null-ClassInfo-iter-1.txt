To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test all public methods, including constructors. Below is a test suite that covers the functionality of the `ClassInfo` class. Note that some methods may require mocking or specific setup due to their dependencies on other classes or external states.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = Mockito.mock(DirManager.class);
        Mockito.when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
    }

    @Test
    public void testIsAbstract() throws Exception {
        classInfo = new ClassInfo("java.util.AbstractList");
        assertTrue(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() throws Exception {
        classInfo = new ClassInfo("java.util.List");
        assertTrue(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.ArrayList", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.AbstractList", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
    }

    @Test
    public void testPrintMethods() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
    }

    @Test
    public void testPrintMethodsWithParam() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
    }

    @Test
    public void testPrintConstructors() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
    }

    @Test
    public void testPrintInterfaces() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
    }

    @Test
    public void testSrchMethods() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] foundMethods = classInfo.srchMethods("add");
        assertNotNull(foundMethods);
    }

    @Test
    public void testSrchMethodsWithIndex() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] foundMethods = classInfo.srchMethods("add", new String[]{"java.util.ArrayList"});
        assertNotNull(foundMethods);
    }

    @Test
    public void testGetFoundMethod() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        classInfo.srchMethods("add");
        assertNotNull(classInfo.getFoundMethod(0));
    }

    @Test
    public void testConstructorWithDirManager() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList", mockDirManager);
        assertEquals("java.util.ArrayList", classInfo.getClassName());
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorThrowsClassNotFoundException() throws Exception {
        new ClassInfo("non.existent.Class");
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a mock `DirManager` to simulate the behavior of the `DirManager` class.
- **Test Methods**: Each test method checks a specific functionality of the `ClassInfo` class. The tests cover constructors, method retrieval, field retrieval, and searching methods.
- **Mocking**: The `DirManager` is mocked to provide a controlled environment for testing the constructor that requires it.
- **Exception Testing**: The test for the constructor that throws `ClassNotFoundException` ensures that the exception is correctly thrown when a non-existent class is queried.

This test suite should be run in an environment where JUnit 4 and Mockito are available. Adjustments may be necessary depending on the actual behavior of the `DirManager` and `StringTools` classes.