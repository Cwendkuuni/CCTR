To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method. The test suite will include tests for constructors, methods, and edge cases. Here is a basic test suite:

```java
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;
import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.Method;

import static org.junit.Assert.*;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private ClassInfo classInfoWithDirManager;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        // Assuming DirManager is a mockable class or can be instantiated
        mockDirManager = new DirManager(); // Replace with a mock if necessary
        classInfo = new ClassInfo("java.lang.String");
        classInfoWithDirManager = new ClassInfo("java.lang.String", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("java.lang.String", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("java.lang", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("java.lang.Object", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("toString");
        assertNotNull(foundMethods);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] index = {"toString"};
        String[] foundMethods = classInfo.srchMethods("toString", index);
        assertNotNull(foundMethods);
    }

    @Test
    public void testGetFoundMethod() {
        classInfo.srchMethods("toString");
        assertNotNull(classInfo.getFoundMethod(0));
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorWithInvalidClassName() throws ClassNotFoundException {
        new ClassInfo("invalid.ClassName");
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorWithInvalidClassNameAndDirManager() throws ClassNotFoundException {
        new ClassInfo("invalid.ClassName", mockDirManager);
    }
}
```

### Notes:
- **Mocking**: If `DirManager` is a complex class or has dependencies, consider using a mocking framework like Mockito to create a mock instance.
- **Edge Cases**: The test suite includes tests for invalid class names to ensure exceptions are handled correctly.
- **Assertions**: The tests use assertions to verify the expected outcomes of method calls.
- **Setup**: The `setUp` method initializes instances of `ClassInfo` for use in tests.

This test suite provides a basic structure and can be expanded with more specific tests as needed.