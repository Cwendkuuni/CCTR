To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test all public methods and constructors. Below is a JUnit 4 test suite that covers the methods in the `ClassInfo` class. Note that some methods require mocking or specific setup due to their dependencies on other classes or external states.

```java
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Method;

import static org.junit.Assert.*;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        // Mock DirManager
        mockDirManager = Mockito.mock(DirManager.class);
        Mockito.when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});

        // Initialize ClassInfo with a known class
        classInfo = new ClassInfo("javax.swing.JButton", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("javax.swing.JButton", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("javax.swing", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("javax.swing.AbstractButton", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("addActionListener");
        assertNotNull(foundMethods);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] foundMethods = classInfo.srchMethods("addActionListener", new String[]{"javax.swing.JButton"});
        assertNotNull(foundMethods);
    }

    @Test
    public void testGetFoundMethod() {
        classInfo.srchMethods("addActionListener");
        assertNotNull(classInfo.getFoundMethod(0));
    }

    @Test
    public void testGetDataWithMembers() {
        Method[] methods = JButton.class.getMethods();
        String[] data = ClassInfo.getData(methods);
        assertNotNull(data);
    }

    @Test
    public void testGetDataWithClasses() {
        Class<?>[] interfaces = JButton.class.getInterfaces();
        String[] data = ClassInfo.getData(interfaces);
        assertNotNull(data);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `ClassInfo` instance using a known class (`javax.swing.JButton`) and a mocked `DirManager`.
- **Tests**: Each test method checks a specific functionality of the `ClassInfo` class. The tests cover:
  - Checking if the class is abstract or an interface.
  - Retrieving class name, package, and superclass name.
  - Printing fields, methods, constructors, and interfaces.
  - Searching methods by name and index.
  - Retrieving method data using static `getData` methods.
- **Mocking**: The `DirManager` is mocked to provide a controlled environment for testing.

This test suite assumes that the `StringTools` and `StringList` classes are correctly implemented and available in the classpath. Adjustments may be needed based on the actual behavior of these dependencies.