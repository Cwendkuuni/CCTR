To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test all public methods and constructors. Below is a JUnit 4 test suite that covers the methods in the `ClassInfo` class. Note that some methods require mocking or specific setup due to their reliance on reflection and external classes.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;

import java.lang.reflect.Method;

@RunWith(MockitoJUnitRunner.class)
public class ClassInfoTest {

    @Mock
    private DirManager mockDirManager;

    private ClassInfo classInfo;

    @Before
    public void setUp() throws Exception {
        // Mock DirManager to return a known package list
        when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
    }

    @Test
    public void testIsAbstract() throws Exception {
        classInfo = new ClassInfo("java.util.AbstractList");
        assertTrue(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() throws Exception {
        classInfo = new ClassInfo("java.util.List");
        assertTrue(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.ArrayList", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.AbstractList", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() throws Exception {
        classInfo = new ClassInfo("javax.swing.JFrame");
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
        assertTrue(fields.length > 0);
    }

    @Test
    public void testPrintMethods() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintMethodsWithParam() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintConstructors() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
        assertTrue(constructors.length > 0);
    }

    @Test
    public void testPrintInterfaces() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
        assertTrue(interfaces.length > 0);
    }

    @Test
    public void testSrchMethods() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] foundMethods = classInfo.srchMethods("add");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testSrchMethodsWithIndex() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] index = {"add", "remove"};
        String[] foundMethods = classInfo.srchMethods("add", index);
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testGetFoundMethod() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        classInfo.srchMethods("add");
        MethodData methodData = classInfo.getFoundMethod(0);
        assertNotNull(methodData);
        assertEquals("add", methodData.getMethName());
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorThrowsClassNotFoundException() throws Exception {
        new ClassInfo("non.existent.ClassName");
    }

    @Test
    public void testConstructorWithDirManager() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList", mockDirManager);
        assertNotNull(classInfo);
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the `DirManager` class, which is used in one of the constructors.
- **Test Methods**: Each public method in `ClassInfo` is tested. We check for expected outcomes, such as the correct class name, package, superclass, and method lists.
- **Exception Handling**: We test that the constructor throws a `ClassNotFoundException` when a non-existent class name is provided.
- **Setup**: The `setUp` method initializes the mock objects and any necessary setup before each test.

This test suite assumes that the `StringTools` and `StringList` classes, as well as the `MethodData` interface, are correctly implemented and available in the classpath.