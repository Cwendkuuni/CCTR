To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test all public methods, including constructors, and handle exceptions where applicable. Below is a test suite that covers the functionality of the `ClassInfo` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;
import java.lang.reflect.Method;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private ClassInfo classInfoWithDirManager;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        // Mock DirManager
        mockDirManager = new DirManager() {
            @Override
            public String[] getPackageList() {
                return new String[]{"java.lang.", "javax.swing."};
            }
        };

        // Initialize ClassInfo with a known class
        classInfo = new ClassInfo("javax.swing.JButton");
        classInfoWithDirManager = new ClassInfo("javax.swing.JButton", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("javax.swing.JButton", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("javax.swing", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("javax.swing.AbstractButton", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("get");
        assertNotNull(foundMethods);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] index = {"get"};
        String[] foundMethods = classInfo.srchMethods("get", index);
        assertNotNull(foundMethods);
    }

    @Test
    public void testGetFoundMethod() {
        String[] foundMethods = classInfo.srchMethods("get");
        if (foundMethods != null && foundMethods.length > 0) {
            assertNotNull(classInfo.getFoundMethod(0));
        }
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorWithInvalidClassName() throws ClassNotFoundException {
        new ClassInfo("invalid.ClassName");
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorWithInvalidClassNameAndDirManager() throws ClassNotFoundException {
        new ClassInfo("invalid.ClassName", mockDirManager);
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes instances of `ClassInfo` with a known class (`javax.swing.JButton`) and a mock `DirManager`.
- **Test Methods**: Each method tests a specific functionality of the `ClassInfo` class. The tests check for expected outcomes, such as method return values and exceptions.
- **Exception Handling**: Tests for constructors that should throw `ClassNotFoundException` when given an invalid class name.
- **Assertions**: Use assertions to verify the expected behavior of methods.

This test suite provides a comprehensive check of the `ClassInfo` class's functionality, ensuring that all public methods are tested for expected behavior and exceptions.