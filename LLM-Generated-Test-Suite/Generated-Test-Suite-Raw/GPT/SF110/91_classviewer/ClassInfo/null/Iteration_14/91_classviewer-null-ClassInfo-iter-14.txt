To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method, including constructors and static methods. Below is a test suite that covers the functionality of the `ClassInfo` class. Note that some methods require mocking or specific setup due to their reliance on reflection and external classes.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;
import com.jstevh.tools.StringTools;

import java.lang.reflect.Method;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = mock(DirManager.class);
        when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
    }

    @Test
    public void testIsAbstract() throws Exception {
        classInfo = new ClassInfo("java.util.AbstractList");
        assertTrue(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() throws Exception {
        classInfo = new ClassInfo("java.util.List");
        assertTrue(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.ArrayList", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        assertEquals("java.util.AbstractList", classInfo.getSuperClassName());
    }

    @Test(expected = ClassNotFoundException.class)
    public void testConstructorThrowsClassNotFoundException() throws Exception {
        new ClassInfo("non.existent.Class");
    }

    @Test
    public void testPrintFields() throws Exception {
        classInfo = new ClassInfo("javax.swing.JFrame");
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
        assertTrue(fields.length > 0);
    }

    @Test
    public void testPrintMethods() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintMethodsWithParam() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintConstructors() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
        assertTrue(constructors.length > 0);
    }

    @Test
    public void testPrintInterfaces() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
        assertTrue(interfaces.length > 0);
    }

    @Test
    public void testSrchMethods() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] foundMethods = classInfo.srchMethods("add");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testSrchMethodsWithIndex() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        String[] index = {"add", "remove"};
        String[] foundMethods = classInfo.srchMethods("add", index);
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testGetFoundMethod() throws Exception {
        classInfo = new ClassInfo("java.util.ArrayList");
        classInfo.srchMethods("add");
        MethodData methodData = classInfo.getFoundMethod(0);
        assertNotNull(methodData);
        assertEquals("add", methodData.getMethName());
    }

    @Test
    public void testGetDataWithMembers() {
        Method[] methods = String.class.getMethods();
        String[] data = ClassInfo.getData(methods);
        assertNotNull(data);
        assertTrue(data.length > 0);
    }

    @Test
    public void testGetDataWithClasses() {
        Class[] classes = {String.class, Integer.class};
        String[] data = ClassInfo.getData(classes);
        assertNotNull(data);
        assertEquals(2, data.length);
    }
}
```

### Explanation:
- **Mocking**: The `DirManager` is mocked to provide a controlled environment for testing.
- **Test Methods**: Each public method in `ClassInfo` is tested, including constructors and static methods.
- **Assertions**: Assertions are used to verify the expected outcomes of method calls.
- **Exception Testing**: The constructor is tested to ensure it throws a `ClassNotFoundException` when a non-existent class is specified.

This test suite assumes that the `StringTools` and `DirManager` classes are available and that the `MethodData` interface is correctly implemented. Adjustments may be needed based on the actual implementations of these dependencies.