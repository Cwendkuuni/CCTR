To create a comprehensive JUnit 4 test suite for the `ClassInfo` class, we need to test each public method. Given the complexity of the class and its reliance on reflection, some tests will require mock objects or specific class setups. Below is a basic test suite that covers the main functionalities of the `ClassInfo` class. Note that this suite assumes the existence of certain classes and methods (like `DirManager` and `StringTools`) which are not provided in your code snippet.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.lang.reflect.Method;
import com.jstevh.viewer.ClassInfo;
import com.jstevh.tools.DirManager;

public class ClassInfoTest {

    private ClassInfo classInfo;
    private DirManager mockDirManager;

    @Before
    public void setUp() throws Exception {
        mockDirManager = Mockito.mock(DirManager.class);
        Mockito.when(mockDirManager.getPackageList()).thenReturn(new String[]{"java.lang.", "javax.swing."});
        classInfo = new ClassInfo("javax.swing.JButton", mockDirManager);
    }

    @Test
    public void testIsAbstract() {
        assertFalse(classInfo.isAbstract());
    }

    @Test
    public void testIsInterface() {
        assertFalse(classInfo.isInterface());
    }

    @Test
    public void testGetClassName() {
        assertEquals("javax.swing.JButton", classInfo.getClassName());
    }

    @Test
    public void testGetClassPackage() {
        assertEquals("javax.swing", classInfo.getClassPackage());
    }

    @Test
    public void testGetSuperClassName() {
        assertEquals("javax.swing.AbstractButton", classInfo.getSuperClassName());
    }

    @Test
    public void testPrintFields() {
        String[] fields = classInfo.printFields();
        assertNotNull(fields);
        assertTrue(fields.length > 0);
    }

    @Test
    public void testPrintMethods() {
        String[] methods = classInfo.printMethods();
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintMethodsWithParam() {
        String[] methods = classInfo.printMethods(ClassInfo.NO_OBJECT_METHODS);
        assertNotNull(methods);
        assertTrue(methods.length > 0);
    }

    @Test
    public void testPrintConstructors() {
        String[] constructors = classInfo.printConstructors();
        assertNotNull(constructors);
        assertTrue(constructors.length > 0);
    }

    @Test
    public void testPrintInterfaces() {
        String[] interfaces = classInfo.printInterfaces();
        assertNotNull(interfaces);
        assertTrue(interfaces.length > 0);
    }

    @Test
    public void testSrchMethods() {
        String[] foundMethods = classInfo.srchMethods("addActionListener");
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testSrchMethodsWithIndex() {
        String[] foundMethods = classInfo.srchMethods("addActionListener", new String[]{"addActionListener"});
        assertNotNull(foundMethods);
        assertTrue(foundMethods.length > 0);
    }

    @Test
    public void testGetFoundMethod() {
        classInfo.srchMethods("addActionListener");
        MethodData methodData = classInfo.getFoundMethod(0);
        assertNotNull(methodData);
        assertEquals("addActionListener", methodData.getMethName());
    }
}
```

### Notes:
- **Mockito**: This test suite uses Mockito to mock the `DirManager` class. You need to include Mockito in your project dependencies to use it.
- **Class Setup**: The tests assume that `javax.swing.JButton` is a valid class name and that it has methods and fields to test against.
- **MethodData**: The `getFoundMethod` test assumes that the `MethodData` interface is correctly implemented and available.
- **Dependencies**: Ensure that all necessary dependencies (like `DirManager` and `StringTools`) are available in your test environment.

This test suite provides a basic structure and should be expanded with more specific tests and assertions based on the actual behavior and requirements of your application.