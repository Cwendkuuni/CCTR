Certainly! Below is a JUnit 4 test suite for the `InternalChatFrame` class. This test suite aims to cover the main functionalities of the class, including adding and deleting users, adding text, and handling actions.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;
    private StyledDocument mockDoc;

    @Before
    public void setUp() {
        mockParent = mock(MainFrame.class);
        when(mockParent.getSize()).thenReturn(new Dimension(800, 600));
        chatFrame = new InternalChatFrame(mockParent);
        mockDoc = mock(StyledDocument.class);
        chatFrame.doc = mockDoc;
    }

    @Test
    public void testAddUser() {
        chatFrame.addUser("User1");
        String[] users = chatFrame.getUserlist();
        assertEquals(1, users.length);
        assertEquals("User1", users[0]);
    }

    @Test
    public void testDeleteUser() {
        chatFrame.addUser("User1");
        chatFrame.deleteUser("User1");
        String[] users = chatFrame.getUserlist();
        assertEquals(0, users.length);
    }

    @Test
    public void testAddText() throws BadLocationException {
        chatFrame.addText("User1: Hello");
        verify(mockDoc, times(2)).insertString(anyInt(), anyString(), any());
    }

    @Test
    public void testAddTextWithFormatting() throws BadLocationException {
        chatFrame.addText("User1: *Hello* _World_");
        verify(mockDoc, atLeast(3)).insertString(anyInt(), anyString(), any());
    }

    @Test
    public void testActionPerformedChooseColor() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);

        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);

        // Since JColorChooser.showDialog is a blocking call, we cannot test it directly.
        // Instead, we can verify if changeStyle was called with the expected parameters.
        // This requires refactoring the code to make changeStyle public or protected.
    }

    @Test
    public void testActionPerformedWhisper() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);

        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);

        assertEquals("/w User1 ", chatFrame.txtInput.getText());
    }

    @Test
    public void testGetChatlog() {
        chatFrame.addText("User1: Hello");
        String chatlog = chatFrame.getChatlog();
        assertTrue(chatlog.contains("Hello"));
    }

    @Test
    public void testMaybeShowPopupOnList() {
        MouseEvent mockEvent = mock(MouseEvent.class);
        when(mockEvent.isPopupTrigger()).thenReturn(true);
        when(mockEvent.getSource()).thenReturn(chatFrame.list);

        chatFrame.mousePressed(mockEvent);

        assertTrue(chatFrame.listPop.isVisible());
    }

    @Test
    public void testMaybeShowPopupOnTextPane() {
        MouseEvent mockEvent = mock(MouseEvent.class);
        when(mockEvent.isPopupTrigger()).thenReturn(true);
        when(mockEvent.getSource()).thenReturn(chatFrame.showTxt);

        chatFrame.mousePressed(mockEvent);

        assertTrue(chatFrame.txtPop.isVisible());
    }
}
```

### Explanation:
- **Mocking**: The `MainFrame` and `StyledDocument` are mocked to isolate the `InternalChatFrame` for testing.
- **Test Methods**: Each method tests a specific functionality of the `InternalChatFrame` class.
- **Action Events**: Tests for action events simulate user interactions.
- **Popup Menus**: Tests for popup menus ensure they are shown when expected.

This test suite uses Mockito for mocking dependencies and verifying interactions. Adjustments may be needed based on the actual behavior of the `MainFrame` and other dependencies.