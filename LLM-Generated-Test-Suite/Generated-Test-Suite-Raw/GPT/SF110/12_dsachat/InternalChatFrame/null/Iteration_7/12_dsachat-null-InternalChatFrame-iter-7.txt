Certainly! Below is a JUnit 4 test suite for the `InternalChatFrame` class. This test suite aims to cover the main functionalities of the class, including adding and deleting users, adding text, and handling actions and mouse events.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;
    private StyledDocument mockDoc;

    @Before
    public void setUp() {
        mockParent = mock(MainFrame.class);
        when(mockParent.getSize()).thenReturn(new Dimension(800, 600));
        chatFrame = new InternalChatFrame(mockParent);
        mockDoc = chatFrame.showTxt.getStyledDocument();
    }

    @Test
    public void testAddUser() {
        chatFrame.addUser("User1");
        String[] users = chatFrame.getUserlist();
        assertEquals(1, users.length);
        assertEquals("User1", users[0]);
    }

    @Test
    public void testDeleteUser() {
        chatFrame.addUser("User1");
        chatFrame.deleteUser("User1");
        String[] users = chatFrame.getUserlist();
        assertEquals(0, users.length);
    }

    @Test
    public void testAddText() throws BadLocationException {
        chatFrame.addText("User1: Hello");
        verify(mockDoc, times(1)).insertString(anyInt(), eq("User1: Hello\n"), any());
    }

    @Test
    public void testAddTextWithFormatting() throws BadLocationException {
        chatFrame.addText("User1: *Hello*");
        verify(mockDoc, times(1)).insertString(anyInt(), eq("User1: "), any());
        verify(mockDoc, times(1)).insertString(anyInt(), eq("Hello"), any());
    }

    @Test
    public void testActionPerformedChooseColor() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);

        ActionEvent event = new ActionEvent(chatFrame.list, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);

        // Verify that the color chooser dialog was shown
        verifyStatic(JColorChooser.class);
        JColorChooser.showDialog(any(Component.class), anyString(), any(Color.class));
    }

    @Test
    public void testActionPerformedWhisper() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);

        ActionEvent event = new ActionEvent(chatFrame.list, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);

        assertEquals("/w User1 ", chatFrame.txtInput.getText());
    }

    @Test
    public void testMousePressedShowsPopup() {
        MouseEvent mockEvent = mock(MouseEvent.class);
        when(mockEvent.isPopupTrigger()).thenReturn(true);
        when(mockEvent.getSource()).thenReturn(chatFrame.list);

        chatFrame.mousePressed(mockEvent);

        verify(mockEvent, times(1)).getSource();
    }

    @Test
    public void testMouseReleasedShowsPopup() {
        MouseEvent mockEvent = mock(MouseEvent.class);
        when(mockEvent.isPopupTrigger()).thenReturn(true);
        when(mockEvent.getSource()).thenReturn(chatFrame.showTxt);

        chatFrame.mouseReleased(mockEvent);

        verify(mockEvent, times(1)).getSource();
    }

    @Test
    public void testGetChatlog() {
        chatFrame.addText("User1: Hello");
        String chatlog = chatFrame.getChatlog();
        assertTrue(chatlog.contains("User1: Hello"));
    }
}
```

### Explanation:
- **Mocking**: The `MainFrame` and `StyledDocument` are mocked to isolate the `InternalChatFrame` for testing.
- **Test Methods**: Each method tests a specific functionality of the `InternalChatFrame` class.
- **Assertions**: Used to verify the expected outcomes.
- **Mockito**: Used for mocking and verifying interactions with dependencies.

This test suite provides a comprehensive set of tests for the `InternalChatFrame` class, ensuring that its main functionalities are working as expected.