To create a comprehensive JUnit 4 test suite for the `InternalChatFrame` class, we need to test each method's functionality. Below is a test suite that covers the main methods of the class. Note that some methods, such as GUI-related methods, might require a more complex setup or mocking framework to test effectively. For simplicity, this suite focuses on the core logic and interactions.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.awt.Color;
import java.awt.event.ActionEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;
    private StyledDocument mockDoc;

    @Before
    public void setUp() {
        mockParent = mock(MainFrame.class);
        mockDoc = mock(StyledDocument.class);
        chatFrame = new InternalChatFrame(mockParent);
        chatFrame.doc = mockDoc; // Injecting mock document for testing
    }

    @Test
    public void testAddTextWithoutColon() throws BadLocationException {
        String line = "System message";
        chatFrame.addText(line);
        verify(mockDoc).insertString(anyInt(), eq(line + "\n"), any());
    }

    @Test
    public void testAddTextWithColon() throws BadLocationException {
        String line = "User: Hello";
        chatFrame.addText(line);
        verify(mockDoc, atLeastOnce()).insertString(anyInt(), anyString(), any());
    }

    @Test
    public void testAddUser() {
        String user = "NewUser";
        chatFrame.addUser(user);
        assertEquals(user, chatFrame.getUserlist()[0]);
    }

    @Test
    public void testDeleteUser() {
        String user = "UserToDelete";
        chatFrame.addUser(user);
        chatFrame.deleteUser(user);
        assertEquals(0, chatFrame.getUserlist().length);
    }

    @Test
    public void testGetUserlist() {
        String user1 = "User1";
        String user2 = "User2";
        chatFrame.addUser(user1);
        chatFrame.addUser(user2);
        String[] userList = chatFrame.getUserlist();
        assertEquals(2, userList.length);
        assertEquals(user1, userList[0]);
        assertEquals(user2, userList[1]);
    }

    @Test
    public void testActionPerformedChooseColor() {
        chatFrame.addUser("User");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);
        // Since JColorChooser.showDialog is a blocking call, we can't test it directly without a UI.
        // This test ensures the method is called without exceptions.
    }

    @Test
    public void testActionPerformedWhisper() {
        chatFrame.addUser("User");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);
        assertEquals("/w User ", chatFrame.txtInput.getText());
    }

    @Test
    public void testGetChatlog() {
        String expectedText = "Chat log text";
        when(chatFrame.showTxt.getText()).thenReturn(expectedText);
        assertEquals(expectedText, chatFrame.getChatlog());
    }
}
```

### Notes:
- **Mocking**: The `StyledDocument` is mocked to avoid dealing with actual document manipulation, which can be complex and is not the focus of unit testing.
- **UI Components**: Testing UI components like `JColorChooser` is not straightforward in unit tests. Such components are typically tested in integration or system tests.
- **Mockito**: The test suite uses Mockito for mocking and verifying interactions with the `StyledDocument`.
- **Setup**: The `setUp` method initializes the `InternalChatFrame` with a mocked `MainFrame` and injects a mocked `StyledDocument`.

This test suite provides a foundation for testing the `InternalChatFrame` class. Depending on the complexity and requirements of your application, you might need to expand the tests or use additional tools for GUI testing.