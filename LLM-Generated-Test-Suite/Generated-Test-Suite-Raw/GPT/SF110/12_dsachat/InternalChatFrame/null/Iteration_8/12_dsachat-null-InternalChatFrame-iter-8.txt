To create a comprehensive JUnit 4 test suite for the `InternalChatFrame` class, we need to test each method in the class. This includes testing the GUI components, event handling, and the logic within the methods. Below is a test suite that covers these aspects. Note that testing GUI components and event handling can be complex, and often requires the use of mocking frameworks like Mockito or GUI testing libraries like FEST or AssertJ Swing. For simplicity, this test suite will focus on the logic and basic interactions.

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.awt.Color;
import java.awt.event.ActionEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;
    private StyledDocument mockDoc;

    @Before
    public void setUp() {
        mockParent = mock(MainFrame.class);
        when(mockParent.getSize()).thenReturn(new java.awt.Dimension(800, 600));
        chatFrame = new InternalChatFrame(mockParent);
        mockDoc = mock(StyledDocument.class);
        chatFrame.doc = mockDoc;
    }

    @Test
    public void testAddTextWithoutColon() throws BadLocationException {
        String line = "System message";
        chatFrame.addText(line);
        verify(mockDoc).insertString(anyInt(), eq(line + "\n"), any());
    }

    @Test
    public void testAddTextWithColon() throws BadLocationException {
        String line = "User: Hello";
        chatFrame.addText(line);
        verify(mockDoc, atLeastOnce()).insertString(anyInt(), anyString(), any());
    }

    @Test
    public void testAddUser() {
        String user = "NewUser";
        chatFrame.addUser(user);
        assertEquals(user, chatFrame.getUserlist()[0]);
    }

    @Test
    public void testDeleteUser() {
        String user = "UserToDelete";
        chatFrame.addUser(user);
        chatFrame.deleteUser(user);
        assertEquals(0, chatFrame.getUserlist().length);
    }

    @Test
    public void testGetUserlist() {
        String user1 = "User1";
        String user2 = "User2";
        chatFrame.addUser(user1);
        chatFrame.addUser(user2);
        String[] userList = chatFrame.getUserlist();
        assertEquals(2, userList.length);
        assertEquals(user1, userList[0]);
        assertEquals(user2, userList[1]);
    }

    @Test
    public void testActionPerformedChooseColor() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);
        // Since JColorChooser.showDialog is a blocking call, we can't test it directly without a GUI testing framework.
    }

    @Test
    public void testActionPerformedWhisper() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);
        assertEquals("/w User1 ", chatFrame.txtInput.getText());
    }

    @Test
    public void testGetChatlog() {
        String expectedText = "Chat log text";
        when(chatFrame.showTxt.getText()).thenReturn(expectedText);
        assertEquals(expectedText, chatFrame.getChatlog());
    }

    // Additional tests for mouse events and popup menus would require a GUI testing framework.
}
```

### Notes:
- **Mocking**: The `MainFrame` and `StyledDocument` are mocked to isolate the `InternalChatFrame` for testing.
- **GUI Testing**: This test suite does not cover GUI interactions like mouse events or color chooser dialogs, as these require a GUI testing framework.
- **Action Events**: The `actionPerformed` method is tested for different commands to ensure the correct behavior.
- **Text Handling**: The `addText` method is tested for different input formats to verify text insertion logic.

For a complete test suite, consider using a GUI testing library to handle components and events that require user interaction.