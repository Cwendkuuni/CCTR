To create a comprehensive JUnit 4 test suite for the `InternalChatFrame` class, we need to test each public method and some of the private methods indirectly through the public methods. Here's a test suite that covers the functionality of the class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.awt.Color;
import java.awt.event.ActionEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;

    @Before
    public void setUp() {
        mockParent = mock(MainFrame.class);
        when(mockParent.getSize()).thenReturn(new java.awt.Dimension(800, 600));
        chatFrame = new InternalChatFrame(mockParent);
    }

    @Test
    public void testAddUser() {
        chatFrame.addUser("User1");
        String[] userList = chatFrame.getUserlist();
        assertEquals(1, userList.length);
        assertEquals("User1", userList[0]);
    }

    @Test
    public void testDeleteUser() {
        chatFrame.addUser("User1");
        chatFrame.deleteUser("User1");
        String[] userList = chatFrame.getUserlist();
        assertEquals(0, userList.length);
    }

    @Test
    public void testGetUserlist() {
        chatFrame.addUser("User1");
        chatFrame.addUser("User2");
        String[] userList = chatFrame.getUserlist();
        assertEquals(2, userList.length);
        assertEquals("User1", userList[0]);
        assertEquals("User2", userList[1]);
    }

    @Test
    public void testAddText() throws BadLocationException {
        StyledDocument doc = chatFrame.showTxt.getStyledDocument();
        chatFrame.addText("User1: Hello World");
        assertEquals("User1: Hello World\n", doc.getText(0, doc.getLength()));
    }

    @Test
    public void testAddTextWithStyles() throws BadLocationException {
        StyledDocument doc = chatFrame.showTxt.getStyledDocument();
        chatFrame.addText("User1: *Hello* _World_");
        assertEquals("User1: Hello World\n", doc.getText(0, doc.getLength()));
        // Additional checks for styles can be added here
    }

    @Test
    public void testActionPerformedChooseColor() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);
        // Since JColorChooser is a dialog, we can't test the color change directly without user interaction
    }

    @Test
    public void testActionPerformedBgColor() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "bgColor");
        chatFrame.actionPerformed(event);
        // Since JColorChooser is a dialog, we can't test the color change directly without user interaction
    }

    @Test
    public void testActionPerformedWhisper() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);
        assertEquals("/w User1 ", chatFrame.txtInput.getText());
    }

    @Test
    public void testGetChatlog() {
        chatFrame.addText("User1: Hello World");
        assertEquals("User1: Hello World\n", chatFrame.getChatlog());
    }

    // Additional tests for mouse events and private methods can be added as needed
}
```

### Notes:
- **Mocking**: The `MainFrame` is mocked to provide necessary dependencies without needing the actual implementation.
- **Testing GUI Components**: Some GUI-related tests (like color chooser dialogs) are not directly testable without user interaction. These are noted in the comments.
- **Styled Document**: The `addText` method is tested for its ability to insert text into the document. Additional checks for styles can be added if needed.
- **Mouse Events**: The mouse event methods are not directly tested here, but they can be tested using more advanced GUI testing frameworks if needed.

This test suite provides a basic structure to test the `InternalChatFrame` class. Depending on the complexity and requirements, more tests can be added, especially for edge cases and error handling.