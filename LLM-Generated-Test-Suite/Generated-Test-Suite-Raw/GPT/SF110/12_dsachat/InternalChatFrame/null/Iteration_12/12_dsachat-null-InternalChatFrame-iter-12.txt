To create a comprehensive JUnit 4 test suite for the `InternalChatFrame` class, we need to test each method in the class. This includes testing the GUI components and their interactions, which can be challenging due to the graphical nature of the components. However, we can focus on testing the logic and behavior of the methods. Below is a test suite that covers the main functionalities of the `InternalChatFrame` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

public class InternalChatFrameTest {

    private InternalChatFrame chatFrame;
    private MainFrame mockParent;
    private StyledDocument mockDoc;

    @Before
    public void setUp() {
        mockParent = mock(MainFrame.class);
        when(mockParent.getSize()).thenReturn(new Dimension(800, 600));
        chatFrame = new InternalChatFrame(mockParent);
        mockDoc = mock(StyledDocument.class);
        chatFrame.doc = mockDoc;
    }

    @Test
    public void testAddText() throws BadLocationException {
        chatFrame.addText("User: Hello");
        verify(mockDoc, times(1)).insertString(anyInt(), eq("User: Hello"), any());
        verify(mockDoc, times(1)).insertString(anyInt(), eq("\n"), any());
    }

    @Test
    public void testAddUser() {
        chatFrame.addUser("NewUser");
        assertEquals("NewUser", chatFrame.getUserlist()[0]);
    }

    @Test
    public void testDeleteUser() {
        chatFrame.addUser("UserToDelete");
        chatFrame.deleteUser("UserToDelete");
        assertEquals(0, chatFrame.getUserlist().length);
    }

    @Test
    public void testGetUserlist() {
        chatFrame.addUser("User1");
        chatFrame.addUser("User2");
        String[] userList = chatFrame.getUserlist();
        assertEquals(2, userList.length);
        assertEquals("User1", userList[0]);
        assertEquals("User2", userList[1]);
    }

    @Test
    public void testActionPerformedChooseColor() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "chooseColor");
        chatFrame.actionPerformed(event);
        // Since JColorChooser.showDialog is a blocking call, we cannot test it directly without a mock or a spy.
    }

    @Test
    public void testActionPerformedWhisper() {
        chatFrame.addUser("User1");
        chatFrame.list.setSelectedIndex(0);
        ActionEvent event = new ActionEvent(chatFrame, ActionEvent.ACTION_PERFORMED, "whisper");
        chatFrame.actionPerformed(event);
        assertEquals("/w User1 ", chatFrame.txtInput.getText());
    }

    @Test
    public void testMousePressed() {
        MouseEvent event = mock(MouseEvent.class);
        when(event.isPopupTrigger()).thenReturn(true);
        when(event.getSource()).thenReturn(chatFrame.list);
        chatFrame.mousePressed(event);
        verify(event, times(1)).isPopupTrigger();
    }

    @Test
    public void testMouseReleased() {
        MouseEvent event = mock(MouseEvent.class);
        when(event.isPopupTrigger()).thenReturn(true);
        when(event.getSource()).thenReturn(chatFrame.showTxt);
        chatFrame.mouseReleased(event);
        verify(event, times(1)).isPopupTrigger();
    }

    @Test
    public void testGetChatlog() {
        chatFrame.showTxt.setText("Chat log text");
        assertEquals("Chat log text", chatFrame.getChatlog());
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock dependencies like `MainFrame` and `StyledDocument` to isolate the `InternalChatFrame` for testing.
- **Testing GUI Components**: Direct testing of GUI components like `JColorChooser` is not feasible in a unit test without a UI environment, so we focus on the logic that can be tested.
- **Action Events**: We simulate action events to test the `actionPerformed` method.
- **Mouse Events**: We simulate mouse events to test the popup menu logic.
- **Assertions**: We use assertions to verify the expected outcomes of method calls.

This test suite provides a basic structure for testing the `InternalChatFrame` class. Depending on the complexity and requirements, additional tests and more sophisticated mocking might be necessary.