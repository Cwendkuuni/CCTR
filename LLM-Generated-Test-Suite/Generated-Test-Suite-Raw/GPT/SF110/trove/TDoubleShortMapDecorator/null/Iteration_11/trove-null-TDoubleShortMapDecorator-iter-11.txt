To create a comprehensive JUnit 4 test suite for the `TDoubleShortMapDecorator` class, we need to mock the `TDoubleShortMap` interface since it is not provided. We'll use a mocking framework like Mockito to simulate the behavior of `TDoubleShortMap`. Below is the test suite:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import gnu.trove.decorator.TDoubleShortMapDecorator;
import gnu.trove.map.TDoubleShortMap;
import org.junit.Before;
import org.junit.Test;

import java.util.Map;
import java.util.Set;

public class TDoubleShortMapDecoratorTest {

    private TDoubleShortMap mockMap;
    private TDoubleShortMapDecorator decorator;

    @Before
    public void setUp() {
        mockMap = mock(TDoubleShortMap.class);
        decorator = new TDoubleShortMapDecorator(mockMap);
    }

    @Test
    public void testPut() {
        when(mockMap.put(1.0, (short) 2)).thenReturn((short) 0);
        Short result = decorator.put(1.0, (short) 2);
        assertNull(result);
        verify(mockMap).put(1.0, (short) 2);
    }

    @Test
    public void testGet() {
        when(mockMap.get(1.0)).thenReturn((short) 2);
        Short result = decorator.get(1.0);
        assertEquals((Short) (short) 2, result);
        verify(mockMap).get(1.0);
    }

    @Test
    public void testClear() {
        decorator.clear();
        verify(mockMap).clear();
    }

    @Test
    public void testRemove() {
        when(mockMap.remove(1.0)).thenReturn((short) 2);
        Short result = decorator.remove(1.0);
        assertEquals((Short) (short) 2, result);
        verify(mockMap).remove(1.0);
    }

    @Test
    public void testEntrySet() {
        Set<Map.Entry<Double, Short>> entrySet = decorator.entrySet();
        assertNotNull(entrySet);
    }

    @Test
    public void testContainsValue() {
        when(mockMap.containsValue((short) 2)).thenReturn(true);
        assertTrue(decorator.containsValue((short) 2));
        verify(mockMap).containsValue((short) 2);
    }

    @Test
    public void testContainsKey() {
        when(mockMap.containsKey(1.0)).thenReturn(true);
        assertTrue(decorator.containsKey(1.0));
        verify(mockMap).containsKey(1.0);
    }

    @Test
    public void testSize() {
        when(mockMap.size()).thenReturn(1);
        assertEquals(1, decorator.size());
        verify(mockMap).size();
    }

    @Test
    public void testIsEmpty() {
        when(mockMap.size()).thenReturn(0);
        assertTrue(decorator.isEmpty());
        verify(mockMap).size();
    }

    @Test
    public void testPutAll() {
        Map<Double, Short> map = mock(Map.class);
        Set<Map.Entry<Double, Short>> entrySet = mock(Set.class);
        when(map.entrySet()).thenReturn(entrySet);
        when(entrySet.iterator()).thenReturn(new Iterator<Map.Entry<Double, Short>>() {
            private boolean hasNext = true;

            @Override
            public boolean hasNext() {
                return hasNext;
            }

            @Override
            public Map.Entry<Double, Short> next() {
                hasNext = false;
                return new Map.Entry<Double, Short>() {
                    @Override
                    public Double getKey() {
                        return 1.0;
                    }

                    @Override
                    public Short getValue() {
                        return (short) 2;
                    }

                    @Override
                    public Short setValue(Short value) {
                        return null;
                    }
                };
            }
        });
        decorator.putAll(map);
        verify(mockMap).put(1.0, (short) 2);
    }
}
```

### Explanation:
- **Mockito** is used to create a mock of `TDoubleShortMap` to simulate its behavior.
- **JUnit 4** annotations like `@Test` and `@Before` are used to define test methods and setup methods.
- Each method in `TDoubleShortMapDecorator` is tested for expected behavior, including `put`, `get`, `clear`, `remove`, `entrySet`, `containsValue`, `containsKey`, `size`, `isEmpty`, and `putAll`.
- The `putAll` test uses a mock `Map` and `Set` to simulate the behavior of adding all entries to the decorator.
- The `entrySet` test checks that the method returns a non-null set, but does not delve into the specifics of the set's behavior, which would require more complex mocking or a real implementation of `TDoubleShortMap`.