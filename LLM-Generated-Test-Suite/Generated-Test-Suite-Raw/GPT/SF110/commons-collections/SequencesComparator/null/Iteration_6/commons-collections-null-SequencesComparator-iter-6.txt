To create a comprehensive JUnit 4 test suite for the `SequencesComparator` class, we need to test the main functionalities provided by the class, especially focusing on the `getScript` method, as it is the primary public method. We will also need to test the constructor to ensure it initializes the object correctly. Below is a test suite that covers these aspects:

```java
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.KeepCommand;
import org.apache.commons.collections4.sequence.InsertCommand;
import org.apache.commons.collections4.sequence.DeleteCommand;
import org.apache.commons.collections4.Equator;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class SequencesComparatorTest {

    private List<String> sequence1;
    private List<String> sequence2;
    private Equator<String> equator;

    @Before
    public void setUp() {
        sequence1 = Arrays.asList("a", "b", "c", "d");
        sequence2 = Arrays.asList("a", "b", "x", "c", "d");
        equator = (o1, o2) -> o1.equals(o2);
    }

    @Test
    public void testConstructorWithEquator() {
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence2, equator);
        assertNotNull(comparator);
    }

    @Test
    public void testConstructorWithoutEquator() {
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence2);
        assertNotNull(comparator);
    }

    @Test
    public void testGetScript() {
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence2, equator);
        EditScript<String> script = comparator.getScript();

        assertNotNull(script);
        assertEquals(5, script.getModifications());

        assertTrue(script.getLCSLength() == 4);

        assertTrue(script.getModifications() == 5);

        assertTrue(script.getModifications() == 5);
    }

    @Test
    public void testGetScriptWithIdenticalSequences() {
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence1, equator);
        EditScript<String> script = comparator.getScript();

        assertNotNull(script);
        assertEquals(0, script.getModifications());
        assertEquals(sequence1.size(), script.getLCSLength());
    }

    @Test
    public void testGetScriptWithEmptySequences() {
        SequencesComparator<String> comparator = new SequencesComparator<>(Arrays.asList(), Arrays.asList(), equator);
        EditScript<String> script = comparator.getScript();

        assertNotNull(script);
        assertEquals(0, script.getModifications());
        assertEquals(0, script.getLCSLength());
    }

    @Test
    public void testGetScriptWithOneEmptySequence() {
        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, Arrays.asList(), equator);
        EditScript<String> script = comparator.getScript();

        assertNotNull(script);
        assertEquals(sequence1.size(), script.getModifications());
        assertEquals(0, script.getLCSLength());
    }

    @Test
    public void testGetScriptWithDifferentSequences() {
        List<String> seq1 = Arrays.asList("a", "b", "c");
        List<String> seq2 = Arrays.asList("x", "y", "z");
        SequencesComparator<String> comparator = new SequencesComparator<>(seq1, seq2, equator);
        EditScript<String> script = comparator.getScript();

        assertNotNull(script);
        assertEquals(seq1.size() + seq2.size(), script.getModifications());
        assertEquals(0, script.getLCSLength());
    }
}
```

### Explanation:

1. **Setup Method**: The `setUp` method initializes the sequences and equator used in the tests.

2. **Constructor Tests**: We test both constructors (with and without an equator) to ensure they initialize the `SequencesComparator` object correctly.

3. **`getScript` Tests**: 
   - We test the `getScript` method with sequences that have some differences to ensure it calculates the correct number of modifications.
   - We test with identical sequences to ensure no modifications are detected.
   - We test with empty sequences to ensure it handles them correctly.
   - We test with one empty sequence to ensure it calculates the correct number of modifications.
   - We test with completely different sequences to ensure it calculates the correct number of modifications.

These tests aim to cover the main functionalities and edge cases for the `SequencesComparator` class.