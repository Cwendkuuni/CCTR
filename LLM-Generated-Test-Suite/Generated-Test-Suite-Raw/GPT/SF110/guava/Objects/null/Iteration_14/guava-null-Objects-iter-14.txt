Certainly! Below is a JUnit 4 test suite designed to comprehensively test the methods in the `Objects` class. This suite includes tests for the `equal`, `hashCode`, `toStringHelper`, and `firstNonNull` methods, as well as the `ToStringHelper` inner class.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;

public class ObjectsTest {

    @Test
    public void testEqual() {
        assertTrue(Objects.equal(null, null));
        assertFalse(Objects.equal(null, "test"));
        assertFalse(Objects.equal("test", null));
        assertTrue(Objects.equal("test", "test"));
        assertFalse(Objects.equal("test", "different"));
    }

    @Test
    public void testHashCode() {
        assertEquals(0, Objects.hashCode());
        assertEquals(Arrays.hashCode(new Object[]{null, "test", 123}), Objects.hashCode(null, "test", 123));
    }

    @Test
    public void testToStringHelper_Object() {
        Object obj = new Object();
        ToStringHelper helper = Objects.toStringHelper(obj);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith(obj.getClass().getSimpleName() + "{"));
    }

    @Test
    public void testToStringHelper_Class() {
        ToStringHelper helper = Objects.toStringHelper(String.class);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("String{"));
    }

    @Test
    public void testToStringHelper_String() {
        ToStringHelper helper = Objects.toStringHelper("CustomClass");
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("CustomClass{"));
    }

    @Test
    public void testFirstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
        assertEquals("second", Objects.firstNonNull(null, "second"));
    }

    @Test(expected = NullPointerException.class)
    public void testFirstNonNull_NullPointerException() {
        Objects.firstNonNull(null, null);
    }

    @Test
    public void testToStringHelper_add() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
                .add("field1", "value1")
                .add("field2", 123)
                .add("field3", true);
        String result = helper.toString();
        assertTrue(result.contains("field1=value1"));
        assertTrue(result.contains("field2=123"));
        assertTrue(result.contains("field3=true"));
    }

    @Test
    public void testToStringHelper_omitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
                .omitNullValues()
                .add("field1", null)
                .add("field2", "value2");
        String result = helper.toString();
        assertFalse(result.contains("field1=null"));
        assertTrue(result.contains("field2=value2"));
    }

    @Test
    public void testToStringHelper_addValue() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
                .addValue("value1")
                .addValue(123)
                .addValue(true);
        String result = helper.toString();
        assertTrue(result.contains("value1"));
        assertTrue(result.contains("123"));
        assertTrue(result.contains("true"));
    }
}
```

This test suite covers the following:

- `equal`: Tests for various combinations of null and non-null objects.
- `hashCode`: Tests with no arguments and with a mix of null and non-null objects.
- `toStringHelper`: Tests for object, class, and string inputs.
- `firstNonNull`: Tests for non-null first argument, non-null second argument, and exception when both are null.
- `ToStringHelper`: Tests for adding fields, omitting null values, and adding values without names.

Make sure to have the necessary dependencies and imports for JUnit 4 and any other required libraries in your project setup.