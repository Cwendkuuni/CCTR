Certainly! Below is a JUnit 4 test suite that comprehensively tests the methods in the `Objects` class. The test suite covers various scenarios for each method, including edge cases.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;

public class ObjectsTest {

    @Test
    public void testEqual_bothNull() {
        assertTrue(Objects.equal(null, null));
    }

    @Test
    public void testEqual_firstNull() {
        assertFalse(Objects.equal(null, "test"));
    }

    @Test
    public void testEqual_secondNull() {
        assertFalse(Objects.equal("test", null));
    }

    @Test
    public void testEqual_bothEqual() {
        assertTrue(Objects.equal("test", "test"));
    }

    @Test
    public void testEqual_notEqual() {
        assertFalse(Objects.equal("test1", "test2"));
    }

    @Test
    public void testHashCode_noArgs() {
        assertEquals(0, Objects.hashCode());
    }

    @Test
    public void testHashCode_singleArg() {
        assertEquals("test".hashCode(), Objects.hashCode("test"));
    }

    @Test
    public void testHashCode_multipleArgs() {
        assertEquals(Arrays.hashCode(new Object[]{"test1", "test2"}), Objects.hashCode("test1", "test2"));
    }

    @Test
    public void testToStringHelper_object() {
        ToStringHelper helper = Objects.toStringHelper(new Object());
        assertNotNull(helper);
    }

    @Test
    public void testToStringHelper_class() {
        ToStringHelper helper = Objects.toStringHelper(Objects.class);
        assertNotNull(helper);
    }

    @Test
    public void testToStringHelper_className() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName");
        assertNotNull(helper);
    }

    @Test
    public void testFirstNonNull_firstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
    }

    @Test
    public void testFirstNonNull_firstNull() {
        assertEquals("second", Objects.firstNonNull(null, "second"));
    }

    @Test(expected = NullPointerException.class)
    public void testFirstNonNull_bothNull() {
        Objects.firstNonNull(null, null);
    }

    @Test
    public void testToStringHelper_add() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName")
                .add("field1", "value1")
                .add("field2", 123);
        assertEquals("TestClassName{field1=value1, field2=123}", helper.toString());
    }

    @Test
    public void testToStringHelper_addValue() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName")
                .addValue("value1")
                .addValue(123);
        assertEquals("TestClassName{value1, 123}", helper.toString());
    }

    @Test
    public void testToStringHelper_omitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName")
                .omitNullValues()
                .add("field1", null)
                .add("field2", "value2");
        assertEquals("TestClassName{field2=value2}", helper.toString());
    }
}
```

This test suite covers:

- The `equal` method with various combinations of null and non-null inputs.
- The `hashCode` method with different numbers of arguments.
- The `toStringHelper` method with different types of inputs (object, class, and class name).
- The `firstNonNull` method with different combinations of null and non-null inputs.
- The `ToStringHelper` class's methods, including `add`, `addValue`, and `omitNullValues`.

Each test case is designed to verify the expected behavior of the methods under different scenarios.