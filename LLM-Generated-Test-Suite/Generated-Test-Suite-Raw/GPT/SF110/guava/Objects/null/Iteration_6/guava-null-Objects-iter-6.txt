Certainly! Below is a JUnit 4 test suite that comprehensively tests the methods in the `Objects` class. The test suite covers the `equal`, `hashCode`, `toStringHelper`, and `firstNonNull` methods, as well as the `ToStringHelper` class and its methods.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;

public class ObjectsTest {

    @Test
    public void testEqual() {
        assertTrue(Objects.equal(null, null));
        assertFalse(Objects.equal(null, "test"));
        assertFalse(Objects.equal("test", null));
        assertTrue(Objects.equal("test", "test"));
        assertFalse(Objects.equal("test", "different"));
    }

    @Test
    public void testHashCode() {
        assertEquals(0, Objects.hashCode());
        assertEquals(Arrays.hashCode(new Object[]{null}), Objects.hashCode((Object) null));
        assertEquals(Arrays.hashCode(new Object[]{"test"}), Objects.hashCode("test"));
        assertEquals(Arrays.hashCode(new Object[]{"test", 123}), Objects.hashCode("test", 123));
    }

    @Test
    public void testToStringHelper_Object() {
        ToStringHelper helper = Objects.toStringHelper(new Object());
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("Object{"));
    }

    @Test
    public void testToStringHelper_Class() {
        ToStringHelper helper = Objects.toStringHelper(Objects.class);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("Objects{"));
    }

    @Test
    public void testToStringHelper_String() {
        ToStringHelper helper = Objects.toStringHelper("TestClass");
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("TestClass{"));
    }

    @Test
    public void testFirstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
        assertEquals("second", Objects.firstNonNull(null, "second"));
        try {
            Objects.firstNonNull(null, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException expected) {
            // Expected exception
        }
    }

    @Test
    public void testToStringHelperAddMethods() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
            .add("name", "value")
            .add("boolean", true)
            .add("char", 'c')
            .add("double", 1.0)
            .add("float", 1.0f)
            .add("int", 1)
            .add("long", 1L);

        String result = helper.toString();
        assertTrue(result.contains("name=value"));
        assertTrue(result.contains("boolean=true"));
        assertTrue(result.contains("char=c"));
        assertTrue(result.contains("double=1.0"));
        assertTrue(result.contains("float=1.0"));
        assertTrue(result.contains("int=1"));
        assertTrue(result.contains("long=1"));
    }

    @Test
    public void testToStringHelperOmitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
            .omitNullValues()
            .add("name", null)
            .add("value", "notNull");

        String result = helper.toString();
        assertFalse(result.contains("name=null"));
        assertTrue(result.contains("value=notNull"));
    }

    @Test
    public void testToStringHelperAddValueMethods() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
            .addValue("value")
            .addValue(true)
            .addValue('c')
            .addValue(1.0)
            .addValue(1.0f)
            .addValue(1)
            .addValue(1L);

        String result = helper.toString();
        assertTrue(result.contains("value"));
        assertTrue(result.contains("true"));
        assertTrue(result.contains("c"));
        assertTrue(result.contains("1.0"));
        assertTrue(result.contains("1"));
    }
}
```

This test suite uses JUnit 4 annotations and assertions to verify the behavior of each method in the `Objects` class. It includes tests for both the static methods and the `ToStringHelper` inner class, ensuring comprehensive coverage.