Certainly! Below is a JUnit 4 test suite designed to comprehensively test the methods in the `Objects` class. This suite includes tests for the `equal`, `hashCode`, `toStringHelper`, and `firstNonNull` methods, as well as the `ToStringHelper` inner class.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;

public class ObjectsTest {

    @Test
    public void testEqual() {
        assertTrue(Objects.equal(null, null));
        assertFalse(Objects.equal(null, "test"));
        assertFalse(Objects.equal("test", null));
        assertTrue(Objects.equal("test", "test"));
        assertFalse(Objects.equal("test", "different"));
    }

    @Test
    public void testHashCode() {
        assertEquals(0, Objects.hashCode((Object[]) null));
        assertEquals(0, Objects.hashCode());
        assertEquals("test".hashCode(), Objects.hashCode("test"));
        assertEquals(Arrays.hashCode(new Object[]{"test", 123}), Objects.hashCode("test", 123));
    }

    @Test
    public void testToStringHelperWithObject() {
        ToStringHelper helper = Objects.toStringHelper(new String("test"));
        assertNotNull(helper);
        assertEquals("String{}", helper.toString());
    }

    @Test
    public void testToStringHelperWithClass() {
        ToStringHelper helper = Objects.toStringHelper(String.class);
        assertNotNull(helper);
        assertEquals("String{}", helper.toString());
    }

    @Test
    public void testToStringHelperWithClassName() {
        ToStringHelper helper = Objects.toStringHelper("CustomClass");
        assertNotNull(helper);
        assertEquals("CustomClass{}", helper.toString());
    }

    @Test
    public void testFirstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
        assertEquals("second", Objects.firstNonNull(null, "second"));
        try {
            Objects.firstNonNull(null, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException expected) {
            // Expected exception
        }
    }

    @Test
    public void testToStringHelperAddMethods() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
            .add("int", 1)
            .add("boolean", true)
            .add("char", 'c')
            .add("double", 1.0)
            .add("float", 1.0f)
            .add("long", 1L)
            .add("string", "value")
            .add("nullValue", null);

        String expected = "TestClass{int=1, boolean=true, char=c, double=1.0, float=1.0, long=1, string=value, nullValue=null}";
        assertEquals(expected, helper.toString());
    }

    @Test
    public void testToStringHelperOmitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
            .omitNullValues()
            .add("int", 1)
            .add("nullValue", null);

        String expected = "TestClass{int=1}";
        assertEquals(expected, helper.toString());
    }

    @Test
    public void testToStringHelperAddValueMethods() {
        ToStringHelper helper = Objects.toStringHelper("TestClass")
            .addValue(1)
            .addValue(true)
            .addValue('c')
            .addValue(1.0)
            .addValue(1.0f)
            .addValue(1L)
            .addValue("value")
            .addValue(null);

        String expected = "TestClass{1, true, c, 1.0, 1.0, 1, value, null}";
        assertEquals(expected, helper.toString());
    }
}
```

This test suite covers the following:

- `equal`: Tests for various combinations of null and non-null objects.
- `hashCode`: Tests for null, empty, and populated arrays.
- `toStringHelper`: Tests for creating `ToStringHelper` with an object, class, and class name.
- `firstNonNull`: Tests for non-null and null values, including expected exception for both nulls.
- `ToStringHelper` methods: Tests for adding named and unnamed values, and omitting null values.

Make sure to include the necessary imports and dependencies for JUnit 4 and any other required libraries when running these tests.