Certainly! Below is a JUnit 4 test suite that comprehensively tests the methods in the `Objects` class. The test suite covers the `equal`, `hashCode`, `toStringHelper`, and `firstNonNull` methods, as well as the `ToStringHelper` inner class methods.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;

public class ObjectsTest {

    @Test
    public void testEqual() {
        assertTrue(Objects.equal(null, null));
        assertFalse(Objects.equal(null, "test"));
        assertFalse(Objects.equal("test", null));
        assertTrue(Objects.equal("test", "test"));
        assertFalse(Objects.equal("test", "different"));
    }

    @Test
    public void testHashCode() {
        assertEquals(0, Objects.hashCode());
        assertEquals(Arrays.hashCode(new Object[]{null, "test", 123}), Objects.hashCode(null, "test", 123));
    }

    @Test
    public void testToStringHelperWithObject() {
        Object obj = new Object();
        ToStringHelper helper = Objects.toStringHelper(obj);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith(obj.getClass().getSimpleName() + "{"));
    }

    @Test
    public void testToStringHelperWithClass() {
        ToStringHelper helper = Objects.toStringHelper(Objects.class);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith(Objects.class.getSimpleName() + "{"));
    }

    @Test
    public void testToStringHelperWithString() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName");
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("TestClassName{"));
    }

    @Test
    public void testFirstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
        assertEquals("second", Objects.firstNonNull(null, "second"));
    }

    @Test(expected = NullPointerException.class)
    public void testFirstNonNullThrowsException() {
        Objects.firstNonNull(null, null);
    }

    @Test
    public void testToStringHelperAddMethods() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName")
                .add("name", "value")
                .add("boolean", true)
                .add("char", 'c')
                .add("double", 1.23)
                .add("float", 4.56f)
                .add("int", 789)
                .add("long", 101112L)
                .omitNullValues();

        String result = helper.toString();
        assertTrue(result.contains("name=value"));
        assertTrue(result.contains("boolean=true"));
        assertTrue(result.contains("char=c"));
        assertTrue(result.contains("double=1.23"));
        assertTrue(result.contains("float=4.56"));
        assertTrue(result.contains("int=789"));
        assertTrue(result.contains("long=101112"));
    }

    @Test
    public void testToStringHelperOmitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName")
                .add("name", null)
                .omitNullValues();

        String result = helper.toString();
        assertFalse(result.contains("name=null"));
    }

    @Test
    public void testToStringHelperAddValueMethods() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName")
                .addValue("value")
                .addValue(true)
                .addValue('c')
                .addValue(1.23)
                .addValue(4.56f)
                .addValue(789)
                .addValue(101112L);

        String result = helper.toString();
        assertTrue(result.contains("value"));
        assertTrue(result.contains("true"));
        assertTrue(result.contains("c"));
        assertTrue(result.contains("1.23"));
        assertTrue(result.contains("4.56"));
        assertTrue(result.contains("789"));
        assertTrue(result.contains("101112"));
    }
}
```

This test suite uses JUnit 4 to test the functionality of the `Objects` class and its inner `ToStringHelper` class. It covers various scenarios, including null values, different data types, and the behavior of deprecated methods.