Certainly! Below is a JUnit 4 test suite designed to comprehensively test the methods in the `Objects` class you provided. This test suite covers the `equal`, `hashCode`, `toStringHelper`, and `firstNonNull` methods, as well as the `ToStringHelper` class and its methods.

```java
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;
import org.junit.Test;
import static org.junit.Assert.*;

public class ObjectsTest {

    @Test
    public void testEqual() {
        assertTrue(Objects.equal(null, null));
        assertFalse(Objects.equal(null, "test"));
        assertFalse(Objects.equal("test", null));
        assertTrue(Objects.equal("test", "test"));
        assertFalse(Objects.equal("test", "different"));
    }

    @Test
    public void testHashCode() {
        assertEquals(0, Objects.hashCode());
        assertEquals(Arrays.hashCode(new Object[]{null, "test", 123}), Objects.hashCode(null, "test", 123));
        assertEquals(Arrays.hashCode(new Object[]{"test", "test"}), Objects.hashCode("test", "test"));
    }

    @Test
    public void testToStringHelper_Object() {
        Object obj = new Object();
        ToStringHelper helper = Objects.toStringHelper(obj);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("Object{"));
    }

    @Test
    public void testToStringHelper_Class() {
        ToStringHelper helper = Objects.toStringHelper(Objects.class);
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("Objects{"));
    }

    @Test
    public void testToStringHelper_String() {
        ToStringHelper helper = Objects.toStringHelper("TestClass");
        assertNotNull(helper);
        assertTrue(helper.toString().startsWith("TestClass{"));
    }

    @Test
    public void testFirstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
        assertEquals("second", Objects.firstNonNull(null, "second"));
        try {
            Objects.firstNonNull(null, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException expected) {
            // Expected exception
        }
    }

    @Test
    public void testToStringHelperAddMethods() {
        ToStringHelper helper = Objects.toStringHelper("Test")
                .add("name", "value")
                .add("boolean", true)
                .add("char", 'c')
                .add("double", 1.0)
                .add("float", 1.0f)
                .add("int", 1)
                .add("long", 1L)
                .addValue("value")
                .addValue(true)
                .addValue('c')
                .addValue(1.0)
                .addValue(1.0f)
                .addValue(1)
                .addValue(1L);

        String result = helper.toString();
        assertTrue(result.contains("name=value"));
        assertTrue(result.contains("boolean=true"));
        assertTrue(result.contains("char=c"));
        assertTrue(result.contains("double=1.0"));
        assertTrue(result.contains("float=1.0"));
        assertTrue(result.contains("int=1"));
        assertTrue(result.contains("long=1"));
    }

    @Test
    public void testToStringHelperOmitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("Test")
                .omitNullValues()
                .add("name", null)
                .add("value", "value");

        String result = helper.toString();
        assertFalse(result.contains("name=null"));
        assertTrue(result.contains("value=value"));
    }
}
```

This test suite includes:

- Tests for the `equal` method with various combinations of null and non-null values.
- Tests for the `hashCode` method with different object arrays.
- Tests for the `toStringHelper` method with an object, class, and string.
- Tests for the `firstNonNull` method with different scenarios, including an expected exception.
- Tests for the `ToStringHelper` class, including adding values and omitting null values.

Make sure to have the necessary dependencies and imports for JUnit 4 in your project to run these tests successfully.