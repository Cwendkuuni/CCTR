Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `Objects` class from the provided source code. The test suite covers all public methods, including the deprecated ones, and tests various scenarios to ensure correctness.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;

public class ObjectsTest {

    @Test
    public void testEqual_bothNull() {
        assertTrue(Objects.equal(null, null));
    }

    @Test
    public void testEqual_firstNull() {
        assertFalse(Objects.equal(null, "test"));
    }

    @Test
    public void testEqual_secondNull() {
        assertFalse(Objects.equal("test", null));
    }

    @Test
    public void testEqual_bothEqual() {
        assertTrue(Objects.equal("test", "test"));
    }

    @Test
    public void testEqual_notEqual() {
        assertFalse(Objects.equal("test", "different"));
    }

    @Test
    public void testHashCode_noArgs() {
        assertEquals(0, Objects.hashCode());
    }

    @Test
    public void testHashCode_singleArg() {
        assertEquals("test".hashCode(), Objects.hashCode("test"));
    }

    @Test
    public void testHashCode_multipleArgs() {
        assertEquals(Arrays.hashCode(new Object[]{"test", 123, true}), Objects.hashCode("test", 123, true));
    }

    @Test
    public void testToStringHelper_object() {
        ToStringHelper helper = Objects.toStringHelper(new Object());
        assertNotNull(helper);
    }

    @Test
    public void testToStringHelper_class() {
        ToStringHelper helper = Objects.toStringHelper(Object.class);
        assertNotNull(helper);
    }

    @Test
    public void testToStringHelper_className() {
        ToStringHelper helper = Objects.toStringHelper("TestClassName");
        assertNotNull(helper);
    }

    @Test
    public void testFirstNonNull_firstNonNull() {
        assertEquals("first", Objects.firstNonNull("first", "second"));
    }

    @Test
    public void testFirstNonNull_firstNull() {
        assertEquals("second", Objects.firstNonNull(null, "second"));
    }

    @Test(expected = NullPointerException.class)
    public void testFirstNonNull_bothNull() {
        Objects.firstNonNull(null, null);
    }

    @Test
    public void testToStringHelper_add() {
        ToStringHelper helper = Objects.toStringHelper("Test")
            .add("name", "value")
            .add("number", 123);
        assertEquals("Test{name=value, number=123}", helper.toString());
    }

    @Test
    public void testToStringHelper_addValue() {
        ToStringHelper helper = Objects.toStringHelper("Test")
            .addValue("value")
            .addValue(123);
        assertEquals("Test{value, 123}", helper.toString());
    }

    @Test
    public void testToStringHelper_omitNullValues() {
        ToStringHelper helper = Objects.toStringHelper("Test")
            .omitNullValues()
            .add("name", null)
            .add("number", 123);
        assertEquals("Test{number=123}", helper.toString());
    }
}
```

### Explanation:
- **`testEqual_*` Methods**: These tests cover different scenarios for the `equal` method, including both arguments being null, one being null, and both being equal or not.
- **`testHashCode_*` Methods**: These tests cover the `hashCode` method with no arguments, a single argument, and multiple arguments.
- **`testToStringHelper_*` Methods**: These tests cover the deprecated `toStringHelper` methods, ensuring they return a non-null `ToStringHelper` object.
- **`testFirstNonNull_*` Methods**: These tests cover the `firstNonNull` method, including cases where the first argument is non-null, the first is null, and both are null (expecting a `NullPointerException`).
- **`testToStringHelper_add` and `testToStringHelper_addValue`**: These tests verify the `add` and `addValue` methods of the `ToStringHelper` class.
- **`testToStringHelper_omitNullValues`**: This test checks the behavior of `omitNullValues` in the `ToStringHelper` class.

This test suite should provide comprehensive coverage for the `Objects` class as defined in the provided source code.