Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `Splitter` class. This suite includes tests for various methods and scenarios, including edge cases.

```java
import com.google.common.base.Splitter;
import com.google.common.base.CharMatcher;
import org.junit.Test;
import org.junit.Before;
import org.junit.Rule;
import org.junit.rules.ExpectedException;

import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import static org.junit.Assert.*;

public class SplitterTest {

    private Splitter splitter;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Before
    public void setUp() {
        // Default setup for each test
        splitter = Splitter.on(',');
    }

    @Test
    public void testOnChar() {
        splitter = Splitter.on(',');
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testOnCharMatcher() {
        splitter = Splitter.on(CharMatcher.is(','));
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testOnString() {
        splitter = Splitter.on(",");
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testOnPattern() {
        splitter = Splitter.on(Pattern.compile(","));
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testOnPatternString() {
        splitter = Splitter.onPattern(",");
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testFixedLength() {
        splitter = Splitter.fixedLength(2);
        List<String> result = splitter.splitToList("abcdef");
        assertEquals(3, result.size());
        assertEquals("ab", result.get(0));
        assertEquals("cd", result.get(1));
        assertEquals("ef", result.get(2));
    }

    @Test
    public void testOmitEmptyStrings() {
        splitter = Splitter.on(',').omitEmptyStrings();
        List<String> result = splitter.splitToList("a,,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testLimit() {
        splitter = Splitter.on(',').limit(2);
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(2, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b,c", result.get(1));
    }

    @Test
    public void testTrimResults() {
        splitter = Splitter.on(',').trimResults();
        List<String> result = splitter.splitToList(" a , b , c ");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testTrimResultsWithCharMatcher() {
        splitter = Splitter.on(',').trimResults(CharMatcher.is(' '));
        List<String> result = splitter.splitToList(" a , b , c ");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testSplitToList() {
        List<String> result = splitter.splitToList("a,b,c");
        assertEquals(3, result.size());
        assertEquals("a", result.get(0));
        assertEquals("b", result.get(1));
        assertEquals("c", result.get(2));
    }

    @Test
    public void testWithKeyValueSeparatorChar() {
        Splitter.MapSplitter mapSplitter = splitter.withKeyValueSeparator('=');
        Map<String, String> result = mapSplitter.split("key1=value1,key2=value2");
        assertEquals(2, result.size());
        assertEquals("value1", result.get("key1"));
        assertEquals("value2", result.get("key2"));
    }

    @Test
    public void testWithKeyValueSeparatorString() {
        Splitter.MapSplitter mapSplitter = splitter.withKeyValueSeparator("=");
        Map<String, String> result = mapSplitter.split("key1=value1,key2=value2");
        assertEquals(2, result.size());
        assertEquals("value1", result.get("key1"));
        assertEquals("value2", result.get("key2"));
    }

    @Test
    public void testWithKeyValueSeparatorSplitter() {
        Splitter keyValueSplitter = Splitter.on('=');
        Splitter.MapSplitter mapSplitter = splitter.withKeyValueSeparator(keyValueSplitter);
        Map<String, String> result = mapSplitter.split("key1=value1,key2=value2");
        assertEquals(2, result.size());
        assertEquals("value1", result.get("key1"));
        assertEquals("value2", result.get("key2"));
    }

    @Test
    public void testEmptyStringSeparatorThrowsException() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("The separator may not be the empty string.");
        Splitter.on("");
    }

    @Test
    public void testPatternMatchingEmptyStringThrowsException() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("The pattern may not match the empty string");
        Splitter.on(Pattern.compile(".*"));
    }

    @Test
    public void testFixedLengthLessThanOneThrowsException() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("The length may not be less than 1");
        Splitter.fixedLength(0);
    }

    @Test
    public void testLimitLessThanOneThrowsException() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("must be greater than zero");
        splitter.limit(0);
    }

    @Test
    public void testDuplicateKeyThrowsException() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Duplicate key [key1] found.");
        Splitter.MapSplitter mapSplitter = splitter.withKeyValueSeparator('=');
        mapSplitter.split("key1=value1,key1=value2");
    }
}
```

This test suite covers a variety of scenarios, including normal usage, edge cases, and exception handling. It uses JUnit 4's `@Test` annotation to define test methods and `@Rule` with `ExpectedException` to test for expected exceptions.