Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `Joiner` class and its nested `MapJoiner` class. This test suite covers various scenarios, including handling of null values, different separators, and edge cases.

```java
import com.google.common.base.Joiner;
import com.google.common.base.Joiner.MapJoiner;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class JoinerTest {

    private Joiner joiner;
    private Joiner joinerWithNulls;
    private Joiner joinerSkippingNulls;
    private MapJoiner mapJoiner;

    @Before
    public void setUp() {
        joiner = Joiner.on(", ");
        joinerWithNulls = joiner.useForNull("null");
        joinerSkippingNulls = joiner.skipNulls();
        mapJoiner = joiner.withKeyValueSeparator("=");
    }

    @Test
    public void testJoinIterable() {
        List<String> parts = Arrays.asList("a", "b", "c");
        assertEquals("a, b, c", joiner.join(parts));
    }

    @Test
    public void testJoinIterator() {
        List<String> parts = Arrays.asList("a", "b", "c");
        assertEquals("a, b, c", joiner.join(parts.iterator()));
    }

    @Test
    public void testJoinArray() {
        String[] parts = {"a", "b", "c"};
        assertEquals("a, b, c", joiner.join(parts));
    }

    @Test
    public void testJoinVarargs() {
        assertEquals("a, b, c", joiner.join("a", "b", "c"));
    }

    @Test
    public void testJoinWithNulls() {
        List<String> parts = Arrays.asList("a", null, "c");
        assertEquals("a, null, c", joinerWithNulls.join(parts));
    }

    @Test
    public void testJoinSkippingNulls() {
        List<String> parts = Arrays.asList("a", null, "c");
        assertEquals("a, c", joinerSkippingNulls.join(parts));
    }

    @Test
    public void testAppendToAppendable() throws IOException {
        List<String> parts = Arrays.asList("a", "b", "c");
        StringWriter writer = new StringWriter();
        joiner.appendTo(writer, parts);
        assertEquals("a, b, c", writer.toString());
    }

    @Test
    public void testAppendToStringBuilder() {
        List<String> parts = Arrays.asList("a", "b", "c");
        StringBuilder builder = new StringBuilder();
        joiner.appendTo(builder, parts);
        assertEquals("a, b, c", builder.toString());
    }

    @Test
    public void testMapJoiner() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        assertEquals("key1=value1, key2=value2", mapJoiner.join(map));
    }

    @Test
    public void testMapJoinerWithNulls() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", null);
        map.put("key2", "value2");
        MapJoiner mapJoinerWithNulls = mapJoiner.useForNull("null");
        assertEquals("key1=null, key2=value2", mapJoinerWithNulls.join(map));
    }

    @Test
    public void testMapJoinerAppendTo() throws IOException {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        StringWriter writer = new StringWriter();
        mapJoiner.appendTo(writer, map);
        assertEquals("key1=value1, key2=value2", writer.toString());
    }

    @Test
    public void testUseForNullThrowsException() {
        try {
            joinerSkippingNulls.useForNull("null");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected exception
        }
    }

    @Test
    public void testSkipNullsThrowsException() {
        try {
            joinerWithNulls.skipNulls();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected exception
        }
    }

    @Test
    public void testMapJoinerSkipNullsThrowsException() {
        try {
            mapJoiner.skipNulls();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected exception
        }
    }
}
```

This test suite covers the following scenarios:
- Basic joining of iterables, arrays, and varargs.
- Handling of null values with `useForNull` and `skipNulls`.
- Appending to `Appendable` and `StringBuilder`.
- Joining maps with `MapJoiner`.
- Exception handling for unsupported operations.

Make sure to include the necessary dependencies for JUnit 4 and any other required libraries in your project setup to run these tests.