Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `SmallCharMatcher` class. This suite includes tests for each method in the class, ensuring that the functionality is thoroughly validated.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.BitSet;

public class SmallCharMatcherTest {

    private SmallCharMatcher matcher;
    private BitSet bitSet;

    @Before
    public void setUp() {
        bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        bitSet.set('c');
        matcher = SmallCharMatcher.from(bitSet, "test description");
    }

    @Test
    public void testMatches() {
        assertTrue(matcher.matches('a'));
        assertTrue(matcher.matches('b'));
        assertTrue(matcher.matches('c'));
        assertFalse(matcher.matches('d'));
        assertFalse(matcher.matches('\0'));
    }

    @Test
    public void testMatchesWithZero() {
        BitSet zeroBitSet = new BitSet();
        zeroBitSet.set(0);
        SmallCharMatcher zeroMatcher = SmallCharMatcher.from(zeroBitSet, "zero test");
        assertTrue(zeroMatcher.matches('\0'));
    }

    @Test
    public void testSmear() {
        int hashCode = 12345;
        int smeared = SmallCharMatcher.smear(hashCode);
        assertNotEquals(hashCode, smeared);
    }

    @Test
    public void testChooseTableSize() {
        assertEquals(2, SmallCharMatcher.chooseTableSize(1));
        assertEquals(4, SmallCharMatcher.chooseTableSize(2));
        assertEquals(8, SmallCharMatcher.chooseTableSize(3));
        assertEquals(8, SmallCharMatcher.chooseTableSize(4));
    }

    @Test
    public void testSetBits() {
        BitSet testBitSet = new BitSet();
        matcher.setBits(testBitSet);
        assertTrue(testBitSet.get('a'));
        assertTrue(testBitSet.get('b'));
        assertTrue(testBitSet.get('c'));
        assertFalse(testBitSet.get('d'));
    }

    @Test
    public void testFrom() {
        SmallCharMatcher newMatcher = SmallCharMatcher.from(bitSet, "new matcher");
        assertTrue(newMatcher.matches('a'));
        assertTrue(newMatcher.matches('b'));
        assertTrue(newMatcher.matches('c'));
        assertFalse(newMatcher.matches('d'));
    }
}
```

### Explanation:
- **setUp Method**: Initializes a `SmallCharMatcher` instance and a `BitSet` with characters 'a', 'b', and 'c' before each test.
- **testMatches**: Verifies that the `matches` method correctly identifies characters present in the matcher.
- **testMatchesWithZero**: Tests the `matches` method when the matcher is initialized with a BitSet containing zero.
- **testSmear**: Ensures that the `smear` method produces a different hash code.
- **testChooseTableSize**: Validates the `chooseTableSize` method for various set sizes.
- **testSetBits**: Checks that the `setBits` method correctly sets bits in a BitSet.
- **testFrom**: Confirms that the `from` method creates a matcher that behaves as expected.

This test suite should provide comprehensive coverage for the `SmallCharMatcher` class.