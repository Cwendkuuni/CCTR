Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `SmallCharMatcher` class. This suite includes tests for each method, ensuring that the class behaves as expected under various conditions.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.BitSet;

public class SmallCharMatcherTest {

    private SmallCharMatcher matcher;
    private BitSet bitSet;
    private String description = "Test Matcher";

    @Before
    public void setUp() {
        bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        bitSet.set('c');
        matcher = SmallCharMatcher.from(bitSet, description);
    }

    @Test
    public void testMatches() {
        assertTrue(matcher.matches('a'));
        assertTrue(matcher.matches('b'));
        assertTrue(matcher.matches('c'));
        assertFalse(matcher.matches('d'));
        assertFalse(matcher.matches('\0'));
    }

    @Test
    public void testMatchesWithZero() {
        bitSet.set(0);
        matcher = SmallCharMatcher.from(bitSet, description);
        assertTrue(matcher.matches('\0'));
    }

    @Test
    public void testSmear() {
        int hashCode = 12345;
        int smeared = SmallCharMatcher.smear(hashCode);
        assertNotEquals(hashCode, smeared);
    }

    @Test
    public void testChooseTableSize() {
        assertEquals(2, SmallCharMatcher.chooseTableSize(1));
        assertEquals(4, SmallCharMatcher.chooseTableSize(2));
        assertEquals(8, SmallCharMatcher.chooseTableSize(3));
        assertEquals(8, SmallCharMatcher.chooseTableSize(4));
    }

    @Test
    public void testSetBits() {
        BitSet testBitSet = new BitSet();
        matcher.setBits(testBitSet);
        assertTrue(testBitSet.get('a'));
        assertTrue(testBitSet.get('b'));
        assertTrue(testBitSet.get('c'));
        assertFalse(testBitSet.get('d'));
    }

    @Test
    public void testSetBitsWithZero() {
        bitSet.set(0);
        matcher = SmallCharMatcher.from(bitSet, description);
        BitSet testBitSet = new BitSet();
        matcher.setBits(testBitSet);
        assertTrue(testBitSet.get(0));
    }

    @Test
    public void testFrom() {
        SmallCharMatcher newMatcher = SmallCharMatcher.from(bitSet, description);
        assertTrue(newMatcher.matches('a'));
        assertTrue(newMatcher.matches('b'));
        assertTrue(newMatcher.matches('c'));
        assertFalse(newMatcher.matches('d'));
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `BitSet` and a `SmallCharMatcher` instance before each test.
- **Test Methods**:
  - `testMatches`: Verifies that the `matches` method correctly identifies characters present in the matcher.
  - `testMatchesWithZero`: Tests the behavior when the matcher includes the zero character.
  - `testSmear`: Ensures that the `smear` function modifies the hash code.
  - `testChooseTableSize`: Checks that the `chooseTableSize` method returns the correct table size for various set sizes.
  - `testSetBits`: Confirms that the `setBits` method correctly sets bits in a `BitSet`.
  - `testSetBitsWithZero`: Verifies `setBits` behavior when zero is included.
  - `testFrom`: Tests the `from` method to ensure it creates a matcher that behaves as expected.

This suite should provide comprehensive coverage of the `SmallCharMatcher` class's functionality.