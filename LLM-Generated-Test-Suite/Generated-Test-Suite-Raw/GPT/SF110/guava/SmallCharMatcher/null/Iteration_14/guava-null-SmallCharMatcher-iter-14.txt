Certainly! Below is a JUnit 4 test suite for the `SmallCharMatcher` class. This suite aims to comprehensively test the methods within the class.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.BitSet;

public class SmallCharMatcherTest {

    private SmallCharMatcher matcher;
    private BitSet bitSet;
    private String description = "test description";

    @Before
    public void setUp() {
        bitSet = new BitSet();
        bitSet.set('a');
        bitSet.set('b');
        bitSet.set('c');
        matcher = SmallCharMatcher.from(bitSet, description);
    }

    @Test
    public void testMatches() {
        assertTrue(matcher.matches('a'));
        assertTrue(matcher.matches('b'));
        assertTrue(matcher.matches('c'));
        assertFalse(matcher.matches('d'));
        assertFalse(matcher.matches('\0'));
    }

    @Test
    public void testMatchesWithZero() {
        bitSet.set(0);
        matcher = SmallCharMatcher.from(bitSet, description);
        assertTrue(matcher.matches('\0'));
    }

    @Test
    public void testSmear() {
        int hashCode = 12345;
        int smeared = SmallCharMatcher.smear(hashCode);
        assertNotEquals(hashCode, smeared);
    }

    @Test
    public void testChooseTableSize() {
        assertEquals(2, SmallCharMatcher.chooseTableSize(1));
        assertEquals(4, SmallCharMatcher.chooseTableSize(2));
        assertEquals(8, SmallCharMatcher.chooseTableSize(4));
        assertEquals(16, SmallCharMatcher.chooseTableSize(8));
    }

    @Test
    public void testSetBits() {
        BitSet testBitSet = new BitSet();
        matcher.setBits(testBitSet);
        assertTrue(testBitSet.get('a'));
        assertTrue(testBitSet.get('b'));
        assertTrue(testBitSet.get('c'));
        assertFalse(testBitSet.get('d'));
    }

    @Test
    public void testSetBitsWithZero() {
        bitSet.set(0);
        matcher = SmallCharMatcher.from(bitSet, description);
        BitSet testBitSet = new BitSet();
        matcher.setBits(testBitSet);
        assertTrue(testBitSet.get(0));
    }
}
```

### Explanation:
- **setUp Method**: Initializes a `SmallCharMatcher` instance with a `BitSet` containing characters 'a', 'b', and 'c'.
- **testMatches**: Verifies that the `matches` method correctly identifies characters present in the `BitSet`.
- **testMatchesWithZero**: Tests the `matches` method when the `BitSet` includes the zero character.
- **testSmear**: Checks that the `smear` method produces a different hash code.
- **testChooseTableSize**: Validates the `chooseTableSize` method for different set sizes.
- **testSetBits**: Ensures the `setBits` method correctly sets bits in a `BitSet`.
- **testSetBitsWithZero**: Tests `setBits` when the zero character is included in the `BitSet`.

This test suite covers the primary functionalities of the `SmallCharMatcher` class.