To create a comprehensive JUnit 4 test suite for the `ExportHook` class, we need to consider testing each method in the class. This includes both public and protected methods. Since some methods rely on external components or resources, we'll need to use mocking to simulate these dependencies. We'll use the Mockito framework for mocking.

Here's a complete JUnit 4 test suite for the `ExportHook` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import freemind.extensions.ExportHook;
import freemind.extensions.ExportHook.ImageFilter;
import freemind.modes.ModeController;
import freemind.view.mindmapview.MapView;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;

public class ExportHookTest {

    private ExportHook exportHook;
    private ModeController mockController;
    private MapView mockView;
    private JFrame mockFrame;
    private Container mockContentPane;
    private FreeMindFileDialog mockFileChooser;
    private File mockFile;

    @Before
    public void setUp() {
        exportHook = spy(new ExportHook());
        mockController = mock(ModeController.class);
        mockView = mock(MapView.class);
        mockFrame = mock(JFrame.class);
        mockContentPane = mock(Container.class);
        mockFileChooser = mock(FreeMindFileDialog.class);
        mockFile = mock(File.class);

        doReturn(mockController).when(exportHook).getController();
        when(mockController.getView()).thenReturn(mockView);
        when(mockController.getFrame()).thenReturn(mockFrame);
        when(mockFrame.getContentPane()).thenReturn(mockContentPane);
        when(mockController.getFileChooser(any())).thenReturn(mockFileChooser);
        when(mockController.getMap().getFile()).thenReturn(mockFile);
    }

    @Test
    public void testChooseFile() {
        String type = "png";
        String description = "PNG Images";
        String nameExtension = "_export";

        File result = exportHook.chooseFile(type, description, nameExtension);

        assertNotNull(result);
        verify(mockController).getFileChooser(any());
    }

    @Test
    public void testChooseImageFile() {
        String type = "png";
        String description = "PNG Images";
        String nameExtension = "_export";

        when(mockFileChooser.showSaveDialog(mockContentPane)).thenReturn(JFileChooser.APPROVE_OPTION);
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.png"));

        File result = ExportHook.chooseImageFile(type, description, nameExtension, mockController);

        assertNotNull(result);
        verify(mockFileChooser).showSaveDialog(mockContentPane);
    }

    @Test
    public void testGetTranslatableResourceString() {
        String resourceName = "testResource";
        String expected = "Translated String";

        doReturn("%translatedResource").when(exportHook).getResourceString(resourceName);
        when(mockController.getText("translatedResource")).thenReturn(expected);

        String result = exportHook.getTranslatableResourceString(resourceName);

        assertEquals(expected, result);
    }

    @Test
    public void testCreateBufferedImage() {
        when(mockView.getWidth()).thenReturn(100);
        when(mockView.getHeight()).thenReturn(100);
        when(mockView.getInnerBounds()).thenReturn(new Rectangle(0, 0, 100, 100));
        when(mockView.createImage(100, 100)).thenReturn(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB));

        BufferedImage result = exportHook.createBufferedImage();

        assertNotNull(result);
        verify(mockView).preparePrinting();
        verify(mockView).endPrinting();
    }

    @Test
    public void testCopyFromResource() throws Exception {
        String prefix = "prefix/";
        String fileName = "file.txt";
        String destinationDirectory = "destDir";

        URL mockURL = mock(URL.class);
        InputStream mockInputStream = mock(InputStream.class);
        OutputStream mockOutputStream = mock(OutputStream.class);

        doReturn(mockURL).when(exportHook).getResource(prefix + fileName);
        when(mockURL.openStream()).thenReturn(mockInputStream);
        doNothing().when(exportHook).copyStream(mockInputStream, mockOutputStream, true);

        exportHook.copyFromResource(prefix, fileName, destinationDirectory);

        verify(mockURL).openStream();
    }

    @Test
    public void testCopyFromFile() throws Exception {
        String dir = "dir/";
        String fileName = "file.txt";
        String destinationDirectory = "destDir";

        File mockResource = mock(File.class);
        InputStream mockInputStream = mock(InputStream.class);
        OutputStream mockOutputStream = mock(OutputStream.class);

        doReturn(mockResource).when(exportHook).getFile(dir, fileName);
        when(mockResource.exists()).thenReturn(true);
        when(new FileInputStream(mockResource)).thenReturn(mockInputStream);
        doNothing().when(exportHook).copyStream(mockInputStream, mockOutputStream, true);

        exportHook.copyFromFile(dir, fileName, destinationDirectory);

        verify(mockResource).exists();
    }

    @Test
    public void testImageFilterAccept() {
        ImageFilter filter = new ImageFilter("png", "PNG Images");

        File directory = new File("directory");
        File pngFile = new File("image.png");
        File txtFile = new File("document.txt");

        assertTrue(filter.accept(directory));
        assertTrue(filter.accept(pngFile));
        assertFalse(filter.accept(txtFile));
    }

    @Test
    public void testImageFilterGetDescription() {
        ImageFilter filter = new ImageFilter("png", "PNG Images");

        assertEquals("PNG Images", filter.getDescription());

        ImageFilter filterWithoutDescription = new ImageFilter("png", null);

        assertEquals("png", filterWithoutDescription.getDescription());
    }
}
```

### Explanation:

1. **Setup**: We use `@Before` to set up common test fixtures, including creating mock objects for dependencies like `ModeController`, `MapView`, and `FreeMindFileDialog`.

2. **Test Methods**: Each method in the `ExportHook` class is tested:
   - `chooseFile` and `chooseImageFile` are tested for file selection logic.
   - `getTranslatableResourceString` is tested for resource string translation.
   - `createBufferedImage` is tested for image creation logic.
   - `copyFromResource` and `copyFromFile` are tested for file copying logic.
   - `ImageFilter` class methods are tested for file acceptance and description retrieval.

3. **Mocking**: Mockito is used to mock dependencies and simulate behavior, allowing us to focus on testing the logic within `ExportHook`.

4. **Assertions**: We use assertions to verify expected outcomes, such as non-null results and correct method invocations.

This test suite provides a comprehensive set of tests for the `ExportHook` class, ensuring that its methods behave as expected under various conditions.