To create a comprehensive JUnit 4 test suite for the `ExportHook` class, we need to consider testing each method in the class. This includes testing both public and protected methods. Since some methods rely on external resources or components, we'll need to use mocking to simulate these dependencies. We'll use the Mockito framework for mocking.

Below is a JUnit 4 test suite for the `ExportHook` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import freemind.extensions.ExportHook;
import freemind.extensions.ExportHook.ImageFilter;
import freemind.modes.ModeController;
import freemind.view.mindmapview.MapView;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatchers;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;

public class ExportHookTest {

    private ExportHook exportHook;
    private ModeController mockController;
    private MapView mockView;
    private JFrame mockFrame;
    private Container mockContentPane;
    private FreeMindFileDialog mockFileChooser;
    private File mockFile;

    @Before
    public void setUp() {
        exportHook = spy(new ExportHook());
        mockController = mock(ModeController.class);
        mockView = mock(MapView.class);
        mockFrame = mock(JFrame.class);
        mockContentPane = mock(Container.class);
        mockFileChooser = mock(FreeMindFileDialog.class);
        mockFile = mock(File.class);

        doReturn(mockController).when(exportHook).getController();
        when(mockController.getView()).thenReturn(mockView);
        when(mockController.getFrame()).thenReturn(mockFrame);
        when(mockFrame.getContentPane()).thenReturn(mockContentPane);
        when(mockController.getFileChooser(any())).thenReturn(mockFileChooser);
        when(mockController.getMap().getFile()).thenReturn(mockFile);
    }

    @Test
    public void testChooseFile() {
        when(mockFileChooser.showSaveDialog(mockContentPane)).thenReturn(JFileChooser.APPROVE_OPTION);
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.png"));

        File result = exportHook.chooseFile("png", "PNG Image", ".png");
        assertNotNull(result);
        assertEquals("test.png", result.getName());
    }

    @Test
    public void testChooseImageFile() {
        when(mockFileChooser.showSaveDialog(mockContentPane)).thenReturn(JFileChooser.APPROVE_OPTION);
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.png"));

        File result = ExportHook.chooseImageFile("png", "PNG Image", ".png", mockController);
        assertNotNull(result);
        assertEquals("test.png", result.getName());
    }

    @Test
    public void testGetTranslatableResourceString() {
        doReturn("Test String").when(exportHook).getResourceString("test_key");
        when(mockController.getText("test_key")).thenReturn("Translated String");

        String result = exportHook.getTranslatableResourceString("test_key");
        assertEquals("Test String", result);

        doReturn("%test_key").when(exportHook).getResourceString("test_key");
        result = exportHook.getTranslatableResourceString("test_key");
        assertEquals("Translated String", result);
    }

    @Test
    public void testCreateBufferedImage() {
        when(mockView.getWidth()).thenReturn(100);
        when(mockView.getHeight()).thenReturn(100);
        when(mockView.getInnerBounds()).thenReturn(new Rectangle(0, 0, 100, 100));
        when(mockView.createImage(100, 100)).thenReturn(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB));

        BufferedImage image = exportHook.createBufferedImage();
        assertNotNull(image);
        assertEquals(100, image.getWidth());
        assertEquals(100, image.getHeight());
    }

    @Test
    public void testCopyFromResource() throws Exception {
        URL mockUrl = mock(URL.class);
        InputStream mockInputStream = mock(InputStream.class);
        OutputStream mockOutputStream = mock(OutputStream.class);

        doReturn(mockUrl).when(exportHook).getResource(anyString());
        when(mockUrl.openStream()).thenReturn(mockInputStream);
        doReturn(mockOutputStream).when(exportHook).getOutputStream(anyString());

        exportHook.copyFromResource("prefix", "fileName", "destinationDirectory");

        verify(mockInputStream).close();
        verify(mockOutputStream).close();
    }

    @Test
    public void testCopyFromFile() throws Exception {
        File mockResource = mock(File.class);
        InputStream mockInputStream = mock(InputStream.class);
        OutputStream mockOutputStream = mock(OutputStream.class);

        doReturn(mockResource).when(exportHook).getFile(anyString(), anyString());
        when(mockResource.exists()).thenReturn(true);
        when(mockResource.isFile()).thenReturn(true);
        doReturn(mockInputStream).when(exportHook).getInputStream(any(File.class));
        doReturn(mockOutputStream).when(exportHook).getOutputStream(anyString());

        exportHook.copyFromFile("dir", "fileName", "destinationDirectory");

        verify(mockInputStream).close();
        verify(mockOutputStream).close();
    }

    @Test
    public void testImageFilterAccept() {
        ImageFilter filter = new ImageFilter("png", "PNG Image");
        File directory = new File("directory");
        File pngFile = new File("image.png");
        File txtFile = new File("document.txt");

        assertTrue(filter.accept(directory));
        assertTrue(filter.accept(pngFile));
        assertFalse(filter.accept(txtFile));
    }

    @Test
    public void testImageFilterGetDescription() {
        ImageFilter filter = new ImageFilter("png", "PNG Image");
        assertEquals("PNG Image", filter.getDescription());

        ImageFilter filterWithoutDescription = new ImageFilter("png", null);
        assertEquals("png", filterWithoutDescription.getDescription());
    }
}
```

### Explanation:

1. **Setup**: We use `@Before` to set up the necessary mocks and stubs for the tests. This includes mocking the `ModeController`, `MapView`, `JFrame`, and other dependencies.

2. **Test Methods**:
   - **`testChooseFile`**: Tests the `chooseFile` method by simulating a file chooser dialog.
   - **`testChooseImageFile`**: Tests the static `chooseImageFile` method similarly.
   - **`testGetTranslatableResourceString`**: Tests the translation logic in `getTranslatableResourceString`.
   - **`testCreateBufferedImage`**: Tests the creation of a `BufferedImage` from the `MapView`.
   - **`testCopyFromResource`**: Tests the `copyFromResource` method by simulating resource copying.
   - **`testCopyFromFile`**: Tests the `copyFromFile` method by simulating file copying.
   - **`testImageFilterAccept`**: Tests the `accept` method of the `ImageFilter` class.
   - **`testImageFilterGetDescription`**: Tests the `getDescription` method of the `ImageFilter` class.

3. **Mocking**: We use Mockito to mock dependencies and simulate behavior, such as file chooser dialogs and resource streams.

4. **Assertions**: We use assertions to verify the expected outcomes of each method under test.

This test suite provides a comprehensive set of tests for the `ExportHook` class, covering its main functionalities and interactions with external components.