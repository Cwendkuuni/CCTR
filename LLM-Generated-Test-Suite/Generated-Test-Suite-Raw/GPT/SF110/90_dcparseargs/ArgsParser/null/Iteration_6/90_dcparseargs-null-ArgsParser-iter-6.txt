Certainly! Below is a JUnit 4 test suite for the `ArgsParser` class. This suite covers various scenarios for each method in the class.

```java
import de.devcity.parseargs.ArgsParser;
import de.devcity.parseargs.arguments.SwitchArgument;
import de.devcity.parseargs.arguments.ParameterArgument;
import de.devcity.parseargs.arguments.StringArgument;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;

public class ArgsParserTest {

    private ArgsParser argsParser;

    @Before
    public void setUp() {
        argsParser = new ArgsParser();
    }

    @Test
    public void testConstructorWithArgs() {
        String[] args = {"-a", "--long", "value"};
        ArgsParser parser = new ArgsParser(args);
        assertArrayEquals(args, parser.getArgs());
    }

    @Test
    public void testSetArgs() {
        String[] args = {"-a", "--long", "value"};
        argsParser.setArgs(args);
        assertArrayEquals(args, argsParser.getArgs());
    }

    @Test(expected = NullPointerException.class)
    public void testSetArgsWithNull() {
        argsParser.setArgs(null);
    }

    @Test
    public void testGetArgsCount() {
        String[] args = {"-a", "--long", "value"};
        argsParser.setArgs(args);
        assertEquals(3, argsParser.getArgsCount());
    }

    @Test
    public void testGetArgsLeftCount() {
        String[] args = {"-a", "--long", "value"};
        argsParser.setArgs(args);
        assertEquals(3, argsParser.getArgsLeftCount());
    }

    @Test
    public void testParseSwitchArgumentWithShortKey() {
        String[] args = {"-abc"};
        argsParser.setArgs(args);
        SwitchArgument result = argsParser.parseSwitchArgument("b");
        assertTrue(result.isPresent());
        assertEquals(0, result.getIndex());
        assertEquals("b", result.getKey());
    }

    @Test
    public void testParseSwitchArgumentWithLongKey() {
        String[] args = {"--verbose"};
        argsParser.setArgs(args);
        SwitchArgument result = argsParser.parseSwitchArgument("verbose");
        assertTrue(result.isPresent());
        assertEquals(0, result.getIndex());
        assertEquals("verbose", result.getKey());
    }

    @Test
    public void testParseSwitchArgumentNotFound() {
        String[] args = {"--verbose"};
        argsParser.setArgs(args);
        SwitchArgument result = argsParser.parseSwitchArgument("quiet");
        assertFalse(result.isPresent());
        assertEquals(-1, result.getIndex());
    }

    @Test
    public void testParseParameterArgumentWithShortKey() {
        String[] args = {"-a", "value"};
        argsParser.setArgs(args);
        ParameterArgument result = argsParser.parseParameterArgument("a");
        assertNotNull(result);
        assertEquals(0, result.getIndex());
        assertEquals("a", result.getKey());
        assertEquals("value", result.getValue());
    }

    @Test
    public void testParseParameterArgumentWithLongKey() {
        String[] args = {"--key", "value"};
        argsParser.setArgs(args);
        ParameterArgument result = argsParser.parseParameterArgument("key");
        assertNotNull(result);
        assertEquals(0, result.getIndex());
        assertEquals("key", result.getKey());
        assertEquals("value", result.getValue());
    }

    @Test
    public void testParseParameterArgumentNotFound() {
        String[] args = {"--key", "value"};
        argsParser.setArgs(args);
        ParameterArgument result = argsParser.parseParameterArgument("missing");
        assertNull(result);
    }

    @Test
    public void testParseStringArgument() {
        String[] args = {"arg1", "arg2"};
        argsParser.setArgs(args);
        List<StringArgument> result = argsParser.parseStringArgument();
        assertEquals(2, result.size());
        assertEquals("arg1", result.get(0).getValue());
        assertEquals("arg2", result.get(1).getValue());
    }

    @Test
    public void testParseStringArgumentWithNoArgs() {
        String[] args = {};
        argsParser.setArgs(args);
        List<StringArgument> result = argsParser.parseStringArgument();
        assertTrue(result.isEmpty());
    }
}
```

This test suite covers the following scenarios:
- Constructor behavior with and without arguments.
- Setting arguments and handling null arguments.
- Counting arguments and remaining arguments.
- Parsing switch arguments with both short and long keys.
- Parsing parameter arguments with both short and long keys.
- Parsing string arguments.
- Handling cases where arguments are not found.

Make sure to have the necessary classes (`SwitchArgument`, `ParameterArgument`, `StringArgument`) and their methods implemented for the tests to run successfully.