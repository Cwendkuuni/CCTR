```java
import org.jdom2.*;
import org.jdom2.output.*;
import org.jdom2.output.support.*;
import org.junit.*;
import org.xml.sax.*;
import org.xml.sax.ext.*;

import java.util.*;

import static org.mockito.Mockito.*;

public class SAXOutputterTest {

    private SAXOutputter saxOutputter;
    private ContentHandler mockContentHandler;
    private ErrorHandler mockErrorHandler;
    private DTDHandler mockDTDHandler;
    private EntityResolver mockEntityResolver;
    private LexicalHandler mockLexicalHandler;
    private DeclHandler mockDeclHandler;
    private SAXOutputProcessor mockProcessor;
    private Format mockFormat;

    @Before
    public void setUp() {
        mockContentHandler = mock(ContentHandler.class);
        mockErrorHandler = mock(ErrorHandler.class);
        mockDTDHandler = mock(DTDHandler.class);
        mockEntityResolver = mock(EntityResolver.class);
        mockLexicalHandler = mock(LexicalHandler.class);
        mockDeclHandler = mock(DeclHandler.class);
        mockProcessor = mock(SAXOutputProcessor.class);
        mockFormat = mock(Format.class);

        saxOutputter = new SAXOutputter();
    }

    @Test
    public void testDefaultConstructor() {
        Assert.assertFalse(saxOutputter.getReportNamespaceDeclarations());
        Assert.assertTrue(saxOutputter.getReportDTDEvents());
        Assert.assertNotNull(saxOutputter.getSAXOutputProcessor());
        Assert.assertNotNull(saxOutputter.getFormat());
    }

    @Test
    public void testConstructorWithContentHandler() {
        saxOutputter = new SAXOutputter(mockContentHandler);
        Assert.assertEquals(mockContentHandler, saxOutputter.getContentHandler());
    }

    @Test
    public void testConstructorWithHandlers() {
        saxOutputter = new SAXOutputter(mockContentHandler, mockErrorHandler, mockDTDHandler, mockEntityResolver, mockLexicalHandler);
        Assert.assertEquals(mockContentHandler, saxOutputter.getContentHandler());
        Assert.assertEquals(mockErrorHandler, saxOutputter.getErrorHandler());
        Assert.assertEquals(mockDTDHandler, saxOutputter.getDTDHandler());
        Assert.assertEquals(mockEntityResolver, saxOutputter.getEntityResolver());
        Assert.assertEquals(mockLexicalHandler, saxOutputter.getLexicalHandler());
    }

    @Test
    public void testSetAndGetContentHandler() {
        saxOutputter.setContentHandler(mockContentHandler);
        Assert.assertEquals(mockContentHandler, saxOutputter.getContentHandler());
    }

    @Test
    public void testSetAndGetErrorHandler() {
        saxOutputter.setErrorHandler(mockErrorHandler);
        Assert.assertEquals(mockErrorHandler, saxOutputter.getErrorHandler());
    }

    @Test
    public void testSetAndGetDTDHandler() {
        saxOutputter.setDTDHandler(mockDTDHandler);
        Assert.assertEquals(mockDTDHandler, saxOutputter.getDTDHandler());
    }

    @Test
    public void testSetAndGetEntityResolver() {
        saxOutputter.setEntityResolver(mockEntityResolver);
        Assert.assertEquals(mockEntityResolver, saxOutputter.getEntityResolver());
    }

    @Test
    public void testSetAndGetLexicalHandler() {
        saxOutputter.setLexicalHandler(mockLexicalHandler);
        Assert.assertEquals(mockLexicalHandler, saxOutputter.getLexicalHandler());
    }

    @Test
    public void testSetAndGetDeclHandler() {
        saxOutputter.setDeclHandler(mockDeclHandler);
        Assert.assertEquals(mockDeclHandler, saxOutputter.getDeclHandler());
    }

    @Test
    public void testSetAndGetReportNamespaceDeclarations() {
        saxOutputter.setReportNamespaceDeclarations(true);
        Assert.assertTrue(saxOutputter.getReportNamespaceDeclarations());
    }

    @Test
    public void testSetAndGetReportDTDEvents() {
        saxOutputter.setReportDTDEvents(false);
        Assert.assertFalse(saxOutputter.getReportDTDEvents());
    }

    @Test
    public void testSetAndGetFeature() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
        Assert.assertTrue(saxOutputter.getFeature("http://xml.org/sax/features/namespace-prefixes"));

        saxOutputter.setFeature("http://xml.org/sax/features/validation", false);
        Assert.assertFalse(saxOutputter.getFeature("http://xml.org/sax/features/validation"));
    }

    @Test(expected = SAXNotSupportedException.class)
    public void testSetFeatureNamespacesThrowsException() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.setFeature("http://xml.org/sax/features/namespaces", false);
    }

    @Test(expected = SAXNotRecognizedException.class)
    public void testSetFeatureThrowsException() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.setFeature("unknown-feature", true);
    }

    @Test(expected = SAXNotRecognizedException.class)
    public void testGetFeatureThrowsException() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.getFeature("unknown-feature");
    }

    @Test
    public void testSetAndGetProperty() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.setProperty("http://xml.org/sax/properties/lexical-handler", mockLexicalHandler);
        Assert.assertEquals(mockLexicalHandler, saxOutputter.getProperty("http://xml.org/sax/properties/lexical-handler"));

        saxOutputter.setProperty("http://xml.org/sax/properties/declaration-handler", mockDeclHandler);
        Assert.assertEquals(mockDeclHandler, saxOutputter.getProperty("http://xml.org/sax/properties/declaration-handler"));
    }

    @Test(expected = SAXNotRecognizedException.class)
    public void testSetPropertyThrowsException() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.setProperty("unknown-property", new Object());
    }

    @Test(expected = SAXNotRecognizedException.class)
    public void testGetPropertyThrowsException() throws SAXNotRecognizedException, SAXNotSupportedException {
        saxOutputter.getProperty("unknown-property");
    }

    @Test
    public void testSetAndGetSAXOutputProcessor() {
        saxOutputter.setSAXOutputProcessor(mockProcessor);
        Assert.assertEquals(mockProcessor, saxOutputter.getSAXOutputProcessor());
    }

    @Test
    public void testSetAndGetFormat() {
        saxOutputter.setFormat(mockFormat);
        Assert.assertEquals(mockFormat, saxOutputter.getFormat());
    }

    @Test
    public void testOutputDocument() throws JDOMException {
        Document mockDocument = mock(Document.class);
        saxOutputter.setSAXOutputProcessor(mockProcessor);
        saxOutputter.output(mockDocument);
        verify(mockProcessor).process(any(SAXTarget.class), any(Format.class), eq(mockDocument));
    }

    @Test
    public void testOutputList() throws JDOMException {
        List<Content> mockList = mock(List.class);
        saxOutputter.setSAXOutputProcessor(mockProcessor);
        saxOutputter.output(mockList);
        verify(mockProcessor).processAsDocument(any(SAXTarget.class), any(Format.class), eq(mockList));
    }

    @Test
    public void testOutputElement() throws JDOMException {
        Element mockElement = mock(Element.class);
        saxOutputter.setSAXOutputProcessor(mockProcessor);
        saxOutputter.output(mockElement);
        verify(mockProcessor).processAsDocument(any(SAXTarget.class), any(Format.class), eq(mockElement));
    }

    @Test
    public void testOutputFragmentList() throws JDOMException {
        List<Content> mockList = mock(List.class);
        saxOutputter.setSAXOutputProcessor(mockProcessor);
        saxOutputter.outputFragment(mockList);
        verify(mockProcessor).process(any(SAXTarget.class), any(Format.class), eq(mockList));
    }

    @Test
    public void testOutputFragmentContent() throws JDOMException {
        Content mockContent = mock(Content.class);
        when(mockContent.getCType()).thenReturn(Content.CType.Element);
        saxOutputter.setSAXOutputProcessor(mockProcessor);
        saxOutputter.outputFragment(mockContent);
        verify(mockProcessor).process(any(SAXTarget.class), any(Format.class), eq(mockContent));
    }

    @Test(expected = JDOMException.class)
    public void testOutputFragmentContentThrowsException() throws JDOMException {
        Content mockContent = mock(Content.class);
        when(mockContent.getCType()).thenReturn(null);
        saxOutputter.outputFragment(mockContent);
    }

    @Test
    public void testHandleError() throws JDOMException, SAXException {
        JDOMException mockException = mock(JDOMException.class);
        saxOutputter.setErrorHandler(mockErrorHandler);
        doThrow(new SAXException(mockException)).when(mockErrorHandler).error(any(SAXParseException.class));
        try {
            saxOutputter.outputFragment(null);
        } catch (JDOMException e) {
            Assert.assertEquals(mockException, e.getCause());
        }
    }

    @Test
    public void testGetLocator() {
        Assert.assertNull(saxOutputter.getLocator());
    }
}
```