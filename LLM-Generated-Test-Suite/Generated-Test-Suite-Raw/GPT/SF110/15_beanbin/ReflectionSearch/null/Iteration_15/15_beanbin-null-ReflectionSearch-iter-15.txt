Certainly! Below is a JUnit 4 test suite for the `ReflectionSearch` class. This suite aims to cover the various methods and their functionalities, including handling annotations, method criteria, and logical operations.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = Mockito.mock(Class.class);
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotationWithExactMatch() {
        Annotation annotation = Mockito.mock(Annotation.class);
        Mockito.when(annotation.annotationType()).thenReturn(TestAnnotation.class);
        Mockito.when(testClass.getAnnotations()).thenReturn(new Annotation[]{annotation});

        assertTrue(reflectionSearch.hasAnnotation("TestAnnotation"));
    }

    @Test
    public void testHasAnnotationWithWildcardMatch() {
        Annotation annotation = Mockito.mock(Annotation.class);
        Mockito.when(annotation.annotationType()).thenReturn(TestAnnotation.class);
        Mockito.when(testClass.getAnnotations()).thenReturn(new Annotation[]{annotation});

        assertTrue(reflectionSearch.hasAnnotation("*Annotation"));
    }

    @Test
    public void testHasAnnotationWithNoMatch() {
        Annotation annotation = Mockito.mock(Annotation.class);
        Mockito.when(annotation.annotationType()).thenReturn(TestAnnotation.class);
        Mockito.when(testClass.getAnnotations()).thenReturn(new Annotation[]{annotation});

        assertFalse(reflectionSearch.hasAnnotation("NonExistent"));
    }

    @Test
    public void testMethodsThatHave() throws Exception {
        reflectionSearch.methodsThatHave("testMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
    }

    @Test
    public void testMethodsThatDontHave() throws Exception {
        reflectionSearch.methodsThatDontHave("testMethod");
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
    }

    @Test
    public void testAnd() {
        ReflectionSearch result = reflectionSearch.and();
        assertNotNull(result);
    }

    @Test
    public void testOr() {
        ReflectionSearch result = reflectionSearch.or();
        assertNotNull(result);
    }

    @Test
    public void testGetMethods() throws Exception {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
    }

    @Test
    public void testIntersect() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method method1 = Mockito.mock(Method.class);
        Method method2 = Mockito.mock(Method.class);
        master.add(method1);
        toAdd.add(method1);
        toAdd.add(method2);

        reflectionSearch.intersect(master, toAdd);
        assertEquals(1, master.size());
        assertTrue(master.contains(method1));
    }

    @Test
    public void testUnion() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method method1 = Mockito.mock(Method.class);
        Method method2 = Mockito.mock(Method.class);
        master.add(method1);
        toAdd.add(method2);

        reflectionSearch.union(master, toAdd);
        assertEquals(2, master.size());
        assertTrue(master.contains(method1));
        assertTrue(master.contains(method2));
    }

    // Mock annotation for testing
    @interface TestAnnotation {
    }
}
```

### Explanation:
- **Mocking**: The test suite uses Mockito to mock the `Class` and `Annotation` objects to simulate different scenarios.
- **Annotations**: Tests are provided for checking annotations with exact matches, wildcard matches, and no matches.
- **Method Criteria**: Tests for `methodsThatHave` and `methodsThatDontHave` ensure that the query is set up correctly.
- **Logical Operations**: Tests for `and` and `or` ensure that the logical operations are correctly applied.
- **Method Retrieval**: The `getMethods` test checks that methods are retrieved without exceptions.
- **Set Operations**: Tests for `intersect` and `union` ensure that these operations modify the lists as expected.

This suite provides a comprehensive set of tests for the `ReflectionSearch` class, covering its main functionalities.