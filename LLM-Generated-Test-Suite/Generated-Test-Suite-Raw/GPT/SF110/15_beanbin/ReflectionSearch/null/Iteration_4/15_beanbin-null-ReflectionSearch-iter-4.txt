Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ReflectionSearch` class. This suite includes tests for each public method and some of the protected methods, ensuring that the class behaves as expected under various conditions.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = TestClass.class;
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotationWithExistingAnnotation() {
        assertTrue(reflectionSearch.hasAnnotation("@TestAnnotation"));
    }

    @Test
    public void testHasAnnotationWithNonExistingAnnotation() {
        assertFalse(reflectionSearch.hasAnnotation("@NonExistingAnnotation"));
    }

    @Test
    public void testHasAnnotationWithWildcard() {
        assertTrue(reflectionSearch.hasAnnotation("@Test*"));
    }

    @Test
    public void testMethodsThatHave() throws Exception {
        ReflectionSearch result = reflectionSearch.methodsThatHave("testMethod");
        assertNotNull(result);
    }

    @Test
    public void testMethodsThatDontHave() throws Exception {
        ReflectionSearch result = reflectionSearch.methodsThatDontHave("nonExistingMethod");
        assertNotNull(result);
    }

    @Test
    public void testAnd() {
        ReflectionSearch result = reflectionSearch.and();
        assertNotNull(result);
    }

    @Test
    public void testOr() {
        ReflectionSearch result = reflectionSearch.or();
        assertNotNull(result);
    }

    @Test
    public void testGetMethods() throws Exception {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
    }

    @Test
    public void testIntersect() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method method = Mockito.mock(Method.class);
        master.add(method);
        toAdd.add(method);

        reflectionSearch.intersect(master, toAdd);
        assertEquals(1, master.size());
    }

    @Test
    public void testUnion() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method method = Mockito.mock(Method.class);
        toAdd.add(method);

        reflectionSearch.union(master, toAdd);
        assertEquals(1, master.size());
    }

    // Mock class and annotation for testing
    @Retention(RetentionPolicy.RUNTIME)
    @interface TestAnnotation {}

    @TestAnnotation
    private static class TestClass {
        public void testMethod() {}
    }
}
```

### Explanation:
- **Setup**: A `TestClass` with a `TestAnnotation` is used to simulate a real class with annotations and methods.
- **Tests for `hasAnnotation`**: These tests check if the method correctly identifies annotations, including those with wildcards.
- **Tests for `methodsThatHave` and `methodsThatDontHave`**: These ensure that the methods return a non-null `ReflectionSearch` object.
- **Tests for `and` and `or`**: These verify that the methods return a non-null `ReflectionSearch` object.
- **Test for `getMethods`**: This checks that the method returns a non-null list of methods.
- **Tests for `intersect` and `union`**: These ensure that the methods correctly modify the list of methods.

This test suite uses Mockito to mock `Method` objects for testing the `intersect` and `union` methods. Adjustments may be needed based on the actual implementations of `Query`, `WildcardSearch`, `ReflectionShelf`, and other dependencies.