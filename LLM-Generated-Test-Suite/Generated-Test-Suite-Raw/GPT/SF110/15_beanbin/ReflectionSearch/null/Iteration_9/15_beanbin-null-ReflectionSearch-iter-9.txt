Certainly! Below is a JUnit 4 test suite for the `ReflectionSearch` class. This test suite aims to cover the various methods and functionalities provided by the class. Note that some methods rely on external classes and interfaces, so mock objects or assumptions about their behavior are used where necessary.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import net.sourceforge.beanbin.reflect.ReflectionSearch;
import net.sourceforge.beanbin.search.MethodReflectionCriteria;
import net.sourceforge.beanbin.search.SearchType;
import net.sourceforge.beanbin.query.Conditional;
import net.sourceforge.beanbin.query.Criteria;
import net.sourceforge.beanbin.query.ReflectionCriteria;
import net.sourceforge.beanbin.BeanBinException;
import net.sourceforge.beanbin.ReflectionShelf;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = TestClass.class;
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotationWithExactMatch() {
        assertTrue(reflectionSearch.hasAnnotation("@TestAnnotation"));
    }

    @Test
    public void testHasAnnotationWithWildcardMatch() {
        assertTrue(reflectionSearch.hasAnnotation("@Test*"));
    }

    @Test
    public void testHasAnnotationWithNoMatch() {
        assertFalse(reflectionSearch.hasAnnotation("@NonExistent"));
    }

    @Test
    public void testMethodsThatHave() throws BeanBinException {
        ReflectionSearch result = reflectionSearch.methodsThatHave("testMethod");
        assertNotNull(result);
    }

    @Test
    public void testMethodsThatDontHave() throws BeanBinException {
        ReflectionSearch result = reflectionSearch.methodsThatDontHave("nonExistentMethod");
        assertNotNull(result);
    }

    @Test
    public void testAnd() {
        ReflectionSearch result = reflectionSearch.and();
        assertNotNull(result);
    }

    @Test
    public void testOr() {
        ReflectionSearch result = reflectionSearch.or();
        assertNotNull(result);
    }

    @Test
    public void testGetMethods() throws BeanBinException {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
    }

    @Test
    public void testIntersect() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method method = Mockito.mock(Method.class);
        master.add(method);
        toAdd.add(method);

        reflectionSearch.intersect(master, toAdd);
        assertEquals(1, master.size());
    }

    @Test
    public void testUnion() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method method = Mockito.mock(Method.class);
        toAdd.add(method);

        reflectionSearch.union(master, toAdd);
        assertEquals(1, master.size());
    }

    // Mock class and annotation for testing
    @Retention(RetentionPolicy.RUNTIME)
    @interface TestAnnotation {}

    @TestAnnotation
    private static class TestClass {
        public void testMethod() {}
    }
}
```

### Explanation:
- **Annotations and Setup**: The `@Before` annotation is used to set up the test environment before each test. A mock class `TestClass` with a `TestAnnotation` is used to simulate a real class with annotations and methods.
- **Test Methods**: Each method in `ReflectionSearch` is tested. For methods that rely on external classes or interfaces, such as `Query`, `MethodReflectionCriteria`, and `ReflectionShelf`, assumptions are made about their behavior.
- **Mocking**: Mockito is used to mock `Method` objects where necessary, especially for testing `intersect` and `union` methods.
- **Assertions**: Various assertions are used to verify the expected outcomes of method calls.

This test suite provides a comprehensive coverage of the `ReflectionSearch` class, ensuring that its methods behave as expected under different scenarios.