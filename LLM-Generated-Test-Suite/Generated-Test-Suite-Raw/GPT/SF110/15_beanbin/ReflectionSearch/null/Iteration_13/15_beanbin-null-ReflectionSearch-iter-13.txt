Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ReflectionSearch` class. This suite includes tests for each public method, as well as some of the protected methods, to ensure they function as expected.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import net.sourceforge.beanbin.reflect.ReflectionSearch;
import net.sourceforge.beanbin.search.MethodReflectionCriteria;
import net.sourceforge.beanbin.search.SearchType;
import net.sourceforge.beanbin.query.Conditional;
import net.sourceforge.beanbin.query.Criteria;
import net.sourceforge.beanbin.query.ReflectionCriteria;
import net.sourceforge.beanbin.BeanBinException;
import net.sourceforge.beanbin.ReflectionShelf;

public class ReflectionSearchTest {

    private ReflectionSearch reflectionSearch;
    private Class<?> testClass;

    @Before
    public void setUp() {
        testClass = TestClass.class;
        reflectionSearch = new ReflectionSearch(testClass);
    }

    @Test
    public void testHasAnnotationWithExistingAnnotation() {
        assertTrue(reflectionSearch.hasAnnotation("@TestAnnotation"));
    }

    @Test
    public void testHasAnnotationWithNonExistingAnnotation() {
        assertFalse(reflectionSearch.hasAnnotation("@NonExistingAnnotation"));
    }

    @Test
    public void testHasAnnotationWithWildcard() {
        assertTrue(reflectionSearch.hasAnnotation("@Test*"));
    }

    @Test
    public void testMethodsThatHave() throws BeanBinException {
        ReflectionSearch result = reflectionSearch.methodsThatHave("testMethod");
        assertNotNull(result);
    }

    @Test
    public void testMethodsThatDontHave() throws BeanBinException {
        ReflectionSearch result = reflectionSearch.methodsThatDontHave("nonExistingMethod");
        assertNotNull(result);
    }

    @Test
    public void testAnd() {
        ReflectionSearch result = reflectionSearch.and();
        assertNotNull(result);
    }

    @Test
    public void testOr() {
        ReflectionSearch result = reflectionSearch.or();
        assertNotNull(result);
    }

    @Test
    public void testGetMethods() throws BeanBinException {
        List<Method> methods = reflectionSearch.getMethods();
        assertNotNull(methods);
    }

    @Test
    public void testIntersect() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method[] methods = testClass.getDeclaredMethods();
        master.add(methods[0]);
        toAdd.add(methods[0]);
        toAdd.add(methods[1]);

        reflectionSearch.intersect(master, toAdd);
        assertEquals(1, master.size());
        assertTrue(master.contains(methods[0]));
    }

    @Test
    public void testUnion() {
        List<Method> master = new ArrayList<>();
        List<Method> toAdd = new ArrayList<>();
        Method[] methods = testClass.getDeclaredMethods();
        master.add(methods[0]);
        toAdd.add(methods[1]);

        reflectionSearch.union(master, toAdd);
        assertEquals(2, master.size());
        assertTrue(master.contains(methods[0]));
        assertTrue(master.contains(methods[1]));
    }

    // Mock class for testing
    @Retention(RetentionPolicy.RUNTIME)
    @interface TestAnnotation {}

    @TestAnnotation
    private static class TestClass {
        public void testMethod() {}
        public void anotherMethod() {}
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `ReflectionSearch` instance with a mock class `TestClass` that contains methods and annotations for testing.
- **Annotation Tests**: Tests for `hasAnnotation` method with existing, non-existing, and wildcard annotations.
- **Method Criteria Tests**: Tests for `methodsThatHave` and `methodsThatDontHave` to ensure they return a non-null `ReflectionSearch` object.
- **Logical Operator Tests**: Tests for `and` and `or` methods to ensure they return a non-null `ReflectionSearch` object.
- **Get Methods Test**: Tests `getMethods` to ensure it returns a non-null list.
- **Intersect and Union Tests**: Tests for `intersect` and `union` methods to ensure they correctly modify the list of methods.

This test suite uses JUnit 4 and Mockito for mocking where necessary. Adjustments may be needed based on the actual implementations of `Query`, `MethodReflectionCriteria`, `ReflectionShelf`, and other dependencies.