To create a comprehensive JUnit 4 test suite for the `Block` class, we need to test all the methods, including constructors, `charAt`, `textAt`, `containsOnlyOneWord`, `toString`, and `getUpperLine`. Since `Block` is an abstract class, we'll need to create a concrete subclass for testing purposes. Additionally, we'll need to mock or create simple implementations for the `Scheme`, `CharPosition`, `HWordPosition`, and `WordPosition` classes/interfaces used in the `Block` class.

Below is a complete JUnit 4 test suite for the `Block` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;

// Mock classes to support testing
class Scheme {
    int x2, y2;
    String[] lines;

    Scheme(int x2, int y2, String[] lines) {
        this.x2 = x2;
        this.y2 = y2;
        this.lines = lines;
    }

    String textAt(int x1, int x2, int y) {
        return lines[y].substring(x1, x2);
    }
}

class CharPosition {
    int x, y;

    CharPosition(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class HWordPosition extends CharPosition {
    HWordPosition(int x, int y) {
        super(x, y);
    }
}

class WordPosition extends CharPosition {
    WordPosition(int x, int y) {
        super(x, y);
    }
}

// Concrete subclass of Block for testing
class TestBlock extends Block {
    public TestBlock(Scheme scheme, int x1, int y1, int x2, int y2) {
        super(scheme, x1, y1, x2, y2);
    }

    public TestBlock(Scheme scheme, CharPosition p1, CharPosition p2) {
        super(scheme, p1, p2);
    }

    public TestBlock(Scheme scheme) {
        super(scheme);
    }

    @Override
    public Block subblock(int p0, int p1, int p2, int p3) {
        return new TestBlock(scheme, p0, p1, p2, p3);
    }

    @Override
    public List<Block> extractSequentialSubblocks() {
        return new ArrayList<>();
    }

    @Override
    public List<Block> extractParallelSubblocks() {
        return new ArrayList<>();
    }

    public boolean isTrivial() {
        return x1 == x2 && y1 == y2;
    }

    public HWordPosition firstWord_Horizontally() {
        return new HWordPosition(x1, y1);
    }

    public WordPosition lastWord_Horizontally() {
        return new WordPosition(x2, y2);
    }
}

public class BlockTest {
    private Scheme scheme;
    private TestBlock block;

    @Before
    public void setUp() {
        String[] lines = {"Hello World", "JUnit Testing", "Block Class"};
        scheme = new Scheme(10, 3, lines);
        block = new TestBlock(scheme, 0, 0, 10, 2);
    }

    @Test
    public void testConstructorWithCoordinates() {
        TestBlock b = new TestBlock(scheme, 0, 0, 10, 2);
        assertNotNull(b);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithInvalidCoordinates() {
        new TestBlock(scheme, -1, 0, 10, 2);
    }

    @Test
    public void testConstructorWithCharPositions() {
        CharPosition p1 = new CharPosition(0, 0);
        CharPosition p2 = new CharPosition(10, 2);
        TestBlock b = new TestBlock(scheme, p1, p2);
        assertNotNull(b);
    }

    @Test
    public void testConstructorWithScheme() {
        TestBlock b = new TestBlock(scheme);
        assertNotNull(b);
    }

    @Test
    public void testCharAt() {
        assertEquals('H', block.charAt(0, 0));
        assertEquals('W', block.charAt(6, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtOutOfBounds() {
        block.charAt(11, 0);
    }

    @Test
    public void testTextAt() {
        assertEquals("Hello", block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtOutOfBounds() {
        block.textAt(0, 11, 0);
    }

    @Test
    public void testContainsOnlyOneWord() {
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordInTrivialBlock() {
        TestBlock trivialBlock = new TestBlock(scheme, 0, 0, 0, 0);
        trivialBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expected = "Block(0,0, 10,2):\n ##########\n # Hello Wo #\n # JUnit Tes #\n ##########";
        assertEquals(expected, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        assertEquals("Hello Wo", block.getUpperLine());
    }
}
```

### Explanation:
- **Mock Classes**: Simple implementations of `Scheme`, `CharPosition`, `HWordPosition`, and `WordPosition` are provided to support the test cases.
- **Concrete Subclass**: `TestBlock` is a concrete subclass of `Block` to allow instantiation and testing.
- **Test Cases**: Each method in the `Block` class is tested, including constructors, `charAt`, `textAt`, `containsOnlyOneWord`, `toString`, and `getUpperLine`.
- **Exception Testing**: Tests are included to verify that exceptions are thrown for invalid inputs.

This test suite should cover the functionality of the `Block` class comprehensively.