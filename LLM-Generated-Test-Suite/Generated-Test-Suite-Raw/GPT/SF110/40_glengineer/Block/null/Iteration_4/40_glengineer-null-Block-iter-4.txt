To create a comprehensive JUnit 4 test suite for the `Block` class, we need to test each method, including constructors and abstract methods. Since `Block` is abstract, we'll need to create a concrete subclass for testing purposes. We'll also need to mock or create instances of the `Scheme`, `CharPosition`, and any other dependencies.

Here's a complete JUnit 4 test suite for the `Block` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.util.List;
import java.util.Arrays;

public class BlockTest {

    private Scheme mockScheme;
    private Block block;

    @Before
    public void setUp() {
        // Mocking Scheme
        mockScheme = Mockito.mock(Scheme.class);
        Mockito.when(mockScheme.x2).thenReturn(10);
        Mockito.when(mockScheme.y2).thenReturn(10);
        Mockito.when(mockScheme.lines).thenReturn(new String[]{
            "abcdefghij",
            "klmnopqrst",
            "uvwxyzabcd",
            "efghijklmn",
            "opqrstuvwx",
            "yzabcdefgh",
            "ijklmnopqr",
            "stuvwxyzab",
            "cdefghijkl",
            "mnopqrstuv"
        });

        // Creating a concrete subclass of Block for testing
        block = new ConcreteBlock(mockScheme, 0, 0, 5, 5);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithInvalidCoordinates() {
        new ConcreteBlock(mockScheme, -1, 0, 5, 5);
    }

    @Test
    public void testConstructorWithValidCoordinates() {
        Block validBlock = new ConcreteBlock(mockScheme, 0, 0, 5, 5);
        assertNotNull(validBlock);
    }

    @Test
    public void testCharAt() {
        assertEquals('a', block.charAt(0, 0));
        assertEquals('e', block.charAt(4, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCharAtWithInvalidPosition() {
        block.charAt(11, 0);
    }

    @Test
    public void testTextAt() {
        assertEquals("abcde", block.textAt(0, 5, 0));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testTextAtWithInvalidCoordinates() {
        block.textAt(0, 11, 0);
    }

    @Test
    public void testContainsOnlyOneWord() {
        // Assuming firstWord_Horizontally and lastWord_Horizontally are mocked
        Mockito.when(block.firstWord_Horizontally()).thenReturn(new HWordPosition(0, 0, 5));
        Mockito.when(block.lastWord_Horizontally()).thenReturn(new WordPosition(0, 0, 5));
        assertTrue(block.containsOnlyOneWord());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testContainsOnlyOneWordInTrivialBlock() {
        Block trivialBlock = new ConcreteBlock(mockScheme, 0, 0, 0, 0);
        trivialBlock.containsOnlyOneWord();
    }

    @Test
    public void testToString() {
        String expected = "Block(0,0, 5,5):\n #######\n # abcde #\n # klmno #\n # uvwxy #\n # efghi #\n # opqrs #\n #######";
        assertEquals(expected, block.toString());
    }

    @Test
    public void testGetUpperLine() {
        assertEquals("abcde", block.getUpperLine());
    }

    // Concrete subclass for testing
    private class ConcreteBlock extends Block {
        public ConcreteBlock(Scheme scheme, int x1, int y1, int x2, int y2) {
            super(scheme, x1, y1, x2, y2);
        }

        @Override
        public Block subblock(int p0, int p1, int p2, int p3) {
            return new ConcreteBlock(scheme, p0, p1, p2, p3);
        }

        @Override
        public List<Block> extractSequentialSubblocks() {
            return Arrays.asList(this);
        }

        @Override
        public List<Block> extractParallelSubblocks() {
            return Arrays.asList(this);
        }
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the `Scheme` class, which is a dependency of `Block`.
- **Concrete Subclass**: Since `Block` is abstract, we create a `ConcreteBlock` subclass for testing.
- **Test Methods**: Each method in `Block` is tested, including constructors and methods that throw exceptions.
- **Assertions**: We use assertions to verify the expected behavior of each method.
- **Exception Testing**: We test for exceptions using the `expected` attribute of the `@Test` annotation.