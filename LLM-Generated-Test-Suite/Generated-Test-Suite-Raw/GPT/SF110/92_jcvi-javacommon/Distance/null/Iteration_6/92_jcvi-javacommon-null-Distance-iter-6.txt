```java
import static org.junit.Assert.*;
import org.junit.Test;
import org.jcvi.jillion.assembly.ca.frg.Distance;

public class DistanceTest {

    @Test
    public void testBuildDistanceWithMinMaxMeanStdDev() {
        Distance distance = Distance.buildDistance(10, 20, 15.0f, 2.5f);
        assertEquals(10, distance.getMin());
        assertEquals(20, distance.getMax());
        assertEquals(15.0f, distance.getMean(), 0.001f);
        assertEquals(2.5f, distance.getStdDev(), 0.001f);
    }

    @Test
    public void testBuildDistanceWithMeanStdDev() {
        Distance distance = Distance.buildDistance(15.0f, 2.5f);
        float delta = 3.0f * 2.5f;
        int plusDelta = (int)(15.0f + delta);
        int minusDelta = (int)(15.0f - delta);
        assertEquals(Math.min(plusDelta, minusDelta), distance.getMin());
        assertEquals(Math.max(plusDelta, minusDelta), distance.getMax());
        assertEquals(15.0f, distance.getMean(), 0.001f);
        assertEquals(2.5f, distance.getStdDev(), 0.001f);
    }

    @Test
    public void testBuildDistanceWithMinMax() {
        Distance distance = Distance.buildDistance(10, 20);
        assertEquals(10, distance.getMin());
        assertEquals(20, distance.getMax());
        assertEquals(15.0f, distance.getMean(), 0.001f);
        assertEquals(1.6667f, distance.getStdDev(), 0.001f);
    }

    @Test
    public void testTransformIntoCeleraAssemblerDistance() {
        Distance distance = new Distance(10, 20, 2.0f, 0.5f);
        Distance transformed = Distance.transformIntoCeleraAssemblerDistance(distance);
        assertEquals(10, transformed.getMin());
        assertEquals(20, transformed.getMax());
        assertEquals(2.0f, transformed.getMean(), 0.001f);
        assertEquals((2.0f - 1.015f) / 3.0f, transformed.getStdDev(), 0.001f);

        Distance distance2 = new Distance(10, 20, 10.0f, 0.5f);
        Distance transformed2 = Distance.transformIntoCeleraAssemblerDistance(distance2);
        assertEquals(distance2, transformed2);
    }

    @Test
    public void testEqualsAndHashCode() {
        Distance distance1 = new Distance(10, 20, 15.0f, 2.5f);
        Distance distance2 = new Distance(10, 20, 15.0f, 2.5f);
        Distance distance3 = new Distance(10, 20, 15.0f, 3.0f);

        assertTrue(distance1.equals(distance2));
        assertFalse(distance1.equals(distance3));
        assertEquals(distance1.hashCode(), distance2.hashCode());
        assertNotEquals(distance1.hashCode(), distance3.hashCode());
    }

    @Test
    public void testToString() {
        Distance distance = new Distance(10, 20, 15.0f, 2.5f);
        assertEquals("15.000, std: 2.500", distance.toString());
    }
}
```