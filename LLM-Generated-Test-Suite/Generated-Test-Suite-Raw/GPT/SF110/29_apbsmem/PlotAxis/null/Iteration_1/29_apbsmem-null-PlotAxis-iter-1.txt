To create a comprehensive JUnit 4 test suite for the `PlotAxis` class, we need to test all the public methods. Since `PlotAxis` is an abstract class, we will create a concrete subclass for testing purposes. This subclass will implement the abstract methods with minimal functionality. Here's the complete test suite:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.awt.*;
import java.text.NumberFormat;

public class PlotAxisTest {

    private PlotAxis plotAxis;

    // Concrete subclass for testing
    private class TestPlotAxis extends PlotAxis {
        @Override
        public void setAxisBounds(PlotRunList p0) {
            // Minimal implementation for testing
        }

        @Override
        protected void resizeAxis(Rectangle p0) {
            // Minimal implementation for testing
        }

        @Override
        public void draw(Graphics p0, Component p1, Rectangle p2) {
            // Minimal implementation for testing
        }
    }

    @Before
    public void setUp() {
        plotAxis = new TestPlotAxis();
    }

    @Test
    public void testSetAndGetLabel() {
        plotAxis.setLabel("Test Label");
        assertEquals("Test Label", plotAxis.getLabel());
    }

    @Test
    public void testSetAndGetScale() {
        PlotAxisScale scale = new LinearAxisScale();
        plotAxis.setScale(scale);
        assertEquals(scale, plotAxis.getScale());

        plotAxis.setScale(null);
        assertNotNull(plotAxis.getScale());
    }

    @Test
    public void testSetAndGetNumberFormat() {
        NumberFormat nf = NumberFormat.getCurrencyInstance();
        plotAxis.setNumberFormat(nf);
        assertEquals(nf, plotAxis.getNumberFormat());

        plotAxis.setNumberFormat(null);
        assertNotNull(plotAxis.getNumberFormat());
    }

    @Test
    public void testSetAndGetGridStyle() {
        plotAxis.setGridStyle(PlotAxis.kMajorGrid);
        assertEquals(PlotAxis.kMajorGrid, plotAxis.getGridStyle());
    }

    @Test
    public void testManualLowerBounds() {
        plotAxis.manualLowerBounds(true);
        assertTrue(plotAxis.manualLB);

        plotAxis.manualLowerBounds(false);
        assertFalse(plotAxis.manualLB);
    }

    @Test
    public void testSetAndGetLowerBounds() {
        plotAxis.setLowerBounds(10.0);
        assertEquals(10.0, plotAxis.getLowerBounds(), 0.0);
    }

    @Test
    public void testLowerBoundsAsString() {
        plotAxis.setLowerBounds(10.0);
        assertEquals("10", plotAxis.lowerBoundsAsString());
    }

    @Test
    public void testManualUpperBounds() {
        plotAxis.manualUpperBounds(true);
        assertTrue(plotAxis.manualUB);

        plotAxis.manualUpperBounds(false);
        assertFalse(plotAxis.manualUB);
    }

    @Test
    public void testSetAndGetUpperBounds() {
        plotAxis.setUpperBounds(20.0);
        assertEquals(20.0, plotAxis.getUpperBounds(), 0.0);
    }

    @Test
    public void testUpperBoundsAsString() {
        plotAxis.setUpperBounds(20.0);
        assertEquals("20", plotAxis.upperBoundsAsString());
    }

    @Test
    public void testManualTickStepSize() {
        plotAxis.manualTickStepSize(true);
        assertTrue(plotAxis.manualQuant);

        plotAxis.manualTickStepSize(false);
        assertFalse(plotAxis.manualQuant);
    }

    @Test
    public void testSetAndGetTickStepSize() {
        plotAxis.setTickStepSize(5.0);
        assertEquals(5.0, plotAxis.getTickStepSize(), 0.0);
    }

    @Test
    public void testScaleCoord() {
        plotAxis.xA = 2.0;
        plotAxis.xB = 3.0;
        assertEquals(5, plotAxis.scaleCoord(1.0));
    }

    @Test
    public void testClone() {
        PlotAxis clonedAxis = (PlotAxis) plotAxis.clone();
        assertNotNull(clonedAxis);
        assertNotSame(plotAxis, clonedAxis);
    }
}
```

### Explanation:
- **Concrete Subclass**: `TestPlotAxis` is a minimal implementation of `PlotAxis` to allow instantiation and testing.
- **Setup**: The `setUp` method initializes a `TestPlotAxis` instance before each test.
- **Tests**: Each method in `PlotAxis` is tested for expected behavior, including setting and getting values, and ensuring defaults are applied when `null` is passed.
- **Clone Test**: Ensures that the `clone` method creates a distinct copy of the object.

This test suite covers all public methods and ensures that the class behaves as expected under various conditions.