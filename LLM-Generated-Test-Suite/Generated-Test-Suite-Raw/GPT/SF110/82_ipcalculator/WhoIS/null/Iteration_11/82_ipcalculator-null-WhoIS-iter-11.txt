To create a comprehensive JUnit 4 test suite for the `WhoIS` class, we need to test the main functionalities, including the GUI components and the methods that handle the querying logic. Since the class is heavily GUI-based, testing will focus on the logic and state changes rather than the GUI rendering itself. Here's a basic test suite:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.UnknownHostException;

import javax.swing.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class WhoISTest {

    private WhoIS whoIS;

    @Before
    public void setUp() {
        whoIS = new WhoIS();
    }

    @Test
    public void testInitialValues() {
        assertEquals("APNIC", whoIS.WHOIS_NAME);
        assertEquals("whois.apnic.net", whoIS.WHOIS_ADDRESS);
        assertEquals(43, whoIS.WHOIS_PORT);
    }

    @Test
    public void testReset() {
        whoIS.queryTextField.setText("test query");
        whoIS.lowercaseD.setSelected(true);
        whoIS.inverseQueries.setSelectedIndex(1);
        whoIS.miscList.setSelectedIndex(1);

        whoIS.reset();

        assertEquals("", whoIS.queryTextField.getText());
        assertTrue(whoIS.resetRadioButton.isSelected());
        assertFalse(whoIS.lowercaseD.isSelected());
        assertEquals(0, whoIS.inverseQueries.getSelectedIndex());
        assertEquals(0, whoIS.miscList.getSelectedIndex());
    }

    @Test
    public void testGetQuery() {
        whoIS.queryTextField.setText("test query");
        whoIS.lowercaseL.setSelected(true);
        whoIS.inverseQueries.setSelectedIndex(1); // admin-c

        String expectedQuery = "-i admin-c -l test query";
        assertEquals(expectedQuery, whoIS.getQuery());
    }

    @Test
    public void testStartQueryWithEmptyQuery() {
        whoIS.queryTextField.setText("");
        whoIS = spy(whoIS);
        doNothing().when(whoIS).displayError(anyString());

        whoIS.startQuery();

        verify(whoIS).displayError("No Query Detected");
    }

    @Test
    public void testStartQueryWithValidQuery() {
        whoIS.queryTextField.setText("test query");
        whoIS = spy(whoIS);
        doNothing().when(whoIS).query(anyString());

        whoIS.startQuery();

        verify(whoIS).query("test query");
    }

    @Test
    public void testActionPerformedQueryButton() {
        ActionEvent event = new ActionEvent(whoIS.queryButton, ActionEvent.ACTION_PERFORMED, "Query");
        whoIS = spy(whoIS);
        doNothing().when(whoIS).startQuery();

        whoIS.actionPerformed(event);

        verify(whoIS).startQuery();
    }

    @Test
    public void testActionPerformedResetButton() {
        ActionEvent event = new ActionEvent(whoIS.resetButton, ActionEvent.ACTION_PERFORMED, "Reset");
        whoIS = spy(whoIS);
        doNothing().when(whoIS).reset();

        whoIS.actionPerformed(event);

        verify(whoIS).reset();
    }

    @Test
    public void testQueryUnknownHostException() throws IOException {
        whoIS = spy(whoIS);
        doThrow(new UnknownHostException()).when(whoIS).query(anyString());
        doNothing().when(whoIS).displayError(anyString());

        whoIS.query("test query");

        verify(whoIS).displayError("Unknown Whois host: " + whoIS.WHOIS_ADDRESS);
    }

    @Test
    public void testQueryIOException() throws IOException {
        whoIS = spy(whoIS);
        doThrow(new IOException()).when(whoIS).query(anyString());
        doNothing().when(whoIS).displayError(anyString());

        whoIS.query("test query");

        verify(whoIS).displayError("Whois server could not be contacted.\nPlease check your internet connection.");
    }
}
```

### Explanation:
- **Initial Values Test**: Verifies that the initial values for WHOIS server details are set correctly.
- **Reset Test**: Ensures that the `reset()` method clears the input fields and resets selections.
- **Get Query Test**: Checks that the `getQuery()` method constructs the query string correctly based on user input.
- **Start Query Tests**: Verifies behavior when starting a query with an empty or valid input.
- **Action Performed Tests**: Ensures that the correct methods are called when the query and reset buttons are pressed.
- **Query Exception Tests**: Simulates exceptions during the query process to ensure error handling works as expected.

This test suite uses Mockito to mock and verify interactions, especially for methods that involve GUI components or network operations.