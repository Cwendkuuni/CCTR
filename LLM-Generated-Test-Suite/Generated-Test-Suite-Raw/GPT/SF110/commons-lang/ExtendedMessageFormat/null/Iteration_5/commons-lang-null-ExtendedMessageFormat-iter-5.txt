To create a comprehensive JUnit 4 test suite for the `ExtendedMessageFormat` class, we need to test all public methods, including constructors, `applyPattern`, `toPattern`, `equals`, and `hashCode`. We will also test the behavior of unsupported operations. Below is the test suite:

```java
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.junit.Before;
import org.junit.Test;

import java.text.Format;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        emf = new ExtendedMessageFormat("", Locale.US, registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern");
        assertEquals("Pattern", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern", Locale.FRANCE);
        assertEquals("Pattern", emf.toPattern());
        assertEquals(Locale.FRANCE, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern", registry);
        assertEquals("Pattern", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern", Locale.GERMANY, registry);
        assertEquals("Pattern", emf.toPattern());
        assertEquals(Locale.GERMANY, emf.getLocale());
    }

    @Test
    public void testApplyPattern() {
        emf.applyPattern("Test {0}");
        assertEquals("Test {0}", emf.toPattern());
    }

    @Test
    public void testToPattern() {
        emf.applyPattern("Test {0}");
        assertEquals("Test {0}", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf.setFormats(new Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf.setFormatsByArgumentIndex(new Format[0]);
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf1 = new ExtendedMessageFormat("Pattern", Locale.US, registry);
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Pattern", Locale.US, registry);
        assertTrue(emf1.equals(emf2));
        assertTrue(emf1.equals(emf1));
        assertFalse(emf1.equals(null));
        assertFalse(emf1.equals(new Object()));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf1 = new ExtendedMessageFormat("Pattern", Locale.US, registry);
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Pattern", Locale.US, registry);
        assertEquals(emf1.hashCode(), emf2.hashCode());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testApplyPatternWithInvalidFormat() {
        emf.applyPattern("Test {0,invalid}");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testApplyPatternWithUnterminatedFormatElement() {
        emf.applyPattern("Test {0");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testApplyPatternWithInvalidArgumentIndex() {
        emf.applyPattern("Test {a}");
    }
}
```

### Explanation:
- **Setup**: A `setUp` method initializes a new `ExtendedMessageFormat` instance and a registry map before each test.
- **Constructors**: Tests for each constructor ensure they correctly initialize the object with the given parameters.
- **applyPattern and toPattern**: Tests ensure patterns are applied and retrieved correctly.
- **Unsupported Operations**: Tests verify that unsupported operations throw `UnsupportedOperationException`.
- **equals and hashCode**: Tests ensure these methods behave correctly, especially in terms of symmetry, reflexivity, and consistency.
- **Error Handling**: Tests for invalid patterns ensure that exceptions are thrown as expected.

This test suite should cover the main functionalities and edge cases of the `ExtendedMessageFormat` class.