To create a comprehensive JUnit 4 test suite for the `ExtendedMessageFormat` class, we need to test the public methods and ensure that they behave as expected. This includes testing constructors, `applyPattern`, `toPattern`, `equals`, and `hashCode` methods. We will also test the unsupported operations to ensure they throw the expected exceptions.

Below is the JUnit 4 test suite for the `ExtendedMessageFormat` class:

```java
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.junit.Test;

import java.text.Format;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

public class ExtendedMessageFormatTest {

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        assertEquals("Hello {0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}", Locale.US);
        assertEquals("Hello {0}", emf.toPattern());
        assertEquals(Locale.US, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        Map<String, FormatFactory> registry = new HashMap<>();
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}", registry);
        assertEquals("Hello {0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        Map<String, FormatFactory> registry = new HashMap<>();
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}", Locale.US, registry);
        assertEquals("Hello {0}", emf.toPattern());
        assertEquals(Locale.US, emf.getLocale());
    }

    @Test
    public void testApplyPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        emf.applyPattern("Goodbye {0}");
        assertEquals("Goodbye {0}", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatThrowsException() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndexThrowsException() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsThrowsException() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        emf.setFormats(new Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndexThrowsException() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        emf.setFormatsByArgumentIndex(new Format[0]);
    }

    @Test
    public void testEqualsAndHashCode() {
        ExtendedMessageFormat emf1 = new ExtendedMessageFormat("Hello {0}");
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Hello {0}");
        ExtendedMessageFormat emf3 = new ExtendedMessageFormat("Goodbye {0}");

        assertTrue(emf1.equals(emf2));
        assertFalse(emf1.equals(emf3));
        assertEquals(emf1.hashCode(), emf2.hashCode());
        assertNotEquals(emf1.hashCode(), emf3.hashCode());
    }

    @Test
    public void testEqualsWithDifferentObject() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        assertFalse(emf.equals(new Object()));
    }

    @Test
    public void testEqualsWithNull() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Hello {0}");
        assertFalse(emf.equals(null));
    }
}
```

### Explanation:
- **Constructors**: We test all four constructors to ensure they initialize the object correctly with the given pattern, locale, and registry.
- **applyPattern**: We test that applying a new pattern updates the internal pattern correctly.
- **Unsupported Operations**: We test that the methods `setFormat`, `setFormatByArgumentIndex`, `setFormats`, and `setFormatsByArgumentIndex` throw `UnsupportedOperationException`.
- **equals and hashCode**: We test the `equals` and `hashCode` methods to ensure they behave correctly, including comparisons with different objects and null.
- **Additional Tests**: We include tests for `equals` with a different object type and null to ensure robustness.

This test suite should cover the main functionalities and edge cases for the `ExtendedMessageFormat` class.