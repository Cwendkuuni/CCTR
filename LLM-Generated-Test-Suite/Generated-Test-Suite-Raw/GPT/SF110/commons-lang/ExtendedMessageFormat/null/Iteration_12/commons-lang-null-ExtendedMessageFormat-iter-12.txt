To create a comprehensive JUnit 4 test suite for the `ExtendedMessageFormat` class, we need to test all public methods, including constructors, `applyPattern`, `toPattern`, `equals`, and `hashCode`. We will also test the behavior of unsupported operations. Here's a complete test suite:

```java
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.junit.Before;
import org.junit.Test;

import java.text.Format;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        emf = new ExtendedMessageFormat("Pattern {0}", Locale.US, registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern {0}");
        assertEquals("Pattern {0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern {0}", Locale.FRANCE);
        assertEquals("Pattern {0}", emf.toPattern());
        assertEquals(Locale.FRANCE, emf.getLocale());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern {0}", registry);
        assertEquals("Pattern {0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("Pattern {0}", Locale.GERMANY, registry);
        assertEquals("Pattern {0}", emf.toPattern());
        assertEquals(Locale.GERMANY, emf.getLocale());
    }

    @Test
    public void testApplyPattern() {
        emf.applyPattern("New Pattern {1}");
        assertEquals("New Pattern {1}", emf.toPattern());
    }

    @Test
    public void testToPattern() {
        assertEquals("Pattern {0}", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf.setFormats(new Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf.setFormatsByArgumentIndex(new Format[0]);
    }

    @Test
    public void testEquals() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Pattern {0}", Locale.US, registry);
        assertTrue(emf.equals(emf2));
        assertFalse(emf.equals(null));
        assertFalse(emf.equals(new Object()));
    }

    @Test
    public void testHashCode() {
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("Pattern {0}", Locale.US, registry);
        assertEquals(emf.hashCode(), emf2.hashCode());
    }
}
```

### Explanation:

1. **Setup**: We initialize a `Map<String, FormatFactory>` and an `ExtendedMessageFormat` instance before each test.

2. **Constructors**: We test all constructors to ensure they initialize the object correctly with different combinations of parameters.

3. **applyPattern**: We test the `applyPattern` method to ensure it correctly updates the pattern.

4. **toPattern**: We verify that `toPattern` returns the correct pattern string.

5. **Unsupported Operations**: We test that unsupported operations throw `UnsupportedOperationException`.

6. **equals and hashCode**: We test the `equals` and `hashCode` methods to ensure they behave as expected.

This test suite covers the main functionalities and edge cases of the `ExtendedMessageFormat` class.