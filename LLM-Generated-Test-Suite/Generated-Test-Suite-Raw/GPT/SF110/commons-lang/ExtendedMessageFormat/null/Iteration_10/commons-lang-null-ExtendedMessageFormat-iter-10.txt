To create a comprehensive JUnit 4 test suite for the `ExtendedMessageFormat` class, we need to test all public methods, including constructors, `applyPattern`, `toPattern`, `equals`, and `hashCode`. We will also test the behavior of unsupported operations. Here's a test suite that covers these aspects:

```java
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.junit.Before;
import org.junit.Test;

import java.text.Format;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

public class ExtendedMessageFormatTest {

    private ExtendedMessageFormat emf;
    private Map<String, FormatFactory> registry;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        emf = new ExtendedMessageFormat("{0}", Locale.US, registry);
    }

    @Test
    public void testConstructorWithPattern() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("{0}");
        assertEquals("{0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("{0}", Locale.US);
        assertEquals("{0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("{0}", registry);
        assertEquals("{0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        ExtendedMessageFormat emf = new ExtendedMessageFormat("{0}", Locale.US, registry);
        assertEquals("{0}", emf.toPattern());
    }

    @Test
    public void testApplyPattern() {
        emf.applyPattern("{0,number,#.##}");
        assertEquals("{0,number,#.##}", emf.toPattern());
    }

    @Test
    public void testToPattern() {
        emf.applyPattern("{0,number,#.##}");
        assertEquals("{0,number,#.##}", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatThrowsException() {
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndexThrowsException() {
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsThrowsException() {
        emf.setFormats(new Format[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndexThrowsException() {
        emf.setFormatsByArgumentIndex(new Format[0]);
    }

    @Test
    public void testEqualsAndHashCode() {
        ExtendedMessageFormat emf1 = new ExtendedMessageFormat("{0}", Locale.US, registry);
        ExtendedMessageFormat emf2 = new ExtendedMessageFormat("{0}", Locale.US, registry);
        assertEquals(emf1, emf2);
        assertEquals(emf1.hashCode(), emf2.hashCode());

        ExtendedMessageFormat emf3 = new ExtendedMessageFormat("{1}", Locale.US, registry);
        assertNotEquals(emf1, emf3);
        assertNotEquals(emf1.hashCode(), emf3.hashCode());
    }

    @Test
    public void testEqualsWithDifferentObject() {
        assertNotEquals(emf, new Object());
    }

    @Test
    public void testEqualsWithNull() {
        assertNotEquals(emf, null);
    }

    @Test
    public void testEqualsWithSameObject() {
        assertEquals(emf, emf);
    }
}
```

### Explanation:

1. **Setup**: We initialize an `ExtendedMessageFormat` instance and a registry map before each test.

2. **Constructors**: We test all four constructors to ensure they initialize the object correctly.

3. **applyPattern and toPattern**: We test the `applyPattern` method to ensure it correctly parses and stores the pattern, and `toPattern` to verify it returns the expected pattern.

4. **Unsupported Operations**: We test that the methods `setFormat`, `setFormatByArgumentIndex`, `setFormats`, and `setFormatsByArgumentIndex` throw `UnsupportedOperationException`.

5. **equals and hashCode**: We test the `equals` and `hashCode` methods to ensure they behave correctly for equal and unequal objects.

6. **Additional equals Tests**: We test `equals` with different object types, null, and the same object to ensure it behaves as expected.

This test suite provides a comprehensive coverage of the `ExtendedMessageFormat` class's public API.