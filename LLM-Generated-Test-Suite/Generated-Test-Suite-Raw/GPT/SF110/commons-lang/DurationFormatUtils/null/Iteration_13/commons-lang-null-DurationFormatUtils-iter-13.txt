Certainly! Below is a JUnit 4 test suite that comprehensively tests the methods in the `DurationFormatUtils` class. This test suite covers various scenarios for each method to ensure they function as expected.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.TimeZone;

import org.apache.commons.lang3.time.DurationFormatUtils;
import org.junit.Test;

public class DurationFormatUtilsTest {

    @Test
    public void testFormatDurationHMS() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(0));
        assertEquals("0:00:01.000", DurationFormatUtils.formatDurationHMS(1000));
        assertEquals("0:01:00.000", DurationFormatUtils.formatDurationHMS(60000));
        assertEquals("1:00:00.000", DurationFormatUtils.formatDurationHMS(3600000));
    }

    @Test
    public void testFormatDurationISO() {
        assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0));
        assertEquals("P0Y0M0DT0H0M1.000S", DurationFormatUtils.formatDurationISO(1000));
        assertEquals("P0Y0M0DT0H1M0.000S", DurationFormatUtils.formatDurationISO(60000));
        assertEquals("P0Y0M0DT1H0M0.000S", DurationFormatUtils.formatDurationISO(3600000));
    }

    @Test
    public void testFormatDuration() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatDuration(0, "H:mm:ss.SSS"));
        assertEquals("0:00:01.000", DurationFormatUtils.formatDuration(1000, "H:mm:ss.SSS"));
        assertEquals("0:01:00.000", DurationFormatUtils.formatDuration(60000, "H:mm:ss.SSS"));
        assertEquals("1:00:00.000", DurationFormatUtils.formatDuration(3600000, "H:mm:ss.SSS"));
    }

    @Test
    public void testFormatDurationWithPadding() {
        assertEquals("00:00:00.000", DurationFormatUtils.formatDuration(0, "HH:mm:ss.SSS", true));
        assertEquals("00:00:01.000", DurationFormatUtils.formatDuration(1000, "HH:mm:ss.SSS", true));
        assertEquals("00:01:00.000", DurationFormatUtils.formatDuration(60000, "HH:mm:ss.SSS", true));
        assertEquals("01:00:00.000", DurationFormatUtils.formatDuration(3600000, "HH:mm:ss.SSS", true));
    }

    @Test
    public void testFormatDurationWords() {
        assertEquals("0 days 0 hours 0 minutes 0 seconds", DurationFormatUtils.formatDurationWords(0, false, false));
        assertEquals("1 second", DurationFormatUtils.formatDurationWords(1000, true, true));
        assertEquals("1 minute", DurationFormatUtils.formatDurationWords(60000, true, true));
        assertEquals("1 hour", DurationFormatUtils.formatDurationWords(3600000, true, true));
        assertEquals("1 day", DurationFormatUtils.formatDurationWords(86400000, true, true));
    }

    @Test
    public void testFormatPeriodISO() {
        long startMillis = 0;
        long endMillis = 3600000;
        assertEquals("P0Y0M0DT1H0M0.000S", DurationFormatUtils.formatPeriodISO(startMillis, endMillis));
    }

    @Test
    public void testFormatPeriod() {
        long startMillis = 0;
        long endMillis = 3600000;
        assertEquals("1:00:00.000", DurationFormatUtils.formatPeriod(startMillis, endMillis, "H:mm:ss.SSS"));
    }

    @Test
    public void testFormatPeriodWithPadding() {
        long startMillis = 0;
        long endMillis = 3600000;
        assertEquals("01:00:00.000", DurationFormatUtils.formatPeriod(startMillis, endMillis, "HH:mm:ss.SSS", true, TimeZone.getDefault()));
    }

    @Test
    public void testLexx() {
        DurationFormatUtils.Token[] tokens = DurationFormatUtils.lexx("H:mm:ss.SSS");
        assertEquals(7, tokens.length);
        assertEquals("H", tokens[0].getValue());
        assertEquals(":", tokens[1].getValue());
        assertEquals("m", tokens[2].getValue());
        assertEquals(":", tokens[3].getValue());
        assertEquals("s", tokens[4].getValue());
        assertEquals(".", tokens[5].getValue());
        assertEquals("S", tokens[6].getValue());
    }

    @Test
    public void testTokenEquality() {
        DurationFormatUtils.Token token1 = new DurationFormatUtils.Token("H");
        DurationFormatUtils.Token token2 = new DurationFormatUtils.Token("H");
        assertTrue(token1.equals(token2));
    }
}
```

This test suite covers the following methods:
- `formatDurationHMS`
- `formatDurationISO`
- `formatDuration`
- `formatDurationWords`
- `formatPeriodISO`
- `formatPeriod`
- `lexx`

Each test method checks various scenarios, including edge cases, to ensure the methods behave as expected.