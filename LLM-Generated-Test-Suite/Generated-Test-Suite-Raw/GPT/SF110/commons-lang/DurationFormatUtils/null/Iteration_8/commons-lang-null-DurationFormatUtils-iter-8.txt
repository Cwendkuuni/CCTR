Certainly! Below is a JUnit 4 test suite for the `DurationFormatUtils` class. This test suite aims to cover various scenarios for each method in the class.

```java
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.junit.Test;
import static org.junit.Assert.*;

public class DurationFormatUtilsTest {

    @Test
    public void testFormatDurationHMS() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(0));
        assertEquals("0:00:01.000", DurationFormatUtils.formatDurationHMS(1000));
        assertEquals("0:01:00.000", DurationFormatUtils.formatDurationHMS(60000));
        assertEquals("1:00:00.000", DurationFormatUtils.formatDurationHMS(3600000));
    }

    @Test
    public void testFormatDurationISO() {
        assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0));
        assertEquals("P0Y0M0DT0H0M1.000S", DurationFormatUtils.formatDurationISO(1000));
        assertEquals("P0Y0M0DT0H1M0.000S", DurationFormatUtils.formatDurationISO(60000));
        assertEquals("P0Y0M0DT1H0M0.000S", DurationFormatUtils.formatDurationISO(3600000));
    }

    @Test
    public void testFormatDuration() {
        assertEquals("0:00:00.000", DurationFormatUtils.formatDuration(0, "H:mm:ss.SSS"));
        assertEquals("0:00:01.000", DurationFormatUtils.formatDuration(1000, "H:mm:ss.SSS"));
        assertEquals("0:01:00.000", DurationFormatUtils.formatDuration(60000, "H:mm:ss.SSS"));
        assertEquals("1:00:00.000", DurationFormatUtils.formatDuration(3600000, "H:mm:ss.SSS"));
    }

    @Test
    public void testFormatDurationWithPadding() {
        assertEquals("00:00:00.000", DurationFormatUtils.formatDuration(0, "HH:mm:ss.SSS", true));
        assertEquals("00:00:01.000", DurationFormatUtils.formatDuration(1000, "HH:mm:ss.SSS", true));
        assertEquals("00:01:00.000", DurationFormatUtils.formatDuration(60000, "HH:mm:ss.SSS", true));
        assertEquals("01:00:00.000", DurationFormatUtils.formatDuration(3600000, "HH:mm:ss.SSS", true));
    }

    @Test
    public void testFormatDurationWords() {
        assertEquals("0 days 0 hours 0 minutes 0 seconds", DurationFormatUtils.formatDurationWords(0, false, false));
        assertEquals("1 second", DurationFormatUtils.formatDurationWords(1000, true, true));
        assertEquals("1 minute", DurationFormatUtils.formatDurationWords(60000, true, true));
        assertEquals("1 hour", DurationFormatUtils.formatDurationWords(3600000, true, true));
    }

    @Test
    public void testFormatPeriodISO() {
        long start = System.currentTimeMillis();
        long end = start + 3600000; // 1 hour later
        assertEquals("P0Y0M0DT1H0M0.000S", DurationFormatUtils.formatPeriodISO(start, end));
    }

    @Test
    public void testFormatPeriod() {
        long start = System.currentTimeMillis();
        long end = start + 3600000; // 1 hour later
        assertEquals("1:00:00.000", DurationFormatUtils.formatPeriod(start, end, "H:mm:ss.SSS"));
    }

    @Test
    public void testFormatPeriodWithPadding() {
        long start = System.currentTimeMillis();
        long end = start + 3600000; // 1 hour later
        assertEquals("01:00:00.000", DurationFormatUtils.formatPeriod(start, end, "HH:mm:ss.SSS", true, TimeZone.getDefault()));
    }
}
```

### Explanation:
- **Test Methods**: Each method in the `DurationFormatUtils` class has a corresponding test method in the test suite.
- **Assertions**: The `assertEquals` method is used to verify that the actual output matches the expected output.
- **Edge Cases**: The tests include edge cases such as zero duration and typical durations like one second, one minute, and one hour.
- **Time Zone**: The `formatPeriodWithPadding` test includes a `TimeZone` parameter to ensure the method handles time zones correctly.

This test suite should provide a comprehensive check of the `DurationFormatUtils` class's functionality.