Certainly! Below is a JUnit 4 test suite to comprehensively test all the methods in the `Base64` class. The test suite includes tests for both the standard Base64 and the alternative Base64 encoding and decoding methods.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import com.hf.sfm.crypt.Base64;

public class Base64Test {

    @Test
    public void testByteArrayToBase64() {
        byte[] input = "Hello, World!".getBytes();
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String result = Base64.byteArrayToBase64(input);
        assertEquals(expected, result);
    }

    @Test
    public void testBase64ToByteArray() {
        String input = "SGVsbG8sIFdvcmxkIQ==";
        byte[] expected = "Hello, World!".getBytes();
        byte[] result = Base64.base64ToByteArray(input);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testByteArrayToAltBase64() {
        byte[] input = "Hello, World!".getBytes();
        String expected = "e$ZsbG8sIFdvcmxkIQ==";
        String result = Base64.byteArrayToAltBase64(input);
        assertEquals(expected, result);
    }

    @Test
    public void testAltBase64ToByteArray() {
        String input = "e$ZsbG8sIFdvcmxkIQ==";
        byte[] expected = "Hello, World!".getBytes();
        byte[] result = Base64.altBase64ToByteArray(input);
        assertArrayEquals(expected, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBase64ToByteArrayInvalidLength() {
        String input = "SGVsbG8sIFdvcmxkIQ="; // Invalid length
        Base64.base64ToByteArray(input);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAltBase64ToByteArrayInvalidLength() {
        String input = "e$ZsbG8sIFdvcmxkIQ="; // Invalid length
        Base64.altBase64ToByteArray(input);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBase64ToByteArrayIllegalCharacter() {
        String input = "SGVsbG8sIFdvcmxkIQ==#"; // Illegal character
        Base64.base64ToByteArray(input);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAltBase64ToByteArrayIllegalCharacter() {
        String input = "e$ZsbG8sIFdvcmxkIQ==#"; // Illegal character
        Base64.altBase64ToByteArray(input);
    }

    @Test
    public void testEmptyByteArrayToBase64() {
        byte[] input = new byte[0];
        String expected = "";
        String result = Base64.byteArrayToBase64(input);
        assertEquals(expected, result);
    }

    @Test
    public void testEmptyBase64ToByteArray() {
        String input = "";
        byte[] expected = new byte[0];
        byte[] result = Base64.base64ToByteArray(input);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testEmptyByteArrayToAltBase64() {
        byte[] input = new byte[0];
        String expected = "";
        String result = Base64.byteArrayToAltBase64(input);
        assertEquals(expected, result);
    }

    @Test
    public void testEmptyAltBase64ToByteArray() {
        String input = "";
        byte[] expected = new byte[0];
        byte[] result = Base64.altBase64ToByteArray(input);
        assertArrayEquals(expected, result);
    }
}
```

### Explanation:
- **Standard Base64 Tests**: Tests for encoding and decoding using the standard Base64 methods (`byteArrayToBase64` and `base64ToByteArray`).
- **Alternative Base64 Tests**: Tests for encoding and decoding using the alternative Base64 methods (`byteArrayToAltBase64` and `altBase64ToByteArray`).
- **Edge Cases**: Tests for empty input arrays and strings.
- **Invalid Inputs**: Tests for invalid Base64 strings that should throw `IllegalArgumentException` due to incorrect length or illegal characters.

This test suite should cover the main functionalities and edge cases for the `Base64` class.