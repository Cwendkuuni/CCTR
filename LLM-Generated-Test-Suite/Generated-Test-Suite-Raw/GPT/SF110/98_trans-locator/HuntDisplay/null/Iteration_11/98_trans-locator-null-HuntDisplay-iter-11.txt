Certainly! Below is a JUnit 4 test suite for the `HuntDisplay` class. This test suite includes tests for the constructor, `getPreferredSize`, `getMinimumSize`, `addPoint`, and `addLandMark` methods. Note that testing `paintComponent` directly is challenging due to its graphical nature, but you can verify that it doesn't throw exceptions when invoked.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.awt.*;
import javax.swing.*;
import java.util.Vector;

public class HuntDisplayTest {

    private HuntDisplay huntDisplay;

    @Before
    public void setUp() {
        huntDisplay = new HuntDisplay();
    }

    @Test
    public void testConstructor() {
        assertNotNull(huntDisplay.points);
        assertNotNull(huntDisplay.landmarks);
        assertEquals(Color.WHITE, huntDisplay.getBackground());
        assertEquals(new Dimension(50, 50), huntDisplay.getMinimumSize());
        assertEquals(new Dimension(200, 200), huntDisplay.getPreferredSize());
    }

    @Test
    public void testGetPreferredSize() {
        Dimension expected = new Dimension(200, 200);
        assertEquals(expected, huntDisplay.getPreferredSize());
    }

    @Test
    public void testGetMinimumSize() {
        Dimension expected = new Dimension(50, 50);
        assertEquals(expected, huntDisplay.getMinimumSize());
    }

    @Test
    public void testAddPoint() {
        TrigPoint point = new TrigPoint(45.0, 90.0, 0.0, false);
        huntDisplay.addPoint(point);
        assertEquals(1, huntDisplay.points.size());
        TrigPoint addedPoint = (TrigPoint) huntDisplay.points.get(0);
        assertEquals(0.5, addedPoint.getX(), 0.01);
        assertEquals(0.5, addedPoint.getY(), 0.01);
        assertEquals(0.0, addedPoint.getTheta(), 0.01);
        assertFalse(addedPoint.isFox());
    }

    @Test
    public void testAddLandMark() {
        ImageIcon icon = new ImageIcon();
        Landmark landmark = new Landmark(45.0, 90.0, icon);
        huntDisplay.addLandMark(landmark);
        assertEquals(1, huntDisplay.landmarks.size());
        Landmark addedLandmark = (Landmark) huntDisplay.landmarks.get(0);
        assertEquals(0.5, addedLandmark.getLat(), 0.01);
        assertEquals(0.5, addedLandmark.getLon(), 0.01);
        assertEquals(icon, addedLandmark.getIcon());
    }

    @Test
    public void testPaintComponent() {
        // Create a buffered image to draw on
        BufferedImage image = new BufferedImage(200, 200, BufferedImage.TYPE_INT_ARGB);
        Graphics g = image.getGraphics();

        // Ensure no exceptions are thrown during painting
        huntDisplay.paintComponent(g);
    }
}
```

### Notes:
- **TrigPoint and Landmark Classes**: The test suite assumes the existence of `TrigPoint` and `Landmark` classes with appropriate constructors and methods (`getX`, `getY`, `getTheta`, `isFox`, `getLat`, `getLon`, `getIcon`). You will need to adjust the tests if these classes differ.
- **Graphics Testing**: The `paintComponent` test ensures that the method can be called without exceptions. Testing graphical output typically requires more sophisticated techniques, such as image comparison or using a GUI testing framework.
- **ImageIcon**: The `addLandMark` test uses a simple `ImageIcon` for testing. Adjust as necessary based on your actual `Landmark` class implementation.