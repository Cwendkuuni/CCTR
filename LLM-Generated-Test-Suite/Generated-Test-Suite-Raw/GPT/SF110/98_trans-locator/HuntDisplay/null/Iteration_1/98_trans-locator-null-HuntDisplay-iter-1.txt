Certainly! Below is a JUnit 4 test suite for the `HuntDisplay` class. This test suite covers the methods in the class, including `getPreferredSize`, `getMinimumSize`, `addPoint`, and `addLandMark`. Note that the test suite assumes the existence of `TrigPoint` and `Landmark` classes with the specified methods.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.awt.*;
import javax.swing.*;

public class HuntDisplayTest {

    private HuntDisplay huntDisplay;

    @Before
    public void setUp() {
        huntDisplay = new HuntDisplay();
    }

    @Test
    public void testGetPreferredSize() {
        Dimension expected = new Dimension(200, 200);
        assertEquals(expected, huntDisplay.getPreferredSize());
    }

    @Test
    public void testGetMinimumSize() {
        Dimension expected = new Dimension(50, 50);
        assertEquals(expected, huntDisplay.getMinimumSize());
    }

    @Test
    public void testAddPoint() {
        TrigPoint point = new TrigPoint(90.0, 180.0, 0.0, false);
        huntDisplay.addPoint(point);
        assertEquals(1, huntDisplay.points.size());
        TrigPoint addedPoint = (TrigPoint) huntDisplay.points.elementAt(0);
        assertEquals(1.0, addedPoint.getY(), 0.001);
        assertEquals(1.0, addedPoint.getX(), 0.001);
        assertEquals(0.0, addedPoint.getTheta(), 0.001);
        assertFalse(addedPoint.isFox());
    }

    @Test
    public void testAddLandMark() {
        ImageIcon icon = new ImageIcon();
        Landmark landmark = new Landmark(90.0, 180.0, icon);
        huntDisplay.addLandMark(landmark);
        assertEquals(1, huntDisplay.landmarks.size());
        Landmark addedLandmark = (Landmark) huntDisplay.landmarks.elementAt(0);
        assertEquals(1.0, addedLandmark.getLat(), 0.001);
        assertEquals(1.0, addedLandmark.getLon(), 0.001);
        assertEquals(icon, addedLandmark.getIcon());
    }

    @Test
    public void testPaintComponent() {
        // Create a mock Graphics object
        Graphics g = new BufferedImage(200, 200, BufferedImage.TYPE_INT_ARGB).getGraphics();
        
        // Add a point and a landmark
        TrigPoint point = new TrigPoint(90.0, 180.0, 0.0, false);
        huntDisplay.addPoint(point);
        ImageIcon icon = new ImageIcon();
        Landmark landmark = new Landmark(90.0, 180.0, icon);
        huntDisplay.addLandMark(landmark);

        // Call paintComponent
        huntDisplay.paintComponent(g);

        // Since paintComponent doesn't return a value, we can't assert directly on it.
        // However, we can ensure no exceptions are thrown and the method completes.
    }
}
```

### Notes:
- The `testPaintComponent` method uses a `BufferedImage` to create a `Graphics` object for testing purposes. This allows the `paintComponent` method to be called without a real GUI environment.
- The `TrigPoint` and `Landmark` classes are assumed to have the methods `getX`, `getY`, `getTheta`, `isFox`, `getLat`, `getLon`, and `getIcon` as used in the `HuntDisplay` class.
- The `ImageIcon` class is used to create a mock icon for the `Landmark` test.