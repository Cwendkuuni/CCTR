To create a comprehensive JUnit 4 test suite for the `FoxHuntFrame` class, we need to focus on testing the public methods and any significant interactions within the class. The main methods to test are `addPoint()` and `actionPerformed()`. Additionally, we should test the `FoxTableModel` class, which is an inner class of `FoxHuntFrame`.

Below is a JUnit 4 test suite for the `FoxHuntFrame` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class FoxHuntFrameTest {

    private FoxHuntFrame foxHuntFrame;

    @Before
    public void setUp() {
        foxHuntFrame = new FoxHuntFrame();
    }

    @Test
    public void testAddPoint() {
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");

        foxHuntFrame.addPoint();

        assertEquals(1, foxHuntFrame.points.size());
        assertEquals(0, foxHuntFrame.fox.size());

        foxHuntFrame.theta.setText("90");
        foxHuntFrame.lat.setText("36.7783");
        foxHuntFrame.lon.setText("-119.4179");

        foxHuntFrame.addPoint();

        assertEquals(2, foxHuntFrame.points.size());
        assertEquals(1, foxHuntFrame.fox.size());
    }

    @Test
    public void testActionPerformed() {
        ActionEvent mockEvent = Mockito.mock(ActionEvent.class);
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");

        foxHuntFrame.actionPerformed(mockEvent);

        assertEquals(1, foxHuntFrame.points.size());
    }

    @Test
    public void testLoadLandmarksFileNotFound() {
        // Rename the landmarks.cfg file if it exists to simulate file not found
        File file = new File("./landmarks.cfg");
        if (file.exists()) {
            file.renameTo(new File("./landmarks.cfg.bak"));
        }

        try {
            foxHuntFrame.loadLandmarks();
            fail("Expected an error dialog for file not found");
        } catch (Exception e) {
            // Expected exception due to file not found
        } finally {
            // Restore the file if it was renamed
            if (new File("./landmarks.cfg.bak").exists()) {
                new File("./landmarks.cfg.bak").renameTo(new File("./landmarks.cfg"));
            }
        }
    }

    @Test
    public void testLoadLandmarksIOException() throws IOException {
        // Create a temporary landmarks.cfg file with invalid content
        File file = new File("./landmarks.cfg");
        FileWriter writer = new FileWriter(file);
        writer.write("INVALID CONTENT");
        writer.close();

        try {
            foxHuntFrame.loadLandmarks();
            fail("Expected an error dialog for IO exception");
        } catch (Exception e) {
            // Expected exception due to invalid file content
        } finally {
            // Clean up the temporary file
            file.delete();
        }
    }

    @Test
    public void testFoxTableModel() {
        FoxHuntFrame.FoxTableModel model = foxHuntFrame.new FoxTableModel();

        assertEquals(0, model.getRowCount());
        assertEquals(2, model.getColumnCount());
        assertEquals("Lattitude", model.getColumnName(0));
        assertEquals("Longitude", model.getColumnName(1));

        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");
        foxHuntFrame.addPoint();

        foxHuntFrame.theta.setText("90");
        foxHuntFrame.lat.setText("36.7783");
        foxHuntFrame.lon.setText("-119.4179");
        foxHuntFrame.addPoint();

        assertEquals(1, model.getRowCount());
        assertFalse(model.isCellEditable(0, 0));
    }
}
```

### Explanation:
- **Setup**: The `setUp()` method initializes a new instance of `FoxHuntFrame` before each test.
- **Test `addPoint()`**: This test checks if points and fox vectors are updated correctly when `addPoint()` is called.
- **Test `actionPerformed()`**: This test verifies that `actionPerformed()` correctly calls `addPoint()`.
- **Test `loadLandmarks()` for File Not Found**: This test simulates a missing landmarks configuration file and expects an error.
- **Test `loadLandmarks()` for IOException**: This test creates a temporary file with invalid content to simulate an IOException.
- **Test `FoxTableModel`**: This test checks the behavior of the `FoxTableModel` class, including row and column counts, column names, and cell editability.

Note: The tests for file operations assume the presence of a `landmarks.cfg` file in the working directory. Adjust the file path as necessary for your environment.