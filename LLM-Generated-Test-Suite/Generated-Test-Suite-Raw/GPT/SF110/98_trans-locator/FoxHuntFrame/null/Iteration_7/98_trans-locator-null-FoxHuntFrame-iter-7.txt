To create a comprehensive JUnit 4 test suite for the `FoxHuntFrame` class, we need to focus on testing the public methods and any significant behavior of the class. The primary methods to test are `addPoint()` and `actionPerformed()`, as well as ensuring that the GUI components are initialized correctly. Since `FoxHuntFrame` is a GUI class, testing will involve verifying the state of the GUI components after certain actions.

Below is a JUnit 4 test suite for the `FoxHuntFrame` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class FoxHuntFrameTest {

    private FoxHuntFrame foxHuntFrame;

    @Before
    public void setUp() {
        foxHuntFrame = new FoxHuntFrame();
    }

    @Test
    public void testAddPoint() {
        // Set up the text fields with valid data
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");

        // Call the method under test
        foxHuntFrame.addPoint();

        // Verify that a point was added to the points vector
        assertEquals(1, foxHuntFrame.points.size());

        // Verify that the display has the new point
        assertEquals(1, foxHuntFrame.display.getPoints().size());
    }

    @Test
    public void testActionPerformed() {
        // Set up the text fields with valid data
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");

        // Create a mock ActionEvent
        ActionEvent mockEvent = Mockito.mock(ActionEvent.class);

        // Call the method under test
        foxHuntFrame.actionPerformed(mockEvent);

        // Verify that a point was added to the points vector
        assertEquals(1, foxHuntFrame.points.size());

        // Verify that the display has the new point
        assertEquals(1, foxHuntFrame.display.getPoints().size());
    }

    @Test
    public void testLoadLandmarksFileNotFound() {
        // Rename the landmarks file if it exists to simulate file not found
        File landmarksFile = new File("./landmarks.cfg");
        File tempFile = new File("./landmarks_temp.cfg");
        if (landmarksFile.exists()) {
            landmarksFile.renameTo(tempFile);
        }

        try {
            foxHuntFrame.loadLandmarks();
            fail("Expected an error dialog due to missing landmarks file");
        } catch (Exception e) {
            // Expected behavior
        } finally {
            // Restore the landmarks file
            if (tempFile.exists()) {
                tempFile.renameTo(landmarksFile);
            }
        }
    }

    @Test
    public void testLoadLandmarksIOException() throws IOException {
        // Create a temporary landmarks file with invalid content
        File landmarksFile = new File("./landmarks.cfg");
        try (FileWriter writer = new FileWriter(landmarksFile)) {
            writer.write("INVALID CONTENT");
        }

        try {
            foxHuntFrame.loadLandmarks();
            fail("Expected an error dialog due to invalid file content");
        } catch (Exception e) {
            // Expected behavior
        } finally {
            // Clean up the temporary file
            landmarksFile.delete();
        }
    }

    @Test
    public void testFoxTableModel() {
        FoxHuntFrame.FoxTableModel model = foxHuntFrame.new FoxTableModel();

        // Verify column count
        assertEquals(2, model.getColumnCount());

        // Verify column names
        assertEquals("Lattitude", model.getColumnName(0));
        assertEquals("Longitude", model.getColumnName(1));

        // Verify row count
        assertEquals(0, model.getRowCount());

        // Add a point and verify row count
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");
        foxHuntFrame.addPoint();
        assertEquals(1, model.getRowCount());
    }
}
```

### Explanation:
- **setUp Method**: Initializes a new instance of `FoxHuntFrame` before each test.
- **testAddPoint**: Tests the `addPoint` method by setting text fields and verifying that points are added correctly.
- **testActionPerformed**: Tests the `actionPerformed` method to ensure it triggers `addPoint`.
- **testLoadLandmarksFileNotFound**: Simulates a missing landmarks file and expects an error.
- **testLoadLandmarksIOException**: Simulates an invalid landmarks file content and expects an error.
- **testFoxTableModel**: Tests the `FoxTableModel` for correct column names, count, and row count after adding a point.

This test suite uses JUnit 4 and Mockito for mocking `ActionEvent`. It also handles file operations to simulate different scenarios for the `loadLandmarks` method.