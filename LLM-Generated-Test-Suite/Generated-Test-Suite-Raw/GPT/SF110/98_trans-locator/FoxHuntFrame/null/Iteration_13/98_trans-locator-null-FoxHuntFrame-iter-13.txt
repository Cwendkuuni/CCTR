To create a comprehensive JUnit 4 test suite for the `FoxHuntFrame` class, we need to focus on testing the public methods and behaviors of the class. Since `FoxHuntFrame` is a GUI application, testing it involves simulating user interactions and verifying the outcomes. The main method to test here is `addPoint`, as it involves logic that affects the state of the application. We will also test the `actionPerformed` method indirectly through `addPoint`.

Below is a JUnit 4 test suite for the `FoxHuntFrame` class. Note that GUI testing can be complex, and in a real-world scenario, you might use a library like FEST or AssertJ-Swing for more advanced GUI testing. However, for simplicity, this test suite uses basic JUnit assertions and simulates user input by directly setting text fields.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import javax.swing.*;
import java.awt.event.ActionEvent;

public class FoxHuntFrameTest {

    private FoxHuntFrame foxHuntFrame;

    @Before
    public void setUp() {
        foxHuntFrame = new FoxHuntFrame();
    }

    @Test
    public void testAddPoint() {
        // Set up the input values
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");

        // Simulate button click
        foxHuntFrame.add.doClick();

        // Verify that a point was added
        assertEquals(1, foxHuntFrame.points.size());
        assertEquals(0, foxHuntFrame.fox.size());

        // Add another point to trigger fox calculation
        foxHuntFrame.theta.setText("90");
        foxHuntFrame.lat.setText("36.7783");
        foxHuntFrame.lon.setText("-119.4179");
        foxHuntFrame.add.doClick();

        // Verify that the fox point was calculated and added
        assertEquals(2, foxHuntFrame.points.size());
        assertEquals(1, foxHuntFrame.fox.size());
    }

    @Test
    public void testActionPerformed() {
        // Set up the input values
        foxHuntFrame.theta.setText("30");
        foxHuntFrame.lat.setText("40.7128");
        foxHuntFrame.lon.setText("-74.0060");

        // Create an ActionEvent and call actionPerformed
        ActionEvent event = new ActionEvent(foxHuntFrame.add, ActionEvent.ACTION_PERFORMED, "Add It!!!");
        foxHuntFrame.actionPerformed(event);

        // Verify that a point was added
        assertEquals(1, foxHuntFrame.points.size());
    }

    @Test
    public void testLoadLandmarksFileNotFound() {
        // Temporarily rename the landmarks file to simulate FileNotFoundException
        File landmarksFile = new File("./landmarks.cfg");
        File tempFile = new File("./landmarks_temp.cfg");
        if (landmarksFile.exists()) {
            landmarksFile.renameTo(tempFile);
        }

        try {
            // Call loadLandmarks and expect an error dialog
            foxHuntFrame.loadLandmarks();
        } catch (Exception e) {
            fail("Exception should not be thrown");
        } finally {
            // Restore the landmarks file
            if (tempFile.exists()) {
                tempFile.renameTo(landmarksFile);
            }
        }
    }

    @Test
    public void testErrorDialog() {
        // Simulate an error and verify the dialog
        foxHuntFrame.error("Test error message");
        // Since JOptionPane is modal, we can't directly test it without a GUI testing library
        // This test is a placeholder to indicate where GUI testing would occur
    }
}
```

### Notes:
- The `setUp` method initializes a new instance of `FoxHuntFrame` before each test.
- The `testAddPoint` method simulates user input and verifies that points are added correctly.
- The `testActionPerformed` method tests the `actionPerformed` method indirectly by simulating a button click.
- The `testLoadLandmarksFileNotFound` method simulates a missing landmarks file and expects the error handling to occur without exceptions.
- The `testErrorDialog` method is a placeholder for testing the error dialog, which would require a GUI testing library for full verification.

This test suite provides a basic structure for testing the `FoxHuntFrame` class. For more comprehensive GUI testing, consider using a dedicated GUI testing framework.