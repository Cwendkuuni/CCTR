To create a comprehensive JUnit 4 test suite for the `FoxHuntFrame` class, we need to test the main functionalities of the class, including the `addPoint` method, the `actionPerformed` method, and the error handling in the `loadLandmarks` method. We will also test the `FoxTableModel` class, which is an inner class of `FoxHuntFrame`.

Below is the JUnit 4 test suite for the `FoxHuntFrame` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.Vector;

public class FoxHuntFrameTest {

    private FoxHuntFrame foxHuntFrame;

    @Before
    public void setUp() {
        foxHuntFrame = new FoxHuntFrame();
    }

    @Test
    public void testAddPoint() {
        foxHuntFrame.theta.setText("45");
        foxHuntFrame.lat.setText("34.0522");
        foxHuntFrame.lon.setText("-118.2437");

        int initialPointsSize = foxHuntFrame.points.size();
        int initialFoxSize = foxHuntFrame.fox.size();

        foxHuntFrame.addPoint();

        assertEquals(initialPointsSize + 1, foxHuntFrame.points.size());
        if (initialPointsSize > 0) {
            assertEquals(initialFoxSize + 1, foxHuntFrame.fox.size());
        }
    }

    @Test
    public void testActionPerformed() {
        ActionEvent mockEvent = Mockito.mock(ActionEvent.class);
        foxHuntFrame.theta.setText("30");
        foxHuntFrame.lat.setText("40.7128");
        foxHuntFrame.lon.setText("-74.0060");

        int initialPointsSize = foxHuntFrame.points.size();

        foxHuntFrame.actionPerformed(mockEvent);

        assertEquals(initialPointsSize + 1, foxHuntFrame.points.size());
    }

    @Test
    public void testLoadLandmarksFileNotFound() {
        // Temporarily rename the landmarks.cfg file if it exists
        File landmarksFile = new File("./landmarks.cfg");
        File tempFile = new File("./landmarks_temp.cfg");
        if (landmarksFile.exists()) {
            landmarksFile.renameTo(tempFile);
        }

        try {
            foxHuntFrame.loadLandmarks();
            fail("Expected an error dialog due to missing landmarks.cfg file");
        } catch (Exception e) {
            // Expected behavior
        } finally {
            // Restore the landmarks.cfg file
            if (tempFile.exists()) {
                tempFile.renameTo(landmarksFile);
            }
        }
    }

    @Test
    public void testFoxTableModel() {
        FoxHuntFrame.FoxTableModel model = foxHuntFrame.new FoxTableModel();
        assertEquals(2, model.getColumnCount());
        assertEquals("Lattitude", model.getColumnName(0));
        assertEquals("Longitude", model.getColumnName(1));

        // Add a point to test row count and data retrieval
        foxHuntFrame.theta.setText("60");
        foxHuntFrame.lat.setText("51.5074");
        foxHuntFrame.lon.setText("-0.1278");
        foxHuntFrame.addPoint();

        assertEquals(foxHuntFrame.fox.size(), model.getRowCount());
        assertNotNull(model.getValueAt(0, 0));
        assertNotNull(model.getValueAt(0, 1));
    }
}
```

### Explanation:
- **setUp Method**: Initializes a new instance of `FoxHuntFrame` before each test.
- **testAddPoint**: Tests the `addPoint` method by setting text fields and verifying the size of the `points` and `fox` vectors.
- **testActionPerformed**: Mocks an `ActionEvent` and tests the `actionPerformed` method to ensure it calls `addPoint`.
- **testLoadLandmarksFileNotFound**: Tests the error handling in `loadLandmarks` by temporarily renaming the `landmarks.cfg` file and checking for an error.
- **testFoxTableModel**: Tests the `FoxTableModel` class for correct column count, names, and data retrieval after adding a point.

This test suite uses JUnit 4 and Mockito for mocking. It assumes that the `TrigPoint`, `FoxCalc`, `HuntDisplay`, and `Landmark` classes are correctly implemented and available in the classpath.