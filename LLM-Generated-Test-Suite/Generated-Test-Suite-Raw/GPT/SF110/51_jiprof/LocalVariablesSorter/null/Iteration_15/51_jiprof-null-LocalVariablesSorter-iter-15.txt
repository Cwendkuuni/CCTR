To create a comprehensive JUnit 4 test suite for the `LocalVariablesSorter` class, we need to test each method, ensuring that they behave as expected. This involves creating mock objects for dependencies like `MethodVisitor` and using assertions to verify the behavior of the class methods. Below is a complete JUnit 4 test suite for the `LocalVariablesSorter` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.Type;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.Opcodes;

public class LocalVariablesSorterTest {

    private MethodVisitor mockMethodVisitor;
    private LocalVariablesSorter localVariablesSorter;

    @Before
    public void setUp() {
        mockMethodVisitor = mock(MethodVisitor.class);
        localVariablesSorter = new LocalVariablesSorter(Opcodes.ACC_PUBLIC, "(I)V", mockMethodVisitor);
    }

    @Test
    public void testVisitVarInsn() {
        localVariablesSorter.visitVarInsn(Opcodes.ILOAD, 1);
        verify(mockMethodVisitor).visitVarInsn(eq(Opcodes.ILOAD), anyInt());
    }

    @Test
    public void testVisitIincInsn() {
        localVariablesSorter.visitIincInsn(1, 5);
        verify(mockMethodVisitor).visitIincInsn(anyInt(), eq(5));
    }

    @Test
    public void testVisitMaxs() {
        localVariablesSorter.visitMaxs(10, 20);
        verify(mockMethodVisitor).visitMaxs(eq(10), anyInt());
    }

    @Test
    public void testVisitLocalVariable() {
        Label start = new Label();
        Label end = new Label();
        localVariablesSorter.visitLocalVariable("var", "I", null, start, end, 1);
        verify(mockMethodVisitor).visitLocalVariable(eq("var"), eq("I"), isNull(), eq(start), eq(end), anyInt());
    }

    @Test(expected = IllegalStateException.class)
    public void testVisitFrameWithInvalidType() {
        localVariablesSorter.visitFrame(0, 0, new Object[0], 0, new Object[0]);
    }

    @Test
    public void testVisitFrameWithValidType() {
        localVariablesSorter.visitFrame(-1, 0, new Object[0], 0, new Object[0]);
        verify(mockMethodVisitor).visitFrame(eq(-1), eq(0), any(Object[].class), eq(0), any(Object[].class));
    }

    @Test
    public void testNewLocal() {
        int localIndex = localVariablesSorter.newLocal(Type.INT_TYPE);
        assertTrue(localIndex >= 0);
    }

    @Test
    public void testRemap() {
        int remappedIndex = localVariablesSorter.newLocal(Type.INT_TYPE);
        assertEquals(remappedIndex, localVariablesSorter.remap(remappedIndex, Type.INT_TYPE));
    }

    @Test
    public void testSetFrameLocal() {
        localVariablesSorter.newLocal(Type.INT_TYPE);
        // No direct way to test private method, but we can ensure no exceptions are thrown
    }

    @Test
    public void testNewLocalMapping() {
        int localIndex = localVariablesSorter.newLocalMapping(Type.INT_TYPE);
        assertTrue(localIndex >= 0);
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to create a mock `MethodVisitor` object, which allows us to verify interactions with this dependency.
- **Setup**: The `setUp` method initializes the `LocalVariablesSorter` instance before each test.
- **Tests**: Each method of `LocalVariablesSorter` is tested:
  - `visitVarInsn`, `visitIincInsn`, `visitMaxs`, and `visitLocalVariable` are tested by verifying that the corresponding method on the mock `MethodVisitor` is called with expected arguments.
  - `visitFrame` is tested for both valid and invalid frame types.
  - `newLocal` and `newLocalMapping` are tested to ensure they return valid local indices.
  - `remap` is tested to ensure it returns the correct remapped index.
- **Assertions**: We use assertions to verify expected outcomes, such as ensuring indices are non-negative and method calls are made with correct parameters.

This test suite provides a comprehensive set of tests for the `LocalVariablesSorter` class, ensuring its methods function as intended.