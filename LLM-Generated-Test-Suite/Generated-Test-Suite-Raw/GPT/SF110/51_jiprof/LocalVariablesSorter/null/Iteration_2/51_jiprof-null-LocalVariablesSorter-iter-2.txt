To create a comprehensive JUnit 4 test suite for the `LocalVariablesSorter` class, we need to test each method, including constructors and overridden methods. Since the class interacts with `MethodVisitor`, we'll need to mock this dependency using a mocking framework like Mockito. Here's a complete test suite:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.Type;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.Opcodes;
import org.objectweb.asm.jip.commons.LocalVariablesSorter;

public class LocalVariablesSorterTest {

    private MethodVisitor mockMethodVisitor;
    private LocalVariablesSorter localVariablesSorter;

    @Before
    public void setUp() {
        mockMethodVisitor = mock(MethodVisitor.class);
        localVariablesSorter = new LocalVariablesSorter(Opcodes.ACC_PUBLIC, "(I)V", mockMethodVisitor);
    }

    @Test
    public void testConstructor() {
        assertNotNull(localVariablesSorter);
        assertEquals(1, localVariablesSorter.firstLocal);
        assertEquals(1, localVariablesSorter.nextLocal);
    }

    @Test
    public void testVisitVarInsn() {
        localVariablesSorter.visitVarInsn(Opcodes.ILOAD, 1);
        verify(mockMethodVisitor).visitVarInsn(eq(Opcodes.ILOAD), anyInt());
    }

    @Test
    public void testVisitIincInsn() {
        localVariablesSorter.visitIincInsn(1, 5);
        verify(mockMethodVisitor).visitIincInsn(anyInt(), eq(5));
    }

    @Test
    public void testVisitMaxs() {
        localVariablesSorter.visitMaxs(10, 10);
        verify(mockMethodVisitor).visitMaxs(eq(10), anyInt());
    }

    @Test
    public void testVisitLocalVariable() {
        Label start = new Label();
        Label end = new Label();
        localVariablesSorter.visitLocalVariable("var", "I", null, start, end, 1);
        verify(mockMethodVisitor).visitLocalVariable(eq("var"), eq("I"), isNull(), eq(start), eq(end), anyInt());
    }

    @Test(expected = IllegalStateException.class)
    public void testVisitFrameWithException() {
        localVariablesSorter.visitFrame(0, 0, new Object[0], 0, new Object[0]);
    }

    @Test
    public void testVisitFrameWithoutException() {
        Object[] locals = new Object[] { Opcodes.INTEGER };
        Object[] stack = new Object[] { Opcodes.INTEGER };
        localVariablesSorter.visitFrame(-1, 1, locals, 1, stack);
        verify(mockMethodVisitor).visitFrame(eq(-1), anyInt(), any(Object[].class), eq(1), eq(stack));
    }

    @Test
    public void testNewLocal() {
        int localIndex = localVariablesSorter.newLocal(Type.INT_TYPE);
        assertEquals(1, localIndex);
    }

    @Test
    public void testRemap() {
        int remappedIndex = localVariablesSorter.newLocal(Type.INT_TYPE);
        assertEquals(1, remappedIndex);
    }
}
```

### Explanation:

1. **Setup**: We use `Mockito` to mock the `MethodVisitor` dependency. This allows us to verify interactions with this object.

2. **Constructor Test**: We verify that the constructor initializes the `firstLocal` and `nextLocal` correctly based on the method descriptor.

3. **Method Tests**: Each method is tested to ensure it interacts with the `MethodVisitor` as expected. We use `Mockito`'s `verify` method to check that the correct methods are called with the expected arguments.

4. **Exception Test**: We test that `visitFrame` throws an `IllegalStateException` when called with a type other than `-1`.

5. **New Local and Remap Tests**: We test the `newLocal` and `remap` methods to ensure they return the expected local variable indices.

This test suite provides a comprehensive set of tests for the `LocalVariablesSorter` class, covering its main functionalities and interactions.