```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.Type;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.Opcodes;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LocalVariablesSorterTest {

    private MethodVisitor mockMethodVisitor;
    private LocalVariablesSorter localVariablesSorter;

    @Before
    public void setUp() {
        mockMethodVisitor = mock(MethodVisitor.class);
        localVariablesSorter = new LocalVariablesSorter(Opcodes.ACC_PUBLIC, "(I)V", mockMethodVisitor);
    }

    @Test
    public void testConstructorInitializesFieldsCorrectly() {
        assertEquals(1, localVariablesSorter.firstLocal);
        assertEquals(1, localVariablesSorter.nextLocal);
    }

    @Test
    public void testVisitVarInsnRemapsCorrectly() {
        localVariablesSorter.visitVarInsn(Opcodes.ILOAD, 1);
        verify(mockMethodVisitor).visitVarInsn(Opcodes.ILOAD, 1);
    }

    @Test
    public void testVisitIincInsnRemapsCorrectly() {
        localVariablesSorter.visitIincInsn(1, 5);
        verify(mockMethodVisitor).visitIincInsn(1, 5);
    }

    @Test
    public void testVisitMaxsUpdatesMaxLocals() {
        localVariablesSorter.visitMaxs(10, 5);
        verify(mockMethodVisitor).visitMaxs(10, 1);
    }

    @Test
    public void testVisitLocalVariableRemapsCorrectly() {
        Label start = new Label();
        Label end = new Label();
        localVariablesSorter.visitLocalVariable("var", "I", null, start, end, 1);
        verify(mockMethodVisitor).visitLocalVariable("var", "I", null, start, end, 1);
    }

    @Test(expected = IllegalStateException.class)
    public void testVisitFrameThrowsExceptionForInvalidType() {
        localVariablesSorter.visitFrame(0, 0, new Object[0], 0, new Object[0]);
    }

    @Test
    public void testVisitFrameHandlesExpandedFrames() {
        Object[] locals = new Object[] { Opcodes.INTEGER };
        Object[] stack = new Object[] { Opcodes.FLOAT };
        localVariablesSorter.visitFrame(-1, 1, locals, 1, stack);
        verify(mockMethodVisitor).visitFrame(-1, 1, locals, 1, stack);
    }

    @Test
    public void testNewLocalAllocatesNewLocalVariable() {
        int localIndex = localVariablesSorter.newLocal(Type.INT_TYPE);
        assertEquals(1, localIndex);
    }

    @Test
    public void testRemapReturnsCorrectMapping() {
        int remappedIndex = localVariablesSorter.newLocal(Type.INT_TYPE);
        assertEquals(remappedIndex, localVariablesSorter.remap(1, Type.INT_TYPE));
    }

    @Test
    public void testSetFrameLocalExpandsArrayIfNecessary() {
        localVariablesSorter.setFrameLocal(50, Opcodes.INTEGER);
        assertEquals(Opcodes.INTEGER, localVariablesSorter.newLocals[50]);
    }

    @Test
    public void testNewLocalMappingAllocatesNewLocal() {
        int localIndex = localVariablesSorter.newLocalMapping(Type.INT_TYPE);
        assertEquals(1, localIndex);
    }
}
```

This JUnit 4 test suite uses Mockito to mock the `MethodVisitor` and tests various methods of the `LocalVariablesSorter` class. The tests cover the initialization of fields, remapping of variables, handling of frames, and allocation of new local variables.