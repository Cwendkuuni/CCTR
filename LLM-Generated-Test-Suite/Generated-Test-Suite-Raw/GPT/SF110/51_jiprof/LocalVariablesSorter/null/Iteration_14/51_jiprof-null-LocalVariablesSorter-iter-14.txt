To create a comprehensive JUnit 4 test suite for the `LocalVariablesSorter` class, we need to test each method, ensuring that they behave as expected. Since the class interacts with the `MethodVisitor` and `Type` classes from the ASM library, we'll need to mock these dependencies using a mocking framework like Mockito.

Here's a complete JUnit 4 test suite for the `LocalVariablesSorter` class:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.Type;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.Opcodes;

public class LocalVariablesSorterTest {

    private MethodVisitor mockMethodVisitor;
    private LocalVariablesSorter localVariablesSorter;

    @Before
    public void setUp() {
        mockMethodVisitor = mock(MethodVisitor.class);
        localVariablesSorter = new LocalVariablesSorter(Opcodes.ACC_PUBLIC, "(I)V", mockMethodVisitor);
    }

    @Test
    public void testVisitVarInsn() {
        localVariablesSorter.visitVarInsn(Opcodes.ILOAD, 1);
        verify(mockMethodVisitor).visitVarInsn(eq(Opcodes.ILOAD), anyInt());
    }

    @Test
    public void testVisitIincInsn() {
        localVariablesSorter.visitIincInsn(1, 5);
        verify(mockMethodVisitor).visitIincInsn(anyInt(), eq(5));
    }

    @Test
    public void testVisitMaxs() {
        localVariablesSorter.visitMaxs(10, 20);
        verify(mockMethodVisitor).visitMaxs(eq(10), anyInt());
    }

    @Test
    public void testVisitLocalVariable() {
        Label start = new Label();
        Label end = new Label();
        localVariablesSorter.visitLocalVariable("var", "I", null, start, end, 1);
        verify(mockMethodVisitor).visitLocalVariable(eq("var"), eq("I"), isNull(), eq(start), eq(end), anyInt());
    }

    @Test
    public void testVisitFrame() {
        Object[] locals = new Object[] { Opcodes.INTEGER };
        Object[] stack = new Object[] { Opcodes.FLOAT };
        localVariablesSorter.visitFrame(-1, 1, locals, 1, stack);
        verify(mockMethodVisitor).visitFrame(eq(-1), anyInt(), any(Object[].class), eq(1), eq(stack));
    }

    @Test(expected = IllegalStateException.class)
    public void testVisitFrameWithInvalidType() {
        Object[] locals = new Object[] { Opcodes.INTEGER };
        Object[] stack = new Object[] { Opcodes.FLOAT };
        localVariablesSorter.visitFrame(0, 1, locals, 1, stack);
    }

    @Test
    public void testNewLocal() {
        Type intType = Type.INT_TYPE;
        int localIndex = localVariablesSorter.newLocal(intType);
        assertTrue(localIndex >= 0);
    }

    @Test
    public void testRemap() {
        Type intType = Type.INT_TYPE;
        int remappedIndex = localVariablesSorter.newLocal(intType);
        assertEquals(remappedIndex, localVariablesSorter.remap(remappedIndex, intType));
    }
}
```

### Explanation:

- **Mocking**: We use Mockito to create a mock `MethodVisitor` object, which allows us to verify interactions with it.
- **Setup**: The `setUp` method initializes the `LocalVariablesSorter` with a mock `MethodVisitor`.
- **Test Methods**: Each test method corresponds to a method in `LocalVariablesSorter`. We verify that the correct methods on the `MethodVisitor` are called with expected arguments.
- **Exception Testing**: We test that an `IllegalStateException` is thrown when `visitFrame` is called with an invalid type.
- **Assertions**: We use assertions to check that the `newLocal` method returns a valid index and that `remap` returns the expected index.

This test suite covers the main functionalities of the `LocalVariablesSorter` class. Adjustments might be necessary depending on the specific behavior of the ASM library and the context in which this class is used.