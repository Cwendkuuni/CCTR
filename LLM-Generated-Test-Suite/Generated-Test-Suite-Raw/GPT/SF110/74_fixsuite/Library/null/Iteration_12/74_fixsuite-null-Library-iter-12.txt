Certainly! Below is a JUnit 4 test suite for the `Library` class. This suite includes tests for the public methods `loadFromDirectory`, `getDictionaries`, and `getDictionary`. Note that the private methods `loadDirectory` and `arrangeFiles` are not directly tested, as they are not accessible from outside the class. However, their functionality is indirectly tested through the public methods.

```java
import org.junit.*;
import org.junit.rules.TemporaryFolder;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import java.io.*;
import java.util.*;
import static org.junit.Assert.*;

public class LibraryTest {

    private Library library;
    private static Logger logger;

    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    @BeforeClass
    public static void setUpBeforeClass() {
        logger = LoggerFactory.getLogger(LibraryTest.class);
    }

    @Before
    public void setUp() {
        library = new Library();
    }

    @Test
    public void testLoadFromDirectoryWithValidDirectory() throws IOException {
        File dir = folder.newFolder("validDir");
        File subDir = new File(dir, "subDir");
        subDir.mkdir();
        new File(subDir, "Fields.xml").createNewFile();
        new File(subDir, "Enums.xml").createNewFile();
        new File(subDir, "Components.xml").createNewFile();
        new File(subDir, "MsgType.xml").createNewFile();
        new File(subDir, "MsgContents.xml").createNewFile();

        boolean result = library.loadFromDirectory(dir.getAbsolutePath());
        assertTrue("Expected loadFromDirectory to return true for valid directory", result);
        assertFalse("Expected dictionaries to be loaded", library.getDictionaries().isEmpty());
    }

    @Test
    public void testLoadFromDirectoryWithEmptyDirectory() throws IOException {
        File dir = folder.newFolder("emptyDir");

        boolean result = library.loadFromDirectory(dir.getAbsolutePath());
        assertFalse("Expected loadFromDirectory to return false for empty directory", result);
        assertTrue("Expected no dictionaries to be loaded", library.getDictionaries().isEmpty());
    }

    @Test
    public void testLoadFromDirectoryWithInvalidPath() {
        boolean result = library.loadFromDirectory("invalidPath");
        assertFalse("Expected loadFromDirectory to return false for invalid path", result);
        assertTrue("Expected no dictionaries to be loaded", library.getDictionaries().isEmpty());
    }

    @Test
    public void testGetDictionaries() throws IOException {
        File dir = folder.newFolder("validDir");
        File subDir = new File(dir, "subDir");
        subDir.mkdir();
        new File(subDir, "Fields.xml").createNewFile();
        new File(subDir, "Enums.xml").createNewFile();
        new File(subDir, "Components.xml").createNewFile();
        new File(subDir, "MsgType.xml").createNewFile();
        new File(subDir, "MsgContents.xml").createNewFile();

        library.loadFromDirectory(dir.getAbsolutePath());
        List<DictionaryInfo> dictionaries = library.getDictionaries();
        assertNotNull("Expected getDictionaries to return a non-null list", dictionaries);
        assertFalse("Expected getDictionaries to return a non-empty list", dictionaries.isEmpty());
    }

    @Test
    public void testGetDictionaryWithExistingVersion() throws IOException {
        File dir = folder.newFolder("validDir");
        File subDir = new File(dir, "subDir");
        subDir.mkdir();
        new File(subDir, "Fields.xml").createNewFile();
        new File(subDir, "Enums.xml").createNewFile();
        new File(subDir, "Components.xml").createNewFile();
        new File(subDir, "MsgType.xml").createNewFile();
        new File(subDir, "MsgContents.xml").createNewFile();

        library.loadFromDirectory(dir.getAbsolutePath());
        DictionaryInfo dictionary = library.getDictionary("subDir");
        assertNotNull("Expected getDictionary to return a non-null DictionaryInfo for existing version", dictionary);
    }

    @Test
    public void testGetDictionaryWithNonExistingVersion() {
        DictionaryInfo dictionary = library.getDictionary("nonExistingVersion");
        assertNull("Expected getDictionary to return null for non-existing version", dictionary);
    }
}
```

### Explanation:
- **TemporaryFolder Rule**: This JUnit rule is used to create temporary directories and files for testing purposes, ensuring that they are cleaned up after tests are run.
- **Test Methods**: Each test method is designed to test a specific scenario for the `Library` class's public methods.
- **Assertions**: Various assertions are used to verify the expected outcomes, such as `assertTrue`, `assertFalse`, `assertNotNull`, and `assertNull`.
- **Setup and Teardown**: The `setUp` method initializes a new `Library` instance before each test, ensuring tests are independent.

This test suite assumes that the `DictionaryInfo` class and `MainParser.parse` method are correctly implemented and available in the classpath.