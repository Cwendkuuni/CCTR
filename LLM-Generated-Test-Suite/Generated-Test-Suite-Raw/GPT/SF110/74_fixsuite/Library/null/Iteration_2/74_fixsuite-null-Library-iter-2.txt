To create a comprehensive JUnit 4 test suite for the `Library` class, we need to test the public methods: `loadFromDirectory`, `getDictionaries`, and `getDictionary`. We will mock dependencies where necessary and simulate different scenarios to ensure the methods behave as expected.

Below is the JUnit 4 test suite for the `Library` class:

```java
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class LibraryTest {

    @Mock
    private Logger mockLogger;

    private Library library;

    @Before
    public void setUp() {
        library = new Library();
        Library.logger = mockLogger;
    }

    @Test
    public void testLoadFromDirectoryWithValidDirectory() {
        // Setup
        String validPath = "validDirectory";
        File mockDirectory = mock(File.class);
        when(mockDirectory.isDirectory()).thenReturn(true);
        when(mockDirectory.listFiles()).thenReturn(new File[]{mock(File.class)});

        // Mock static method
        try (MockedStatic<File> mockedFile = mockStatic(File.class)) {
            mockedFile.when(() -> new File(validPath)).thenReturn(mockDirectory);

            // Execute
            boolean result = library.loadFromDirectory(validPath);

            // Verify
            assertTrue(result);
            verify(mockLogger).debug(anyString());
        }
    }

    @Test
    public void testLoadFromDirectoryWithEmptyDirectory() {
        // Setup
        String emptyPath = "emptyDirectory";
        File mockDirectory = mock(File.class);
        when(mockDirectory.isDirectory()).thenReturn(true);
        when(mockDirectory.listFiles()).thenReturn(new File[]{});

        // Mock static method
        try (MockedStatic<File> mockedFile = mockStatic(File.class)) {
            mockedFile.when(() -> new File(emptyPath)).thenReturn(mockDirectory);

            // Execute
            boolean result = library.loadFromDirectory(emptyPath);

            // Verify
            assertFalse(result);
            verify(mockLogger).error("Supplied directory is empty.");
        }
    }

    @Test
    public void testLoadFromDirectoryWithInvalidPath() {
        // Setup
        String invalidPath = "invalidPath";
        File mockFile = mock(File.class);
        when(mockFile.isDirectory()).thenReturn(false);

        // Mock static method
        try (MockedStatic<File> mockedFile = mockStatic(File.class)) {
            mockedFile.when(() -> new File(invalidPath)).thenReturn(mockFile);

            // Execute
            boolean result = library.loadFromDirectory(invalidPath);

            // Verify
            assertFalse(result);
            verify(mockLogger).error("Supplied path is not a directory.");
        }
    }

    @Test
    public void testGetDictionaries() {
        // Setup
        DictionaryInfo mockDictionary = mock(DictionaryInfo.class);
        library.dictionaries.put("FIX.4.2", mockDictionary);

        // Execute
        List<DictionaryInfo> dictionaries = library.getDictionaries();

        // Verify
        assertEquals(1, dictionaries.size());
        assertEquals(mockDictionary, dictionaries.get(0));
    }

    @Test
    public void testGetDictionaryWithExistingVersion() {
        // Setup
        String version = "FIX.4.2";
        DictionaryInfo mockDictionary = mock(DictionaryInfo.class);
        library.dictionaries.put(version, mockDictionary);

        // Execute
        DictionaryInfo result = library.getDictionary(version);

        // Verify
        assertNotNull(result);
        assertEquals(mockDictionary, result);
    }

    @Test
    public void testGetDictionaryWithNonExistingVersion() {
        // Setup
        String version = "FIX.4.3";

        // Execute
        DictionaryInfo result = library.getDictionary(version);

        // Verify
        assertNull(result);
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the `Logger` and `File` classes to simulate different scenarios without relying on actual file system operations.
- **Test Cases**:
  - `testLoadFromDirectoryWithValidDirectory`: Tests loading from a valid directory.
  - `testLoadFromDirectoryWithEmptyDirectory`: Tests loading from an empty directory.
  - `testLoadFromDirectoryWithInvalidPath`: Tests loading from an invalid path.
  - `testGetDictionaries`: Tests retrieving all dictionaries.
  - `testGetDictionaryWithExistingVersion`: Tests retrieving a dictionary with an existing version.
  - `testGetDictionaryWithNonExistingVersion`: Tests retrieving a dictionary with a non-existing version.

This test suite covers the main functionalities of the `Library` class, ensuring that it behaves correctly under different conditions.