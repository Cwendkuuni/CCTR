To create a comprehensive JUnit 4 test suite for the `Library` class, we need to test all public methods and ensure that the class behaves as expected under various conditions. Below is a test suite that covers the `loadFromDirectory`, `getDictionaries`, and `getDictionary` methods. Note that testing private methods directly is not possible in Java, so we focus on the public interface.

```java
import org.junit.*;
import org.mockito.*;
import org.slf4j.*;
import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LibraryTest {

    private Library library;
    private static final String TEST_DIRECTORY = "testDirectory";
    private static final String EMPTY_DIRECTORY = "emptyDirectory";
    private static final String INVALID_DIRECTORY = "invalidDirectory";
    private static final String VALID_VERSION = "1.0";

    @Before
    public void setUp() {
        library = new Library();
        // Mock the logger to avoid actual logging during tests
        Logger mockLogger = mock(Logger.class);
        Library.logger = mockLogger;
    }

    @Test
    public void testLoadFromDirectoryWithValidDirectory() {
        // Setup a valid directory structure
        File validDir = new File(TEST_DIRECTORY);
        validDir.mkdir();
        new File(validDir, "Fields.xml").createNewFile();
        new File(validDir, "Enums.xml").createNewFile();
        new File(validDir, "Components.xml").createNewFile();
        new File(validDir, "MsgType.xml").createNewFile();
        new File(validDir, "MsgContents.xml").createNewFile();

        boolean result = library.loadFromDirectory(TEST_DIRECTORY);
        assertTrue("Expected loadFromDirectory to return true for a valid directory", result);

        // Cleanup
        for (File file : validDir.listFiles()) {
            file.delete();
        }
        validDir.delete();
    }

    @Test
    public void testLoadFromDirectoryWithEmptyDirectory() {
        // Setup an empty directory
        File emptyDir = new File(EMPTY_DIRECTORY);
        emptyDir.mkdir();

        boolean result = library.loadFromDirectory(EMPTY_DIRECTORY);
        assertFalse("Expected loadFromDirectory to return false for an empty directory", result);

        // Cleanup
        emptyDir.delete();
    }

    @Test
    public void testLoadFromDirectoryWithInvalidDirectory() {
        boolean result = library.loadFromDirectory(INVALID_DIRECTORY);
        assertFalse("Expected loadFromDirectory to return false for an invalid directory", result);
    }

    @Test
    public void testGetDictionaries() {
        // Assuming loadFromDirectory has been called with a valid directory
        List<DictionaryInfo> dictionaries = library.getDictionaries();
        assertNotNull("Expected getDictionaries to return a non-null list", dictionaries);
    }

    @Test
    public void testGetDictionaryWithValidVersion() {
        // Assuming loadFromDirectory has been called with a valid directory
        DictionaryInfo dictionary = library.getDictionary(VALID_VERSION);
        assertNull("Expected getDictionary to return null for a version not loaded", dictionary);
    }

    @Test
    public void testGetDictionaryWithInvalidVersion() {
        DictionaryInfo dictionary = library.getDictionary("invalidVersion");
        assertNull("Expected getDictionary to return null for an invalid version", dictionary);
    }
}
```

### Explanation:

1. **Setup and Teardown**: The `setUp` method initializes a new `Library` instance before each test. It also mocks the logger to prevent actual logging during tests.

2. **Test Cases**:
   - **testLoadFromDirectoryWithValidDirectory**: Tests loading from a directory with the expected XML files.
   - **testLoadFromDirectoryWithEmptyDirectory**: Tests loading from an empty directory.
   - **testLoadFromDirectoryWithInvalidDirectory**: Tests loading from a non-existent directory.
   - **testGetDictionaries**: Tests retrieving dictionaries after loading.
   - **testGetDictionaryWithValidVersion**: Tests retrieving a dictionary with a valid version (assuming it was loaded).
   - **testGetDictionaryWithInvalidVersion**: Tests retrieving a dictionary with an invalid version.

3. **File and Directory Management**: The test suite creates and deletes directories and files as needed to simulate different scenarios.

4. **Mocking**: The logger is mocked to avoid cluttering the test output with log messages.

This test suite provides a basic structure for testing the `Library` class. You may need to adjust the paths and add more specific assertions based on the actual behavior of the `DictionaryInfo` class and the `MainParser.parse` method.