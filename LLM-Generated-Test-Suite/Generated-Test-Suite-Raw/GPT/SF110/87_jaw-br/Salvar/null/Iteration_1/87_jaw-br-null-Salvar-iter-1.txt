To create a comprehensive JUnit 4 test suite for the `Salvar` class, we need to consider the different scenarios and behaviors that the constructor of the `Salvar` class handles. This includes testing the different `tipoSalvar` values and ensuring that the file chooser and file saving logic work as expected. Since the `Salvar` class heavily interacts with the file system and GUI components, we'll need to mock these interactions to isolate the logic for testing.

Below is a JUnit 4 test suite for the `Salvar` class:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import jaw.entrada.Salvar;
import jaw.metamodelo.Entidade;
import jaw.ProcessarEntidades;
import jaw.Serializacao;
import jaw.SerializacaoXML;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.util.List;
import java.util.Vector;

@RunWith(MockitoJUnitRunner.class)
public class SalvarTest {

    @Mock
    private ProcessarEntidades mockForm;

    @Mock
    private JFileChooser mockFileChooser;

    @Mock
    private Serializacao mockSerializacao;

    @Mock
    private SerializacaoXML mockSerializacaoXML;

    @Mock
    private FileWriter mockFileWriter;

    @Mock
    private File mockFile;

    @Captor
    private ArgumentCaptor<String> stringCaptor;

    private List<Entidade> mockEntidades;

    @Before
    public void setUp() {
        mockEntidades = new Vector<>();
        when(mockForm.getEntidades()).thenReturn(mockEntidades);
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(mockFile);
        when(mockFile.getAbsolutePath()).thenReturn("testPath");
    }

    @Test
    public void testSalvarXML() throws Exception {
        when(mockFile.getName()).thenReturn("test.jaw.xml");
        when(mockSerializacaoXML.entidades2XML(mockEntidades)).thenReturn("<xml></xml>");

        new Salvar(mockForm, Salvar.SALVAR_XML);

        verify(mockSerializacaoXML).entidades2XML(mockEntidades);
        verify(mockFileWriter).write("<xml></xml>");
    }

    @Test
    public void testSalvar() throws Exception {
        when(mockFile.getName()).thenReturn("test.jaw");
        when(mockSerializacao.salvar(mockEntidades, "testPath.jaw")).thenReturn(true);

        new Salvar(mockForm, Salvar.SALVAR);

        verify(mockSerializacao).salvar(mockEntidades, "testPath.jaw");
        verify(mockForm).setNomeArquivoSalvo("testPath.jaw");
    }

    @Test
    public void testSalvarComo() throws Exception {
        when(mockFile.getName()).thenReturn("test.jaw");
        when(mockSerializacao.salvar(mockEntidades, "testPath.jaw")).thenReturn(true);

        new Salvar(mockForm, Salvar.SALVAR_COMO);

        verify(mockSerializacao).salvar(mockEntidades, "testPath.jaw");
        verify(mockForm).setNomeArquivoSalvo("testPath.jaw");
    }

    @Test
    public void testSalvarWithNoFileSelected() {
        when(mockFileChooser.getSelectedFile()).thenReturn(null);

        new Salvar(mockForm, Salvar.SALVAR);

        verify(mockForm, never()).setNomeArquivoSalvo(anyString());
    }

    @Test
    public void testSalvarXMLWithNoFileSelected() {
        when(mockFileChooser.getSelectedFile()).thenReturn(null);

        new Salvar(mockForm, Salvar.SALVAR_XML);

        verify(mockSerializacaoXML, never()).entidades2XML(anyList());
    }
}
```

### Explanation:

1. **Mocks and Setup**: We use Mockito to mock dependencies like `ProcessarEntidades`, `JFileChooser`, `Serializacao`, and `SerializacaoXML`. This allows us to simulate their behavior without relying on actual file system or GUI interactions.

2. **Test Cases**:
   - **testSalvarXML**: Tests the behavior when `tipoSalvar` is `SALVAR_XML`. It verifies that XML serialization is performed and the file is written correctly.
   - **testSalvar**: Tests the behavior when `tipoSalvar` is `SALVAR`. It checks that the file is saved with the correct extension and path.
   - **testSalvarComo**: Similar to `testSalvar`, but for `SALVAR_COMO`.
   - **testSalvarWithNoFileSelected**: Ensures that no file operations occur if no file is selected.
   - **testSalvarXMLWithNoFileSelected**: Similar to the above, but for XML saving.

3. **Mocking File Operations**: We mock `FileWriter` to avoid actual file writing during tests.

This test suite provides a comprehensive check of the `Salvar` class's behavior under different conditions.