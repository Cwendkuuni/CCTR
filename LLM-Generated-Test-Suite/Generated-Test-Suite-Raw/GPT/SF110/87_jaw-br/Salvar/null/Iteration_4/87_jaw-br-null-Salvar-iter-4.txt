To create a comprehensive JUnit 4 test suite for the `Salvar` class, we need to consider various scenarios based on the constructor's behavior and the interactions with the `ProcessarEntidades` form and file chooser. Since the `Salvar` class primarily operates through its constructor, the test suite will focus on testing the constructor's behavior under different conditions.

Below is a JUnit 4 test suite for the `Salvar` class:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import jaw.entrada.Salvar;
import jaw.metamodelo.Entidade;
import jaw.ProcessarEntidades;
import jaw.Serializacao;
import jaw.SerializacaoXML;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.util.List;
import java.util.Vector;

@RunWith(MockitoJUnitRunner.class)
public class SalvarTest {

    @Mock
    private ProcessarEntidades mockForm;

    @Mock
    private JFileChooser mockFileChooser;

    @Mock
    private Serializacao mockSerializacao;

    @Mock
    private SerializacaoXML mockSerializacaoXML;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSalvarXML() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw.xml"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_XML);

        // Verify
        assertTrue(salvar.xml.endsWith(".jaw.xml"));
        verify(mockForm, times(1)).getEntidades();
    }

    @Test
    public void testSalvar() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        // Verify
        assertTrue(salvar.arquivo.endsWith(".jaw"));
        verify(mockForm, times(1)).getEntidades();
    }

    @Test
    public void testSalvarComo() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_COMO);

        // Verify
        assertTrue(salvar.arquivo.endsWith(".jaw"));
        verify(mockForm, times(1)).getEntidades();
    }

    @Test
    public void testSalvarWithException() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenThrow(new RuntimeException("Test Exception"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        // Verify
        assertEquals("", salvar.arquivo);
        verify(mockForm, times(1)).getEntidades();
    }
}
```

### Explanation:
- **Mocks**: We use Mockito to mock dependencies like `ProcessarEntidades`, `JFileChooser`, `Serializacao`, and `SerializacaoXML`.
- **Test Cases**:
  - **testSalvarXML**: Tests the behavior when saving as XML.
  - **testSalvar**: Tests the behavior when saving normally.
  - **testSalvarComo**: Tests the behavior when using "Save As".
  - **testSalvarWithException**: Tests the behavior when an exception occurs while getting entities.
- **Assertions**: We check the expected outcomes, such as file extensions and method calls.
- **Mockito**: We verify interactions with mocked objects to ensure the correct methods are called.

This test suite covers the main functionalities and edge cases of the `Salvar` class.