To create a comprehensive JUnit 4 test suite for the `Salvar` class, we need to consider testing the constructor and its behavior under different conditions. Since the constructor performs a lot of operations, including file operations and GUI interactions, we'll need to mock or simulate these interactions. 

Below is a JUnit 4 test suite for the `Salvar` class. Note that this test suite uses Mockito to mock dependencies and simulate interactions:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import jaw.entrada.Salvar;
import jaw.metamodelo.Entidade;
import jaw.ProcessarEntidades;
import jaw.Serializacao;
import jaw.SerializacaoXML;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.io.File;
import java.util.List;
import java.util.Vector;

@RunWith(MockitoJUnitRunner.class)
public class SalvarTest {

    @Mock
    private ProcessarEntidades mockForm;

    @Mock
    private JFileChooser mockFileChooser;

    @Mock
    private Serializacao mockSerializacao;

    @Mock
    private SerializacaoXML mockSerializacaoXML;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSalvarXML() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw.xml"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_XML);

        // Verify
        assertTrue(salvar.xml.endsWith(".jaw.xml"));
        verify(mockForm).getEntidades();
    }

    @Test
    public void testSalvar() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        // Verify
        assertTrue(salvar.arquivo.endsWith(".jaw"));
        verify(mockForm).getEntidades();
    }

    @Test
    public void testSalvarComo() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_COMO);

        // Verify
        assertTrue(salvar.arquivo.endsWith(".jaw"));
        verify(mockForm).getEntidades();
    }

    @Test
    public void testSalvarWithNoFileSelected() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenReturn(new Vector<Entidade>());
        when(mockForm.getNomeArquivoSalvo()).thenReturn("");
        when(mockFileChooser.getSelectedFile()).thenReturn(null);

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        // Verify
        assertEquals("", salvar.arquivo);
        verify(mockForm).getEntidades();
    }

    @Test
    public void testSalvarWithException() throws Exception {
        // Setup
        when(mockForm.getEntidades()).thenThrow(new RuntimeException("Test Exception"));

        // Execute
        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        // Verify
        assertEquals("", salvar.arquivo);
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock `ProcessarEntidades`, `JFileChooser`, `Serializacao`, and `SerializacaoXML` to simulate their behavior without performing actual file operations or GUI interactions.
- **Test Cases**: We cover different scenarios such as saving as XML, saving normally, saving with "Save As", handling no file selected, and handling exceptions.
- **Assertions**: We assert the expected outcomes, such as file extensions and interactions with mocked objects.

This test suite provides a comprehensive set of tests for the `Salvar` class, focusing on its constructor's behavior under various conditions.