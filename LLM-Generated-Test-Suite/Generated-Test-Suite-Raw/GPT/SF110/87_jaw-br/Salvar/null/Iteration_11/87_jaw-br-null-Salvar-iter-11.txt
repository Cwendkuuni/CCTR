To create a comprehensive JUnit 4 test suite for the `Salvar` class, we need to test the constructor and its behavior under different conditions. Since the class heavily relies on interactions with the `ProcessarEntidades` form and file operations, we'll need to mock these dependencies. We'll use the Mockito framework to facilitate this.

Here's a complete JUnit 4 test suite for the `Salvar` class:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import jaw.entrada.Salvar;
import jaw.metamodelo.Entidade;
import jaw.ProcessarEntidades;
import jaw.Serializacao;
import jaw.SerializacaoXML;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.util.List;
import java.util.Vector;

@RunWith(MockitoJUnitRunner.class)
public class SalvarTest {

    @Mock
    private ProcessarEntidades mockForm;

    @Mock
    private JFileChooser mockFileChooser;

    @Mock
    private Serializacao mockSerializacao;

    @Mock
    private SerializacaoXML mockSerializacaoXML;

    @Captor
    private ArgumentCaptor<String> stringCaptor;

    private List<Entidade> mockEntidades;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockEntidades = new Vector<>();
        when(mockForm.getEntidades()).thenReturn(mockEntidades);
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");
        when(mockForm.getName()).thenReturn("");
    }

    @Test
    public void testSalvarXML() throws Exception {
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw.xml"));
        when(mockSerializacaoXML.entidades2XML(mockEntidades)).thenReturn("<xml></xml>");

        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_XML);

        verify(mockSerializacaoXML).entidades2XML(mockEntidades);
        assertEquals("test.jaw.xml", salvar.arquivo);
        assertEquals("<xml></xml>", salvar.xml);
    }

    @Test
    public void testSalvar() throws Exception {
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw"));
        when(mockSerializacao.salvar(mockEntidades, "test.jaw")).thenReturn(true);

        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        verify(mockSerializacao).salvar(mockEntidades, "test.jaw");
        assertEquals("test.jaw", salvar.arquivo);
    }

    @Test
    public void testSalvarComo() throws Exception {
        when(mockFileChooser.getSelectedFile()).thenReturn(new File("test.jaw"));
        when(mockSerializacao.salvar(mockEntidades, "test.jaw")).thenReturn(true);

        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_COMO);

        verify(mockSerializacao).salvar(mockEntidades, "test.jaw");
        assertEquals("test.jaw", salvar.arquivo);
    }

    @Test
    public void testSalvarWithNewProjectName() throws Exception {
        when(mockFileChooser.getSelectedFile()).thenReturn(null);
        when(mockForm.getNomeArquivoSalvo()).thenReturn("Novo Projeto");

        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR);

        assertEquals("Novo Projeto", salvar.arquivo);
    }

    @Test
    public void testSalvarXMLWithNoFileSelected() throws Exception {
        when(mockFileChooser.getSelectedFile()).thenReturn(null);

        Salvar salvar = new Salvar(mockForm, Salvar.SALVAR_XML);

        assertEquals("", salvar.arquivo);
    }
}
```

### Explanation:

1. **Mocks and Setup**: We use Mockito to mock dependencies like `ProcessarEntidades`, `JFileChooser`, `Serializacao`, and `SerializacaoXML`. This allows us to simulate different scenarios without relying on actual file operations or GUI interactions.

2. **Test Cases**:
   - **testSalvarXML**: Tests the behavior when saving as XML.
   - **testSalvar**: Tests the behavior when saving normally.
   - **testSalvarComo**: Tests the behavior when using "Save As".
   - **testSalvarWithNewProjectName**: Tests the behavior when no file is selected, and the project name is "Novo Projeto".
   - **testSalvarXMLWithNoFileSelected**: Tests the behavior when no file is selected for XML saving.

3. **Assertions and Verifications**: We use assertions to check the expected outcomes and Mockito verifications to ensure that the correct methods are called with the expected arguments.

This test suite provides a comprehensive set of tests for the `Salvar` class, covering various scenarios and ensuring that the class behaves as expected under different conditions.