To create a comprehensive JUnit 4 test suite for the `FontChooserDialog` class, we need to test the constructor, the `setVisible` method, and the `reset` method. Additionally, we should test the behavior of the `Closer` and `DisposeOnClose` inner classes. Since the class relies on a `JFontChooser` component, we'll need to mock or create a simple implementation of this component for testing purposes.

Below is the JUnit 4 test suite:

```java
import org.junit.*;
import org.mockito.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import static org.mockito.Mockito.*;

public class FontChooserDialogTest {

    private FontChooserDialog dialog;
    private JFontChooser mockChooserPane;
    private ActionListener mockOkListener;
    private ActionListener mockCancelListener;
    private Component mockComponent;

    @Before
    public void setUp() {
        mockChooserPane = mock(JFontChooser.class);
        mockOkListener = mock(ActionListener.class);
        mockCancelListener = mock(ActionListener.class);
        mockComponent = mock(Component.class);

        dialog = new FontChooserDialog(mockComponent, "Test Dialog", true, mockChooserPane, mockOkListener, mockCancelListener);
    }

    @Test
    public void testConstructor() {
        Assert.assertNotNull(dialog);
        Assert.assertEquals("Test Dialog", dialog.getTitle());
        Assert.assertTrue(dialog.isModal());
    }

    @Test
    public void testSetVisibleTrue() {
        Font mockFont = new Font("Arial", Font.PLAIN, 12);
        when(mockChooserPane.getFont()).thenReturn(mockFont);

        dialog.setVisible(true);

        Assert.assertEquals(mockFont, dialog.initialFont);
        verify(mockChooserPane, times(1)).getFont();
    }

    @Test
    public void testSetVisibleFalse() {
        dialog.setVisible(false);
        // No exception should be thrown
    }

    @Test
    public void testReset() {
        Font mockFont = new Font("Arial", Font.PLAIN, 12);
        dialog.initialFont = mockFont;

        dialog.reset();

        verify(mockChooserPane, times(1)).setFont(mockFont);
    }

    @Test
    public void testCloserWindowClosing() {
        Window mockWindow = mock(Window.class);
        WindowEvent mockEvent = new WindowEvent(mockWindow, WindowEvent.WINDOW_CLOSING);

        FontChooserDialog.Closer closer = new FontChooserDialog.Closer();
        closer.windowClosing(mockEvent);

        verify(mockWindow, times(1)).setVisible(false);
    }

    @Test
    public void testDisposeOnCloseComponentHidden() {
        Window mockWindow = mock(Window.class);
        ComponentEvent mockEvent = new ComponentEvent(mockWindow, ComponentEvent.COMPONENT_HIDDEN);

        FontChooserDialog.DisposeOnClose disposeOnClose = new FontChooserDialog.DisposeOnClose();
        disposeOnClose.componentHidden(mockEvent);

        verify(mockWindow, times(1)).dispose();
    }
}
```

### Explanation:

- **Mocks**: We use Mockito to create mock objects for `JFontChooser`, `ActionListener`, and `Component`. This allows us to simulate their behavior without needing actual implementations.
  
- **Constructor Test**: Verifies that the dialog is created with the correct title and modality.

- **Visibility Tests**: 
  - `testSetVisibleTrue` checks that when the dialog is made visible, it retrieves and stores the current font from the `JFontChooser`.
  - `testSetVisibleFalse` ensures no exceptions occur when setting visibility to false.

- **Reset Test**: Verifies that the `reset` method sets the font of the `JFontChooser` back to the initial font.

- **Inner Class Tests**: 
  - `testCloserWindowClosing` ensures that the `Closer` class hides the window when a window closing event occurs.
  - `testDisposeOnCloseComponentHidden` ensures that the `DisposeOnClose` class disposes of the window when a component hidden event occurs.

This test suite should cover the primary functionalities of the `FontChooserDialog` class.