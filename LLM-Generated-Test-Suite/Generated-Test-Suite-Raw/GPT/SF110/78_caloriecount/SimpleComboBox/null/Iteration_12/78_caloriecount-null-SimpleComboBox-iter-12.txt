```java
package com.lts.swing.combobox;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class SimpleComboBoxTest {

    private SimpleComboBox simpleComboBox;
    private SimpleComboBoxModel mockModel;

    @Before
    public void setUp() {
        mockModel = mock(SimpleComboBoxModel.class);
        simpleComboBox = new SimpleComboBox(mockModel);
    }

    @Test
    public void testSetModelWithSimpleComboBoxModel() {
        SimpleComboBoxModel newModel = mock(SimpleComboBoxModel.class);
        simpleComboBox.setModel(newModel);
        assertEquals(newModel, simpleComboBox.mySimpleModel);
    }

    @Test
    public void testSetModelWithNonSimpleComboBoxModel() {
        ComboBoxModel nonSimpleModel = mock(ComboBoxModel.class);
        simpleComboBox.setModel(nonSimpleModel);
        assertNull(simpleComboBox.mySimpleModel);
    }

    @Test
    public void testGetSelectedValueWhenModelIsNull() {
        SimpleComboBox comboBox = new SimpleComboBox(null);
        assertNull(comboBox.getSelectedValue());
    }

    @Test
    public void testGetSelectedValue() {
        when(mockModel.getSelectedValue()).thenReturn("TestValue");
        assertEquals("TestValue", simpleComboBox.getSelectedValue());
    }

    @Test
    public void testSetSelectedValue() {
        simpleComboBox.setSelectedValue("NewValue");
        verify(mockModel).setSelectedValue("NewValue");
    }

    @Test
    public void testGetSelectedIntWithNullValue() {
        when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithIntegerValue() {
        when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithLongValue() {
        when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithShortValue() {
        when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithByteValue() {
        when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedIntWithInvalidValue() {
        when(mockModel.getSelectedValue()).thenReturn("Invalid");
        simpleComboBox.getSelectedInt();
    }

    @Test
    public void testGetSelectedLongWithNullValue() {
        when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithIntegerValue() {
        when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithLongValue() {
        when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithShortValue() {
        when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithByteValue() {
        when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedLongWithInvalidValue() {
        when(mockModel.getSelectedValue()).thenReturn("Invalid");
        simpleComboBox.getSelectedLong();
    }
}
```

This test suite uses JUnit 4 and Mockito to create a comprehensive set of tests for the `SimpleComboBox` class. It covers all methods and checks various scenarios, including edge cases and invalid inputs.