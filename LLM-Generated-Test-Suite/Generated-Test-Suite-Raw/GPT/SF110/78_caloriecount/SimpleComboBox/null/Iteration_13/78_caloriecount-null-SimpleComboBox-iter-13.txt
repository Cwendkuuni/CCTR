Certainly! Below is a JUnit 4 test suite for the `SimpleComboBox` class. This test suite aims to comprehensively test all the methods in the class.

```java
package com.lts.swing.combobox;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class SimpleComboBoxTest {

    private SimpleComboBox simpleComboBox;
    private SimpleComboBoxModel mockModel;

    @Before
    public void setUp() {
        mockModel = mock(SimpleComboBoxModel.class);
        simpleComboBox = new SimpleComboBox(mockModel);
    }

    @Test
    public void testConstructor() {
        assertEquals(mockModel, simpleComboBox.getModel());
    }

    @Test
    public void testSetModelWithSimpleComboBoxModel() {
        SimpleComboBoxModel newModel = mock(SimpleComboBoxModel.class);
        simpleComboBox.setModel(newModel);
        assertEquals(newModel, simpleComboBox.getModel());
    }

    @Test
    public void testSetModelWithNonSimpleComboBoxModel() {
        ComboBoxModel nonSimpleModel = mock(ComboBoxModel.class);
        simpleComboBox.setModel(nonSimpleModel);
        assertEquals(nonSimpleModel, simpleComboBox.getModel());
    }

    @Test
    public void testGetSelectedValueWhenModelIsNull() {
        simpleComboBox.setModel(null);
        assertNull(simpleComboBox.getSelectedValue());
    }

    @Test
    public void testGetSelectedValue() {
        when(mockModel.getSelectedValue()).thenReturn("TestValue");
        assertEquals("TestValue", simpleComboBox.getSelectedValue());
    }

    @Test
    public void testSetSelectedValue() {
        simpleComboBox.setSelectedValue("NewValue");
        verify(mockModel).setSelectedValue("NewValue");
    }

    @Test
    public void testGetSelectedIntWithNullValue() {
        when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithIntegerValue() {
        when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithLongValue() {
        when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithShortValue() {
        when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithByteValue() {
        when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedIntWithInvalidType() {
        when(mockModel.getSelectedValue()).thenReturn("InvalidType");
        simpleComboBox.getSelectedInt();
    }

    @Test
    public void testGetSelectedLongWithNullValue() {
        when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithIntegerValue() {
        when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithLongValue() {
        when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithShortValue() {
        when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithByteValue() {
        when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedLongWithInvalidType() {
        when(mockModel.getSelectedValue()).thenReturn("InvalidType");
        simpleComboBox.getSelectedLong();
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a mock `SimpleComboBoxModel` and a `SimpleComboBox` instance before each test.
- **Constructor Test**: Verifies that the constructor correctly sets the model.
- **Model Tests**: Tests `setModel` with both `SimpleComboBoxModel` and non-`SimpleComboBoxModel` instances.
- **Selected Value Tests**: Tests `getSelectedValue` and `setSelectedValue` methods.
- **Selected Int Tests**: Tests `getSelectedInt` with various types and ensures it throws an exception for invalid types.
- **Selected Long Tests**: Tests `getSelectedLong` with various types and ensures it throws an exception for invalid types.

This test suite uses Mockito to mock the `SimpleComboBoxModel` and verify interactions.