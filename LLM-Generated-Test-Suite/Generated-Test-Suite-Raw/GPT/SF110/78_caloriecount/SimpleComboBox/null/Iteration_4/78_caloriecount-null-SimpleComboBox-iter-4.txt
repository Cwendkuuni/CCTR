To create a comprehensive JUnit 4 test suite for the `SimpleComboBox` class, we need to test each method, including edge cases and expected exceptions. Below is a test suite that covers the functionality of the `SimpleComboBox` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import com.lts.swing.combobox.SimpleComboBox;
import com.lts.swing.combobox.SimpleComboBoxModel;

public class SimpleComboBoxTest {

    private SimpleComboBoxModel mockModel;
    private SimpleComboBox comboBox;

    @Before
    public void setUp() {
        mockModel = Mockito.mock(SimpleComboBoxModel.class);
        comboBox = new SimpleComboBox(mockModel);
    }

    @Test
    public void testConstructor() {
        assertNotNull(comboBox);
    }

    @Test
    public void testSetModelWithSimpleComboBoxModel() {
        SimpleComboBoxModel newModel = Mockito.mock(SimpleComboBoxModel.class);
        comboBox.setModel(newModel);
        assertEquals(newModel, comboBox.mySimpleModel);
    }

    @Test
    public void testSetModelWithNonSimpleComboBoxModel() {
        ComboBoxModel nonSimpleModel = Mockito.mock(ComboBoxModel.class);
        comboBox.setModel(nonSimpleModel);
        assertNull(comboBox.mySimpleModel);
    }

    @Test
    public void testGetSelectedValueWhenModelIsNull() {
        SimpleComboBox comboBoxWithoutModel = new SimpleComboBox(null);
        assertNull(comboBoxWithoutModel.getSelectedValue());
    }

    @Test
    public void testGetSelectedValue() {
        Object expectedValue = new Object();
        Mockito.when(mockModel.getSelectedValue()).thenReturn(expectedValue);
        assertEquals(expectedValue, comboBox.getSelectedValue());
    }

    @Test
    public void testSetSelectedValue() {
        Object value = new Object();
        comboBox.setSelectedValue(value);
        Mockito.verify(mockModel).setSelectedValue(value);
    }

    @Test
    public void testGetSelectedIntWithNullValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1, comboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithIntegerValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42, comboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithLongValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42, comboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithShortValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42, comboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithByteValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42, comboBox.getSelectedInt());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedIntWithInvalidType() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn("invalid");
        comboBox.getSelectedInt();
    }

    @Test
    public void testGetSelectedLongWithNullValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1L, comboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithIntegerValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42L, comboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithLongValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42L, comboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithShortValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42L, comboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithByteValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42L, comboBox.getSelectedLong());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedLongWithInvalidType() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn("invalid");
        comboBox.getSelectedLong();
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to create a mock of `SimpleComboBoxModel` to simulate its behavior.
- **Test Methods**: Each method in `SimpleComboBox` is tested, including edge cases like null values and invalid types.
- **Assertions**: We use assertions to verify the expected outcomes of method calls.
- **Exception Testing**: We test for `IllegalArgumentException` when an invalid type is returned by `getSelectedValue()`.