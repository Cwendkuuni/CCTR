Certainly! Below is a JUnit 4 test suite for the `SimpleComboBox` class. This test suite assumes that the `SimpleComboBoxModel` class and its methods are correctly implemented and available for testing.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import com.lts.swing.combobox.SimpleComboBox;
import com.lts.swing.combobox.SimpleComboBoxModel;

public class SimpleComboBoxTest {

    private SimpleComboBox simpleComboBox;
    private SimpleComboBoxModel mockModel;

    @Before
    public void setUp() {
        mockModel = Mockito.mock(SimpleComboBoxModel.class);
        simpleComboBox = new SimpleComboBox(mockModel);
    }

    @Test
    public void testSetModelWithSimpleComboBoxModel() {
        SimpleComboBoxModel anotherMockModel = Mockito.mock(SimpleComboBoxModel.class);
        simpleComboBox.setModel(anotherMockModel);
        assertEquals(anotherMockModel, simpleComboBox.getModel());
    }

    @Test
    public void testSetModelWithNonSimpleComboBoxModel() {
        ComboBoxModel nonSimpleModel = Mockito.mock(ComboBoxModel.class);
        simpleComboBox.setModel(nonSimpleModel);
        assertEquals(nonSimpleModel, simpleComboBox.getModel());
    }

    @Test
    public void testGetSelectedValue() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn("TestValue");
        assertEquals("TestValue", simpleComboBox.getSelectedValue());
    }

    @Test
    public void testSetSelectedValue() {
        simpleComboBox.setSelectedValue("NewValue");
        Mockito.verify(mockModel).setSelectedValue("NewValue");
    }

    @Test
    public void testGetSelectedIntWithInteger() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithLong() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithShort() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedIntWithByte() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42, simpleComboBox.getSelectedInt());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedIntWithInvalidType() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn("InvalidType");
        simpleComboBox.getSelectedInt();
    }

    @Test
    public void testGetSelectedIntWithNull() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1, simpleComboBox.getSelectedInt());
    }

    @Test
    public void testGetSelectedLongWithInteger() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithLong() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(42L);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithShort() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((short) 42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test
    public void testGetSelectedLongWithByte() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn((byte) 42);
        assertEquals(42L, simpleComboBox.getSelectedLong());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetSelectedLongWithInvalidType() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn("InvalidType");
        simpleComboBox.getSelectedLong();
    }

    @Test
    public void testGetSelectedLongWithNull() {
        Mockito.when(mockModel.getSelectedValue()).thenReturn(null);
        assertEquals(-1L, simpleComboBox.getSelectedLong());
    }
}
```

### Explanation:
- **Mockito** is used to create a mock of `SimpleComboBoxModel` to simulate its behavior.
- **setUp()** method initializes the `SimpleComboBox` instance with a mocked model before each test.
- Each test method checks a specific functionality of the `SimpleComboBox` class.
- Tests cover setting and getting the model, retrieving selected values, and handling different data types.
- Tests for exceptions are included to ensure that invalid types throw the expected `IllegalArgumentException`.