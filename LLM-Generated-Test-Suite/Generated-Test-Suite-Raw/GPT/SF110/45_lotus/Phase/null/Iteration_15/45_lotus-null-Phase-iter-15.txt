To create a comprehensive JUnit 4 test suite for the `Phase` class, we need to test the `nextPhase` method, as it is the only public method available. The `doPhase` method is abstract and cannot be directly tested. We will assume that the `Game` class and the various phase classes (`UntapPhase`, `UpkeepPhase`, etc.) are implemented correctly and are accessible.

Here's a JUnit 4 test suite for the `Phase` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import lotus.core.phases.*;
import lotus.core.*;

public class PhaseTest {

    @Before
    public void setUp() {
        // Reset the game state before each test
        Game.currentPhase = null;
        Game.playingPlayer = 1;
    }

    @Test
    public void testNextPhaseFromUntapPhase() {
        Game.currentPhase = new UntapPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof UpkeepPhase);
    }

    @Test
    public void testNextPhaseFromUpkeepPhase() {
        Game.currentPhase = new UpkeepPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof DrawPhase);
    }

    @Test
    public void testNextPhaseFromDrawPhase() {
        Game.currentPhase = new DrawPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof Main1Phase);
    }

    @Test
    public void testNextPhaseFromMain1Phase() {
        Game.currentPhase = new Main1Phase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof CombatBeginningPhase);
    }

    @Test
    public void testNextPhaseFromCombatBeginningPhase() {
        Game.currentPhase = new CombatBeginningPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof DeclareAttackersPhase);
    }

    @Test
    public void testNextPhaseFromDeclareAttackersPhase() {
        Game.currentPhase = new DeclareAttackersPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof DeclareBlockersPhase);
    }

    @Test
    public void testNextPhaseFromDeclareBlockersPhase() {
        Game.currentPhase = new DeclareBlockersPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof CombatDamagePhase);
    }

    @Test
    public void testNextPhaseFromCombatDamagePhase() {
        Game.currentPhase = new CombatDamagePhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof CombatEndPhase);
    }

    @Test
    public void testNextPhaseFromCombatEndPhase() {
        Game.currentPhase = new CombatEndPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof Main2Phase);
    }

    @Test
    public void testNextPhaseFromMain2Phase() {
        Game.currentPhase = new Main2Phase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof EndOfTurnPhase);
    }

    @Test
    public void testNextPhaseFromEndOfTurnPhase() {
        Game.currentPhase = new EndOfTurnPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof CleanupPhase);
    }

    @Test
    public void testNextPhaseFromCleanupPhase() {
        Game.currentPhase = new CleanupPhase();
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof PlayerChangePhase);
    }

    @Test
    public void testNextPhaseFromPlayerChangePhase() {
        Game.currentPhase = new PlayerChangePhase();
        int initialPlayer = Game.playingPlayer;
        Phase.nextPhase();
        assertTrue(Game.currentPhase instanceof UntapPhase);
        assertEquals((initialPlayer % 2) + 1, Game.playingPlayer);
    }
}
```

### Explanation:
- **Setup**: Before each test, we reset the `Game.currentPhase` and `Game.playingPlayer` to ensure tests are independent.
- **Tests**: Each test sets the `Game.currentPhase` to a specific phase and calls `Phase.nextPhase()`. It then asserts that the `Game.currentPhase` has transitioned to the expected next phase.
- **Player Change**: The test for `PlayerChangePhase` also checks that the `Game.playingPlayer` is updated correctly.