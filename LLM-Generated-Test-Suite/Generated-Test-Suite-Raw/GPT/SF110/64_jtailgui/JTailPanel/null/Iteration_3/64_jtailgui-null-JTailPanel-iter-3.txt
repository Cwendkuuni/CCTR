To create a comprehensive JUnit 4 test suite for the `JTailPanel` class, we need to test its public methods and any observable behavior. The primary methods to test are `getCharacterHeight()`, `getVerticalScrollBar()`, and `update()`. We will also need to mock dependencies like `JTailModel` and `JTailModelEvent`. Here's a test suite that covers these aspects:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import fr.pingtimeout.jtail.gui.model.JTailModel;
import fr.pingtimeout.jtail.gui.model.JTailModelEvent;
import fr.pingtimeout.jtail.gui.model.JTailModelEvent.Type;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import javax.swing.*;
import java.awt.*;
import java.util.Observable;

public class JTailPanelTest {

    private JTailModel mockModel;
    private JTailPanel jTailPanel;

    @Before
    public void setUp() {
        mockModel = mock(JTailModel.class);
        jTailPanel = new JTailPanel(mockModel);
    }

    @Test
    public void testGetCharacterHeight() {
        FontMetrics metrics = jTailPanel.dataTable.getFontMetrics(jTailPanel.dataTable.getFont());
        int expectedCharacterHeight = metrics.getHeight() - 1;
        assertEquals(expectedCharacterHeight, jTailPanel.getCharacterHeight());
    }

    @Test
    public void testGetVerticalScrollBar() {
        JScrollBar verticalScrollBar = jTailPanel.getVerticalScrollBar();
        assertNotNull(verticalScrollBar);
        assertEquals(jTailPanel.verticalScrollBar, verticalScrollBar);
    }

    @Test
    public void testUpdateWithResizedEvent() {
        JTailModelEvent mockEvent = mock(JTailModelEvent.class);
        mockEvent.type = Type.RESIZED;
        mockEvent.minLine = 0;
        mockEvent.firstLine = 0;
        mockEvent.nbDisplayedLines = 10;
        mockEvent.maxLine = 100;

        when(mockModel.getLineNumbers()).thenReturn("1\n2\n3\n4\n5\n6\n7\n8\n9\n10");
        when(mockModel.getContent()).thenReturn("Line1\nLine2\nLine3\nLine4\nLine5\nLine6\nLine7\nLine8\nLine9\nLine10");

        jTailPanel.update(mockModel, mockEvent);

        BoundedRangeModel rangeModel = jTailPanel.getVerticalScrollBar().getModel();
        assertEquals(0, rangeModel.getMinimum());
        assertEquals(0, rangeModel.getValue());
        assertEquals(10, rangeModel.getExtent());
        assertEquals(100, rangeModel.getMaximum());
        assertFalse(jTailPanel.getVerticalScrollBar().isEnabled());
    }

    @Test
    public void testUpdateWithScrolledEvent() {
        JTailModelEvent mockEvent = mock(JTailModelEvent.class);
        mockEvent.type = Type.SCROLLED;

        when(mockModel.getLineNumbers()).thenReturn("1\n2\n3\n4\n5\n6\n7\n8\n9\n10");
        when(mockModel.getContent()).thenReturn("Line1\nLine2\nLine3\nLine4\nLine5\nLine6\nLine7\nLine8\nLine9\nLine10");

        jTailPanel.update(mockModel, mockEvent);

        assertEquals(10, jTailPanel.tableModel.getRowCount());
        assertEquals("1", jTailPanel.tableModel.getValueAt(0, 0));
        assertEquals("Line1", jTailPanel.tableModel.getValueAt(0, 1));
    }
}
```

### Explanation:

1. **Setup**: We use `@Before` to initialize the `JTailPanel` and mock its dependencies before each test.

2. **Test `getCharacterHeight()`**: We verify that the method returns the correct character height based on the font metrics.

3. **Test `getVerticalScrollBar()`**: We ensure that the method returns the correct vertical scroll bar instance.

4. **Test `update()` with `RESIZED` event**: We simulate a `RESIZED` event and verify that the vertical scroll bar's range model is updated correctly and that the scroll bar is disabled when appropriate.

5. **Test `update()` with `SCROLLED` event**: We simulate a `SCROLLED` event and verify that the table model is updated with the correct number of rows and content.

This test suite uses Mockito to mock dependencies and verify interactions, ensuring that the `JTailPanel` behaves as expected when receiving updates from the `JTailModel`.