```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Observable;

@RunWith(MockitoJUnitRunner.class)
public class IndexFileActionTest {

    @Mock
    private JTailMainModel mockJTailMainModel;

    @Mock
    private OpenFileModel mockOpenFileModel;

    @Mock
    private ActionEvent mockActionEvent;

    @Mock
    private File mockFile;

    @Mock
    private Observable mockObservable;

    private IndexFileAction indexFileAction;

    @Before
    public void setUp() {
        indexFileAction = new IndexFileAction(mockJTailMainModel, mockOpenFileModel);
    }

    @Test
    public void testActionPerformed_noFileSelected() {
        when(mockOpenFileModel.getFile()).thenReturn(null);

        indexFileAction.actionPerformed(mockActionEvent);

        verify(mockOpenFileModel, times(1)).getFile();
        // Assuming InformationHandler.handle is a static method, we cannot verify it directly without a wrapper.
    }

    @Test
    public void testActionPerformed_memoryBasedIndex() throws FileNotFoundException {
        when(mockOpenFileModel.getFile()).thenReturn(mockFile);
        when(mockOpenFileModel.getIndexType()).thenReturn(IndexType.MEMORY_BASED);

        indexFileAction.actionPerformed(mockActionEvent);

        verify(mockOpenFileModel, times(1)).getFile();
        verify(mockOpenFileModel, times(1)).getIndexType();
        // Further verification can be done if FileIndexer and FileIndexerWorker are mockable.
    }

    @Test
    public void testActionPerformed_fileBasedIndex() throws FileNotFoundException {
        when(mockOpenFileModel.getFile()).thenReturn(mockFile);
        when(mockOpenFileModel.getIndexType()).thenReturn(IndexType.FILE_BASED);

        indexFileAction.actionPerformed(mockActionEvent);

        verify(mockOpenFileModel, times(1)).getFile();
        verify(mockOpenFileModel, times(1)).getIndexType();
        // Further verification can be done if FileIndexer and FileIndexerWorker are mockable.
    }

    @Test
    public void testActionPerformed_fileNotFoundException() throws FileNotFoundException {
        when(mockOpenFileModel.getFile()).thenReturn(mockFile);
        when(mockOpenFileModel.getIndexType()).thenReturn(IndexType.FILE_BASED);
        // Assuming FileIndexer throws FileNotFoundException, mock it accordingly.

        indexFileAction.actionPerformed(mockActionEvent);

        // Verify that ExceptionHandler.handle is called with appropriate arguments.
    }

    @Test
    public void testUpdate_notificationReceived() {
        when(mockObservable.getFile()).thenReturn(mockFile);
        when(mockObservable.getIndex()).thenReturn(mockIndex);

        indexFileAction.update(mockObservable, 100);

        verify(mockJTailMainModel, times(1)).add(any(JTailModel.class));
        // Further verification can be done if LineReader and JTailModel are mockable.
    }

    @Test
    public void testUpdate_fileNotFoundException() {
        when(mockObservable.getFile()).thenReturn(mockFile);
        when(mockObservable.getIndex()).thenReturn(mockIndex);
        // Assuming LineReader throws FileNotFoundException, mock it accordingly.

        indexFileAction.update(mockObservable, 100);

        // Verify that ExceptionHandler.handle is called with appropriate arguments.
    }

    @Test
    public void testUpdate_genericException() {
        when(mockObservable.getFile()).thenReturn(mockFile);
        when(mockObservable.getIndex()).thenReturn(mockIndex);
        // Assuming LineReader throws a generic exception, mock it accordingly.

        indexFileAction.update(mockObservable, 100);

        // Verify that ExceptionHandler.handle is called with appropriate arguments.
    }
}
```

This test suite uses Mockito to mock dependencies and verify interactions. It covers the main scenarios for the `actionPerformed` and `update` methods. Note that some parts of the code, such as static method calls or constructors that throw exceptions, may require additional setup or refactoring to be fully testable.