To create a comprehensive JUnit 4 test suite for the `IndexFileAction` class, we need to consider testing the constructor, the `actionPerformed` method, and the `update` method. The test suite will mock dependencies and verify interactions and state changes. Here is a basic test suite:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ResourceBundle;

import fr.pingtimeout.jtail.gui.controller.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.io.index.FileIndexer;
import fr.pingtimeout.jtail.io.index.FileIndexerWorker;
import fr.pingtimeout.jtail.io.index.RamFileIndex;
import fr.pingtimeout.jtail.io.index.RomFileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;

@RunWith(MockitoJUnitRunner.class)
public class IndexFileActionTest {

    @Mock
    private JTailMainModel jTailMainModel;

    @Mock
    private OpenFileModel openFileModel;

    @Mock
    private ActionEvent actionEvent;

    @Mock
    private File file;

    @InjectMocks
    private IndexFileAction indexFileAction;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(openFileModel.getFile()).thenReturn(file);
    }

    @Test
    public void testConstructor() {
        ResourceBundle bundle = ResourceBundle.getBundle("fr.pingtimeout.jtail.gui.language");
        IndexFileAction action = new IndexFileAction(jTailMainModel, openFileModel);
        assertEquals(bundle.getString("action.open.label"), action.getValue(Action.NAME));
    }

    @Test
    public void testActionPerformed_noFileSelected() {
        when(openFileModel.getFile()).thenReturn(null);
        indexFileAction.actionPerformed(actionEvent);
        verify(openFileModel, times(1)).getFile();
        // Verify that InformationHandler.handle is called with correct parameters
    }

    @Test
    public void testActionPerformed_memoryBasedIndex() throws FileNotFoundException {
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.MEMORY_BASED);
        when(actionEvent.getSource()).thenReturn(mock(JDialog.class));

        indexFileAction.actionPerformed(actionEvent);

        verify(openFileModel, times(1)).getFile();
        verify(openFileModel, times(1)).getIndexType();
        // Verify that FileIndexer is created with RamFileIndex.class
    }

    @Test
    public void testActionPerformed_fileBasedIndex() throws FileNotFoundException {
        when(openFileModel.getIndexType()).thenReturn(OpenFileModel.IndexType.FILE_BASED);
        when(actionEvent.getSource()).thenReturn(mock(JDialog.class));

        indexFileAction.actionPerformed(actionEvent);

        verify(openFileModel, times(1)).getFile();
        verify(openFileModel, times(1)).getIndexType();
        // Verify that FileIndexer is created with RomFileIndex.class
    }

    @Test
    public void testUpdate_notificationReceived() {
        FileIndexer fileIndexer = mock(FileIndexer.class);
        when(fileIndexer.getFile()).thenReturn(file);
        when(fileIndexer.getIndex()).thenReturn(mock(FileIndexer.Index.class));

        indexFileAction.update(fileIndexer, 100);

        verify(jTailMainModel, times(1)).add(any());
        // Verify that JTailModel is created and added to jTailMainModel
    }

    @Test
    public void testUpdate_notificationNotComplete() {
        FileIndexer fileIndexer = mock(FileIndexer.class);

        indexFileAction.update(fileIndexer, 50);

        verify(jTailMainModel, never()).add(any());
        // Verify that no model is added to jTailMainModel
    }
}
```

### Explanation:
- **Mocks and Stubs**: We use Mockito to mock dependencies like `JTailMainModel`, `OpenFileModel`, and `ActionEvent`.
- **Constructor Test**: Verifies that the constructor initializes the action with the correct label from the resource bundle.
- **`actionPerformed` Tests**: 
  - Tests the behavior when no file is selected.
  - Tests the behavior for both `MEMORY_BASED` and `FILE_BASED` index types.
- **`update` Tests**:
  - Tests the behavior when a notification with 100% completion is received.
  - Tests the behavior when a notification with less than 100% completion is received.

This test suite provides a basic structure and should be expanded with additional assertions and verifications as needed to fully test the interactions and state changes within the `IndexFileAction` class.