Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ARFFHandler` class. This test suite covers various scenarios, including loading ARFF files with and without class indices, handling comments, and dealing with malformed data.

```java
import net.sf.javaml.core.Dataset;
import net.sf.javaml.core.Instance;
import net.sf.javaml.core.DefaultDataset;
import net.sf.javaml.core.DenseInstance;
import net.sf.javaml.tools.data.ARFFHandler;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;

import static org.junit.Assert.*;

public class ARFFHandlerTest {

    private File validArffFile;
    private File validArffFileWithClassIndex;
    private File invalidArffFile;
    private File arffFileWithComments;

    @Before
    public void setUp() throws IOException {
        // Create a valid ARFF file without class index
        validArffFile = File.createTempFile("valid", ".arff");
        try (FileWriter writer = new FileWriter(validArffFile)) {
            writer.write("@relation test\n");
            writer.write("@attribute attr1 numeric\n");
            writer.write("@attribute attr2 numeric\n");
            writer.write("@data\n");
            writer.write("1.0,2.0\n");
            writer.write("3.0,4.0\n");
        }

        // Create a valid ARFF file with class index
        validArffFileWithClassIndex = File.createTempFile("validWithClass", ".arff");
        try (FileWriter writer = new FileWriter(validArffFileWithClassIndex)) {
            writer.write("@relation test\n");
            writer.write("@attribute attr1 numeric\n");
            writer.write("@attribute attr2 numeric\n");
            writer.write("@attribute class {A,B}\n");
            writer.write("@data\n");
            writer.write("1.0,2.0,A\n");
            writer.write("3.0,4.0,B\n");
        }

        // Create an invalid ARFF file
        invalidArffFile = File.createTempFile("invalid", ".arff");
        try (FileWriter writer = new FileWriter(invalidArffFile)) {
            writer.write("@relation test\n");
            writer.write("@attribute attr1 numeric\n");
            writer.write("@attribute attr2 numeric\n");
            writer.write("@data\n");
            writer.write("1.0,not_a_number\n");
        }

        // Create an ARFF file with comments
        arffFileWithComments = File.createTempFile("comments", ".arff");
        try (FileWriter writer = new FileWriter(arffFileWithComments)) {
            writer.write("@relation test\n");
            writer.write("% This is a comment\n");
            writer.write("@attribute attr1 numeric\n");
            writer.write("@attribute attr2 numeric\n");
            writer.write("@data\n");
            writer.write("% Another comment\n");
            writer.write("1.0,2.0\n");
        }
    }

    @Test
    public void testLoadARFFWithoutClassIndex() throws Exception {
        Dataset dataset = ARFFHandler.loadARFF(validArffFile);
        assertNotNull(dataset);
        assertEquals(2, dataset.size());

        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertNull(instance1.classValue());

        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
        assertNull(instance2.classValue());
    }

    @Test
    public void testLoadARFFWithClassIndex() throws Exception {
        Dataset dataset = ARFFHandler.loadARFF(validArffFileWithClassIndex, 2);
        assertNotNull(dataset);
        assertEquals(2, dataset.size());

        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertEquals("A", instance1.classValue());

        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
        assertEquals("B", instance2.classValue());
    }

    @Test
    public void testLoadARFFWithComments() throws Exception {
        Dataset dataset = ARFFHandler.loadARFF(arffFileWithComments);
        assertNotNull(dataset);
        assertEquals(1, dataset.size());

        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertNull(instance1.classValue());
    }

    @Test(expected = NumberFormatException.class)
    public void testLoadInvalidARFF() throws Exception {
        ARFFHandler.loadARFF(invalidArffFile);
    }
}
```

### Explanation:
- **Setup Method**: The `setUp` method creates temporary ARFF files for testing various scenarios, including valid data, data with class indices, invalid data, and data with comments.
- **Test Methods**:
  - `testLoadARFFWithoutClassIndex`: Tests loading a valid ARFF file without a class index.
  - `testLoadARFFWithClassIndex`: Tests loading a valid ARFF file with a specified class index.
  - `testLoadARFFWithComments`: Tests loading an ARFF file that contains comments.
  - `testLoadInvalidARFF`: Tests loading an invalid ARFF file, expecting a `NumberFormatException`.

This test suite ensures that the `ARFFHandler` class is thoroughly tested for various input scenarios.