Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ARFFHandler` class. This test suite assumes that you have access to the necessary classes and methods such as `Dataset`, `DefaultDataset`, `Instance`, and `DenseInstance`. It also assumes that you have a way to create or mock ARFF files for testing purposes.

```java
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import net.sf.javaml.core.Dataset;
import net.sf.javaml.core.Instance;
import net.sf.javaml.tools.data.ARFFHandler;

public class ARFFHandlerTest {

    private File tempFile;

    @Before
    public void setUp() throws IOException {
        // Create a temporary ARFF file for testing
        tempFile = File.createTempFile("test", ".arff");
        try (PrintWriter writer = new PrintWriter(new FileWriter(tempFile))) {
            writer.println("@relation test");
            writer.println("@attribute attr1 numeric");
            writer.println("@attribute attr2 numeric");
            writer.println("@attribute class {A, B}");
            writer.println("@data");
            writer.println("1.0,2.0,A");
            writer.println("3.0,4.0,B");
        }
    }

    @Test
    public void testLoadARFFWithDefaultClassIndex() throws Exception {
        Dataset dataset = ARFFHandler.loadARFF(tempFile);
        assertNotNull(dataset);
        assertEquals(2, dataset.size());

        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertEquals("A", instance1.classValue());

        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
        assertEquals("B", instance2.classValue());
    }

    @Test
    public void testLoadARFFWithSpecifiedClassIndex() throws Exception {
        Dataset dataset = ARFFHandler.loadARFF(tempFile, 2);
        assertNotNull(dataset);
        assertEquals(2, dataset.size());

        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertEquals("A", instance1.classValue());

        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
        assertEquals("B", instance2.classValue());
    }

    @Test(expected = FileNotFoundException.class)
    public void testLoadARFFWithNonExistentFile() throws Exception {
        File nonExistentFile = new File("non_existent_file.arff");
        ARFFHandler.loadARFF(nonExistentFile);
    }

    @Test
    public void testLoadARFFWithMissingValues() throws Exception {
        // Create a temporary ARFF file with missing values
        File missingValuesFile = File.createTempFile("missingValues", ".arff");
        try (PrintWriter writer = new PrintWriter(new FileWriter(missingValuesFile))) {
            writer.println("@relation test");
            writer.println("@attribute attr1 numeric");
            writer.println("@attribute attr2 numeric");
            writer.println("@attribute class {A, B}");
            writer.println("@data");
            writer.println("1.0,?,A");
            writer.println("?,4.0,B");
        }

        Dataset dataset = ARFFHandler.loadARFF(missingValuesFile, 2);
        assertNotNull(dataset);
        assertEquals(2, dataset.size());

        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertTrue(Double.isNaN(instance1.value(1)));
        assertEquals("A", instance1.classValue());

        Instance instance2 = iterator.next();
        assertTrue(Double.isNaN(instance2.value(0)));
        assertEquals("B", instance2.classValue());
    }
}
```

### Explanation:
- **Setup**: The `setUp` method creates a temporary ARFF file with a simple dataset for testing.
- **Tests**:
  - `testLoadARFFWithDefaultClassIndex`: Tests loading the ARFF file with the default class index.
  - `testLoadARFFWithSpecifiedClassIndex`: Tests loading the ARFF file with a specified class index.
  - `testLoadARFFWithNonExistentFile`: Tests the behavior when attempting to load a non-existent file, expecting a `FileNotFoundException`.
  - `testLoadARFFWithMissingValues`: Tests loading an ARFF file with missing values, ensuring that missing numeric values are handled as `NaN`.

Make sure to adjust the test cases according to the actual behavior and structure of your `Dataset`, `Instance`, and related classes.