Certainly! Below is a JUnit 4 test suite for the `ARFFHandler` class. This test suite aims to cover various scenarios, including handling different class indices, parsing errors, and ensuring that the data is correctly loaded into the `Dataset`.

```java
import net.sf.javaml.core.Dataset;
import net.sf.javaml.core.Instance;
import net.sf.javaml.core.DefaultDataset;
import net.sf.javaml.core.DenseInstance;
import net.sf.javaml.tools.data.ARFFHandler;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;

public class ARFFHandlerTest {

    private File tempFile;

    @Before
    public void setUp() throws IOException {
        tempFile = File.createTempFile("test", ".arff");
    }

    @After
    public void tearDown() {
        if (tempFile != null && tempFile.exists()) {
            tempFile.delete();
        }
    }

    @Test
    public void testLoadARFFWithoutClassIndex() throws IOException {
        writeToFile(tempFile, "@relation test\n@attribute attr1 numeric\n@attribute attr2 numeric\n@data\n1.0,2.0\n3.0,4.0");
        Dataset dataset = ARFFHandler.loadARFF(tempFile);
        assertEquals(2, dataset.size());
        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertNull(instance1.classValue());
        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
        assertNull(instance2.classValue());
    }

    @Test
    public void testLoadARFFWithClassIndex() throws IOException {
        writeToFile(tempFile, "@relation test\n@attribute attr1 numeric\n@attribute attr2 numeric\n@attribute class {A,B}\n@data\n1.0,2.0,A\n3.0,4.0,B");
        Dataset dataset = ARFFHandler.loadARFF(tempFile, 2);
        assertEquals(2, dataset.size());
        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        assertEquals("A", instance1.classValue());
        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
        assertEquals("B", instance2.classValue());
    }

    @Test
    public void testLoadARFFWithMissingValues() throws IOException {
        writeToFile(tempFile, "@relation test\n@attribute attr1 numeric\n@attribute attr2 numeric\n@data\n1.0,?,2.0\n?,4.0,5.0");
        Dataset dataset = ARFFHandler.loadARFF(tempFile);
        assertEquals(2, dataset.size());
        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, Double.NaN, 2.0}, instance1.toArray(), 0.001);
        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{Double.NaN, 4.0, 5.0}, instance2.toArray(), 0.001);
    }

    @Test(expected = FileNotFoundException.class)
    public void testLoadARFFFileNotFound() throws IOException {
        File nonExistentFile = new File("non_existent_file.arff");
        ARFFHandler.loadARFF(nonExistentFile);
    }

    @Test
    public void testLoadARFFWithCommentsAndBlanks() throws IOException {
        writeToFile(tempFile, "% This is a comment\n\n@relation test\n@attribute attr1 numeric\n@attribute attr2 numeric\n@data\n% Another comment\n1.0,2.0\n\n3.0,4.0\n");
        Dataset dataset = ARFFHandler.loadARFF(tempFile);
        assertEquals(2, dataset.size());
        Iterator<Instance> iterator = dataset.iterator();
        Instance instance1 = iterator.next();
        assertArrayEquals(new double[]{1.0, 2.0}, instance1.toArray(), 0.001);
        Instance instance2 = iterator.next();
        assertArrayEquals(new double[]{3.0, 4.0}, instance2.toArray(), 0.001);
    }

    private void writeToFile(File file, String content) throws IOException {
        try (PrintWriter out = new PrintWriter(new FileWriter(file))) {
            out.println(content);
        }
    }
}
```

### Explanation:
- **Setup and Teardown**: The `setUp` and `tearDown` methods handle the creation and deletion of a temporary file used for testing.
- **Test Cases**:
  - `testLoadARFFWithoutClassIndex`: Tests loading ARFF data without specifying a class index.
  - `testLoadARFFWithClassIndex`: Tests loading ARFF data with a specified class index.
  - `testLoadARFFWithMissingValues`: Tests handling of missing values in the ARFF data.
  - `testLoadARFFFileNotFound`: Tests the behavior when the specified ARFF file does not exist.
  - `testLoadARFFWithCommentsAndBlanks`: Tests handling of comments and blank lines in the ARFF file.
- **Helper Method**: `writeToFile` is used to write ARFF content to the temporary file for testing purposes.