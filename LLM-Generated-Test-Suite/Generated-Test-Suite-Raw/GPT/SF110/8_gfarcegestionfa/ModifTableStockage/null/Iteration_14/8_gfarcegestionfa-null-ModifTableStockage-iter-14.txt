To create a comprehensive JUnit 4 test suite for the `ModifTableStockage` class, we need to ensure that we test all the methods in the class. This includes testing the addition and removal of columns and rows, as well as the more complex operations like separating and merging columns. 

Before we proceed, it's important to note that the `TableStockage` class is not provided, so I'll assume its basic functionality based on the usage in `ModifTableStockage`. The `TableStockage` class should have methods like `getColumnCount()`, `getRowCount()`, `getColumnName(int index)`, `setColumnName(int index, String name)`, `getValueAt(int row, int column)`, `setValueAt(Object value, int row, int column)`, and `getColumnClass(int index)`.

Here's a JUnit 4 test suite for the `ModifTableStockage` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class ModifTableStockageTest {

    private TableStockage mockTableStockage;
    private ModifTableStockage modifTableStockage;

    @Before
    public void setUp() {
        mockTableStockage = Mockito.mock(TableStockage.class);
        Mockito.when(mockTableStockage.getColumnCount()).thenReturn(3);
        Mockito.when(mockTableStockage.getRowCount()).thenReturn(2);
        Mockito.when(mockTableStockage.getColumnName(Mockito.anyInt())).thenReturn("Column");
        Mockito.when(mockTableStockage.getColumnClass(Mockito.anyInt())).thenReturn(String.class);
        Mockito.when(mockTableStockage.getValueAt(Mockito.anyInt(), Mockito.anyInt())).thenReturn("Value");

        modifTableStockage = new ModifTableStockage(mockTableStockage);
    }

    @Test
    public void testAjouterColonne() {
        TableStockage result = modifTableStockage.ajouterColonne("New Column", Integer.class);
        assertEquals(4, result.getColumnCount());
        assertEquals("New Column", result.getColumnName(3));
    }

    @Test
    public void testAjouterLigne() {
        TableStockage result = modifTableStockage.ajouterLigne();
        assertEquals(4, result.getRowCount());
        assertEquals("", result.getValueAt(2, 0));
    }

    @Test
    public void testSupprimerColonne() {
        TableStockage result = modifTableStockage.supprimerColonne(1);
        assertEquals(2, result.getColumnCount());
    }

    @Test
    public void testSupprimerLigne() {
        TableStockage result = modifTableStockage.supprimerLigne(1);
        assertEquals(2, result.getRowCount());
    }

    @Test
    public void testSeparerColonne() {
        Mockito.when(mockTableStockage.getColumnClass(0)).thenReturn(String.class);
        Mockito.when(mockTableStockage.getValueAt(0, 0)).thenReturn("Value 1");
        TableStockage result = modifTableStockage.separerColonne(0);
        assertEquals(4, result.getColumnCount());
    }

    @Test
    public void testFusionnerColonnes() {
        Mockito.when(mockTableStockage.getColumnClass(0)).thenReturn(String.class);
        Mockito.when(mockTableStockage.getColumnClass(1)).thenReturn(String.class);
        TableStockage result = modifTableStockage.fusionnerColonnes(0);
        assertEquals(2, result.getColumnCount());
    }

    @Test
    public void testColonneMail() {
        TableStockage result = modifTableStockage.colonneMail();
        assertEquals(4, result.getColumnCount());
        assertEquals(Boolean.class, result.getColumnClass(3));
    }

    @Test
    public void testSelectMail() {
        Mockito.when(mockTableStockage.getColumnName(3)).thenReturn("Envoyer E-Mail a:");
        Mockito.when(mockTableStockage.getValueAt(0, 3)).thenReturn(true);
        TableStockage result = modifTableStockage.selectMail();
        assertEquals(3, result.getRowCount());
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to create a mock `TableStockage` object. This allows us to simulate the behavior of `TableStockage` without needing its actual implementation.
- **Setup**: The `setUp` method initializes the mock object and the `ModifTableStockage` instance before each test.
- **Tests**: Each method in `ModifTableStockage` is tested to ensure it behaves as expected. We check the number of columns and rows, and verify that the correct values are set in the table.
- **Assertions**: We use assertions to verify that the state of the `TableStockage` object is as expected after each operation.

This test suite provides a comprehensive set of tests for the `ModifTableStockage` class, covering all its methods.