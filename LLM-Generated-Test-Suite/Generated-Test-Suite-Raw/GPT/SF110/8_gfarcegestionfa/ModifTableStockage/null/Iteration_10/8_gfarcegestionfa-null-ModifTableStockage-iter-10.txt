To create a comprehensive JUnit 4 test suite for the `ModifTableStockage` class, we need to ensure that we test all the methods in the class. This includes testing the addition and removal of columns and rows, as well as the more complex operations like separating and merging columns. We'll also need to mock or create a `TableStockage` class since it is not provided in the original code.

Below is a JUnit 4 test suite for the `ModifTableStockage` class:

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class ModifTableStockageTest {

    private TableStockage mockTableStockage;
    private ModifTableStockage modifTableStockage;

    @Before
    public void setUp() {
        mockTableStockage = Mockito.mock(TableStockage.class);
        Mockito.when(mockTableStockage.getColumnCount()).thenReturn(3);
        Mockito.when(mockTableStockage.getRowCount()).thenReturn(2);
        Mockito.when(mockTableStockage.getColumnName(Mockito.anyInt())).thenReturn("Column");
        Mockito.when(mockTableStockage.getColumnClass(Mockito.anyInt())).thenReturn(String.class);
        Mockito.when(mockTableStockage.getValueAt(Mockito.anyInt(), Mockito.anyInt())).thenReturn("Value");

        modifTableStockage = new ModifTableStockage(mockTableStockage);
    }

    @Test
    public void testAjouterColonne() {
        TableStockage result = modifTableStockage.ajouterColonne("New Column", String.class);
        assertEquals(4, result.getColumnCount());
        assertEquals("New Column", result.getColumnName(3));
    }

    @Test
    public void testAjouterLigne() {
        TableStockage result = modifTableStockage.ajouterLigne();
        assertEquals(4, result.getRowCount());
        assertEquals("", result.getValueAt(3, 0));
    }

    @Test
    public void testSupprimerColonne() {
        TableStockage result = modifTableStockage.supprimerColonne(1);
        assertEquals(2, result.getColumnCount());
    }

    @Test
    public void testSupprimerLigne() {
        TableStockage result = modifTableStockage.supprimerLigne(1);
        assertEquals(2, result.getRowCount());
    }

    @Test
    public void testSeparerColonne() {
        Mockito.when(mockTableStockage.getColumnClass(0)).thenReturn(String.class);
        Mockito.when(mockTableStockage.getValueAt(0, 0)).thenReturn("Value 1");

        TableStockage result = modifTableStockage.separerColonne(0);
        assertEquals(4, result.getColumnCount());
    }

    @Test
    public void testFusionnerColonnes() {
        Mockito.when(mockTableStockage.getColumnClass(0)).thenReturn(String.class);
        Mockito.when(mockTableStockage.getColumnClass(1)).thenReturn(String.class);

        TableStockage result = modifTableStockage.fusionnerColonnes(0);
        assertEquals(2, result.getColumnCount());
    }

    @Test
    public void testColonneMail() {
        TableStockage result = modifTableStockage.colonneMail();
        assertEquals(4, result.getColumnCount());
        assertEquals("Envoyer E-Mail a:", result.getColumnName(3));
    }

    @Test
    public void testSelectMail() {
        Mockito.when(mockTableStockage.getColumnName(3)).thenReturn("Envoyer E-Mail a:");
        Mockito.when(mockTableStockage.getValueAt(Mockito.anyInt(), Mockito.eq(3))).thenReturn(true);

        TableStockage result = modifTableStockage.selectMail();
        assertEquals(3, result.getRowCount());
    }
}
```

### Explanation:
- **Mocking `TableStockage`:** Since the `TableStockage` class is not provided, we use Mockito to create a mock object. This allows us to define the behavior of the methods used in `ModifTableStockage`.
- **Setup Method:** The `setUp` method initializes the mock `TableStockage` and the `ModifTableStockage` instance before each test.
- **Test Methods:** Each method in `ModifTableStockage` is tested to ensure it behaves as expected. We check the number of columns and rows after operations and verify that the correct values are set.
- **Assertions:** We use assertions to verify that the expected outcomes match the actual results.

This test suite provides a comprehensive set of tests for the `ModifTableStockage` class, ensuring that all methods are covered.