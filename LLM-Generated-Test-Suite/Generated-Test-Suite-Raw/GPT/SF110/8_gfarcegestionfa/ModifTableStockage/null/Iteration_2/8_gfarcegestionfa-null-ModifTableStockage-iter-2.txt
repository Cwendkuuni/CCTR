To create a comprehensive JUnit 4 test suite for the `ModifTableStockage` class, we need to test each method thoroughly. This involves creating mock or stub implementations of the `TableStockage` class, as it is not provided in the source code. For simplicity, I'll assume basic behavior for `TableStockage` methods like `getColumnCount()`, `getRowCount()`, `getColumnName()`, `getValueAt()`, `setColumnName()`, and `setValueAt()`.

Here's a complete JUnit 4 test suite for the `ModifTableStockage` class:

```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ModifTableStockageTest {

    private TableStockage mockTableStockage;
    private ModifTableStockage modifTableStockage;

    @Before
    public void setUp() {
        mockTableStockage = mock(TableStockage.class);
        when(mockTableStockage.getColumnCount()).thenReturn(3);
        when(mockTableStockage.getRowCount()).thenReturn(2);
        when(mockTableStockage.getColumnName(anyInt())).thenReturn("Column");
        when(mockTableStockage.getValueAt(anyInt(), anyInt())).thenReturn("Value");
        when(mockTableStockage.getColumnClass(anyInt())).thenReturn(String.class);

        modifTableStockage = new ModifTableStockage(mockTableStockage);
    }

    @Test
    public void testAjouterColonne() {
        TableStockage result = modifTableStockage.ajouterColonne("New Column", String.class);
        assertEquals(4, result.getColumnCount());
        assertEquals("New Column", result.getColumnName(3));
    }

    @Test
    public void testAjouterLigne() {
        TableStockage result = modifTableStockage.ajouterLigne();
        assertEquals(3, result.getRowCount());
        assertEquals("", result.getValueAt(2, 0));
    }

    @Test
    public void testSupprimerColonne() {
        TableStockage result = modifTableStockage.supprimerColonne(1);
        assertEquals(2, result.getColumnCount());
    }

    @Test
    public void testSupprimerLigne() {
        TableStockage result = modifTableStockage.supprimerLigne(1);
        assertEquals(2, result.getRowCount());
    }

    @Test
    public void testSeparerColonne() {
        when(mockTableStockage.getValueAt(0, 0)).thenReturn("Value1 Value2");
        TableStockage result = modifTableStockage.separerColonne(0);
        assertEquals(4, result.getColumnCount());
        assertEquals("Value1", result.getValueAt(0, 0));
        assertEquals("Value2", result.getValueAt(0, 1));
    }

    @Test
    public void testFusionnerColonnes() {
        when(mockTableStockage.getColumnClass(0)).thenReturn(String.class);
        when(mockTableStockage.getColumnClass(1)).thenReturn(String.class);
        TableStockage result = modifTableStockage.fusionnerColonnes(0);
        assertEquals(2, result.getColumnCount());
        assertEquals("Column Column", result.getColumnName(0));
    }

    @Test
    public void testColonneMail() {
        TableStockage result = modifTableStockage.colonneMail();
        assertEquals(4, result.getColumnCount());
        assertEquals("Envoyer E-Mail a:", result.getColumnName(3));
        assertEquals(true, result.getValueAt(0, 3));
    }

    @Test
    public void testSelectMail() {
        when(mockTableStockage.getColumnName(3)).thenReturn("Envoyer E-Mail a:");
        when(mockTableStockage.getValueAt(0, 3)).thenReturn(true);
        when(mockTableStockage.getValueAt(1, 3)).thenReturn(false);
        TableStockage result = modifTableStockage.selectMail();
        assertEquals(2, result.getRowCount());
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to create a mock `TableStockage` object. This allows us to define the behavior of `TableStockage` methods without needing a full implementation.
- **Setup**: The `setUp` method initializes the mock and the `ModifTableStockage` instance before each test.
- **Tests**: Each method in `ModifTableStockage` is tested to ensure it behaves as expected. We check the number of columns and rows, and verify that values are set correctly.
- **Assertions**: We use assertions to verify that the results of method calls match our expectations.

This test suite provides a comprehensive set of tests for the `ModifTableStockage` class, assuming the behavior of the `TableStockage` class as described.