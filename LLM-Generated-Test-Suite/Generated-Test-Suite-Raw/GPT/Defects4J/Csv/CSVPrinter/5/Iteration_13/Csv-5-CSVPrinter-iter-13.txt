```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Collections;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CSVPrinterTest {

    private StringWriter writer;
    private CSVFormat format;
    private CSVPrinter printer;

    @Before
    public void setUp() {
        writer = new StringWriter();
        format = CSVFormat.DEFAULT.withDelimiter(',').withQuote('"').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
    }

    @After
    public void tearDown() throws IOException {
        printer.close();
    }

    @Test
    public void testConstructor() {
        assertNotNull(printer);
        assertEquals(writer, printer.getOut());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorNullOut() {
        new CSVPrinter(null, format);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorNullFormat() {
        new CSVPrinter(writer, null);
    }

    @Test
    public void testClose() throws IOException {
        printer.close();
        assertTrue(writer.toString().isEmpty());
    }

    @Test
    public void testFlush() throws IOException {
        printer.flush();
        assertTrue(writer.toString().isEmpty());
    }

    @Test
    public void testPrintNullValue() throws IOException {
        printer.print(null);
        printer.println();
        assertEquals("\n", writer.toString());
    }

    @Test
    public void testPrintValue() throws IOException {
        printer.print("value");
        printer.println();
        assertEquals("value\n", writer.toString());
    }

    @Test
    public void testPrintAndEscape() throws IOException {
        format = CSVFormat.DEFAULT.withDelimiter(',').withEscape('\\').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
        printer.print("value,with,comma");
        printer.println();
        assertEquals("value\\,with\\,comma\n", writer.toString());
    }

    @Test
    public void testPrintAndQuote() throws IOException {
        format = CSVFormat.DEFAULT.withDelimiter(',').withQuote('"').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
        printer.print("value,with,comma");
        printer.println();
        assertEquals("\"value,with,comma\"\n", writer.toString());
    }

    @Test
    public void testPrintComment() throws IOException {
        format = CSVFormat.DEFAULT.withCommentMarker('#').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
        printer.printComment("This is a comment");
        assertEquals("# This is a comment\n", writer.toString());
    }

    @Test
    public void testPrintRecordIterable() throws IOException {
        printer.printRecord(Arrays.asList("value1", "value2", "value3"));
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordArray() throws IOException {
        printer.printRecord("value1", "value2", "value3");
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordsIterable() throws IOException {
        printer.printRecords(Collections.singletonList(Arrays.asList("value1", "value2", "value3")));
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordsArray() throws IOException {
        printer.printRecords(new Object[]{new Object[]{"value1", "value2", "value3"}});
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordsResultSet() throws SQLException, IOException {
        ResultSet resultSet = mock(ResultSet.class);
        ResultSetMetaData metaData = mock(ResultSetMetaData.class);

        when(resultSet.getMetaData()).thenReturn(metaData);
        when(metaData.getColumnCount()).thenReturn(2);
        when(resultSet.next()).thenReturn(true).thenReturn(false);
        when(resultSet.getString(1)).thenReturn("value1");
        when(resultSet.getString(2)).thenReturn("value2");

        printer.printRecords(resultSet);
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testGetOut() {
        assertEquals(writer, printer.getOut());
    }
}
```