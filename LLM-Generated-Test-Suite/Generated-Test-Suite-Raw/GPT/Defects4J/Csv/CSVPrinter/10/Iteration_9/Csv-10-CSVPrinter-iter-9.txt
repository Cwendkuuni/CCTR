```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Collections;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CSVPrinterTest {

    private StringWriter writer;
    private CSVFormat format;
    private CSVPrinter printer;

    @Before
    public void setUp() throws IOException {
        writer = new StringWriter();
        format = CSVFormat.DEFAULT.withDelimiter(',').withQuote('"').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
    }

    @After
    public void tearDown() throws IOException {
        printer.close();
    }

    @Test
    public void testPrint() throws IOException {
        printer.print("value");
        printer.flush();
        assertEquals("value", writer.toString());
    }

    @Test
    public void testPrintNull() throws IOException {
        printer.print(null);
        printer.flush();
        assertEquals("", writer.toString());
    }

    @Test
    public void testPrintAndQuote() throws IOException {
        printer.print("value,with,comma");
        printer.flush();
        assertEquals("\"value,with,comma\"", writer.toString());
    }

    @Test
    public void testPrintAndEscape() throws IOException {
        format = CSVFormat.DEFAULT.withDelimiter(',').withEscape('\\').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
        printer.print("value,with,comma");
        printer.flush();
        assertEquals("value\\,with\\,comma", writer.toString());
    }

    @Test
    public void testPrintComment() throws IOException {
        format = CSVFormat.DEFAULT.withCommentMarker('#').withRecordSeparator("\n");
        printer = new CSVPrinter(writer, format);
        printer.printComment("This is a comment");
        printer.flush();
        assertEquals("# This is a comment\n", writer.toString());
    }

    @Test
    public void testPrintln() throws IOException {
        printer.println();
        printer.flush();
        assertEquals("\n", writer.toString());
    }

    @Test
    public void testPrintRecordIterable() throws IOException {
        printer.printRecord(Arrays.asList("value1", "value2", "value3"));
        printer.flush();
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordArray() throws IOException {
        printer.printRecord("value1", "value2", "value3");
        printer.flush();
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordsIterable() throws IOException {
        printer.printRecords(Collections.singletonList(Arrays.asList("value1", "value2", "value3")));
        printer.flush();
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordsArray() throws IOException {
        printer.printRecords(new Object[]{new Object[]{"value1", "value2", "value3"}});
        printer.flush();
        assertEquals("value1,value2,value3\n", writer.toString());
    }

    @Test
    public void testPrintRecordsResultSet() throws SQLException, IOException {
        ResultSet resultSet = mock(ResultSet.class);
        ResultSetMetaData metaData = mock(ResultSetMetaData.class);

        when(resultSet.getMetaData()).thenReturn(metaData);
        when(metaData.getColumnCount()).thenReturn(2);
        when(resultSet.next()).thenReturn(true).thenReturn(false);
        when(resultSet.getString(1)).thenReturn("value1");
        when(resultSet.getString(2)).thenReturn("value2");

        printer.printRecords(resultSet);
        printer.flush();
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testGetOut() {
        assertEquals(writer, printer.getOut());
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `CSVPrinter` class. It covers various scenarios, including printing values, handling nulls, quoting, escaping, comments, and printing records from different sources. Each test method is designed to verify the expected behavior of the corresponding method in the `CSVPrinter` class.