```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Collections;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CSVPrinterTest {

    private StringWriter writer;
    private CSVFormat format;
    private CSVPrinter printer;

    @Before
    public void setUp() throws IOException {
        writer = new StringWriter();
        format = CSVFormat.DEFAULT;
        printer = new CSVPrinter(writer, format);
    }

    @After
    public void tearDown() throws IOException {
        printer.close();
    }

    @Test
    public void testConstructor_NullOut() {
        try {
            new CSVPrinter(null, format);
            fail("Expected IllegalArgumentException for null Appendable");
        } catch (IllegalArgumentException e) {
            // expected
        }
    }

    @Test
    public void testConstructor_NullFormat() {
        try {
            new CSVPrinter(writer, null);
            fail("Expected IllegalArgumentException for null CSVFormat");
        } catch (IllegalArgumentException e) {
            // expected
        }
    }

    @Test
    public void testClose() throws IOException {
        printer.close();
        assertTrue(writer.toString().isEmpty());
    }

    @Test
    public void testFlush() throws IOException {
        printer.flush();
        assertTrue(writer.toString().isEmpty());
    }

    @Test
    public void testPrint_NullValue() throws IOException {
        printer.print(null);
        assertEquals("", writer.toString());
    }

    @Test
    public void testPrint_NonNullValue() throws IOException {
        printer.print("value");
        assertEquals("value", writer.toString());
    }

    @Test
    public void testPrintAndEscape() throws IOException {
        CSVFormat escapeFormat = CSVFormat.DEFAULT.withEscape('\\');
        CSVPrinter escapePrinter = new CSVPrinter(writer, escapeFormat);
        escapePrinter.print("value,with,comma");
        assertEquals("value\\,with\\,comma", writer.toString());
    }

    @Test
    public void testPrintAndQuote() throws IOException {
        CSVFormat quoteFormat = CSVFormat.DEFAULT.withQuote('"');
        CSVPrinter quotePrinter = new CSVPrinter(writer, quoteFormat);
        quotePrinter.print("value,with,comma");
        assertEquals("\"value,with,comma\"", writer.toString());
    }

    @Test
    public void testPrintComment() throws IOException {
        CSVFormat commentFormat = CSVFormat.DEFAULT.withCommentMarker('#');
        CSVPrinter commentPrinter = new CSVPrinter(writer, commentFormat);
        commentPrinter.printComment("This is a comment");
        assertEquals("# This is a comment\n", writer.toString());
    }

    @Test
    public void testPrintln() throws IOException {
        printer.println();
        assertEquals("\n", writer.toString());
    }

    @Test
    public void testPrintRecord_Iterable() throws IOException {
        printer.printRecord(Arrays.asList("value1", "value2"));
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testPrintRecord_Array() throws IOException {
        printer.printRecord("value1", "value2");
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testPrintRecords_Iterable() throws IOException {
        printer.printRecords(Collections.singletonList(Arrays.asList("value1", "value2")));
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testPrintRecords_Array() throws IOException {
        printer.printRecords(new Object[]{new Object[]{"value1", "value2"}});
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testPrintRecords_ResultSet() throws SQLException, IOException {
        ResultSet resultSet = mock(ResultSet.class);
        ResultSetMetaData metaData = mock(ResultSetMetaData.class);

        when(resultSet.getMetaData()).thenReturn(metaData);
        when(metaData.getColumnCount()).thenReturn(2);
        when(resultSet.next()).thenReturn(true).thenReturn(false);
        when(resultSet.getString(1)).thenReturn("value1");
        when(resultSet.getString(2)).thenReturn("value2");

        printer.printRecords(resultSet);
        assertEquals("value1,value2\n", writer.toString());
    }

    @Test
    public void testGetOut() {
        assertEquals(writer, printer.getOut());
    }
}
```