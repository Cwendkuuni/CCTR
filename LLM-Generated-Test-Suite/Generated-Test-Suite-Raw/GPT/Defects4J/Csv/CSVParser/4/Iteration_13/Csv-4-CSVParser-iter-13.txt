```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVParserTest {

    private CSVParser parser;

    @Before
    public void setUp() throws Exception {
        // Setup code if needed
    }

    @After
    public void tearDown() throws Exception {
        if (parser != null) {
            parser.close();
        }
    }

    @Test
    public void testParseFile() throws IOException {
        File file = new File("test.csv");
        CSVFormat format = CSVFormat.DEFAULT;
        parser = CSVParser.parse(file, format);
        assertNotNull(parser);
    }

    @Test
    public void testParseString() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = CSVParser.parse(csvData, format);
        assertNotNull(parser);
    }

    @Test
    public void testParseURL() throws IOException {
        URL url = new URL("http://example.com/test.csv");
        CSVFormat format = CSVFormat.DEFAULT;
        parser = CSVParser.parse(url, StandardCharsets.UTF_8, format);
        assertNotNull(parser);
    }

    @Test
    public void testGetCurrentLineNumber() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        parser.getRecords(); // Read all records
        assertEquals(2, parser.getCurrentLineNumber());
    }

    @Test
    public void testGetHeaderMap() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT.withHeader();
        parser = new CSVParser(new StringReader(csvData), format);
        Map<String, Integer> headerMap = parser.getHeaderMap();
        assertEquals(3, headerMap.size());
        assertTrue(headerMap.containsKey("a"));
        assertTrue(headerMap.containsKey("b"));
        assertTrue(headerMap.containsKey("c"));
    }

    @Test
    public void testGetRecordNumber() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        parser.getRecords(); // Read all records
        assertEquals(1, parser.getRecordNumber());
    }

    @Test
    public void testGetRecords() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        List<CSVRecord> records = parser.getRecords();
        assertEquals(1, records.size());
        CSVRecord record = records.get(0);
        assertEquals("1", record.get(0));
        assertEquals("2", record.get(1));
        assertEquals("3", record.get(2));
    }

    @Test
    public void testIsClosed() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        assertFalse(parser.isClosed());
        parser.close();
        assertTrue(parser.isClosed());
    }

    @Test
    public void testIterator() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        int count = 0;
        for (CSVRecord record : parser) {
            assertEquals("1", record.get(0));
            assertEquals("2", record.get(1));
            assertEquals("3", record.get(2));
            count++;
        }
        assertEquals(1, count);
    }

    @Test(expected = NoSuchElementException.class)
    public void testIteratorNoSuchElementException() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        Iterator<CSVRecord> iterator = parser.iterator();
        while (iterator.hasNext()) {
            iterator.next();
        }
        iterator.next(); // Should throw NoSuchElementException
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testIteratorRemove() throws IOException {
        String csvData = "a,b,c\n1,2,3";
        CSVFormat format = CSVFormat.DEFAULT;
        parser = new CSVParser(new StringReader(csvData), format);
        Iterator<CSVRecord> iterator = parser.iterator();
        iterator.remove(); // Should throw UnsupportedOperationException
    }
}
```