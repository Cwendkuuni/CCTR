To create a comprehensive JUnit 4 test suite for the `TypeInfoFactory` class, we need to test each public method and any private methods that have significant logic. Since `TypeInfoFactory` is a utility class with static methods, we will focus on testing the static methods `getTypeInfoForArray` and `getTypeInfoForField`. We will also indirectly test the private methods by ensuring the public methods that use them behave correctly.

Below is a JUnit 4 test suite for the `TypeInfoFactory` class:

```java
import static org.junit.Assert.*;
import org.junit.Test;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.List;

public class TypeInfoFactoryTest {

    @Test
    public void testGetTypeInfoForArray_withValidArrayType() {
        Type arrayType = String[].class;
        TypeInfoArray typeInfoArray = TypeInfoFactory.getTypeInfoForArray(arrayType);
        assertNotNull(typeInfoArray);
        assertEquals(arrayType, typeInfoArray.getType());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetTypeInfoForArray_withInvalidArrayType() {
        Type nonArrayType = String.class;
        TypeInfoFactory.getTypeInfoForArray(nonArrayType);
    }

    @Test
    public void testGetTypeInfoForField_withSimpleField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("simpleField");
        TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
        assertNotNull(typeInfo);
        assertEquals(String.class, typeInfo.getType());
    }

    @Test
    public void testGetTypeInfoForField_withParameterizedField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("parameterizedField");
        TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
        assertNotNull(typeInfo);
        assertTrue(typeInfo.getType() instanceof ParameterizedType);
        ParameterizedType parameterizedType = (ParameterizedType) typeInfo.getType();
        assertEquals(List.class, parameterizedType.getRawType());
        assertEquals(String.class, parameterizedType.getActualTypeArguments()[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetTypeInfoForField_withTypeVariableField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("typeVariableField");
        TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
    }

    // Sample class to use for testing
    private static class SampleClass<T> {
        private String simpleField;
        private List<String> parameterizedField;
        private T typeVariableField;
    }
}
```

### Explanation:

1. **Test for `getTypeInfoForArray`**:
   - **Valid Array Type**: We test with a valid array type (`String[]`) and assert that the returned `TypeInfoArray` is not null and has the correct type.
   - **Invalid Array Type**: We test with a non-array type (`String`) and expect an `IllegalArgumentException`.

2. **Test for `getTypeInfoForField`**:
   - **Simple Field**: We test with a simple field (`simpleField`) of type `String` and assert that the returned `TypeInfo` has the correct type.
   - **Parameterized Field**: We test with a parameterized field (`parameterizedField`) of type `List<String>` and assert that the returned `TypeInfo` is a `ParameterizedType` with the correct raw type and actual type arguments.
   - **Type Variable Field**: We test with a type variable field (`typeVariableField`) and expect an `UnsupportedOperationException` since the method does not handle type variables without a parameterized type.

This test suite covers the main functionalities of the `TypeInfoFactory` class, ensuring that the methods behave as expected for various input scenarios.