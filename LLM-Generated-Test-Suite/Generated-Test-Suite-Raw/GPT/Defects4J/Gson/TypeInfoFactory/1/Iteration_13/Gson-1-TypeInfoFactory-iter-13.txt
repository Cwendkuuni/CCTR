To create a comprehensive JUnit 4 test suite for the `TypeInfoFactory` class, we need to test each public method and any private methods that have significant logic. Since `TypeInfoFactory` is a utility class with static methods, we will focus on testing the static methods `getTypeInfoForArray` and `getTypeInfoForField`, as well as the private method `getActualType` indirectly through these public methods.

Below is a JUnit 4 test suite for the `TypeInfoFactory` class:

```java
import static org.junit.Assert.*;
import org.junit.Test;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.List;

public class TypeInfoFactoryTest {

    @Test
    public void testGetTypeInfoForArray_withArrayType() {
        Type arrayType = String[].class;
        TypeInfoArray typeInfoArray = TypeInfoFactory.getTypeInfoForArray(arrayType);
        assertNotNull(typeInfoArray);
        assertEquals(arrayType, typeInfoArray.getType());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetTypeInfoForArray_withNonArrayType() {
        Type nonArrayType = String.class;
        TypeInfoFactory.getTypeInfoForArray(nonArrayType);
    }

    @Test
    public void testGetTypeInfoForField_withSimpleField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("simpleField");
        TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
        assertNotNull(typeInfo);
        assertEquals(String.class, typeInfo.getType());
    }

    @Test
    public void testGetTypeInfoForField_withParameterizedField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("parameterizedField");
        TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
        assertNotNull(typeInfo);
        assertTrue(typeInfo.getType() instanceof ParameterizedType);
        ParameterizedType parameterizedType = (ParameterizedType) typeInfo.getType();
        assertEquals(List.class, parameterizedType.getRawType());
        assertEquals(String.class, parameterizedType.getActualTypeArguments()[0]);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetTypeInfoForField_withTypeVariableField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("typeVariableField");
        TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
    }

    // Sample class for testing
    private static class SampleClass<T> {
        private String simpleField;
        private List<String> parameterizedField;
        private T typeVariableField;
    }
}
```

### Explanation:

1. **Test for `getTypeInfoForArray` Method:**
   - `testGetTypeInfoForArray_withArrayType`: Tests the method with a valid array type.
   - `testGetTypeInfoForArray_withNonArrayType`: Tests the method with a non-array type, expecting an `IllegalArgumentException`.

2. **Test for `getTypeInfoForField` Method:**
   - `testGetTypeInfoForField_withSimpleField`: Tests the method with a simple field of type `String`.
   - `testGetTypeInfoForField_withParameterizedField`: Tests the method with a parameterized field of type `List<String>`.
   - `testGetTypeInfoForField_withTypeVariableField`: Tests the method with a type variable field, expecting an `UnsupportedOperationException`.

3. **Sample Class for Testing:**
   - `SampleClass`: A helper class with fields of different types to facilitate testing.

This test suite covers the main functionalities of the `TypeInfoFactory` class, ensuring that the methods behave as expected for various input scenarios.