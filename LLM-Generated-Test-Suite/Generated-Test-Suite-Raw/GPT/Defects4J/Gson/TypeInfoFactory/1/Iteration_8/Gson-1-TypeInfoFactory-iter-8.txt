```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.google.gson.TypeInfoFactory;
import com.google.gson.TypeInfo;
import com.google.gson.TypeInfoArray;
import com.google.gson.internal.Preconditions;
import com.google.gson.internal.TypeUtils;
import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;

@RunWith(MockitoJUnitRunner.class)
public class TypeInfoFactoryTest {

    @Mock
    private Type mockType;

    @Mock
    private Field mockField;

    @Mock
    private ParameterizedType mockParameterizedType;

    @Mock
    private GenericArrayType mockGenericArrayType;

    @Mock
    private TypeVariable<?> mockTypeVariable;

    @Mock
    private WildcardType mockWildcardType;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetTypeInfoForArray() {
        when(TypeUtils.isArray(mockType)).thenReturn(true);
        TypeInfoArray typeInfoArray = TypeInfoFactory.getTypeInfoForArray(mockType);
        assertNotNull(typeInfoArray);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetTypeInfoForArrayWithNonArrayType() {
        when(TypeUtils.isArray(mockType)).thenReturn(false);
        TypeInfoFactory.getTypeInfoForArray(mockType);
    }

    @Test
    public void testGetTypeInfoForField() throws NoSuchFieldException {
        Field field = SampleClass.class.getDeclaredField("sampleField");
        TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(field, SampleClass.class);
        assertNotNull(typeInfo);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetActualTypeWithUnsupportedTypeVariable() {
        when(mockTypeVariable.getGenericDeclaration()).thenReturn(SampleClass.class);
        TypeInfoFactory.getTypeInfoForField(mockField, mockTypeVariable);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetActualTypeWithIllegalArgument() {
        TypeInfoFactory.getTypeInfoForField(mockField, new Object());
    }

    @Test
    public void testExtractRealTypes() {
        Type[] types = new Type[]{mockType};
        Type[] result = TypeInfoFactory.extractRealTypes(types, SampleClass.class, SampleClass.class);
        assertNotNull(result);
        assertEquals(1, result.length);
    }

    @Test(expected = IllegalStateException.class)
    public void testGetIndexWithMissingTypeVariable() {
        TypeVariable<?>[] typeVariables = new TypeVariable<?>[]{};
        TypeInfoFactory.getIndex(typeVariables, mockTypeVariable);
    }

    private static class SampleClass<T> {
        private T sampleField;
    }
}
```

This JUnit 4 test suite uses Mockito to mock dependencies and tests the methods in the `TypeInfoFactory` class. It includes tests for both expected successful outcomes and exceptions. The `SampleClass` is used as a helper class to test field-related methods.