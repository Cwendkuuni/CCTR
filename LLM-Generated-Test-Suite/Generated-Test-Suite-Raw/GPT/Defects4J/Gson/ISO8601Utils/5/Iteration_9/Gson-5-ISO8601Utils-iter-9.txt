```java
import com.google.gson.internal.bind.util.ISO8601Utils;
import org.junit.Test;

import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.TimeZone;

import static org.junit.Assert.*;

public class ISO8601UtilsTest {

    @Test
    public void testFormatWithoutMillis() {
        Date date = new Date(0); // Epoch time
        String formatted = ISO8601Utils.format(date);
        assertEquals("1970-01-01T00:00:00Z", formatted);
    }

    @Test
    public void testFormatWithMillis() {
        Date date = new Date(0); // Epoch time
        String formatted = ISO8601Utils.format(date, true);
        assertEquals("1970-01-01T00:00:00.000Z", formatted);
    }

    @Test
    public void testFormatWithTimeZone() {
        Date date = new Date(0); // Epoch time
        TimeZone tz = TimeZone.getTimeZone("GMT+02:00");
        String formatted = ISO8601Utils.format(date, true, tz);
        assertEquals("1970-01-01T02:00:00.000+02:00", formatted);
    }

    @Test
    public void testParseBasicFormat() throws ParseException {
        String dateStr = "1970-01-01T00:00:00Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(0, date.getTime());
    }

    @Test
    public void testParseWithMillis() throws ParseException {
        String dateStr = "1970-01-01T00:00:00.000Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(0, date.getTime());
    }

    @Test
    public void testParseWithTimeZone() throws ParseException {
        String dateStr = "1970-01-01T02:00:00.000+02:00";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(0, date.getTime());
    }

    @Test
    public void testParseWithoutTime() throws ParseException {
        String dateStr = "1970-01-01";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(0, date.getTime());
    }

    @Test(expected = ParseException.class)
    public void testParseInvalidFormat() throws ParseException {
        String dateStr = "Invalid-Date-Format";
        ParsePosition pos = new ParsePosition(0);
        ISO8601Utils.parse(dateStr, pos);
    }

    @Test(expected = ParseException.class)
    public void testParseInvalidTimeZone() throws ParseException {
        String dateStr = "1970-01-01T00:00:00.000+25:00";
        ParsePosition pos = new ParsePosition(0);
        ISO8601Utils.parse(dateStr, pos);
    }

    @Test
    public void testParseLeapSecond() throws ParseException {
        String dateStr = "1970-01-01T00:00:60Z";
        ParsePosition pos = new ParsePosition(0);
        Date date = ISO8601Utils.parse(dateStr, pos);
        assertEquals(59000, date.getTime());
    }
}
```

This test suite covers the `ISO8601Utils` class by testing the `format` and `parse` methods with various scenarios, including different time zones, presence or absence of milliseconds, and handling of leap seconds. It also includes tests for invalid formats to ensure exceptions are thrown as expected.