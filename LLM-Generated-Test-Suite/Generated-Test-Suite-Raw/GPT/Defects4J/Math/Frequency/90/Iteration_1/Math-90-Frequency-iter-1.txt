```java
import org.apache.commons.math.stat.Frequency;
import org.junit.Before;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.*;

public class FrequencyTest {

    private Frequency frequency;

    @Before
    public void setUp() {
        frequency = new Frequency();
    }

    @Test
    public void testAddValueInt() {
        frequency.addValue(1);
        assertEquals(1, frequency.getCount(1));
    }

    @Test
    public void testAddValueInteger() {
        frequency.addValue(Integer.valueOf(2));
        assertEquals(1, frequency.getCount(2));
    }

    @Test
    public void testAddValueLong() {
        frequency.addValue(3L);
        assertEquals(1, frequency.getCount(3L));
    }

    @Test
    public void testAddValueChar() {
        frequency.addValue('a');
        assertEquals(1, frequency.getCount('a'));
    }

    @Test
    public void testAddValueObject() {
        frequency.addValue("test");
        assertEquals(1, frequency.getCount("test"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddValueIncompatibleTypes() {
        frequency.addValue(1);
        frequency.addValue("test");
    }

    @Test
    public void testClear() {
        frequency.addValue(1);
        frequency.clear();
        assertEquals(0, frequency.getCount(1));
    }

    @Test
    public void testValuesIterator() {
        frequency.addValue(1);
        frequency.addValue(2);
        Iterator<?> iterator = frequency.valuesIterator();
        assertTrue(iterator.hasNext());
        assertEquals(Long.valueOf(1), iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(Long.valueOf(2), iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testGetSumFreq() {
        frequency.addValue(1);
        frequency.addValue(1);
        frequency.addValue(2);
        assertEquals(3, frequency.getSumFreq());
    }

    @Test
    public void testGetCount() {
        frequency.addValue(1);
        frequency.addValue(1);
        assertEquals(2, frequency.getCount(1));
        assertEquals(0, frequency.getCount(2));
    }

    @Test
    public void testGetPct() {
        frequency.addValue(1);
        frequency.addValue(1);
        frequency.addValue(2);
        assertEquals(2.0 / 3.0, frequency.getPct(1), 0.0001);
        assertEquals(1.0 / 3.0, frequency.getPct(2), 0.0001);
    }

    @Test
    public void testGetCumFreq() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(3);
        assertEquals(1, frequency.getCumFreq(1));
        assertEquals(2, frequency.getCumFreq(2));
        assertEquals(3, frequency.getCumFreq(3));
    }

    @Test
    public void testGetCumPct() {
        frequency.addValue(1);
        frequency.addValue(2);
        frequency.addValue(3);
        assertEquals(1.0 / 3.0, frequency.getCumPct(1), 0.0001);
        assertEquals(2.0 / 3.0, frequency.getCumPct(2), 0.0001);
        assertEquals(1.0, frequency.getCumPct(3), 0.0001);
    }

    @Test
    public void testToString() {
        frequency.addValue(1);
        frequency.addValue(2);
        String expected = "Value \t Freq. \t Pct. \t Cum Pct. \n" +
                          "1\t1\t50%\t50%\n" +
                          "2\t1\t50%\t100%\n";
        assertEquals(expected, frequency.toString());
    }
}
```
This test suite covers all the methods in the `Frequency` class, ensuring that each method behaves as expected under various conditions. The tests include adding values of different types, checking frequencies, percentages, cumulative frequencies, and verifying the string representation of the frequency distribution.