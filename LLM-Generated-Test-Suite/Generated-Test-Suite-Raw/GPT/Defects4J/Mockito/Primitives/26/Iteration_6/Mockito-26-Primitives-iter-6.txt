Certainly! Below is a JUnit 4 test suite designed to comprehensively test all methods in the `Primitives` class. The test suite covers various scenarios for each method, ensuring that the class behaves as expected.

```java
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.internal.util.Primitives;

public class PrimitivesTest {

    @Test
    public void testPrimitiveTypeOfWithPrimitive() {
        assertEquals(int.class, Primitives.primitiveTypeOf(int.class));
        assertEquals(boolean.class, Primitives.primitiveTypeOf(boolean.class));
    }

    @Test
    public void testPrimitiveTypeOfWithWrapper() {
        assertEquals(int.class, Primitives.primitiveTypeOf(Integer.class));
        assertEquals(boolean.class, Primitives.primitiveTypeOf(Boolean.class));
    }

    @Test
    public void testPrimitiveTypeOfWithNonPrimitive() {
        assertNull(Primitives.primitiveTypeOf(String.class));
    }

    @Test
    public void testIsPrimitiveWrapperWithWrapper() {
        assertTrue(Primitives.isPrimitiveWrapper(Integer.class));
        assertTrue(Primitives.isPrimitiveWrapper(Boolean.class));
    }

    @Test
    public void testIsPrimitiveWrapperWithPrimitive() {
        assertFalse(Primitives.isPrimitiveWrapper(int.class));
        assertFalse(Primitives.isPrimitiveWrapper(boolean.class));
    }

    @Test
    public void testIsPrimitiveWrapperWithNonPrimitive() {
        assertFalse(Primitives.isPrimitiveWrapper(String.class));
    }

    @Test
    public void testPrimitiveWrapperOfWithWrapper() {
        assertEquals(false, Primitives.primitiveWrapperOf(Boolean.class));
        assertEquals('\u0000', Primitives.primitiveWrapperOf(Character.class));
        assertEquals((byte) 0, Primitives.primitiveWrapperOf(Byte.class));
        assertEquals((short) 0, Primitives.primitiveWrapperOf(Short.class));
        assertEquals(0, Primitives.primitiveWrapperOf(Integer.class));
        assertEquals(0L, Primitives.primitiveWrapperOf(Long.class));
        assertEquals(0F, Primitives.primitiveWrapperOf(Float.class));
        assertEquals(0D, Primitives.primitiveWrapperOf(Double.class));
    }

    @Test
    public void testPrimitiveWrapperOfWithNonWrapper() {
        assertNull(Primitives.primitiveWrapperOf(String.class));
    }

    @Test
    public void testPrimitiveValueOrNullForWithPrimitive() {
        assertEquals(false, Primitives.primitiveValueOrNullFor(boolean.class));
        assertEquals('\u0000', Primitives.primitiveValueOrNullFor(char.class));
        assertEquals((byte) 0, Primitives.primitiveValueOrNullFor(byte.class));
        assertEquals((short) 0, Primitives.primitiveValueOrNullFor(short.class));
        assertEquals(0, Primitives.primitiveValueOrNullFor(int.class));
        assertEquals(0L, Primitives.primitiveValueOrNullFor(long.class));
        assertEquals(0F, Primitives.primitiveValueOrNullFor(float.class));
        assertEquals(0D, Primitives.primitiveValueOrNullFor(double.class));
    }

    @Test
    public void testPrimitiveValueOrNullForWithNonPrimitive() {
        assertNull(Primitives.primitiveValueOrNullFor(String.class));
    }
}
```

This test suite covers:
- `primitiveTypeOf` method with both primitive and wrapper classes, as well as non-primitive classes.
- `isPrimitiveWrapper` method with wrapper, primitive, and non-primitive classes.
- `primitiveWrapperOf` method with wrapper and non-wrapper classes.
- `primitiveValueOrNullFor` method with primitive and non-primitive classes.

Each test case checks for the expected behavior of the methods in the `Primitives` class.