Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `GenericMaster` class. This suite tests the `getGenericType` method by using reflection to create fields with different generic types.

```java
import org.junit.Test;
import org.mockito.internal.util.reflection.GenericMaster;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class GenericMasterTest {

    private GenericMaster genericMaster = new GenericMaster();

    // Sample fields to test
    private List<String> stringList;
    private Map<String, Integer> stringIntegerMap;
    private String nonGenericField;

    @Test
    public void testGetGenericTypeWithGenericField() throws NoSuchFieldException {
        Field field = this.getClass().getDeclaredField("stringList");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(String.class, result);
    }

    @Test
    public void testGetGenericTypeWithMapField() throws NoSuchFieldException {
        Field field = this.getClass().getDeclaredField("stringIntegerMap");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(String.class, result); // First generic type argument
    }

    @Test
    public void testGetGenericTypeWithNonGenericField() throws NoSuchFieldException {
        Field field = this.getClass().getDeclaredField("nonGenericField");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(Object.class, result);
    }

    @Test
    public void testGetGenericTypeWithNullField() {
        Class<?> result = genericMaster.getGenericType(null);
        assertEquals(Object.class, result);
    }
}
```

### Explanation:
- **Test Setup**: The test class `GenericMasterTest` includes fields with different types to test the `getGenericType` method.
- **Test Methods**:
  - `testGetGenericTypeWithGenericField`: Tests a field with a single generic type (`List<String>`).
  - `testGetGenericTypeWithMapField`: Tests a field with multiple generic types (`Map<String, Integer>`), focusing on the first type argument.
  - `testGetGenericTypeWithNonGenericField`: Tests a non-generic field (`String`), expecting `Object.class` as the return value.
  - `testGetGenericTypeWithNullField`: Tests the behavior when a `null` field is passed, expecting `Object.class`.

This test suite ensures that the `getGenericType` method is thoroughly tested for various scenarios.