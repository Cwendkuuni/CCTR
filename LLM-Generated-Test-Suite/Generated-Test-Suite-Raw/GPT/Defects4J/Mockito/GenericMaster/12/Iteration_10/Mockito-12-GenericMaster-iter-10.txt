```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.util.reflection.GenericMaster;

public class GenericMasterTest {

    private GenericMaster genericMaster;

    @Before
    public void setUp() {
        genericMaster = new GenericMaster();
    }

    @Test
    public void testGetGenericTypeWithGenericField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("listOfStrings");
        Class<?> result = genericMaster.getGenericType(field);
        assertNotNull(result);
        assertEquals(String.class, result);
    }

    @Test
    public void testGetGenericTypeWithNonGenericField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("nonGenericField");
        Class<?> result = genericMaster.getGenericType(field);
        assertNotNull(result);
        assertEquals(Object.class, result);
    }

    @Test
    public void testGetGenericTypeWithNestedGenericField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("mapOfStringToList");
        Class<?> result = genericMaster.getGenericType(field);
        assertNotNull(result);
        assertEquals(String.class, result);
    }

    @Test
    public void testGetGenericTypeWithRawTypeField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("rawList");
        Class<?> result = genericMaster.getGenericType(field);
        assertNotNull(result);
        assertEquals(Object.class, result);
    }

    private static class TestClass {
        List<String> listOfStrings;
        Map<String, List<Integer>> mapOfStringToList;
        String nonGenericField;
        List rawList;
    }
}
```
This test suite covers various scenarios for the `getGenericType` method, including fields with generic types, non-generic fields, nested generics, and raw types. Each test case uses reflection to obtain the `Field` object and then verifies the output of the `getGenericType` method against the expected result.