Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `GenericMaster` class. The test suite includes various scenarios to ensure the `getGenericType` method behaves as expected.

```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.util.reflection.GenericMaster;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class GenericMasterTest {

    private GenericMaster genericMaster;

    @Before
    public void setUp() {
        genericMaster = new GenericMaster();
    }

    // Helper classes for testing
    private static class TestClass {
        List<String> stringList;
        Map<String, Integer> stringIntegerMap;
        String nonGenericField;
        List<List<String>> nestedGenericField;
    }

    @Test
    public void testGetGenericTypeWithGenericField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("stringList");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(String.class, result);
    }

    @Test
    public void testGetGenericTypeWithMapField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("stringIntegerMap");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(String.class, result);
    }

    @Test
    public void testGetGenericTypeWithNonGenericField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("nonGenericField");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(Object.class, result);
    }

    @Test
    public void testGetGenericTypeWithNestedGenericField() throws NoSuchFieldException {
        Field field = TestClass.class.getDeclaredField("nestedGenericField");
        Class<?> result = genericMaster.getGenericType(field);
        assertEquals(List.class, result);
    }

    @Test
    public void testGetGenericTypeWithNullField() {
        Class<?> result = genericMaster.getGenericType(null);
        assertEquals(Object.class, result);
    }
}
```

### Explanation:
- **Test Setup**: The `setUp` method initializes an instance of `GenericMaster` before each test.
- **Helper Class**: `TestClass` is used to define fields with different types, including generic, non-generic, and nested generic fields.
- **Test Cases**:
  - `testGetGenericTypeWithGenericField`: Tests a simple generic field (`List<String>`).
  - `testGetGenericTypeWithMapField`: Tests a map field to ensure it returns the first generic type (`Map<String, Integer>`).
  - `testGetGenericTypeWithNonGenericField`: Tests a non-generic field to ensure it returns `Object.class`.
  - `testGetGenericTypeWithNestedGenericField`: Tests a nested generic field to ensure it returns the outer generic type (`List<List<String>>`).
  - `testGetGenericTypeWithNullField`: Tests the behavior when a null field is passed, expecting `Object.class` as the return value.