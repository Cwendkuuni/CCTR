Certainly! Below is a JUnit 4 test suite for the `OptionGroup` class. This test suite aims to comprehensively test all methods in the class.

```java
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.AlreadySelectedException;
import org.junit.Before;
import org.junit.Test;

import java.util.Collection;

import static org.junit.Assert.*;

public class OptionGroupTest {

    private OptionGroup optionGroup;
    private Option option1;
    private Option option2;

    @Before
    public void setUp() {
        optionGroup = new OptionGroup();
        option1 = new Option("a", "alpha", false, "Alpha option");
        option2 = new Option("b", "beta", false, "Beta option");
    }

    @Test
    public void testAddOption() {
        optionGroup.addOption(option1);
        Collection names = optionGroup.getNames();
        assertTrue(names.contains("a"));
    }

    @Test
    public void testGetNames() {
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection names = optionGroup.getNames();
        assertEquals(2, names.size());
        assertTrue(names.contains("a"));
        assertTrue(names.contains("b"));
    }

    @Test
    public void testGetOptions() {
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection options = optionGroup.getOptions();
        assertEquals(2, options.size());
        assertTrue(options.contains(option1));
        assertTrue(options.contains(option2));
    }

    @Test
    public void testSetSelected() throws AlreadySelectedException {
        optionGroup.addOption(option1);
        optionGroup.setSelected(option1);
        assertEquals("a", optionGroup.getSelected());
    }

    @Test(expected = AlreadySelectedException.class)
    public void testSetSelectedThrowsException() throws AlreadySelectedException {
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.setSelected(option1);
        optionGroup.setSelected(option2); // This should throw AlreadySelectedException
    }

    @Test
    public void testGetSelected() throws AlreadySelectedException {
        optionGroup.addOption(option1);
        optionGroup.setSelected(option1);
        assertEquals("a", optionGroup.getSelected());
    }

    @Test
    public void testSetRequired() {
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    public void testIsRequired() {
        optionGroup.setRequired(false);
        assertFalse(optionGroup.isRequired());
    }

    @Test
    public void testToString() {
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        String expected = "[-a Alpha option, -b Beta option]";
        assertEquals(expected, optionGroup.toString());
    }
}
```

### Explanation:
- **setUp Method**: Initializes the `OptionGroup` and two `Option` objects before each test.
- **testAddOption**: Verifies that an option can be added to the group.
- **testGetNames**: Checks that the correct option names are returned.
- **testGetOptions**: Ensures that the correct options are returned.
- **testSetSelected**: Tests setting a selected option.
- **testSetSelectedThrowsException**: Verifies that an `AlreadySelectedException` is thrown when trying to select a different option after one has already been selected.
- **testGetSelected**: Confirms that the selected option is returned correctly.
- **testSetRequired**: Tests setting the required flag.
- **testIsRequired**: Checks the required flag's value.
- **testToString**: Validates the string representation of the `OptionGroup`.

This test suite should cover the main functionalities of the `OptionGroup` class.