```java
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.option.PropertyOption;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class WriteableCommandLineImplTest {

    private Option mockOption;
    private WriteableCommandLineImpl commandLine;

    @Before
    public void setUp() {
        mockOption = mock(Option.class);
        when(mockOption.getPrefixes()).thenReturn(Collections.singleton("-"));
        when(mockOption.getPreferredName()).thenReturn("mockOption");
        when(mockOption.getTriggers()).thenReturn(Collections.singletonList("mockOption"));

        commandLine = new WriteableCommandLineImpl(mockOption, new ArrayList<>());
    }

    @Test
    public void testAddOption() {
        commandLine.addOption(mockOption);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testAddValue() {
        commandLine.addValue(mockOption, "value1");
        List<String> values = commandLine.getValues(mockOption, null);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testAddSwitch() {
        commandLine.addSwitch(mockOption, true);
        Boolean switchValue = commandLine.getSwitch(mockOption, false);
        assertTrue(switchValue);
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchThrowsExceptionWhenAlreadySet() {
        commandLine.addSwitch(mockOption, true);
        commandLine.addSwitch(mockOption, false); // Should throw exception
    }

    @Test
    public void testHasOption() {
        assertFalse(commandLine.hasOption(mockOption));
        commandLine.addOption(mockOption);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testGetOption() {
        commandLine.addOption(mockOption);
        Option option = commandLine.getOption("mockOption");
        assertEquals(mockOption, option);
    }

    @Test
    public void testGetValuesWithDefaults() {
        List<String> defaultValues = Arrays.asList("default1", "default2");
        List<String> values = commandLine.getValues(mockOption, defaultValues);
        assertEquals(defaultValues, values);
    }

    @Test
    public void testGetUndefaultedValues() {
        commandLine.addValue(mockOption, "value1");
        List<String> values = commandLine.getUndefaultedValues(mockOption);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testGetSwitchWithDefault() {
        Boolean switchValue = commandLine.getSwitch(mockOption, true);
        assertTrue(switchValue);
    }

    @Test
    public void testAddProperty() {
        commandLine.addProperty(mockOption, "key", "value");
        String propertyValue = commandLine.getProperty(mockOption, "key", "default");
        assertEquals("value", propertyValue);
    }

    @Test
    public void testGetPropertyWithDefault() {
        String propertyValue = commandLine.getProperty(mockOption, "key", "default");
        assertEquals("default", propertyValue);
    }

    @Test
    public void testGetProperties() {
        commandLine.addProperty(mockOption, "key", "value");
        Set<String> properties = commandLine.getProperties(mockOption);
        assertTrue(properties.contains("key"));
    }

    @Test
    public void testLooksLikeOption() {
        assertTrue(commandLine.looksLikeOption("-option"));
        assertFalse(commandLine.looksLikeOption("option"));
    }

    @Test
    public void testToString() {
        List<String> arguments = Arrays.asList("arg1", "arg2");
        commandLine = new WriteableCommandLineImpl(mockOption, arguments);
        String result = commandLine.toString();
        assertEquals("arg1 arg2", result);
    }

    @Test
    public void testGetOptions() {
        commandLine.addOption(mockOption);
        List<Option> options = commandLine.getOptions();
        assertTrue(options.contains(mockOption));
    }

    @Test
    public void testGetOptionTriggers() {
        commandLine.addOption(mockOption);
        Set<String> triggers = commandLine.getOptionTriggers();
        assertTrue(triggers.contains("mockOption"));
    }

    @Test
    public void testSetDefaultValues() {
        List<String> defaults = Arrays.asList("default1", "default2");
        commandLine.setDefaultValues(mockOption, defaults);
        List<String> values = commandLine.getValues(mockOption, null);
        assertEquals(defaults, values);
    }

    @Test
    public void testSetDefaultSwitch() {
        commandLine.setDefaultSwitch(mockOption, true);
        Boolean switchValue = commandLine.getSwitch(mockOption, null);
        assertTrue(switchValue);
    }

    @Test
    public void testGetNormalised() {
        List<String> arguments = Arrays.asList("arg1", "arg2");
        commandLine = new WriteableCommandLineImpl(mockOption, arguments);
        List<String> normalised = commandLine.getNormalised();
        assertEquals(arguments, normalised);
    }
}
```