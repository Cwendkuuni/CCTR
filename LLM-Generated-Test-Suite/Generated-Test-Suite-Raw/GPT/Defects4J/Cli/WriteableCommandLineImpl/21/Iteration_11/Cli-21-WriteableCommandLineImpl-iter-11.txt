```java
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.option.PropertyOption;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static org.junit.Assert.*;

public class WriteableCommandLineImplTest {

    private WriteableCommandLineImpl commandLine;
    private Option mockOption;
    private Option mockParentOption;
    private List<String> arguments;

    @Before
    public void setUp() {
        mockOption = new MockOption("mockOption", Arrays.asList("--mock", "-m"));
        mockParentOption = new MockOption("mockParentOption", Arrays.asList("--parent", "-p"));
        mockOption.setParent(mockParentOption);
        arguments = Arrays.asList("arg1", "arg2");
        commandLine = new WriteableCommandLineImpl(mockOption, arguments);
    }

    @Test
    public void testAddOption() {
        commandLine.addOption(mockOption);
        assertTrue(commandLine.hasOption(mockOption));
        assertTrue(commandLine.hasOption(mockParentOption));
    }

    @Test
    public void testAddValue() {
        commandLine.addValue(mockOption, "value1");
        List<String> values = commandLine.getValues(mockOption, null);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testAddSwitch() {
        commandLine.addSwitch(mockOption, true);
        assertTrue(commandLine.getSwitch(mockOption, false));
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchAlreadySet() {
        commandLine.addSwitch(mockOption, true);
        commandLine.addSwitch(mockOption, false); // Should throw exception
    }

    @Test
    public void testHasOption() {
        commandLine.addOption(mockOption);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testGetOption() {
        commandLine.addOption(mockOption);
        assertEquals(mockOption, commandLine.getOption("--mock"));
    }

    @Test
    public void testGetValuesWithDefaults() {
        List<String> defaultValues = Arrays.asList("default1", "default2");
        List<String> values = commandLine.getValues(mockOption, defaultValues);
        assertEquals(defaultValues, values);
    }

    @Test
    public void testGetUndefaultedValues() {
        commandLine.addValue(mockOption, "value1");
        List<String> values = commandLine.getUndefaultedValues(mockOption);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testGetSwitchWithDefaults() {
        Boolean defaultValue = Boolean.TRUE;
        Boolean switchValue = commandLine.getSwitch(mockOption, defaultValue);
        assertEquals(defaultValue, switchValue);
    }

    @Test
    public void testAddProperty() {
        commandLine.addProperty(mockOption, "key", "value");
        assertEquals("value", commandLine.getProperty(mockOption, "key", null));
    }

    @Test
    public void testGetProperties() {
        commandLine.addProperty(mockOption, "key", "value");
        Set<String> properties = commandLine.getProperties(mockOption);
        assertTrue(properties.contains("key"));
    }

    @Test
    public void testLooksLikeOption() {
        assertTrue(commandLine.looksLikeOption("--mock"));
        assertFalse(commandLine.looksLikeOption("arg1"));
    }

    @Test
    public void testToString() {
        String expected = "\"arg1\" \"arg2\"";
        assertEquals(expected, commandLine.toString());
    }

    @Test
    public void testGetOptions() {
        commandLine.addOption(mockOption);
        List<Option> options = commandLine.getOptions();
        assertTrue(options.contains(mockOption));
    }

    @Test
    public void testGetOptionTriggers() {
        commandLine.addOption(mockOption);
        Set<String> triggers = commandLine.getOptionTriggers();
        assertTrue(triggers.contains("--mock"));
    }

    @Test
    public void testSetDefaultValues() {
        List<String> defaults = Arrays.asList("default1", "default2");
        commandLine.setDefaultValues(mockOption, defaults);
        List<String> values = commandLine.getValues(mockOption, null);
        assertEquals(defaults, values);
    }

    @Test
    public void testSetDefaultSwitch() {
        commandLine.setDefaultSwitch(mockOption, Boolean.TRUE);
        assertTrue(commandLine.getSwitch(mockOption, null));
    }

    @Test
    public void testGetNormalised() {
        List<String> normalised = commandLine.getNormalised();
        assertEquals(arguments, normalised);
    }

    // Mock Option class for testing purposes
    private static class MockOption extends Option {
        private final String preferredName;
        private final List<String> triggers;
        private Option parent;

        public MockOption(String preferredName, List<String> triggers) {
            this.preferredName = preferredName;
            this.triggers = triggers;
        }

        @Override
        public String getPreferredName() {
            return preferredName;
        }

        @Override
        public List<String> getTriggers() {
            return triggers;
        }

        @Override
        public Option getParent() {
            return parent;
        }

        public void setParent(Option parent) {
            this.parent = parent;
        }
    }
}
```

This test suite covers all the methods in the `WriteableCommandLineImpl` class. It uses a mock `Option` class to simulate the behavior of options, which allows for testing without needing the full implementation of the `Option` class. Each test method is designed to verify the functionality of a specific method in the `WriteableCommandLineImpl` class.