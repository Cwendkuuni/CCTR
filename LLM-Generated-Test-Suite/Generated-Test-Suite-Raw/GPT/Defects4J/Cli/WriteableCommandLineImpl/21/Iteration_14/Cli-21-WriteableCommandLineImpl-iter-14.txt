Certainly! Below is a JUnit 4 test suite for the `WriteableCommandLineImpl` class. This test suite aims to cover the functionality of each method in the class.

```java
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.option.PropertyOption;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static org.junit.Assert.*;

public class WriteableCommandLineImplTest {

    private WriteableCommandLineImpl commandLine;
    private Option rootOption;
    private List<String> arguments;

    @Before
    public void setUp() {
        rootOption = new MockOption("root");
        arguments = Arrays.asList("arg1", "arg2");
        commandLine = new WriteableCommandLineImpl(rootOption, arguments);
    }

    @Test
    public void testAddOption() {
        Option option = new MockOption("option1");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    public void testAddValue() {
        Option option = new MockOption("option1");
        commandLine.addValue(option, "value1");
        List<String> values = commandLine.getValues(option, null);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testAddSwitch() {
        Option option = new MockOption("option1");
        commandLine.addSwitch(option, true);
        assertTrue(commandLine.getSwitch(option, false));
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchAlreadySet() {
        Option option = new MockOption("option1");
        commandLine.addSwitch(option, true);
        commandLine.addSwitch(option, false); // should throw exception
    }

    @Test
    public void testHasOption() {
        Option option = new MockOption("option1");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    public void testGetOption() {
        Option option = new MockOption("option1");
        commandLine.addOption(option);
        assertEquals(option, commandLine.getOption("option1"));
    }

    @Test
    public void testGetValues() {
        Option option = new MockOption("option1");
        commandLine.addValue(option, "value1");
        List<String> values = commandLine.getValues(option, null);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testGetUndefaultedValues() {
        Option option = new MockOption("option1");
        commandLine.addValue(option, "value1");
        List<String> values = commandLine.getUndefaultedValues(option);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testGetSwitch() {
        Option option = new MockOption("option1");
        commandLine.addSwitch(option, true);
        assertTrue(commandLine.getSwitch(option, false));
    }

    @Test
    public void testGetProperty() {
        commandLine.addProperty("property1", "value1");
        assertEquals("value1", commandLine.getProperty("property1"));
    }

    @Test
    public void testAddProperty() {
        Option option = new MockOption("option1");
        commandLine.addProperty(option, "property1", "value1");
        assertEquals("value1", commandLine.getProperty(option, "property1", null));
    }

    @Test
    public void testGetProperties() {
        Option option = new MockOption("option1");
        commandLine.addProperty(option, "property1", "value1");
        Set<String> properties = commandLine.getProperties(option);
        assertTrue(properties.contains("property1"));
    }

    @Test
    public void testLooksLikeOption() {
        assertTrue(commandLine.looksLikeOption("--option"));
    }

    @Test
    public void testToString() {
        String expected = "\"arg1\" \"arg2\"";
        assertEquals(expected, commandLine.toString());
    }

    @Test
    public void testGetOptions() {
        Option option = new MockOption("option1");
        commandLine.addOption(option);
        List<Option> options = commandLine.getOptions();
        assertTrue(options.contains(option));
    }

    @Test
    public void testGetOptionTriggers() {
        Option option = new MockOption("option1");
        commandLine.addOption(option);
        Set<String> triggers = commandLine.getOptionTriggers();
        assertTrue(triggers.contains("option1"));
    }

    @Test
    public void testSetDefaultValues() {
        Option option = new MockOption("option1");
        List<String> defaults = Arrays.asList("default1");
        commandLine.setDefaultValues(option, defaults);
        List<String> values = commandLine.getValues(option, null);
        assertEquals("default1", values.get(0));
    }

    @Test
    public void testSetDefaultSwitch() {
        Option option = new MockOption("option1");
        commandLine.setDefaultSwitch(option, true);
        assertTrue(commandLine.getSwitch(option, false));
    }

    @Test
    public void testGetNormalised() {
        List<String> normalised = commandLine.getNormalised();
        assertEquals(arguments, normalised);
    }

    // Mock Option class for testing
    private static class MockOption implements Option {
        private final String name;

        public MockOption(String name) {
            this.name = name;
        }

        @Override
        public String getPreferredName() {
            return name;
        }

        @Override
        public List<String> getTriggers() {
            return Collections.singletonList(name);
        }

        @Override
        public Set<String> getPrefixes() {
            return Collections.singleton("--");
        }

        @Override
        public Option getParent() {
            return null;
        }
    }
}
```

This test suite uses a mock `Option` class to simulate the behavior of options. Each test method is designed to test a specific functionality of the `WriteableCommandLineImpl` class. The suite covers adding options, values, and switches, checking for options, retrieving properties, and more.