Certainly! Below is a JUnit 4 test suite for the `WriteableCommandLineImpl` class. This test suite aims to cover the various methods provided in the class. Note that this suite assumes the existence of mock or stub implementations for the `Option` and `Argument` classes, as well as any other dependencies that are not included in the provided code.

```java
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.option.PropertyOption;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class WriteableCommandLineImplTest {

    private WriteableCommandLineImpl commandLine;
    private Option mockOption;
    private Argument mockArgument;

    @Before
    public void setUp() {
        mockOption = mock(Option.class);
        mockArgument = mock(Argument.class);
        when(mockOption.getPrefixes()).thenReturn(Collections.singleton("--"));
        when(mockOption.getTriggers()).thenReturn(Collections.singleton("--option"));
        when(mockOption.getPreferredName()).thenReturn("--option");
        when(mockOption.getParent()).thenReturn(null);

        commandLine = new WriteableCommandLineImpl(mockOption, Arrays.asList("arg1", "arg2"));
    }

    @Test
    public void testAddOption() {
        commandLine.addOption(mockOption);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testAddValue() {
        commandLine.addValue(mockArgument, "value1");
        List<String> values = commandLine.getValues(mockArgument, null);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testAddSwitch() {
        commandLine.addSwitch(mockOption, true);
        assertTrue(commandLine.getSwitch(mockOption, false));
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchThrowsExceptionWhenAlreadySet() {
        commandLine.addSwitch(mockOption, true);
        commandLine.addSwitch(mockOption, false);
    }

    @Test
    public void testGetOption() {
        commandLine.addOption(mockOption);
        assertEquals(mockOption, commandLine.getOption("--option"));
    }

    @Test
    public void testGetValuesWithDefaults() {
        List<String> defaultValues = Arrays.asList("default1", "default2");
        List<String> values = commandLine.getValues(mockOption, defaultValues);
        assertEquals(defaultValues, values);
    }

    @Test
    public void testGetUndefaultedValues() {
        commandLine.addValue(mockOption, "value1");
        List<String> values = commandLine.getUndefaultedValues(mockOption);
        assertEquals(1, values.size());
        assertEquals("value1", values.get(0));
    }

    @Test
    public void testGetSwitchWithDefault() {
        Boolean defaultSwitch = true;
        Boolean switchValue = commandLine.getSwitch(mockOption, defaultSwitch);
        assertEquals(defaultSwitch, switchValue);
    }

    @Test
    public void testAddProperty() {
        commandLine.addProperty(mockOption, "key", "value");
        assertEquals("value", commandLine.getProperty(mockOption, "key", null));
    }

    @Test
    public void testGetProperties() {
        commandLine.addProperty(mockOption, "key", "value");
        Set<String> properties = commandLine.getProperties(mockOption);
        assertTrue(properties.contains("key"));
    }

    @Test
    public void testLooksLikeOption() {
        assertTrue(commandLine.looksLikeOption("--option"));
        assertFalse(commandLine.looksLikeOption("arg1"));
    }

    @Test
    public void testToString() {
        String expected = "\"arg1\" \"arg2\"";
        assertEquals(expected, commandLine.toString());
    }

    @Test
    public void testGetOptions() {
        commandLine.addOption(mockOption);
        List<Option> options = commandLine.getOptions();
        assertTrue(options.contains(mockOption));
    }

    @Test
    public void testGetOptionTriggers() {
        commandLine.addOption(mockOption);
        Set<String> triggers = commandLine.getOptionTriggers();
        assertTrue(triggers.contains("--option"));
    }

    @Test
    public void testSetDefaultValues() {
        List<String> defaults = Arrays.asList("default1");
        commandLine.setDefaultValues(mockOption, defaults);
        List<String> values = commandLine.getValues(mockOption, null);
        assertEquals(defaults, values);
    }

    @Test
    public void testSetDefaultSwitch() {
        commandLine.setDefaultSwitch(mockOption, true);
        assertTrue(commandLine.getSwitch(mockOption, false));
    }

    @Test
    public void testGetNormalised() {
        List<String> normalised = commandLine.getNormalised();
        assertEquals(Arrays.asList("arg1", "arg2"), normalised);
    }
}
```

### Notes:
- **Mocking**: The test suite uses Mockito to create mock objects for `Option` and `Argument`. This is necessary because the actual implementations of these classes are not provided.
- **Assertions**: The test methods use assertions to verify that the methods in `WriteableCommandLineImpl` behave as expected.
- **Exception Testing**: The test suite includes a test for the `IllegalStateException` that should be thrown by `addSwitch` when a switch is already set.
- **Coverage**: The test suite aims to cover all public methods in the `WriteableCommandLineImpl` class.