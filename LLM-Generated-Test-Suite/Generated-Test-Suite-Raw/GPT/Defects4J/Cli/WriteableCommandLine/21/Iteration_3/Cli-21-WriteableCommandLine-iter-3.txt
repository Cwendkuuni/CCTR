Certainly! Below is a JUnit 4 test suite for the `WriteableCommandLine` interface. Since `WriteableCommandLine` is an interface, we need to create a mock or a stub implementation to test it. For the purpose of this test suite, I'll assume a hypothetical implementation named `WriteableCommandLineImpl`. You can replace this with the actual implementation you have.

```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class WriteableCommandLineTest {

    private WriteableCommandLine commandLine;
    private Option mockOption;

    @Before
    public void setUp() {
        // Assuming WriteableCommandLineImpl is the implementation of WriteableCommandLine
        commandLine = new WriteableCommandLineImpl();
        mockOption = mock(Option.class);
    }

    @Test
    public void testAddOption() {
        commandLine.addOption(mockOption);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testAddValue() {
        Object value = "testValue";
        commandLine.addValue(mockOption, value);
        List values = commandLine.getUndefaultedValues(mockOption);
        assertTrue(values.contains(value));
    }

    @Test
    public void testGetUndefaultedValues() {
        List<Object> expectedValues = new ArrayList<>();
        expectedValues.add("value1");
        expectedValues.add("value2");

        commandLine.addValue(mockOption, "value1");
        commandLine.addValue(mockOption, "value2");

        List values = commandLine.getUndefaultedValues(mockOption);
        assertEquals(expectedValues, values);
    }

    @Test
    public void testSetDefaultValues() {
        List<Object> defaultValues = new ArrayList<>();
        defaultValues.add("default1");
        defaultValues.add("default2");

        commandLine.setDefaultValues(mockOption, defaultValues);
        List values = commandLine.getUndefaultedValues(mockOption);
        assertTrue(values.isEmpty());
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchThrowsException() {
        commandLine.addSwitch(mockOption, true);
        commandLine.addSwitch(mockOption, false); // Should throw IllegalStateException
    }

    @Test
    public void testAddSwitch() {
        commandLine.addSwitch(mockOption, true);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testSetDefaultSwitch() {
        commandLine.setDefaultSwitch(mockOption, true);
        assertTrue(commandLine.hasOption(mockOption));
    }

    @Test
    public void testAddPropertyWithOption() {
        String property = "propertyName";
        String value = "propertyValue";

        commandLine.addProperty(mockOption, property, value);
        assertEquals(value, commandLine.getProperty(mockOption, property));
    }

    @Test
    public void testAddPropertyWithoutOption() {
        String property = "propertyName";
        String value = "propertyValue";

        commandLine.addProperty(property, value);
        assertEquals(value, commandLine.getProperty(property));
    }

    @Test
    public void testLooksLikeOption() {
        assertTrue(commandLine.looksLikeOption("--option"));
        assertFalse(commandLine.looksLikeOption("value"));
    }
}
```

### Notes:
- This test suite uses Mockito to create a mock `Option` object.
- The `WriteableCommandLineImpl` is assumed to be the implementation of the `WriteableCommandLine` interface. You should replace it with your actual implementation.
- The test suite includes tests for all methods in the `WriteableCommandLine` interface.
- The `testAddSwitchThrowsException` method checks that an `IllegalStateException` is thrown when adding a switch that has already been added.
- The `testLooksLikeOption` method assumes that options start with `--`. Adjust this logic based on your actual implementation.
- The `getProperty` method is assumed to exist in your implementation to retrieve property values. Adjust as necessary.