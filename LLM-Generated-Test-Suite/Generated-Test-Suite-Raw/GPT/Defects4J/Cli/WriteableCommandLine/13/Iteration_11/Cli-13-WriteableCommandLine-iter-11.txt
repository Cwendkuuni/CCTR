Certainly! Below is a JUnit 4 test suite for the `WriteableCommandLine` interface. Since interfaces cannot be instantiated directly, this test suite assumes the existence of a concrete class implementing the `WriteableCommandLine` interface. For the purpose of this test suite, I'll assume a hypothetical class named `WriteableCommandLineImpl` implements this interface.

```java
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class WriteableCommandLineTest {

    private WriteableCommandLine commandLine;

    @Before
    public void setUp() {
        // Assuming WriteableCommandLineImpl is a concrete implementation of WriteableCommandLine
        commandLine = new WriteableCommandLineImpl();
    }

    @Test
    public void testAddOption() {
        Option option = new Option("testOption");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    public void testAddValue() {
        Option option = new Option("testOption");
        commandLine.addOption(option);
        commandLine.addValue(option, "testValue");
        List<Object> values = commandLine.getValues(option);
        assertEquals(1, values.size());
        assertEquals("testValue", values.get(0));
    }

    @Test
    public void testSetDefaultValues() {
        Option option = new Option("testOption");
        List<Object> defaultValues = new ArrayList<>();
        defaultValues.add("defaultValue1");
        defaultValues.add("defaultValue2");
        commandLine.setDefaultValues(option, defaultValues);
        List<Object> values = commandLine.getValues(option);
        assertEquals(2, values.size());
        assertEquals("defaultValue1", values.get(0));
        assertEquals("defaultValue2", values.get(1));
    }

    @Test(expected = IllegalStateException.class)
    public void testAddSwitchThrowsExceptionIfAlreadyAdded() {
        Option option = new Option("testOption");
        commandLine.addSwitch(option, true);
        commandLine.addSwitch(option, false); // Should throw IllegalStateException
    }

    @Test
    public void testAddSwitch() {
        Option option = new Option("testOption");
        commandLine.addSwitch(option, true);
        assertTrue(commandLine.getSwitch(option));
    }

    @Test
    public void testSetDefaultSwitch() {
        Option option = new Option("testOption");
        commandLine.setDefaultSwitch(option, true);
        assertTrue(commandLine.getSwitch(option));
    }

    @Test
    public void testAddProperty() {
        String property = "testProperty";
        String value = "testValue";
        commandLine.addProperty(property, value);
        assertEquals(value, commandLine.getProperty(property));
    }

    @Test
    public void testLooksLikeOption() {
        assertTrue(commandLine.looksLikeOption("-option"));
        assertFalse(commandLine.looksLikeOption("notAnOption"));
    }
}
```

### Notes:
- This test suite assumes the existence of a concrete class `WriteableCommandLineImpl` that implements the `WriteableCommandLine` interface.
- The `Option` class is assumed to have a constructor that takes a string identifier.
- The `WriteableCommandLine` interface is assumed to have methods like `hasOption`, `getValues`, `getSwitch`, and `getProperty` for retrieving options, values, switches, and properties, respectively. These methods are not defined in the provided interface, so they are assumed for testing purposes.
- The `IllegalStateException` test checks that adding a switch twice throws an exception, as specified in the interface documentation.