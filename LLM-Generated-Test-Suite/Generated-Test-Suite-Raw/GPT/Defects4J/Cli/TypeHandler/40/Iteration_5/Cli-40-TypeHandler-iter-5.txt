```java
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.TypeHandler;
import org.apache.commons.cli.PatternOptionBuilder;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;

public class TypeHandlerTest {

    @Test
    public void testCreateValueString() throws ParseException {
        String str = "testString";
        Object result = TypeHandler.createValue(str, PatternOptionBuilder.STRING_VALUE);
        assertEquals(str, result);
    }

    @Test
    public void testCreateValueObject() throws ParseException {
        String className = "java.lang.String";
        Object result = TypeHandler.createValue(className, PatternOptionBuilder.OBJECT_VALUE);
        assertTrue(result instanceof String);
    }

    @Test
    public void testCreateValueNumber() throws ParseException {
        String numberStr = "123";
        Number result = TypeHandler.createValue(numberStr, PatternOptionBuilder.NUMBER_VALUE);
        assertEquals(Long.valueOf(123), result);

        numberStr = "123.45";
        result = TypeHandler.createValue(numberStr, PatternOptionBuilder.NUMBER_VALUE);
        assertEquals(Double.valueOf(123.45), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueNumberException() throws ParseException {
        String invalidNumberStr = "abc";
        TypeHandler.createValue(invalidNumberStr, PatternOptionBuilder.NUMBER_VALUE);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateValueDate() throws ParseException {
        String dateStr = "2023-10-10";
        TypeHandler.createValue(dateStr, PatternOptionBuilder.DATE_VALUE);
    }

    @Test
    public void testCreateValueClass() throws ParseException {
        String className = "java.lang.String";
        Class<?> result = TypeHandler.createValue(className, PatternOptionBuilder.CLASS_VALUE);
        assertEquals(String.class, result);
    }

    @Test
    public void testCreateValueFile() throws ParseException {
        String filePath = "test.txt";
        File result = TypeHandler.createValue(filePath, PatternOptionBuilder.FILE_VALUE);
        assertEquals(new File(filePath), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueExistingFileException() throws ParseException {
        String filePath = "nonexistent.txt";
        TypeHandler.createValue(filePath, PatternOptionBuilder.EXISTING_FILE_VALUE);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateValueFiles() throws ParseException {
        String filePaths = "file1.txt,file2.txt";
        TypeHandler.createValue(filePaths, PatternOptionBuilder.FILES_VALUE);
    }

    @Test
    public void testCreateValueURL() throws ParseException {
        String urlStr = "http://www.example.com";
        URL result = TypeHandler.createValue(urlStr, PatternOptionBuilder.URL_VALUE);
        assertEquals(new URL(urlStr), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueURLException() throws ParseException {
        String invalidUrlStr = "htp://invalid-url";
        TypeHandler.createValue(invalidUrlStr, PatternOptionBuilder.URL_VALUE);
    }

    @Test
    public void testCreateObject() throws ParseException {
        String className = "java.lang.String";
        Object result = TypeHandler.createObject(className);
        assertTrue(result instanceof String);
    }

    @Test(expected = ParseException.class)
    public void testCreateObjectException() throws ParseException {
        String invalidClassName = "non.existent.Class";
        TypeHandler.createObject(invalidClassName);
    }

    @Test
    public void testCreateNumber() throws ParseException {
        String numberStr = "123";
        Number result = TypeHandler.createNumber(numberStr);
        assertEquals(Long.valueOf(123), result);

        numberStr = "123.45";
        result = TypeHandler.createNumber(numberStr);
        assertEquals(Double.valueOf(123.45), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateNumberException() throws ParseException {
        String invalidNumberStr = "abc";
        TypeHandler.createNumber(invalidNumberStr);
    }

    @Test
    public void testCreateClass() throws ParseException {
        String className = "java.lang.String";
        Class<?> result = TypeHandler.createClass(className);
        assertEquals(String.class, result);
    }

    @Test(expected = ParseException.class)
    public void testCreateClassException() throws ParseException {
        String invalidClassName = "non.existent.Class";
        TypeHandler.createClass(invalidClassName);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateDate() {
        String dateStr = "2023-10-10";
        TypeHandler.createDate(dateStr);
    }

    @Test
    public void testCreateURL() throws ParseException {
        String urlStr = "http://www.example.com";
        URL result = TypeHandler.createURL(urlStr);
        assertEquals(new URL(urlStr), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateURLException() throws ParseException {
        String invalidUrlStr = "htp://invalid-url";
        TypeHandler.createURL(invalidUrlStr);
    }

    @Test
    public void testCreateFile() {
        String filePath = "test.txt";
        File result = TypeHandler.createFile(filePath);
        assertEquals(new File(filePath), result);
    }

    @Test(expected = ParseException.class)
    public void testOpenFileException() throws ParseException {
        String filePath = "nonexistent.txt";
        TypeHandler.openFile(filePath);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateFiles() {
        String filePaths = "file1.txt,file2.txt";
        TypeHandler.createFiles(filePaths);
    }
}
```