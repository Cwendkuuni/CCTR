```java
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.TypeHandler;
import org.apache.commons.cli.PatternOptionBuilder;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;

import static org.junit.Assert.*;

public class TypeHandlerTest {

    @Test
    public void testCreateValueString() throws ParseException {
        String str = "test";
        Object result = TypeHandler.createValue(str, PatternOptionBuilder.STRING_VALUE);
        assertEquals(str, result);
    }

    @Test
    public void testCreateValueObject() throws ParseException {
        String str = "java.lang.String";
        Object result = TypeHandler.createValue(str, PatternOptionBuilder.OBJECT_VALUE);
        assertTrue(result instanceof String);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueObjectInvalid() throws ParseException {
        String str = "non.existent.Class";
        TypeHandler.createValue(str, PatternOptionBuilder.OBJECT_VALUE);
    }

    @Test
    public void testCreateValueNumber() throws ParseException {
        String str = "123";
        Number result = TypeHandler.createValue(str, PatternOptionBuilder.NUMBER_VALUE);
        assertEquals(123L, result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueNumberInvalid() throws ParseException {
        String str = "abc";
        TypeHandler.createValue(str, PatternOptionBuilder.NUMBER_VALUE);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateValueDate() throws ParseException {
        String str = "2023-10-01";
        TypeHandler.createValue(str, PatternOptionBuilder.DATE_VALUE);
    }

    @Test
    public void testCreateValueClass() throws ParseException {
        String str = "java.lang.String";
        Class<?> result = TypeHandler.createValue(str, PatternOptionBuilder.CLASS_VALUE);
        assertEquals(String.class, result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueClassInvalid() throws ParseException {
        String str = "non.existent.Class";
        TypeHandler.createValue(str, PatternOptionBuilder.CLASS_VALUE);
    }

    @Test
    public void testCreateValueFile() throws ParseException {
        String str = "test.txt";
        File result = TypeHandler.createValue(str, PatternOptionBuilder.FILE_VALUE);
        assertEquals(new File(str), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueExistingFileInvalid() throws ParseException {
        String str = "nonexistentfile.txt";
        TypeHandler.createValue(str, PatternOptionBuilder.EXISTING_FILE_VALUE);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateValueFiles() throws ParseException {
        String str = "file1.txt,file2.txt";
        TypeHandler.createValue(str, PatternOptionBuilder.FILES_VALUE);
    }

    @Test
    public void testCreateValueURL() throws ParseException {
        String str = "http://www.example.com";
        URL result = TypeHandler.createValue(str, PatternOptionBuilder.URL_VALUE);
        assertEquals(new URL(str), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateValueURLInvalid() throws ParseException {
        String str = "invalidurl";
        TypeHandler.createValue(str, PatternOptionBuilder.URL_VALUE);
    }

    @Test
    public void testCreateObject() throws ParseException {
        String classname = "java.lang.String";
        Object result = TypeHandler.createObject(classname);
        assertTrue(result instanceof String);
    }

    @Test(expected = ParseException.class)
    public void testCreateObjectInvalid() throws ParseException {
        String classname = "non.existent.Class";
        TypeHandler.createObject(classname);
    }

    @Test
    public void testCreateNumber() throws ParseException {
        String str = "123.45";
        Number result = TypeHandler.createNumber(str);
        assertEquals(123.45, result);
    }

    @Test(expected = ParseException.class)
    public void testCreateNumberInvalid() throws ParseException {
        String str = "abc";
        TypeHandler.createNumber(str);
    }

    @Test
    public void testCreateClass() throws ParseException {
        String classname = "java.lang.String";
        Class<?> result = TypeHandler.createClass(classname);
        assertEquals(String.class, result);
    }

    @Test(expected = ParseException.class)
    public void testCreateClassInvalid() throws ParseException {
        String classname = "non.existent.Class";
        TypeHandler.createClass(classname);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateDate() {
        String str = "2023-10-01";
        TypeHandler.createDate(str);
    }

    @Test
    public void testCreateURL() throws ParseException {
        String str = "http://www.example.com";
        URL result = TypeHandler.createURL(str);
        assertEquals(new URL(str), result);
    }

    @Test(expected = ParseException.class)
    public void testCreateURLInvalid() throws ParseException {
        String str = "invalidurl";
        TypeHandler.createURL(str);
    }

    @Test
    public void testCreateFile() {
        String str = "test.txt";
        File result = TypeHandler.createFile(str);
        assertEquals(new File(str), result);
    }

    @Test(expected = ParseException.class)
    public void testOpenFileInvalid() throws ParseException {
        String str = "nonexistentfile.txt";
        TypeHandler.openFile(str);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testCreateFiles() {
        String str = "file1.txt,file2.txt";
        TypeHandler.createFiles(str);
    }
}
```