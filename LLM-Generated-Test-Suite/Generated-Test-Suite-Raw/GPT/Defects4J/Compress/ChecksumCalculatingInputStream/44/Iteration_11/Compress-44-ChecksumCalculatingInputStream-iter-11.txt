```java
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.CRC32;
import java.util.zip.Checksum;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class ChecksumCalculatingInputStreamTest {

    private Checksum checksum;
    private ByteArrayInputStream byteArrayInputStream;
    private ChecksumCalculatingInputStream checksumCalculatingInputStream;

    @Before
    public void setUp() {
        checksum = new CRC32();
        byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        checksumCalculatingInputStream = new ChecksumCalculatingInputStream(checksum, byteArrayInputStream);
    }

    @Test
    public void testReadSingleByte() throws IOException {
        int byteRead = checksumCalculatingInputStream.read();
        assertEquals(1, byteRead);
        assertEquals(0xCBF43926L, checksumCalculatingInputStream.getValue());
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumCalculatingInputStream.read(buffer);
        assertEquals(5, bytesRead);
        assertEquals(0xCBF43926L, checksumCalculatingInputStream.getValue());
    }

    @Test
    public void testReadByteArrayWithOffsetAndLength() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumCalculatingInputStream.read(buffer, 1, 3);
        assertEquals(3, bytesRead);
        assertEquals(0xB63CFBCD, checksumCalculatingInputStream.getValue());
    }

    @Test
    public void testSkip() throws IOException {
        long skipped = checksumCalculatingInputStream.skip(2);
        assertEquals(1, skipped);
        assertEquals(0xCBF43926L, checksumCalculatingInputStream.getValue());
    }

    @Test
    public void testGetValue() throws IOException {
        checksumCalculatingInputStream.read();
        assertEquals(0xCBF43926L, checksumCalculatingInputStream.getValue());
    }

    @Test
    public void testEndOfStream() throws IOException {
        byte[] buffer = new byte[10];
        int bytesRead = checksumCalculatingInputStream.read(buffer);
        assertEquals(5, bytesRead);
        bytesRead = checksumCalculatingInputStream.read(buffer);
        assertEquals(-1, bytesRead);
    }

    @Test(expected = IOException.class)
    public void testIOExceptionOnUnderlyingStream() throws IOException {
        InputStream faultyInputStream = new InputStream() {
            @Override
            public int read() throws IOException {
                throw new IOException("Simulated IOException");
            }
        };
        ChecksumCalculatingInputStream faultyStream = new ChecksumCalculatingInputStream(checksum, faultyInputStream);
        faultyStream.read();
    }
}
```

This test suite covers the following scenarios:
- Reading a single byte and verifying the checksum.
- Reading a byte array and verifying the checksum.
- Reading a byte array with an offset and length, and verifying the checksum.
- Skipping bytes and verifying the checksum.
- Getting the checksum value after reading.
- Handling end-of-stream correctly.
- Handling an `IOException` from the underlying stream.