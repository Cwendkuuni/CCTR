```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.Adler32;
import java.util.zip.Checksum;

import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.junit.Before;
import org.junit.Test;

public class ChecksumCalculatingInputStreamTest {

    private Checksum checksum;
    private ByteArrayInputStream byteArrayInputStream;
    private ChecksumCalculatingInputStream checksumInputStream;

    @Before
    public void setUp() {
        checksum = new Adler32();
        byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        checksumInputStream = new ChecksumCalculatingInputStream(checksum, byteArrayInputStream);
    }

    @Test
    public void testReadSingleByte() throws IOException {
        int byteRead = checksumInputStream.read();
        assertEquals(1, byteRead);
        assertEquals(0x2000001L, checksum.getValue());
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumInputStream.read(buffer);
        assertEquals(5, bytesRead);
        assertEquals(0x8000005L, checksum.getValue());
    }

    @Test
    public void testReadByteArrayWithOffsetAndLength() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumInputStream.read(buffer, 1, 3);
        assertEquals(3, bytesRead);
        assertEquals(0x6000003L, checksum.getValue());
    }

    @Test
    public void testSkip() throws IOException {
        long skipped = checksumInputStream.skip(2);
        assertEquals(1, skipped);
        assertEquals(0x2000001L, checksum.getValue());
    }

    @Test
    public void testGetValue() throws IOException {
        byte[] buffer = new byte[5];
        checksumInputStream.read(buffer);
        assertEquals(checksum.getValue(), checksumInputStream.getValue());
    }

    @Test
    public void testReadEndOfStream() throws IOException {
        byte[] buffer = new byte[5];
        checksumInputStream.read(buffer);
        int byteRead = checksumInputStream.read();
        assertEquals(-1, byteRead);
    }

    @Test
    public void testReadByteArrayEndOfStream() throws IOException {
        byte[] buffer = new byte[5];
        checksumInputStream.read(buffer);
        int bytesRead = checksumInputStream.read(buffer);
        assertEquals(-1, bytesRead);
    }

    @Test
    public void testIOExceptionPropagation() {
        InputStream failingInputStream = new InputStream() {
            @Override
            public int read() throws IOException {
                throw new IOException("Test exception");
            }
        };
        ChecksumCalculatingInputStream failingChecksumInputStream = new ChecksumCalculatingInputStream(checksum, failingInputStream);
        try {
            failingChecksumInputStream.read();
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Test exception", e.getMessage());
        }
    }
}
```