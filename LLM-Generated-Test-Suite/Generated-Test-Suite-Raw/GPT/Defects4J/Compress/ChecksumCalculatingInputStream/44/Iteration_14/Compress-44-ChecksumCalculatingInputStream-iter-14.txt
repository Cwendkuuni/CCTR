```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.CRC32;
import java.util.zip.Checksum;

import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.junit.Before;
import org.junit.Test;

public class ChecksumCalculatingInputStreamTest {

    private Checksum checksum;
    private ByteArrayInputStream byteArrayInputStream;
    private ChecksumCalculatingInputStream checksumCalculatingInputStream;

    @Before
    public void setUp() {
        checksum = new CRC32();
        byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        checksumCalculatingInputStream = new ChecksumCalculatingInputStream(checksum, byteArrayInputStream);
    }

    @Test
    public void testReadSingleByte() throws IOException {
        int byteRead = checksumCalculatingInputStream.read();
        assertEquals(1, byteRead);
        assertEquals(0x77073096, checksum.getValue()); // CRC32 value for byte 1
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumCalculatingInputStream.read(buffer);
        assertEquals(5, bytesRead);
        assertEquals(0xCBF43926, checksum.getValue()); // CRC32 value for bytes 1, 2, 3, 4, 5
    }

    @Test
    public void testReadByteArrayWithOffsetAndLength() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumCalculatingInputStream.read(buffer, 1, 3);
        assertEquals(3, bytesRead);
        assertEquals(0xA505DF1B, checksum.getValue()); // CRC32 value for bytes 1, 2, 3
    }

    @Test
    public void testSkip() throws IOException {
        long skipped = checksumCalculatingInputStream.skip(2);
        assertEquals(1, skipped); // skip reads one byte
        assertEquals(0x77073096, checksum.getValue()); // CRC32 value for byte 1
    }

    @Test
    public void testGetValue() throws IOException {
        checksumCalculatingInputStream.read();
        assertEquals(0x77073096, checksumCalculatingInputStream.getValue()); // CRC32 value for byte 1
    }

    @Test
    public void testEndOfStream() throws IOException {
        byte[] buffer = new byte[5];
        checksumCalculatingInputStream.read(buffer);
        int end = checksumCalculatingInputStream.read();
        assertEquals(-1, end);
    }

    @Test
    public void testIOException() {
        InputStream faultyInputStream = new InputStream() {
            @Override
            public int read() throws IOException {
                throw new IOException("Test exception");
            }
        };
        ChecksumCalculatingInputStream faultyStream = new ChecksumCalculatingInputStream(checksum, faultyInputStream);
        try {
            faultyStream.read();
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Test exception"));
        }
    }
}
```