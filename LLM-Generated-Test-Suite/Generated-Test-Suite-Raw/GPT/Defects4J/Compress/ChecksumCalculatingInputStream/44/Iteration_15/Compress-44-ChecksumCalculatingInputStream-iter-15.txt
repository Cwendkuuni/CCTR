```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.Checksum;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

public class ChecksumCalculatingInputStreamTest {

    private Checksum checksum;
    private InputStream inputStream;
    private ChecksumCalculatingInputStream checksumStream;

    @Before
    public void setUp() {
        checksum = mock(Checksum.class);
        inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        checksumStream = new ChecksumCalculatingInputStream(checksum, inputStream);
    }

    @Test
    public void testReadSingleByte() throws IOException {
        int result = checksumStream.read();
        assertEquals(1, result);
        verify(checksum).update(1);
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumStream.read(buffer);
        assertEquals(5, bytesRead);
        verify(checksum).update(buffer, 0, 5);
    }

    @Test
    public void testReadByteArrayWithOffsetAndLength() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumStream.read(buffer, 1, 3);
        assertEquals(3, bytesRead);
        verify(checksum).update(buffer, 1, 3);
    }

    @Test
    public void testSkip() throws IOException {
        long skipped = checksumStream.skip(2);
        assertEquals(1, skipped); // Since skip reads one byte
        verify(checksum).update(1);
    }

    @Test
    public void testGetValue() {
        when(checksum.getValue()).thenReturn(123L);
        long value = checksumStream.getValue();
        assertEquals(123L, value);
    }

    @Test
    public void testReadEndOfStream() throws IOException {
        byte[] buffer = new byte[5];
        checksumStream.read(buffer); // Read all bytes
        int result = checksumStream.read(); // Should be end of stream
        assertEquals(-1, result);
    }

    @Test
    public void testReadByteArrayEndOfStream() throws IOException {
        byte[] buffer = new byte[5];
        checksumStream.read(buffer); // Read all bytes
        int bytesRead = checksumStream.read(buffer); // Should be end of stream
        assertEquals(-1, bytesRead);
    }

    @Test
    public void testReadWithIOException() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.read()).thenThrow(new IOException("Test Exception"));
        ChecksumCalculatingInputStream stream = new ChecksumCalculatingInputStream(checksum, mockInputStream);

        try {
            stream.read();
        } catch (IOException e) {
            assertEquals("Test Exception", e.getMessage());
        }
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `ChecksumCalculatingInputStream` class. It covers various scenarios, including reading single bytes, reading into byte arrays, skipping bytes, and handling end-of-stream and exceptions.