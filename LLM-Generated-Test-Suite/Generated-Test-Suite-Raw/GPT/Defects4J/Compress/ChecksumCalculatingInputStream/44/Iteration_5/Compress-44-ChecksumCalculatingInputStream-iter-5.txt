```java
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.CRC32;
import java.util.zip.Checksum;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class ChecksumCalculatingInputStreamTest {

    private ChecksumCalculatingInputStream checksumStream;
    private Checksum checksum;
    private ByteArrayInputStream byteArrayInputStream;

    @Before
    public void setUp() {
        checksum = new CRC32();
        byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        checksumStream = new ChecksumCalculatingInputStream(checksum, byteArrayInputStream);
    }

    @Test
    public void testReadSingleByte() throws IOException {
        int byteRead = checksumStream.read();
        assertEquals(1, byteRead);
        assertEquals(1, checksum.getValue());
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumStream.read(buffer);
        assertEquals(5, bytesRead);
        assertEquals(0, buffer[0]);
        assertEquals(5, checksum.getValue());
    }

    @Test
    public void testReadByteArrayWithOffsetAndLength() throws IOException {
        byte[] buffer = new byte[5];
        int bytesRead = checksumStream.read(buffer, 1, 3);
        assertEquals(3, bytesRead);
        assertEquals(0, buffer[0]);
        assertEquals(6, checksum.getValue());
    }

    @Test
    public void testSkip() throws IOException {
        long skipped = checksumStream.skip(2);
        assertEquals(1, skipped);
        assertEquals(1, checksum.getValue());
    }

    @Test
    public void testGetValue() throws IOException {
        byte[] buffer = new byte[5];
        checksumStream.read(buffer);
        assertEquals(5, checksumStream.getValue());
    }

    @Test
    public void testEndOfStream() throws IOException {
        byte[] buffer = new byte[5];
        checksumStream.read(buffer);
        int byteRead = checksumStream.read();
        assertEquals(-1, byteRead);
    }

    @Test(expected = IOException.class)
    public void testIOExceptionOnUnderlyingStream() throws IOException {
        InputStream faultyStream = new InputStream() {
            @Override
            public int read() throws IOException {
                throw new IOException("Simulated IO Exception");
            }
        };
        ChecksumCalculatingInputStream faultyChecksumStream = new ChecksumCalculatingInputStream(checksum, faultyStream);
        faultyChecksumStream.read();
    }
}
```
This test suite covers the following scenarios:

1. Reading a single byte and verifying the checksum.
2. Reading a byte array and verifying the checksum.
3. Reading a byte array with an offset and length, and verifying the checksum.
4. Testing the skip method to ensure it behaves as expected.
5. Verifying the checksum value after reading data.
6. Handling the end of the stream correctly.
7. Simulating an IOException from the underlying stream to ensure proper exception handling.