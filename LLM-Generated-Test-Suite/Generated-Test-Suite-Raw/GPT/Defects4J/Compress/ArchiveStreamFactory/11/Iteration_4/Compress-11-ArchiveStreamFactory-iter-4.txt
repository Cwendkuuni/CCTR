```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Before;
import org.junit.Test;

public class ArchiveStreamFactoryTest {

    private ArchiveStreamFactory factory;

    @Before
    public void setUp() {
        factory = new ArchiveStreamFactory();
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNullName() throws Exception {
        factory.createArchiveInputStream(null, mock(InputStream.class));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNullStream() throws Exception {
        factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, null);
    }

    @Test(expected = ArchiveException.class)
    public void testCreateArchiveInputStreamWithUnknownName() throws Exception {
        factory.createArchiveInputStream("unknown", mock(InputStream.class));
    }

    @Test
    public void testCreateArchiveInputStreamWithKnownNames() throws Exception {
        InputStream mockInputStream = mock(InputStream.class);
        assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.AR, mockInputStream) instanceof ArArchiveInputStream);
        assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.ZIP, mockInputStream) instanceof ZipArchiveInputStream);
        assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.TAR, mockInputStream) instanceof TarArchiveInputStream);
        assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.JAR, mockInputStream) instanceof JarArchiveInputStream);
        assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.CPIO, mockInputStream) instanceof CpioArchiveInputStream);
        assertTrue(factory.createArchiveInputStream(ArchiveStreamFactory.DUMP, mockInputStream) instanceof DumpArchiveInputStream);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveOutputStreamWithNullName() throws Exception {
        factory.createArchiveOutputStream(null, mock(OutputStream.class));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveOutputStreamWithNullStream() throws Exception {
        factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, null);
    }

    @Test(expected = ArchiveException.class)
    public void testCreateArchiveOutputStreamWithUnknownName() throws Exception {
        factory.createArchiveOutputStream("unknown", mock(OutputStream.class));
    }

    @Test
    public void testCreateArchiveOutputStreamWithKnownNames() throws Exception {
        OutputStream mockOutputStream = mock(OutputStream.class);
        assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.AR, mockOutputStream) instanceof ArArchiveOutputStream);
        assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.ZIP, mockOutputStream) instanceof ZipArchiveOutputStream);
        assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.TAR, mockOutputStream) instanceof TarArchiveOutputStream);
        assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.JAR, mockOutputStream) instanceof JarArchiveOutputStream);
        assertTrue(factory.createArchiveOutputStream(ArchiveStreamFactory.CPIO, mockOutputStream) instanceof CpioArchiveOutputStream);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNullStreamAutodetect() throws Exception {
        factory.createArchiveInputStream(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCreateArchiveInputStreamWithNonMarkSupportedStream() throws Exception {
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.markSupported()).thenReturn(false);
        factory.createArchiveInputStream(mockInputStream);
    }

    @Test(expected = ArchiveException.class)
    public void testCreateArchiveInputStreamWithUnknownSignature() throws Exception {
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.markSupported()).thenReturn(true);
        when(mockInputStream.read(any(byte[].class))).thenReturn(-1);
        factory.createArchiveInputStream(mockInputStream);
    }

    @Test
    public void testCreateArchiveInputStreamWithKnownSignatures() throws Exception {
        byte[] zipSignature = new byte[]{0x50, 0x4B, 0x03, 0x04}; // PKZIP signature
        InputStream zipInputStream = new ByteArrayInputStream(zipSignature);
        assertTrue(factory.createArchiveInputStream(zipInputStream) instanceof ZipArchiveInputStream);

        byte[] jarSignature = new byte[]{0x50, 0x4B, 0x03, 0x04}; // JAR uses the same signature as ZIP
        InputStream jarInputStream = new ByteArrayInputStream(jarSignature);
        assertTrue(factory.createArchiveInputStream(jarInputStream) instanceof JarArchiveInputStream);

        byte[] arSignature = new byte[]{0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A}; // "!<arch>\n"
        InputStream arInputStream = new ByteArrayInputStream(arSignature);
        assertTrue(factory.createArchiveInputStream(arInputStream) instanceof ArArchiveInputStream);

        byte[] cpioSignature = new byte[]{0x30, 0x37, 0x30, 0x37, 0x30, 0x37}; // "070707"
        InputStream cpioInputStream = new ByteArrayInputStream(cpioSignature);
        assertTrue(factory.createArchiveInputStream(cpioInputStream) instanceof CpioArchiveInputStream);

        byte[] dumpSignature = new byte[32]; // Mock signature for dump
        InputStream dumpInputStream = new ByteArrayInputStream(dumpSignature);
        assertTrue(factory.createArchiveInputStream(dumpInputStream) instanceof DumpArchiveInputStream);

        byte[] tarSignature = new byte[512]; // Mock signature for tar
        InputStream tarInputStream = new ByteArrayInputStream(tarSignature);
        assertTrue(factory.createArchiveInputStream(tarInputStream) instanceof TarArchiveInputStream);
    }
}
```