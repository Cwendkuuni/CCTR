```java
import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.compress.archivers.tar.TarUtils;

public class TarUtilsTest {

    @Test
    public void testParseOctal() {
        byte[] buffer = new byte[] {' ', '1', '2', '3', ' ', 0};
        assertEquals(83L, TarUtils.parseOctal(buffer, 0, 6));

        buffer = new byte[] {0, 0, 0, 0, 0, 0};
        assertEquals(0L, TarUtils.parseOctal(buffer, 0, 6));

        buffer = new byte[] {' ', '0', ' ', 0};
        assertEquals(0L, TarUtils.parseOctal(buffer, 0, 4));

        try {
            buffer = new byte[] {'1', '2', '3'};
            TarUtils.parseOctal(buffer, 0, 3);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }

        try {
            buffer = new byte[] {' ', '8', ' ', 0};
            TarUtils.parseOctal(buffer, 0, 4);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test
    public void testParseOctalOrBinary() {
        byte[] buffer = new byte[] {0x80, 0x01};
        assertEquals(1L, TarUtils.parseOctalOrBinary(buffer, 0, 2));

        buffer = new byte[] {' ', '1', '2', '3', ' ', 0};
        assertEquals(83L, TarUtils.parseOctalOrBinary(buffer, 0, 6));

        try {
            buffer = new byte[] {0x80, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
            TarUtils.parseOctalOrBinary(buffer, 0, 9);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test
    public void testParseBoolean() {
        byte[] buffer = new byte[] {0, 1, 0};
        assertFalse(TarUtils.parseBoolean(buffer, 0));
        assertTrue(TarUtils.parseBoolean(buffer, 1));
    }

    @Test
    public void testParseName() {
        byte[] buffer = new byte[] {'t', 'e', 's', 't', 0, 'x'};
        assertEquals("test", TarUtils.parseName(buffer, 0, 6));

        buffer = new byte[] {'t', 'e', 's', 't'};
        assertEquals("test", TarUtils.parseName(buffer, 0, 4));
    }

    @Test
    public void testFormatNameBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatNameBytes("test", buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals('t', buffer[0]);
        assertEquals('e', buffer[1]);
        assertEquals('s', buffer[2]);
        assertEquals('t', buffer[3]);
        assertEquals(0, buffer[4]);
    }

    @Test
    public void testFormatUnsignedOctalString() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(83, buffer, 0, 10);
        assertEquals('0', buffer[0]);
        assertEquals('0', buffer[1]);
        assertEquals('0', buffer[2]);
        assertEquals('0', buffer[3]);
        assertEquals('0', buffer[4]);
        assertEquals('0', buffer[5]);
        assertEquals('0', buffer[6]);
        assertEquals('1', buffer[7]);
        assertEquals('2', buffer[8]);
        assertEquals('3', buffer[9]);
    }

    @Test
    public void testFormatOctalBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatOctalBytes(83, buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals('0', buffer[0]);
        assertEquals('0', buffer[1]);
        assertEquals('0', buffer[2]);
        assertEquals('0', buffer[3]);
        assertEquals('0', buffer[4]);
        assertEquals('0', buffer[5]);
        assertEquals('0', buffer[6]);
        assertEquals('1', buffer[7]);
        assertEquals('2', buffer[8]);
        assertEquals('3', buffer[9]);
    }

    @Test
    public void testFormatLongOctalBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatLongOctalBytes(83, buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals('0', buffer[0]);
        assertEquals('0', buffer[1]);
        assertEquals('0', buffer[2]);
        assertEquals('0', buffer[3]);
        assertEquals('0', buffer[4]);
        assertEquals('0', buffer[5]);
        assertEquals('0', buffer[6]);
        assertEquals('1', buffer[7]);
        assertEquals('2', buffer[8]);
        assertEquals('3', buffer[9]);
    }

    @Test
    public void testFormatLongOctalOrBinaryBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatLongOctalOrBinaryBytes(83, buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals('0', buffer[0]);
        assertEquals('0', buffer[1]);
        assertEquals('0', buffer[2]);
        assertEquals('0', buffer[3]);
        assertEquals('0', buffer[4]);
        assertEquals('0', buffer[5]);
        assertEquals('0', buffer[6]);
        assertEquals('1', buffer[7]);
        assertEquals('2', buffer[8]);
        assertEquals('3', buffer[9]);
    }

    @Test
    public void testFormatCheckSumOctalBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatCheckSumOctalBytes(83, buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals('0', buffer[0]);
        assertEquals('0', buffer[1]);
        assertEquals('0', buffer[2]);
        assertEquals('0', buffer[3]);
        assertEquals('0', buffer[4]);
        assertEquals('0', buffer[5]);
        assertEquals('0', buffer[6]);
        assertEquals('1', buffer[7]);
        assertEquals('2', buffer[8]);
        assertEquals('3', buffer[9]);
    }

    @Test
    public void testComputeCheckSum() {
        byte[] buffer = new byte[] {1, 2, 3, 4, 5};
        assertEquals(15L, TarUtils.computeCheckSum(buffer));
    }
}
```