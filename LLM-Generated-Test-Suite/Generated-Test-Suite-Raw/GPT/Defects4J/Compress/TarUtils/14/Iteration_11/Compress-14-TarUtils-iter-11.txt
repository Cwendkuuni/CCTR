```java
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.junit.Test;
import static org.junit.Assert.*;

public class TarUtilsTest {

    @Test
    public void testParseOctal() {
        byte[] buffer = {' ', '1', '2', '3', ' ', 0};
        assertEquals(83L, TarUtils.parseOctal(buffer, 0, buffer.length));

        buffer = new byte[]{0, 0, 0, 0, 0, 0};
        assertEquals(0L, TarUtils.parseOctal(buffer, 0, buffer.length));

        buffer = new byte[]{'0', '7', '7', '7', ' ', 0};
        assertEquals(511L, TarUtils.parseOctal(buffer, 0, buffer.length));

        try {
            buffer = new byte[]{'1', '2', '3'};
            TarUtils.parseOctal(buffer, 0, buffer.length);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }

        try {
            buffer = new byte[]{'1', '2', '8', ' ', 0};
            TarUtils.parseOctal(buffer, 0, buffer.length);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test
    public void testParseOctalOrBinary() {
        byte[] buffer = {(byte) 0x80, 0x01, 0x02};
        assertEquals(258L, TarUtils.parseOctalOrBinary(buffer, 0, buffer.length));

        buffer = new byte[]{' ', '1', '2', '3', ' ', 0};
        assertEquals(83L, TarUtils.parseOctalOrBinary(buffer, 0, buffer.length));
    }

    @Test
    public void testParseBoolean() {
        byte[] buffer = {0, 1, 0};
        assertFalse(TarUtils.parseBoolean(buffer, 0));
        assertTrue(TarUtils.parseBoolean(buffer, 1));
    }

    @Test
    public void testParseName() {
        byte[] buffer = {'t', 'e', 's', 't', 0, 'i', 'g', 'n', 'o', 'r', 'e'};
        assertEquals("test", TarUtils.parseName(buffer, 0, buffer.length));
    }

    @Test
    public void testFormatNameBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatNameBytes("test", buffer, 0, buffer.length);
        assertEquals(10, offset);
        assertEquals("test", new String(buffer, 0, 4));
        for (int i = 4; i < buffer.length; i++) {
            assertEquals(0, buffer[i]);
        }
    }

    @Test
    public void testFormatUnsignedOctalString() {
        byte[] buffer = new byte[5];
        TarUtils.formatUnsignedOctalString(511, buffer, 0, buffer.length);
        assertEquals("00777", new String(buffer));
    }

    @Test
    public void testFormatOctalBytes() {
        byte[] buffer = new byte[7];
        int offset = TarUtils.formatOctalBytes(511, buffer, 0, buffer.length);
        assertEquals(7, offset);
        assertEquals("00777 ", new String(buffer, 0, 6));
        assertEquals(0, buffer[6]);
    }

    @Test
    public void testFormatLongOctalBytes() {
        byte[] buffer = new byte[6];
        int offset = TarUtils.formatLongOctalBytes(511, buffer, 0, buffer.length);
        assertEquals(6, offset);
        assertEquals("00777 ", new String(buffer));
    }

    @Test
    public void testFormatLongOctalOrBinaryBytes() {
        byte[] buffer = new byte[6];
        int offset = TarUtils.formatLongOctalOrBinaryBytes(511, buffer, 0, buffer.length);
        assertEquals(6, offset);
        assertEquals("00777 ", new String(buffer));

        buffer = new byte[6];
        offset = TarUtils.formatLongOctalOrBinaryBytes(123456789012345L, buffer, 0, buffer.length);
        assertEquals(6, offset);
        assertTrue((buffer[0] & 0x80) != 0);
    }

    @Test
    public void testFormatCheckSumOctalBytes() {
        byte[] buffer = new byte[8];
        int offset = TarUtils.formatCheckSumOctalBytes(511, buffer, 0, buffer.length);
        assertEquals(8, offset);
        assertEquals("00000777 ", new String(buffer, 0, 7));
        assertEquals(0, buffer[7]);
    }

    @Test
    public void testComputeCheckSum() {
        byte[] buffer = {1, 2, 3, 4, 5};
        assertEquals(15L, TarUtils.computeCheckSum(buffer));
    }
}
```