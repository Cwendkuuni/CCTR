```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

import org.junit.Test;

public class TarUtilsTest {

    @Test
    public void testParseOctal() {
        byte[] buffer = new byte[] { ' ', '0', '7', '7', '7', ' ', '0' };
        assertEquals(511, TarUtils.parseOctal(buffer, 1, 3));
        assertEquals(0, TarUtils.parseOctal(buffer, 0, 1));
        assertEquals(0, TarUtils.parseOctal(buffer, 5, 1));

        // Test with leading spaces
        buffer = new byte[] { ' ', ' ', '7', '7', '7', 0 };
        assertEquals(511, TarUtils.parseOctal(buffer, 0, 6));

        // Test with invalid octal digit
        buffer = new byte[] { ' ', '8', '7', '7', '7', 0 };
        assertThrows(IllegalArgumentException.class, () -> {
            TarUtils.parseOctal(buffer, 0, 6);
        });
    }

    @Test
    public void testParseName() {
        byte[] buffer = new byte[] { 't', 'e', 's', 't', 0, 'e', 'x', 't', 'r', 'a' };
        assertEquals("test", TarUtils.parseName(buffer, 0, 10));
        assertEquals("est", TarUtils.parseName(buffer, 1, 3));
        assertEquals("", TarUtils.parseName(buffer, 4, 1));
    }

    @Test
    public void testFormatNameBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatNameBytes("test", buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals("test", new String(buffer, 0, 4));
        assertEquals(0, buffer[4]);

        offset = TarUtils.formatNameBytes("longerthanbuffer", buffer, 0, 10);
        assertEquals(10, offset);
        assertEquals("longerthan", new String(buffer, 0, 10));
    }

    @Test
    public void testFormatUnsignedOctalString() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(511, buffer, 0, 6);
        assertEquals("00777", new String(buffer, 0, 5));

        // Test with value that doesn't fit
        assertThrows(IllegalArgumentException.class, () -> {
            TarUtils.formatUnsignedOctalString(077777777777L, buffer, 0, 6);
        });
    }

    @Test
    public void testFormatOctalBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatOctalBytes(511, buffer, 0, 8);
        assertEquals(8, offset);
        assertEquals("0000777 ", new String(buffer, 0, 8));
    }

    @Test
    public void testFormatLongOctalBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatLongOctalBytes(511, buffer, 0, 8);
        assertEquals(8, offset);
        assertEquals("0000777 ", new String(buffer, 0, 8));
    }

    @Test
    public void testFormatCheckSumOctalBytes() {
        byte[] buffer = new byte[10];
        int offset = TarUtils.formatCheckSumOctalBytes(511, buffer, 0, 8);
        assertEquals(8, offset);
        assertEquals("0000777\0 ", new String(buffer, 0, 8));
    }

    @Test
    public void testComputeCheckSum() {
        byte[] buffer = new byte[] { 1, 2, 3, 4, 5 };
        assertEquals(15, TarUtils.computeCheckSum(buffer));

        buffer = new byte[] { (byte) 255, (byte) 255, (byte) 255 };
        assertEquals(765, TarUtils.computeCheckSum(buffer));
    }
}
```
This JUnit 4 test suite covers all the methods in the `TarUtils` class, testing various scenarios and edge cases for each method.