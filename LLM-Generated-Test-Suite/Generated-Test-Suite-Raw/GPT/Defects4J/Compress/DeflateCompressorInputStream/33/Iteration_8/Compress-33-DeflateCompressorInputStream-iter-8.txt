```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class DeflateCompressorInputStreamTest {

    private InputStream mockInputStream;
    private DeflateCompressorInputStream deflateCompressorInputStream;

    @Before
    public void setUp() throws IOException {
        mockInputStream = mock(InputStream.class);
        when(mockInputStream.read()).thenReturn(-1);
        when(mockInputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        when(mockInputStream.available()).thenReturn(0);
        deflateCompressorInputStream = new DeflateCompressorInputStream(mockInputStream);
    }

    @After
    public void tearDown() throws IOException {
        deflateCompressorInputStream.close();
    }

    @Test
    public void testReadSingleByte() throws IOException {
        int result = deflateCompressorInputStream.read();
        assertEquals(-1, result);
        verify(mockInputStream, times(1)).read();
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[10];
        int result = deflateCompressorInputStream.read(buffer, 0, buffer.length);
        assertEquals(-1, result);
        verify(mockInputStream, times(1)).read(buffer, 0, buffer.length);
    }

    @Test
    public void testSkip() throws IOException {
        long skipped = deflateCompressorInputStream.skip(5);
        assertEquals(0, skipped);
        verify(mockInputStream, times(1)).skip(5);
    }

    @Test
    public void testAvailable() throws IOException {
        int available = deflateCompressorInputStream.available();
        assertEquals(0, available);
        verify(mockInputStream, times(1)).available();
    }

    @Test
    public void testClose() throws IOException {
        deflateCompressorInputStream.close();
        verify(mockInputStream, times(1)).close();
    }

    @Test
    public void testConstructorWithParameters() throws IOException {
        DeflateParameters parameters = new DeflateParameters();
        parameters.setWithZlibHeader(true);
        DeflateCompressorInputStream streamWithParams = new DeflateCompressorInputStream(mockInputStream, parameters);
        assertNotNull(streamWithParams);
        streamWithParams.close();
    }

    @Test
    public void testReadWithRealData() throws IOException {
        byte[] compressedData = { /* some deflate compressed data */ };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream realStream = new DeflateCompressorInputStream(byteArrayInputStream);

        byte[] buffer = new byte[1024];
        int bytesRead = realStream.read(buffer, 0, buffer.length);
        assertTrue(bytesRead >= 0);

        realStream.close();
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `DeflateCompressorInputStream` class. It includes tests for reading single bytes, reading into a byte array, skipping bytes, checking available bytes, and closing the stream. Additionally, it tests the constructor with parameters and includes a test for reading real deflate-compressed data. Note that the `testReadWithRealData` method requires actual deflate-compressed data to be placed in the `compressedData` array for a meaningful test.