Certainly! Below is a JUnit 4 test suite for the `DeflateCompressorInputStream` class. This test suite aims to cover the methods provided in the class, including constructors and overridden methods from the `CompressorInputStream` class.

```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

public class DeflateCompressorInputStreamTest {

    private byte[] compressedData;
    private byte[] uncompressedData;

    @Before
    public void setUp() throws IOException {
        uncompressedData = "This is a test string for compression".getBytes("UTF-8");
        compressedData = compressData(uncompressedData);
    }

    private byte[] compressData(byte[] data) throws IOException {
        Deflater deflater = new Deflater();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream, deflater);
        deflaterOutputStream.write(data);
        deflaterOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }

    @Test
    public void testConstructorWithInputStream() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream);
        assertNotNull(deflateInputStream);
    }

    @Test
    public void testConstructorWithInputStreamAndParameters() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateParameters parameters = new DeflateParameters();
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream, parameters);
        assertNotNull(deflateInputStream);
    }

    @Test
    public void testReadSingleByte() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream);
        int byteRead = deflateInputStream.read();
        assertNotEquals(-1, byteRead);
    }

    @Test
    public void testReadByteArray() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream);
        byte[] buffer = new byte[uncompressedData.length];
        int bytesRead = deflateInputStream.read(buffer, 0, buffer.length);
        assertEquals(uncompressedData.length, bytesRead);
        assertArrayEquals(uncompressedData, buffer);
    }

    @Test
    public void testSkip() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream);
        long skipped = deflateInputStream.skip(5);
        assertEquals(5, skipped);
    }

    @Test
    public void testAvailable() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream);
        int available = deflateInputStream.available();
        assertTrue(available > 0);
    }

    @Test
    public void testClose() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(compressedData);
        DeflateCompressorInputStream deflateInputStream = new DeflateCompressorInputStream(inputStream);
        deflateInputStream.close();
        assertEquals(0, deflateInputStream.available());
    }
}
```

### Explanation:
- **setUp Method**: Prepares compressed data for testing by compressing a sample string.
- **compressData Method**: Helper method to compress data using `DeflaterOutputStream`.
- **Constructor Tests**: Verify that the constructors correctly instantiate the `DeflateCompressorInputStream`.
- **Read Tests**: Test both single-byte and byte-array reads to ensure data is decompressed correctly.
- **Skip Test**: Verifies that the `skip` method correctly skips the specified number of bytes.
- **Available Test**: Checks that the `available` method returns a positive number, indicating data is available for reading.
- **Close Test**: Ensures that the `close` method closes the stream properly.

This test suite should provide comprehensive coverage for the `DeflateCompressorInputStream` class.