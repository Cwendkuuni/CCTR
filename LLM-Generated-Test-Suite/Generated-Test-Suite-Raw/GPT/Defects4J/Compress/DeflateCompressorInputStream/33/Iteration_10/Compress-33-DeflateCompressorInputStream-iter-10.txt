```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class DeflateCompressorInputStreamTest {

    private InputStream mockInputStream;
    private DeflateCompressorInputStream deflateCompressorInputStream;

    @Before
    public void setUp() throws IOException {
        mockInputStream = mock(InputStream.class);
        deflateCompressorInputStream = new DeflateCompressorInputStream(mockInputStream);
    }

    @After
    public void tearDown() throws IOException {
        deflateCompressorInputStream.close();
    }

    @Test
    public void testReadSingleByte() throws IOException {
        when(mockInputStream.read()).thenReturn(100, -1);
        
        int result = deflateCompressorInputStream.read();
        assertEquals(100, result);

        result = deflateCompressorInputStream.read();
        assertEquals(-1, result);
    }

    @Test
    public void testReadByteArray() throws IOException {
        byte[] buffer = new byte[10];
        when(mockInputStream.read(buffer, 0, 10)).thenReturn(10);

        int bytesRead = deflateCompressorInputStream.read(buffer, 0, 10);
        assertEquals(10, bytesRead);
    }

    @Test
    public void testSkip() throws IOException {
        when(mockInputStream.skip(5)).thenReturn(5L);

        long skipped = deflateCompressorInputStream.skip(5);
        assertEquals(5L, skipped);
    }

    @Test
    public void testAvailable() throws IOException {
        when(mockInputStream.available()).thenReturn(3);

        int available = deflateCompressorInputStream.available();
        assertEquals(3, available);
    }

    @Test
    public void testClose() throws IOException {
        deflateCompressorInputStream.close();
        verify(mockInputStream, times(1)).close();
    }

    @Test
    public void testConstructorWithParameters() throws IOException {
        DeflateParameters parameters = new DeflateParameters();
        parameters.setWithZlibHeader(true);
        DeflateCompressorInputStream streamWithParams = new DeflateCompressorInputStream(mockInputStream, parameters);
        assertNotNull(streamWithParams);
        streamWithParams.close();
    }

    @Test
    public void testReadWithEmptyStream() throws IOException {
        InputStream emptyStream = new ByteArrayInputStream(new byte[0]);
        DeflateCompressorInputStream emptyDeflateStream = new DeflateCompressorInputStream(emptyStream);
        
        int result = emptyDeflateStream.read();
        assertEquals(-1, result);
        
        emptyDeflateStream.close();
    }
}
```

This test suite uses JUnit 4 and Mockito to test the `DeflateCompressorInputStream` class. It covers the following scenarios:

1. Reading a single byte from the stream.
2. Reading a byte array from the stream.
3. Skipping bytes in the stream.
4. Checking the number of available bytes.
5. Closing the stream.
6. Constructing the stream with parameters.
7. Reading from an empty stream.

Make sure to include the necessary dependencies for JUnit and Mockito in your project to run these tests.