```java
import org.apache.commons.compress.utils.IOUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class IOUtilsTest {

    private InputStream inputStream;
    private ByteArrayOutputStream outputStream;

    @Before
    public void setUp() {
        byte[] data = "This is a test string.".getBytes();
        inputStream = new ByteArrayInputStream(data);
        outputStream = new ByteArrayOutputStream();
    }

    @After
    public void tearDown() throws IOException {
        IOUtils.closeQuietly(inputStream);
        IOUtils.closeQuietly(outputStream);
    }

    @Test
    public void testCopy() throws IOException {
        long bytesCopied = IOUtils.copy(inputStream, outputStream);
        assertEquals("This is a test string.".length(), bytesCopied);
        assertArrayEquals("This is a test string.".getBytes(), outputStream.toByteArray());
    }

    @Test
    public void testCopyWithBufferSize() throws IOException {
        long bytesCopied = IOUtils.copy(inputStream, outputStream, 10);
        assertEquals("This is a test string.".length(), bytesCopied);
        assertArrayEquals("This is a test string.".getBytes(), outputStream.toByteArray());
    }

    @Test
    public void testSkip() throws IOException {
        long bytesSkipped = IOUtils.skip(inputStream, 5);
        assertEquals(5, bytesSkipped);
        byte[] remainingData = new byte[inputStream.available()];
        inputStream.read(remainingData);
        assertArrayEquals("is a test string.".getBytes(), remainingData);
    }

    @Test
    public void testReadFully() throws IOException {
        byte[] buffer = new byte[21];
        int bytesRead = IOUtils.readFully(inputStream, buffer);
        assertEquals(21, bytesRead);
        assertArrayEquals("This is a test string.".getBytes(), buffer);
    }

    @Test
    public void testReadFullyWithOffsetAndLength() throws IOException {
        byte[] buffer = new byte[25];
        int bytesRead = IOUtils.readFully(inputStream, buffer, 2, 21);
        assertEquals(21, bytesRead);
        assertArrayEquals(new byte[]{0, 0, 'T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 't', 'e', 's', 't', ' ', 's', 't', 'r', 'i', 'n', 'g', '.', 0}, buffer);
    }

    @Test
    public void testToByteArray() throws IOException {
        byte[] result = IOUtils.toByteArray(inputStream);
        assertArrayEquals("This is a test string.".getBytes(), result);
    }

    @Test
    public void testCloseQuietly() {
        IOUtils.closeQuietly(inputStream);
        IOUtils.closeQuietly(outputStream);
        // No exception should be thrown
        assertTrue(true);
    }
}
```

This test suite covers all the methods in the `IOUtils` class, ensuring that each method is tested for its expected behavior. The tests include scenarios for copying data, skipping bytes, reading fully into a buffer, converting an input stream to a byte array, and closing resources quietly.