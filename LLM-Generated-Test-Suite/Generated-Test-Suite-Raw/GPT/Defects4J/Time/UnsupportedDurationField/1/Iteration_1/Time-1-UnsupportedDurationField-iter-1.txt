```java
import static org.junit.Assert.*;
import org.joda.time.DurationFieldType;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.Before;
import org.junit.Test;

public class UnsupportedDurationFieldTest {

    private DurationFieldType type;
    private UnsupportedDurationField field;

    @Before
    public void setUp() {
        type = DurationFieldType.seconds();
        field = UnsupportedDurationField.getInstance(type);
    }

    @Test
    public void testGetInstance() {
        UnsupportedDurationField field1 = UnsupportedDurationField.getInstance(type);
        UnsupportedDurationField field2 = UnsupportedDurationField.getInstance(type);
        assertSame(field1, field2);
    }

    @Test
    public void testGetType() {
        assertEquals(type, field.getType());
    }

    @Test
    public void testGetName() {
        assertEquals(type.getName(), field.getName());
    }

    @Test
    public void testIsSupported() {
        assertFalse(field.isSupported());
    }

    @Test
    public void testIsPrecise() {
        assertTrue(field.isPrecise());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetValue_long() {
        field.getValue(1000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetValueAsLong_long() {
        field.getValueAsLong(1000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetValue_long_long() {
        field.getValue(1000L, 2000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetValueAsLong_long_long() {
        field.getValueAsLong(1000L, 2000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetMillis_int() {
        field.getMillis(1);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetMillis_long() {
        field.getMillis(1L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetMillis_int_long() {
        field.getMillis(1, 1000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetMillis_long_long() {
        field.getMillis(1L, 1000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testAdd_long_int() {
        field.add(1000L, 1);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testAdd_long_long() {
        field.add(1000L, 1L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetDifference_long_long() {
        field.getDifference(2000L, 1000L);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testGetDifferenceAsLong_long_long() {
        field.getDifferenceAsLong(2000L, 1000L);
    }

    @Test
    public void testGetUnitMillis() {
        assertEquals(0, field.getUnitMillis());
    }

    @Test
    public void testCompareTo() {
        assertEquals(0, field.compareTo(field));
        DurationFieldType otherType = DurationFieldType.minutes();
        UnsupportedDurationField otherField = UnsupportedDurationField.getInstance(otherType);
        assertEquals(0, field.compareTo(otherField));
    }

    @Test
    public void testEquals() {
        assertTrue(field.equals(field));
        DurationFieldType otherType = DurationFieldType.minutes();
        UnsupportedDurationField otherField = UnsupportedDurationField.getInstance(otherType);
        assertFalse(field.equals(otherField));
    }

    @Test
    public void testHashCode() {
        assertEquals(type.getName().hashCode(), field.hashCode());
    }

    @Test
    public void testToString() {
        assertEquals("UnsupportedDurationField[" + type.getName() + "]", field.toString());
    }
}
```
This test suite covers all the methods in the `UnsupportedDurationField` class, ensuring that each method behaves as expected, including throwing `UnsupportedOperationException` for unsupported operations.