```java
import static org.junit.Assert.*;
import org.junit.Test;

public class TokenStreamTest {

    @Test
    public void testIsKeyword() {
        // Test with known JavaScript keywords
        assertTrue(TokenStream.isKeyword("if"));
        assertTrue(TokenStream.isKeyword("for"));
        assertTrue(TokenStream.isKeyword("while"));
        assertTrue(TokenStream.isKeyword("return"));
        assertTrue(TokenStream.isKeyword("function"));
        assertTrue(TokenStream.isKeyword("var"));
        assertTrue(TokenStream.isKeyword("const"));
        assertTrue(TokenStream.isKeyword("let"));
        assertTrue(TokenStream.isKeyword("null"));
        assertTrue(TokenStream.isKeyword("true"));
        assertTrue(TokenStream.isKeyword("false"));
        assertTrue(TokenStream.isKeyword("break"));
        assertTrue(TokenStream.isKeyword("continue"));
        assertTrue(TokenStream.isKeyword("switch"));
        assertTrue(TokenStream.isKeyword("case"));
        assertTrue(TokenStream.isKeyword("default"));
        assertTrue(TokenStream.isKeyword("throw"));
        assertTrue(TokenStream.isKeyword("catch"));
        assertTrue(TokenStream.isKeyword("try"));
        assertTrue(TokenStream.isKeyword("finally"));
        assertTrue(TokenStream.isKeyword("new"));
        assertTrue(TokenStream.isKeyword("delete"));
        assertTrue(TokenStream.isKeyword("typeof"));
        assertTrue(TokenStream.isKeyword("void"));
        assertTrue(TokenStream.isKeyword("instanceof"));
        assertTrue(TokenStream.isKeyword("in"));
        assertTrue(TokenStream.isKeyword("do"));
        assertTrue(TokenStream.isKeyword("with"));
        assertTrue(TokenStream.isKeyword("this"));
        assertTrue(TokenStream.isKeyword("super"));
        assertTrue(TokenStream.isKeyword("class"));
        assertTrue(TokenStream.isKeyword("extends"));
        assertTrue(TokenStream.isKeyword("export"));
        assertTrue(TokenStream.isKeyword("import"));
        assertTrue(TokenStream.isKeyword("yield"));
        assertTrue(TokenStream.isKeyword("await"));
        assertTrue(TokenStream.isKeyword("implements"));
        assertTrue(TokenStream.isKeyword("interface"));
        assertTrue(TokenStream.isKeyword("package"));
        assertTrue(TokenStream.isKeyword("protected"));
        assertTrue(TokenStream.isKeyword("private"));
        assertTrue(TokenStream.isKeyword("public"));
        assertTrue(TokenStream.isKeyword("static"));
        assertTrue(TokenStream.isKeyword("abstract"));
        assertTrue(TokenStream.isKeyword("volatile"));
        assertTrue(TokenStream.isKeyword("synchronized"));
        assertTrue(TokenStream.isKeyword("native"));
        assertTrue(TokenStream.isKeyword("final"));
        assertTrue(TokenStream.isKeyword("transient"));
        assertTrue(TokenStream.isKeyword("goto"));
        assertTrue(TokenStream.isKeyword("debugger"));

        // Test with non-keywords
        assertFalse(TokenStream.isKeyword("hello"));
        assertFalse(TokenStream.isKeyword("world"));
        assertFalse(TokenStream.isKeyword("foo"));
        assertFalse(TokenStream.isKeyword("bar"));
        assertFalse(TokenStream.isKeyword("baz"));
        assertFalse(TokenStream.isKeyword("qux"));
        assertFalse(TokenStream.isKeyword("quux"));
        assertFalse(TokenStream.isKeyword("corge"));
        assertFalse(TokenStream.isKeyword("grault"));
        assertFalse(TokenStream.isKeyword("garply"));
        assertFalse(TokenStream.isKeyword("waldo"));
        assertFalse(TokenStream.isKeyword("fred"));
        assertFalse(TokenStream.isKeyword("plugh"));
        assertFalse(TokenStream.isKeyword("xyzzy"));
        assertFalse(TokenStream.isKeyword("thud"));
    }

    @Test
    public void testIsJSIdentifier() {
        // Test valid JavaScript identifiers
        assertTrue(TokenStream.isJSIdentifier("a"));
        assertTrue(TokenStream.isJSIdentifier("A"));
        assertTrue(TokenStream.isJSIdentifier("_"));
        assertTrue(TokenStream.isJSIdentifier("$"));
        assertTrue(TokenStream.isJSIdentifier("a1"));
        assertTrue(TokenStream.isJSIdentifier("A1"));
        assertTrue(TokenStream.isJSIdentifier("_1"));
        assertTrue(TokenStream.isJSIdentifier("$1"));
        assertTrue(TokenStream.isJSIdentifier("a_b"));
        assertTrue(TokenStream.isJSIdentifier("A_B"));
        assertTrue(TokenStream.isJSIdentifier("_a"));
        assertTrue(TokenStream.isJSIdentifier("$a"));
        assertTrue(TokenStream.isJSIdentifier("a$b"));
        assertTrue(TokenStream.isJSIdentifier("A$B"));
        assertTrue(TokenStream.isJSIdentifier("_$"));
        assertTrue(TokenStream.isJSIdentifier("$a_b"));
        assertTrue(TokenStream.isJSIdentifier("a1b2"));
        assertTrue(TokenStream.isJSIdentifier("A1B2"));
        assertTrue(TokenStream.isJSIdentifier("_1_2"));
        assertTrue(TokenStream.isJSIdentifier("$1$2"));

        // Test invalid JavaScript identifiers
        assertFalse(TokenStream.isJSIdentifier(""));
        assertFalse(TokenStream.isJSIdentifier("1"));
        assertFalse(TokenStream.isJSIdentifier("1a"));
        assertFalse(TokenStream.isJSIdentifier("1A"));
        assertFalse(TokenStream.isJSIdentifier("1_"));
        assertFalse(TokenStream.isJSIdentifier("1$"));
        assertFalse(TokenStream.isJSIdentifier("a-b"));
        assertFalse(TokenStream.isJSIdentifier("A-B"));
        assertFalse(TokenStream.isJSIdentifier("-a"));
        assertFalse(TokenStream.isJSIdentifier("-A"));
        assertFalse(TokenStream.isJSIdentifier("-_"));
        assertFalse(TokenStream.isJSIdentifier("-$"));
        assertFalse(TokenStream.isJSIdentifier("a b"));
        assertFalse(TokenStream.isJSIdentifier("A B"));
        assertFalse(TokenStream.isJSIdentifier(" a"));
        assertFalse(TokenStream.isJSIdentifier(" A"));
        assertFalse(TokenStream.isJSIdentifier(" _"));
        assertFalse(TokenStream.isJSIdentifier(" $"));
    }
}
```