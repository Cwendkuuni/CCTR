Certainly! Below is a JUnit 4 test suite for the `ExtendedMessageFormat` class. This suite aims to cover various scenarios and edge cases for the methods in the class.

```java
import org.apache.commons.lang.text.ExtendedMessageFormat;
import org.junit.Before;
import org.junit.Test;

import java.text.Format;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import static org.junit.Assert.*;

public class ExtendedMessageFormatTest {

    private Map<String, FormatFactory> registry;
    private ExtendedMessageFormat emf;

    @Before
    public void setUp() {
        registry = new HashMap<>();
        registry.put("upper", new UpperCaseFormatFactory());
    }

    @Test
    public void testConstructorWithPatternAndLocale() {
        emf = new ExtendedMessageFormat("{0}", Locale.US);
        assertEquals("{0}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternLocaleAndRegistry() {
        emf = new ExtendedMessageFormat("{0,upper}", Locale.US, registry);
        assertEquals("{0,upper}", emf.toPattern());
    }

    @Test
    public void testConstructorWithPatternAndRegistry() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        assertEquals("{0,upper}", emf.toPattern());
    }

    @Test
    public void testApplyPattern() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        emf.applyPattern("{0,upper}");
        assertEquals("{0,upper}", emf.toPattern());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testApplyPatternWithInvalidPattern() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        emf.applyPattern("{0,upper");
    }

    @Test
    public void testToPattern() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        assertEquals("{0,upper}", emf.toPattern());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormat() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        emf.setFormat(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatByArgumentIndex() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        emf.setFormatByArgumentIndex(0, null);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormats() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        emf.setFormats(new Format[]{});
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testSetFormatsByArgumentIndex() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        emf.setFormatsByArgumentIndex(new Format[]{});
    }

    @Test
    public void testGetFormat() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        Format format = emf.getFormat("upper");
        assertNotNull(format);
    }

    @Test
    public void testReadArgumentIndex() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        ParsePosition pos = new ParsePosition(1);
        int index = emf.readArgumentIndex("{0,upper}", pos);
        assertEquals(0, index);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testReadArgumentIndexWithInvalidIndex() {
        emf = new ExtendedMessageFormat("{a,upper}", registry);
        ParsePosition pos = new ParsePosition(1);
        emf.readArgumentIndex("{a,upper}", pos);
    }

    @Test
    public void testParseFormatDescription() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        ParsePosition pos = new ParsePosition(3);
        String desc = emf.parseFormatDescription("{0,upper}", pos);
        assertEquals("upper", desc);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testParseFormatDescriptionWithInvalidDescription() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        ParsePosition pos = new ParsePosition(3);
        emf.parseFormatDescription("{0,upper", pos);
    }

    @Test
    public void testInsertFormats() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        String pattern = emf.insertFormats("{0}", new ArrayList<String>() {{
            add("upper");
        }});
        assertEquals("{0,upper}", pattern);
    }

    @Test
    public void testContainsElements() {
        emf = new ExtendedMessageFormat("{0,upper}", registry);
        assertTrue(emf.containsElements(new ArrayList<String>() {{
            add("element");
        }}));
        assertFalse(emf.containsElements(new ArrayList<String>()));
    }

    // Custom FormatFactory for testing
    private static class UpperCaseFormatFactory implements FormatFactory {
        @Override
        public Format getFormat(String name, String args, Locale locale) {
            return new UpperCaseFormat();
        }
    }

    // Custom Format for testing
    private static class UpperCaseFormat extends Format {
        @Override
        public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos) {
            return toAppendTo.append(obj.toString().toUpperCase());
        }

        @Override
        public Object parseObject(String source, ParsePosition pos) {
            return source.toUpperCase();
        }
    }
}
```

This test suite includes tests for constructors, pattern application, and various methods in the `ExtendedMessageFormat` class. It also includes custom `FormatFactory` and `Format` implementations to test the registry functionality.