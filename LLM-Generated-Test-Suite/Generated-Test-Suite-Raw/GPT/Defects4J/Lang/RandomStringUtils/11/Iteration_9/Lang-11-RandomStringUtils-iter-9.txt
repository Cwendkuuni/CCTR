Certainly! Below is a comprehensive JUnit 4 test suite for the `RandomStringUtils` class. This test suite covers various scenarios for each method in the class, including edge cases and expected exceptions.

```java
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Test;
import java.util.Random;

import static org.junit.Assert.*;

public class RandomStringUtilsTest {

    @Test
    public void testRandom() {
        String result = RandomStringUtils.random(10);
        assertNotNull(result);
        assertEquals(10, result.length());
    }

    @Test
    public void testRandomAscii() {
        String result = RandomStringUtils.randomAscii(10);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(c >= 32 && c <= 126);
        }
    }

    @Test
    public void testRandomAlphabetic() {
        String result = RandomStringUtils.randomAlphabetic(10);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetter(c));
        }
    }

    @Test
    public void testRandomAlphanumeric() {
        String result = RandomStringUtils.randomAlphanumeric(10);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetterOrDigit(c));
        }
    }

    @Test
    public void testRandomNumeric() {
        String result = RandomStringUtils.randomNumeric(10);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isDigit(c));
        }
    }

    @Test
    public void testRandomWithLettersAndNumbers() {
        String result = RandomStringUtils.random(10, true, true);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetterOrDigit(c));
        }
    }

    @Test
    public void testRandomWithOnlyLetters() {
        String result = RandomStringUtils.random(10, true, false);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetter(c));
        }
    }

    @Test
    public void testRandomWithOnlyNumbers() {
        String result = RandomStringUtils.random(10, false, true);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isDigit(c));
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomNegativeCount() {
        RandomStringUtils.random(-1);
    }

    @Test
    public void testRandomWithCustomChars() {
        char[] chars = {'a', 'b', 'c'};
        String result = RandomStringUtils.random(10, chars);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(new String(chars).indexOf(c) >= 0);
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithEmptyCustomChars() {
        RandomStringUtils.random(10, new char[0]);
    }

    @Test
    public void testRandomWithCustomString() {
        String chars = "abc";
        String result = RandomStringUtils.random(10, chars);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(chars.indexOf(c) >= 0);
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithEmptyCustomString() {
        RandomStringUtils.random(10, "");
    }

    @Test
    public void testRandomWithRandomSource() {
        Random random = new Random();
        String result = RandomStringUtils.random(10, 0, 0, true, true, null, random);
        assertNotNull(result);
        assertEquals(10, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isLetterOrDigit(c));
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithNegativeCountAndRandomSource() {
        Random random = new Random();
        RandomStringUtils.random(-1, 0, 0, true, true, null, random);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomWithEmptyCustomCharsAndRandomSource() {
        Random random = new Random();
        RandomStringUtils.random(10, 0, 0, true, true, new char[0], random);
    }

    @Test
    public void testRandomZeroLength() {
        String result = RandomStringUtils.random(0);
        assertNotNull(result);
        assertEquals(0, result.length());
    }
}
```

This test suite covers the following:
- Basic functionality of each method.
- Edge cases such as zero-length strings.
- Exception handling for invalid input, such as negative lengths and empty character arrays.
- Validation of character types in the generated strings.