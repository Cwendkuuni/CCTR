Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `ValuedEnum` class. This suite includes tests for each method in the class, ensuring that they behave as expected.

```java
import org.junit.Before;
import org.junit.Test;
import org.apache.commons.lang.enums.ValuedEnum;
import org.apache.commons.lang.enums.Enum;

import java.util.List;
import java.util.ArrayList;

import static org.junit.Assert.*;

public class ValuedEnumTest {

    private static final int TEST_VALUE = 100;
    private static final String TEST_NAME = "TestEnum";

    private ValuedEnum testEnum;

    @Before
    public void setUp() {
        testEnum = new ValuedEnum(TEST_NAME, TEST_VALUE) {};
    }

    @Test
    public void testGetValue() {
        assertEquals(TEST_VALUE, testEnum.getValue());
    }

    @Test
    public void testCompareTo() {
        ValuedEnum anotherEnum = new ValuedEnum("AnotherEnum", 200) {};
        assertTrue(testEnum.compareTo(anotherEnum) < 0);
        assertTrue(anotherEnum.compareTo(testEnum) > 0);
        assertEquals(0, testEnum.compareTo(new ValuedEnum(TEST_NAME, TEST_VALUE) {}));
    }

    @Test(expected = ClassCastException.class)
    public void testCompareToWithInvalidType() {
        testEnum.compareTo(new Object());
    }

    @Test(expected = NullPointerException.class)
    public void testCompareToWithNull() {
        testEnum.compareTo(null);
    }

    @Test
    public void testGetEnumByValue() {
        List<Enum> enumList = new ArrayList<>();
        enumList.add(testEnum);
        Enum.setEnumList(ValuedEnum.class, enumList);

        ValuedEnum result = (ValuedEnum) ValuedEnum.getEnum(ValuedEnum.class, TEST_VALUE);
        assertEquals(testEnum, result);
    }

    @Test
    public void testGetEnumByValueNotFound() {
        List<Enum> enumList = new ArrayList<>();
        enumList.add(testEnum);
        Enum.setEnumList(ValuedEnum.class, enumList);

        ValuedEnum result = (ValuedEnum) ValuedEnum.getEnum(ValuedEnum.class, 999);
        assertNull(result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetEnumByValueWithNullClass() {
        ValuedEnum.getEnum(null, TEST_VALUE);
    }

    @Test
    public void testToString() {
        String expected = "ValuedEnum[TestEnum=100]";
        assertEquals(expected, testEnum.toString());
    }
}
```

### Explanation:
- **setUp Method**: Initializes a `ValuedEnum` instance before each test.
- **testGetValue**: Verifies that the `getValue` method returns the correct value.
- **testCompareTo**: Tests the `compareTo` method for correct ordering.
- **testCompareToWithInvalidType**: Ensures `compareTo` throws a `ClassCastException` when compared with an invalid type.
- **testCompareToWithNull**: Ensures `compareTo` throws a `NullPointerException` when compared with `null`.
- **testGetEnumByValue**: Tests the `getEnum` method to retrieve an enum by its value.
- **testGetEnumByValueNotFound**: Ensures `getEnum` returns `null` when the value is not found.
- **testGetEnumByValueWithNullClass**: Ensures `getEnum` throws an `IllegalArgumentException` when the class is `null`.
- **testToString**: Verifies the `toString` method returns the expected string representation.

This test suite should cover the main functionalities of the `ValuedEnum` class.