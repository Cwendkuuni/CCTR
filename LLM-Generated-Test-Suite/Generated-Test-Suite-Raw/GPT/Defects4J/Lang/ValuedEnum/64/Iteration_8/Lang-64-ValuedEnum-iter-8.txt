```java
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.List;
import java.util.Iterator;

public class ValuedEnumTest {

    private static final int TEST_VALUE_1 = 100;
    private static final int TEST_VALUE_2 = 200;
    private static final String TEST_NAME_1 = "TestEnum1";
    private static final String TEST_NAME_2 = "TestEnum2";

    private TestValuedEnum enum1;
    private TestValuedEnum enum2;

    @Before
    public void setUp() {
        enum1 = new TestValuedEnum(TEST_NAME_1, TEST_VALUE_1);
        enum2 = new TestValuedEnum(TEST_NAME_2, TEST_VALUE_2);
    }

    @Test
    public void testGetValue() {
        assertEquals(TEST_VALUE_1, enum1.getValue());
        assertEquals(TEST_VALUE_2, enum2.getValue());
    }

    @Test
    public void testCompareTo() {
        assertTrue(enum1.compareTo(enum2) < 0);
        assertTrue(enum2.compareTo(enum1) > 0);
        assertEquals(0, enum1.compareTo(enum1));
    }

    @Test(expected = ClassCastException.class)
    public void testCompareToWithInvalidType() {
        enum1.compareTo("InvalidType");
    }

    @Test
    public void testToString() {
        String expected1 = "TestValuedEnum[TestEnum1=100]";
        String expected2 = "TestValuedEnum[TestEnum2=200]";
        assertEquals(expected1, enum1.toString());
        assertEquals(expected2, enum2.toString());
    }

    @Test
    public void testGetEnumByValue() {
        assertEquals(enum1, TestValuedEnum.getEnum(TestValuedEnum.class, TEST_VALUE_1));
        assertEquals(enum2, TestValuedEnum.getEnum(TestValuedEnum.class, TEST_VALUE_2));
        assertNull(TestValuedEnum.getEnum(TestValuedEnum.class, 999));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetEnumByValueWithNullClass() {
        TestValuedEnum.getEnum(null, TEST_VALUE_1);
    }

    // Helper class for testing
    private static class TestValuedEnum extends ValuedEnum {
        private static final long serialVersionUID = 1L;

        protected TestValuedEnum(String name, int value) {
            super(name, value);
        }

        public static ValuedEnum getEnum(Class enumClass, int value) {
            return ValuedEnum.getEnum(enumClass, value);
        }
    }
}
```

This test suite covers the following methods in the `ValuedEnum` class:

- `getValue()`: Tests that the correct value is returned.
- `compareTo(Object other)`: Tests comparison between different enum instances and handles invalid types.
- `toString()`: Tests the string representation of the enum.
- `getEnum(Class enumClass, int value)`: Tests retrieval of enum instances by value and handles null class input.

The `TestValuedEnum` class is a simple subclass of `ValuedEnum` used for testing purposes.