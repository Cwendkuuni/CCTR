Certainly! Below is a JUnit 4 test suite for the `StopWatch` class. This test suite aims to comprehensively test all the methods in the `StopWatch` class, including edge cases and expected exceptions.

```java
import org.apache.commons.lang.time.StopWatch;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class StopWatchTest {

    private StopWatch stopWatch;

    @Before
    public void setUp() {
        stopWatch = new StopWatch();
    }

    @Test
    public void testInitialState() {
        assertEquals(0, stopWatch.getTime());
    }

    @Test(expected = IllegalStateException.class)
    public void testStopWithoutStart() {
        stopWatch.stop();
    }

    @Test(expected = IllegalStateException.class)
    public void testSplitWithoutStart() {
        stopWatch.split();
    }

    @Test(expected = IllegalStateException.class)
    public void testUnsplitWithoutSplit() {
        stopWatch.unsplit();
    }

    @Test(expected = IllegalStateException.class)
    public void testSuspendWithoutStart() {
        stopWatch.suspend();
    }

    @Test(expected = IllegalStateException.class)
    public void testResumeWithoutSuspend() {
        stopWatch.resume();
    }

    @Test
    public void testStartStop() {
        stopWatch.start();
        assertTrue(stopWatch.getTime() >= 0);
        stopWatch.stop();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test
    public void testStartReset() {
        stopWatch.start();
        stopWatch.reset();
        assertEquals(0, stopWatch.getTime());
    }

    @Test
    public void testSplitUnsplit() {
        stopWatch.start();
        stopWatch.split();
        long splitTime = stopWatch.getSplitTime();
        assertTrue(splitTime >= 0);
        stopWatch.unsplit();
        assertTrue(stopWatch.getTime() >= splitTime);
    }

    @Test
    public void testSuspendResume() {
        stopWatch.start();
        stopWatch.suspend();
        long suspendedTime = stopWatch.getTime();
        assertTrue(suspendedTime >= 0);
        stopWatch.resume();
        assertTrue(stopWatch.getTime() >= suspendedTime);
    }

    @Test
    public void testToString() {
        stopWatch.start();
        stopWatch.stop();
        assertNotNull(stopWatch.toString());
    }

    @Test
    public void testToSplitString() {
        stopWatch.start();
        stopWatch.split();
        assertNotNull(stopWatch.toSplitString());
    }

    @Test(expected = IllegalStateException.class)
    public void testStartTwiceWithoutReset() {
        stopWatch.start();
        stopWatch.start();
    }

    @Test(expected = IllegalStateException.class)
    public void testStopTwice() {
        stopWatch.start();
        stopWatch.stop();
        stopWatch.stop();
    }

    @Test(expected = IllegalStateException.class)
    public void testSplitTwice() {
        stopWatch.start();
        stopWatch.split();
        stopWatch.split();
    }

    @Test(expected = IllegalStateException.class)
    public void testSuspendTwice() {
        stopWatch.start();
        stopWatch.suspend();
        stopWatch.suspend();
    }

    @Test(expected = IllegalStateException.class)
    public void testResumeWithoutSuspend() {
        stopWatch.start();
        stopWatch.resume();
    }
}
```

This test suite covers the following scenarios:
- Initial state of the stopwatch.
- Illegal state exceptions for invalid method calls.
- Normal operation of starting, stopping, splitting, unsplitting, suspending, and resuming.
- String representations of time and split time.
- Edge cases like calling methods in the wrong order or multiple times without resetting.