Certainly! Below is a comprehensive JUnit 4 test suite for the `StopWatch` class. This suite tests all the methods and their expected behaviors, including handling of exceptions for invalid method calls.

```java
import org.apache.commons.lang.time.StopWatch;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class StopWatchTest {

    private StopWatch stopWatch;

    @Before
    public void setUp() {
        stopWatch = new StopWatch();
    }

    @Test
    public void testStartStopWatch() {
        stopWatch.start();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testStartAlreadyStartedStopWatch() {
        stopWatch.start();
        stopWatch.start(); // Should throw IllegalStateException
    }

    @Test
    public void testStopStopWatch() {
        stopWatch.start();
        stopWatch.stop();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testStopWithoutStart() {
        stopWatch.stop(); // Should throw IllegalStateException
    }

    @Test
    public void testResetStopWatch() {
        stopWatch.start();
        stopWatch.stop();
        stopWatch.reset();
        assertEquals(0, stopWatch.getTime());
    }

    @Test
    public void testSplitStopWatch() {
        stopWatch.start();
        stopWatch.split();
        assertTrue(stopWatch.getSplitTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testSplitWithoutStart() {
        stopWatch.split(); // Should throw IllegalStateException
    }

    @Test
    public void testUnsplitStopWatch() {
        stopWatch.start();
        stopWatch.split();
        stopWatch.unsplit();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testUnsplitWithoutSplit() {
        stopWatch.start();
        stopWatch.unsplit(); // Should throw IllegalStateException
    }

    @Test
    public void testSuspendStopWatch() {
        stopWatch.start();
        stopWatch.suspend();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testSuspendWithoutStart() {
        stopWatch.suspend(); // Should throw IllegalStateException
    }

    @Test
    public void testResumeStopWatch() {
        stopWatch.start();
        stopWatch.suspend();
        stopWatch.resume();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testResumeWithoutSuspend() {
        stopWatch.start();
        stopWatch.resume(); // Should throw IllegalStateException
    }

    @Test
    public void testGetTime() {
        assertEquals(0, stopWatch.getTime());
        stopWatch.start();
        assertTrue(stopWatch.getTime() >= 0);
    }

    @Test
    public void testGetSplitTime() {
        stopWatch.start();
        stopWatch.split();
        assertTrue(stopWatch.getSplitTime() >= 0);
    }

    @Test(expected = IllegalStateException.class)
    public void testGetSplitTimeWithoutSplit() {
        stopWatch.getSplitTime(); // Should throw IllegalStateException
    }

    @Test
    public void testToString() {
        stopWatch.start();
        assertNotNull(stopWatch.toString());
    }

    @Test
    public void testToSplitString() {
        stopWatch.start();
        stopWatch.split();
        assertNotNull(stopWatch.toSplitString());
    }

    @Test(expected = IllegalStateException.class)
    public void testToSplitStringWithoutSplit() {
        stopWatch.toSplitString(); // Should throw IllegalStateException
    }
}
```

This test suite covers all the methods in the `StopWatch` class, including edge cases and expected exceptions for invalid operations.