Certainly! Below is a JUnit 4 test suite for the `NumericEntityUnescaper` class. This suite aims to cover various scenarios, including valid and invalid numeric entities, both decimal and hexadecimal, with and without semicolons.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.io.StringWriter;

import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.junit.Before;
import org.junit.Test;

public class NumericEntityUnescaperTest {

    private NumericEntityUnescaper unescaper;

    @Before
    public void setUp() {
        unescaper = new NumericEntityUnescaper();
    }

    @Test
    public void testDecimalEntityWithSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#65;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("A", writer.toString());
        assertEquals(5, result);
    }

    @Test
    public void testDecimalEntityWithoutSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#65";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("A", writer.toString());
        assertEquals(4, result);
    }

    @Test
    public void testHexEntityWithSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#x41;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("A", writer.toString());
        assertEquals(6, result);
    }

    @Test
    public void testHexEntityWithoutSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#x41";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("A", writer.toString());
        assertEquals(5, result);
    }

    @Test
    public void testInvalidEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#xZZ;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("", writer.toString());
        assertEquals(0, result);
    }

    @Test
    public void testNonEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "A";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("", writer.toString());
        assertEquals(0, result);
    }

    @Test
    public void testSurrogatePair() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#128169;"; // Pile of Poo emoji
        int result = unescaper.translate(input, 0, writer);
        assertEquals("\uD83D\uDCA9", writer.toString());
        assertEquals(8, result);
    }

    @Test
    public void testIncompleteEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("", writer.toString());
        assertEquals(0, result);
    }

    @Test
    public void testEntityWithNonNumericContent() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#abc;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals("", writer.toString());
        assertEquals(0, result);
    }
}
```

This test suite covers:

- Decimal and hexadecimal entities, both with and without semicolons.
- Invalid entities and non-entity strings.
- Surrogate pairs for characters outside the Basic Multilingual Plane.
- Edge cases like incomplete entities and entities with non-numeric content.