Certainly! Below is a JUnit 4 test suite designed to comprehensively test the `NumericEntityUnescaper` class. This suite includes tests for various scenarios, such as valid and invalid numeric entities, hexadecimal and decimal entities, and entities with and without a semicolon.

```java
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.assertEquals;

public class NumericEntityUnescaperTest {

    private NumericEntityUnescaper unescaper;

    @Before
    public void setUp() {
        unescaper = new NumericEntityUnescaper();
    }

    @Test
    public void testDecimalEntityWithSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#65;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals(5, result);
        assertEquals("A", writer.toString());
    }

    @Test
    public void testDecimalEntityWithoutSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#65";
        int result = unescaper.translate(input, 0, writer);
        assertEquals(4, result);
        assertEquals("A", writer.toString());
    }

    @Test
    public void testHexEntityWithSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#x41;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals(6, result);
        assertEquals("A", writer.toString());
    }

    @Test
    public void testHexEntityWithoutSemicolon() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#x41";
        int result = unescaper.translate(input, 0, writer);
        assertEquals(5, result);
        assertEquals("A", writer.toString());
    }

    @Test
    public void testInvalidEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#xyz;";
        int result = unescaper.translate(input, 0, writer);
        assertEquals(0, result);
        assertEquals("", writer.toString());
    }

    @Test
    public void testNonEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "Hello World";
        int result = unescaper.translate(input, 0, writer);
        assertEquals(0, result);
        assertEquals("", writer.toString());
    }

    @Test
    public void testHighCodepointEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#128512;"; // ðŸ˜€ emoji
        int result = unescaper.translate(input, 0, writer);
        assertEquals(8, result);
        assertEquals("\uD83D\uDE00", writer.toString());
    }

    @Test
    public void testHighCodepointHexEntity() throws IOException {
        StringWriter writer = new StringWriter();
        String input = "&#x1F600;"; // ðŸ˜€ emoji
        int result = unescaper.translate(input, 0, writer);
        assertEquals(9, result);
        assertEquals("\uD83D\uDE00", writer.toString());
    }
}
```

### Explanation:
- **Setup**: A `NumericEntityUnescaper` instance is created before each test.
- **Tests**:
  - **Decimal and Hexadecimal Entities**: Tests are included for both decimal and hexadecimal numeric entities, with and without semicolons.
  - **Invalid Entities**: Tests for invalid numeric entities to ensure they are not translated.
  - **Non-Entity Strings**: Tests to ensure strings without entities are not altered.
  - **High Codepoint Entities**: Tests for entities representing characters outside the Basic Multilingual Plane (BMP), such as emojis.

This suite aims to cover a wide range of scenarios to ensure the `NumericEntityUnescaper` class functions correctly.