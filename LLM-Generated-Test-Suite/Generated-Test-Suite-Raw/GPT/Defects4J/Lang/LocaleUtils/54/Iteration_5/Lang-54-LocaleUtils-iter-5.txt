```java
import org.apache.commons.lang.LocaleUtils;
import org.junit.Test;
import org.junit.BeforeClass;

import java.util.List;
import java.util.Locale;
import java.util.Set;

import static org.junit.Assert.*;

public class LocaleUtilsTest {

    private static Locale localeEN;
    private static Locale localeEN_GB;
    private static Locale localeFR_CA;
    private static Locale localeFR_CA_variant;

    @BeforeClass
    public static void setUp() {
        localeEN = new Locale("en", "");
        localeEN_GB = new Locale("en", "GB");
        localeFR_CA = new Locale("fr", "CA");
        localeFR_CA_variant = new Locale("fr", "CA", "variant");
    }

    @Test
    public void testToLocale_ValidInputs() {
        assertEquals(localeEN, LocaleUtils.toLocale("en"));
        assertEquals(localeEN_GB, LocaleUtils.toLocale("en_GB"));
        assertEquals(localeFR_CA_variant, LocaleUtils.toLocale("fr_CA_variant"));
    }

    @Test
    public void testToLocale_NullInput() {
        assertNull(LocaleUtils.toLocale(null));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat1() {
        LocaleUtils.toLocale("e");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat2() {
        LocaleUtils.toLocale("enGB");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat3() {
        LocaleUtils.toLocale("en_gb");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat4() {
        LocaleUtils.toLocale("en_");
    }

    @Test
    public void testLocaleLookupList_SingleLocale() {
        List<Locale> list = LocaleUtils.localeLookupList(localeFR_CA_variant);
        assertEquals(3, list.size());
        assertEquals(localeFR_CA_variant, list.get(0));
        assertEquals(localeFR_CA, list.get(1));
        assertEquals(new Locale("fr", ""), list.get(2));
    }

    @Test
    public void testLocaleLookupList_LocaleWithDefault() {
        List<Locale> list = LocaleUtils.localeLookupList(localeFR_CA_variant, localeEN);
        assertEquals(4, list.size());
        assertEquals(localeFR_CA_variant, list.get(0));
        assertEquals(localeFR_CA, list.get(1));
        assertEquals(new Locale("fr", ""), list.get(2));
        assertEquals(localeEN, list.get(3));
    }

    @Test
    public void testLocaleLookupList_NullLocale() {
        List<Locale> list = LocaleUtils.localeLookupList(null, localeEN);
        assertEquals(1, list.size());
        assertEquals(localeEN, list.get(0));
    }

    @Test
    public void testAvailableLocaleList() {
        List<Locale> locales = LocaleUtils.availableLocaleList();
        assertNotNull(locales);
        assertTrue(locales.contains(Locale.US));
    }

    @Test
    public void testAvailableLocaleSet() {
        Set<Locale> locales = LocaleUtils.availableLocaleSet();
        assertNotNull(locales);
        assertTrue(locales.contains(Locale.US));
    }

    @Test
    public void testIsAvailableLocale() {
        assertTrue(LocaleUtils.isAvailableLocale(Locale.US));
        assertFalse(LocaleUtils.isAvailableLocale(new Locale("xx", "YY")));
    }

    @Test
    public void testLanguagesByCountry() {
        List<Locale> languages = LocaleUtils.languagesByCountry("US");
        assertNotNull(languages);
        assertTrue(languages.contains(new Locale("en", "US")));
    }

    @Test
    public void testLanguagesByCountry_NullCountry() {
        List<Locale> languages = LocaleUtils.languagesByCountry(null);
        assertNotNull(languages);
        assertTrue(languages.isEmpty());
    }

    @Test
    public void testCountriesByLanguage() {
        List<Locale> countries = LocaleUtils.countriesByLanguage("en");
        assertNotNull(countries);
        assertTrue(countries.contains(new Locale("en", "US")));
    }

    @Test
    public void testCountriesByLanguage_NullLanguage() {
        List<Locale> countries = LocaleUtils.countriesByLanguage(null);
        assertNotNull(countries);
        assertTrue(countries.isEmpty());
    }
}
```
This JUnit 4 test suite covers all the methods in the `LocaleUtils` class, ensuring that they behave as expected under various conditions. Each test method is designed to verify a specific aspect of the class's functionality, including handling of valid and invalid inputs, null inputs, and expected outputs.