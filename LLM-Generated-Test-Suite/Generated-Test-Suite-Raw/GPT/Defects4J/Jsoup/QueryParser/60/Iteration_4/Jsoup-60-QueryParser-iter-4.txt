To create a comprehensive JUnit 4 test suite for the `QueryParser` class, we need to test each method and ensure that it behaves as expected. This involves testing the parsing of different CSS selectors and ensuring that the correct `Evaluator` objects are created. Below is a test suite that covers various aspects of the `QueryParser` class:

```java
import org.jsoup.select.QueryParser;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.jsoup.parser.TokenQueue;
import org.jsoup.helper.Validate;
import org.junit.Test;
import static org.junit.Assert.*;

public class QueryParserTest {

    @Test
    public void testParseSimpleTag() {
        Evaluator evaluator = QueryParser.parse("div");
        assertTrue(evaluator instanceof Evaluator.Tag);
    }

    @Test
    public void testParseId() {
        Evaluator evaluator = QueryParser.parse("#myId");
        assertTrue(evaluator instanceof Evaluator.Id);
    }

    @Test
    public void testParseClass() {
        Evaluator evaluator = QueryParser.parse(".myClass");
        assertTrue(evaluator instanceof Evaluator.Class);
    }

    @Test
    public void testParseAttribute() {
        Evaluator evaluator = QueryParser.parse("[href]");
        assertTrue(evaluator instanceof Evaluator.Attribute);
    }

    @Test
    public void testParseAttributeWithValue() {
        Evaluator evaluator = QueryParser.parse("[href='example.com']");
        assertTrue(evaluator instanceof Evaluator.AttributeWithValue);
    }

    @Test
    public void testParseAttributeWithValueNot() {
        Evaluator evaluator = QueryParser.parse("[href!='example.com']");
        assertTrue(evaluator instanceof Evaluator.AttributeWithValueNot);
    }

    @Test
    public void testParseAttributeWithValueStarting() {
        Evaluator evaluator = QueryParser.parse("[href^='http']");
        assertTrue(evaluator instanceof Evaluator.AttributeWithValueStarting);
    }

    @Test
    public void testParseAttributeWithValueEnding() {
        Evaluator evaluator = QueryParser.parse("[href$='.com']");
        assertTrue(evaluator instanceof Evaluator.AttributeWithValueEnding);
    }

    @Test
    public void testParseAttributeWithValueContaining() {
        Evaluator evaluator = QueryParser.parse("[href*='example']");
        assertTrue(evaluator instanceof Evaluator.AttributeWithValueContaining);
    }

    @Test
    public void testParseAttributeWithValueMatching() {
        Evaluator evaluator = QueryParser.parse("[href~='regex']");
        assertTrue(evaluator instanceof Evaluator.AttributeWithValueMatching);
    }

    @Test
    public void testParseAllElements() {
        Evaluator evaluator = QueryParser.parse("*");
        assertTrue(evaluator instanceof Evaluator.AllElements);
    }

    @Test
    public void testParseIndexLessThan() {
        Evaluator evaluator = QueryParser.parse(":lt(3)");
        assertTrue(evaluator instanceof Evaluator.IndexLessThan);
    }

    @Test
    public void testParseIndexGreaterThan() {
        Evaluator evaluator = QueryParser.parse(":gt(3)");
        assertTrue(evaluator instanceof Evaluator.IndexGreaterThan);
    }

    @Test
    public void testParseIndexEquals() {
        Evaluator evaluator = QueryParser.parse(":eq(3)");
        assertTrue(evaluator instanceof Evaluator.IndexEquals);
    }

    @Test
    public void testParseNthChild() {
        Evaluator evaluator = QueryParser.parse(":nth-child(2n+1)");
        assertTrue(evaluator instanceof Evaluator.IsNthChild);
    }

    @Test
    public void testParseNthLastChild() {
        Evaluator evaluator = QueryParser.parse(":nth-last-child(2n+1)");
        assertTrue(evaluator instanceof Evaluator.IsNthLastChild);
    }

    @Test
    public void testParseNthOfType() {
        Evaluator evaluator = QueryParser.parse(":nth-of-type(2n+1)");
        assertTrue(evaluator instanceof Evaluator.IsNthOfType);
    }

    @Test
    public void testParseNthLastOfType() {
        Evaluator evaluator = QueryParser.parse(":nth-last-of-type(2n+1)");
        assertTrue(evaluator instanceof Evaluator.IsNthLastOfType);
    }

    @Test
    public void testParseFirstChild() {
        Evaluator evaluator = QueryParser.parse(":first-child");
        assertTrue(evaluator instanceof Evaluator.IsFirstChild);
    }

    @Test
    public void testParseLastChild() {
        Evaluator evaluator = QueryParser.parse(":last-child");
        assertTrue(evaluator instanceof Evaluator.IsLastChild);
    }

    @Test
    public void testParseFirstOfType() {
        Evaluator evaluator = QueryParser.parse(":first-of-type");
        assertTrue(evaluator instanceof Evaluator.IsFirstOfType);
    }

    @Test
    public void testParseLastOfType() {
        Evaluator evaluator = QueryParser.parse(":last-of-type");
        assertTrue(evaluator instanceof Evaluator.IsLastOfType);
    }

    @Test
    public void testParseOnlyChild() {
        Evaluator evaluator = QueryParser.parse(":only-child");
        assertTrue(evaluator instanceof Evaluator.IsOnlyChild);
    }

    @Test
    public void testParseOnlyOfType() {
        Evaluator evaluator = QueryParser.parse(":only-of-type");
        assertTrue(evaluator instanceof Evaluator.IsOnlyOfType);
    }

    @Test
    public void testParseEmpty() {
        Evaluator evaluator = QueryParser.parse(":empty");
        assertTrue(evaluator instanceof Evaluator.IsEmpty);
    }

    @Test
    public void testParseRoot() {
        Evaluator evaluator = QueryParser.parse(":root");
        assertTrue(evaluator instanceof Evaluator.IsRoot);
    }

    @Test
    public void testParseHas() {
        Evaluator evaluator = QueryParser.parse(":has(div)");
        assertTrue(evaluator instanceof StructuralEvaluator.Has);
    }

    @Test
    public void testParseContains() {
        Evaluator evaluator = QueryParser.parse(":contains(text)");
        assertTrue(evaluator instanceof Evaluator.ContainsText);
    }

    @Test
    public void testParseContainsOwn() {
        Evaluator evaluator = QueryParser.parse(":containsOwn(text)");
        assertTrue(evaluator instanceof Evaluator.ContainsOwnText);
    }

    @Test
    public void testParseContainsData() {
        Evaluator evaluator = QueryParser.parse(":containsData(data)");
        assertTrue(evaluator instanceof Evaluator.ContainsData);
    }

    @Test
    public void testParseMatches() {
        Evaluator evaluator = QueryParser.parse(":matches(regex)");
        assertTrue(evaluator instanceof Evaluator.Matches);
    }

    @Test
    public void testParseMatchesOwn() {
        Evaluator evaluator = QueryParser.parse(":matchesOwn(regex)");
        assertTrue(evaluator instanceof Evaluator.MatchesOwn);
    }

    @Test
    public void testParseNot() {
        Evaluator evaluator = QueryParser.parse(":not(div)");
        assertTrue(evaluator instanceof StructuralEvaluator.Not);
    }

    @Test(expected = Selector.SelectorParseException.class)
    public void testParseInvalidQuery() {
        QueryParser.parse(":invalid");
    }
}
```

### Explanation:
- Each test method is designed to test a specific feature or method of the `QueryParser` class.
- The `assertTrue` checks ensure that the correct type of `Evaluator` is returned for each CSS selector.
- The `testParseInvalidQuery` method checks that an invalid query throws a `Selector.SelectorParseException`.
- This suite covers a wide range of CSS selectors and ensures that the `QueryParser` class can handle them correctly.