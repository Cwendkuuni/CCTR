Certainly! Below is a comprehensive JUnit 4 test suite for the `StringUtil` class. This suite tests all the methods provided in the class.

```java
import org.junit.Test;
import org.jsoup.helper.StringUtil;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

import static org.junit.Assert.*;

public class StringUtilTest {

    @Test
    public void testJoinCollection() {
        Collection<String> strings = Arrays.asList("a", "b", "c");
        assertEquals("a,b,c", StringUtil.join(strings, ","));
        assertEquals("abc", StringUtil.join(strings, ""));
        assertEquals("", StringUtil.join(Collections.emptyList(), ","));
    }

    @Test
    public void testJoinIterator() {
        Collection<String> strings = Arrays.asList("a", "b", "c");
        assertEquals("a,b,c", StringUtil.join(strings.iterator(), ","));
        assertEquals("abc", StringUtil.join(strings.iterator(), ""));
        assertEquals("", StringUtil.join(Collections.emptyList().iterator(), ","));
    }

    @Test
    public void testJoinArray() {
        String[] strings = {"a", "b", "c"};
        assertEquals("a,b,c", StringUtil.join(strings, ","));
        assertEquals("abc", StringUtil.join(strings, ""));
        assertEquals("", StringUtil.join(new String[]{}, ","));
    }

    @Test
    public void testPadding() {
        assertEquals("", StringUtil.padding(0));
        assertEquals(" ", StringUtil.padding(1));
        assertEquals("     ", StringUtil.padding(5));
        assertEquals("                    ", StringUtil.padding(20));
        assertEquals("                    ", StringUtil.padding(21));
        assertEquals("                    ", StringUtil.padding(22));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testPaddingNegativeWidth() {
        StringUtil.padding(-1);
    }

    @Test
    public void testIsBlank() {
        assertTrue(StringUtil.isBlank(null));
        assertTrue(StringUtil.isBlank(""));
        assertTrue(StringUtil.isBlank(" "));
        assertTrue(StringUtil.isBlank("\n"));
        assertFalse(StringUtil.isBlank("a"));
        assertFalse(StringUtil.isBlank(" a "));
    }

    @Test
    public void testIsNumeric() {
        assertFalse(StringUtil.isNumeric(null));
        assertFalse(StringUtil.isNumeric(""));
        assertTrue(StringUtil.isNumeric("123"));
        assertFalse(StringUtil.isNumeric("123a"));
        assertFalse(StringUtil.isNumeric("a123"));
    }

    @Test
    public void testIsWhitespace() {
        assertTrue(StringUtil.isWhitespace(' '));
        assertTrue(StringUtil.isWhitespace('\t'));
        assertTrue(StringUtil.isWhitespace('\n'));
        assertFalse(StringUtil.isWhitespace('a'));
    }

    @Test
    public void testIsActuallyWhitespace() {
        assertTrue(StringUtil.isActuallyWhitespace(' '));
        assertTrue(StringUtil.isActuallyWhitespace('\t'));
        assertTrue(StringUtil.isActuallyWhitespace('\n'));
        assertTrue(StringUtil.isActuallyWhitespace(160)); // non-breaking space
        assertFalse(StringUtil.isActuallyWhitespace('a'));
    }

    @Test
    public void testNormaliseWhitespace() {
        assertEquals("a b c", StringUtil.normaliseWhitespace("a  b   c"));
        assertEquals("a b c", StringUtil.normaliseWhitespace("a\nb\tc"));
        assertEquals("", StringUtil.normaliseWhitespace(""));
    }

    @Test
    public void testAppendNormalisedWhitespace() {
        StringBuilder sb = new StringBuilder();
        StringUtil.appendNormalisedWhitespace(sb, "a  b   c", false);
        assertEquals("a b c", sb.toString());

        sb.setLength(0);
        StringUtil.appendNormalisedWhitespace(sb, " a  b   c", true);
        assertEquals("a b c", sb.toString());
    }

    @Test
    public void testIn() {
        assertTrue(StringUtil.in("a", "a", "b", "c"));
        assertFalse(StringUtil.in("d", "a", "b", "c"));
    }

    @Test
    public void testInSorted() {
        String[] haystack = {"a", "b", "c"};
        assertTrue(StringUtil.inSorted("a", haystack));
        assertFalse(StringUtil.inSorted("d", haystack));
    }

    @Test
    public void testResolveURL() throws MalformedURLException {
        URL base = new URL("http://example.com/");
        assertEquals(new URL("http://example.com/path"), StringUtil.resolve(base, "/path"));
        assertEquals(new URL("http://example.com/?query"), StringUtil.resolve(base, "?query"));
    }

    @Test
    public void testResolveString() {
        assertEquals("http://example.com/path", StringUtil.resolve("http://example.com/", "/path"));
        assertEquals("", StringUtil.resolve("invalid-url", "/path"));
    }

    @Test
    public void testStringBuilder() {
        StringBuilder sb = StringUtil.stringBuilder();
        assertNotNull(sb);
        assertEquals(0, sb.length());
    }
}
```

This test suite covers all the methods in the `StringUtil` class, ensuring that they behave as expected under various conditions.