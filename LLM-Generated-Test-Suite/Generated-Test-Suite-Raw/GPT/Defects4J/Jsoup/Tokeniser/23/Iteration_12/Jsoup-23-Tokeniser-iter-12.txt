```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Token;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TokeniserTest {

    private CharacterReader mockReader;
    private ParseErrorList mockErrors;
    private Tokeniser tokeniser;

    @Before
    public void setUp() {
        mockReader = mock(CharacterReader.class);
        mockErrors = mock(ParseErrorList.class);
        tokeniser = new Tokeniser(mockReader, mockErrors);
    }

    @Test
    public void testReadWithSelfClosingFlagNotAcknowledged() {
        tokeniser.acknowledgeSelfClosingFlag();
        tokeniser.emit(new Token.StartTag());
        tokeniser.read();
        verify(mockErrors, times(1)).add(any());
    }

    @Test
    public void testEmitToken() {
        Token token = new Token.StartTag();
        tokeniser.emit(token);
        assertEquals(token, tokeniser.read());
    }

    @Test
    public void testEmitString() {
        String str = "test";
        tokeniser.emit(str);
        Token token = tokeniser.read();
        assertTrue(token instanceof Token.Character);
        assertEquals(str, ((Token.Character) token).getData());
    }

    @Test
    public void testEmitChar() {
        char c = 'a';
        tokeniser.emit(c);
        Token token = tokeniser.read();
        assertTrue(token instanceof Token.Character);
        assertEquals(String.valueOf(c), ((Token.Character) token).getData());
    }

    @Test
    public void testGetState() {
        assertEquals(TokeniserState.Data, tokeniser.getState());
    }

    @Test
    public void testTransition() {
        tokeniser.transition(TokeniserState.TagOpen);
        assertEquals(TokeniserState.TagOpen, tokeniser.getState());
    }

    @Test
    public void testAdvanceTransition() {
        tokeniser.advanceTransition(TokeniserState.TagOpen);
        verify(mockReader, times(1)).advance();
        assertEquals(TokeniserState.TagOpen, tokeniser.getState());
    }

    @Test
    public void testAcknowledgeSelfClosingFlag() {
        tokeniser.acknowledgeSelfClosingFlag();
        tokeniser.emit(new Token.StartTag());
        tokeniser.read();
        verify(mockErrors, never()).add(any());
    }

    @Test
    public void testConsumeCharacterReference() {
        when(mockReader.isEmpty()).thenReturn(false);
        when(mockReader.current()).thenReturn('a');
        when(mockReader.matchesAny('\t', '\n', '\f', ' ', '<', '&')).thenReturn(false);
        when(mockReader.consumeLetterSequence()).thenReturn("amp");
        when(mockReader.matches(';')).thenReturn(true);
        when(mockReader.matchConsume(";")).thenReturn(true);
        when(mockReader.matchesLetter()).thenReturn(false);
        when(mockReader.matchesDigit()).thenReturn(false);
        when(mockReader.matchesAny('=', '-', '_')).thenReturn(false);

        Character result = tokeniser.consumeCharacterReference(null, false);
        assertNotNull(result);
    }

    @Test
    public void testCreateTagPending() {
        Token.Tag tag = tokeniser.createTagPending(true);
        assertTrue(tag instanceof Token.StartTag);
    }

    @Test
    public void testEmitTagPending() {
        Token.Tag tag = tokeniser.createTagPending(true);
        tokeniser.emitTagPending();
        assertEquals(tag, tokeniser.read());
    }

    @Test
    public void testCreateCommentPending() {
        tokeniser.createCommentPending();
        assertNotNull(tokeniser.commentPending);
    }

    @Test
    public void testEmitCommentPending() {
        tokeniser.createCommentPending();
        tokeniser.emitCommentPending();
        assertEquals(tokeniser.commentPending, tokeniser.read());
    }

    @Test
    public void testCreateDoctypePending() {
        tokeniser.createDoctypePending();
        assertNotNull(tokeniser.doctypePending);
    }

    @Test
    public void testEmitDoctypePending() {
        tokeniser.createDoctypePending();
        tokeniser.emitDoctypePending();
        assertEquals(tokeniser.doctypePending, tokeniser.read());
    }

    @Test
    public void testCreateTempBuffer() {
        tokeniser.createTempBuffer();
        assertNotNull(tokeniser.dataBuffer);
    }

    @Test
    public void testIsAppropriateEndTagToken() {
        Token.StartTag startTag = new Token.StartTag();
        startTag.tagName = "test";
        tokeniser.emit(startTag);
        tokeniser.createTagPending(false);
        tokeniser.tagPending.tagName = "test";
        assertTrue(tokeniser.isAppropriateEndTagToken());
    }

    @Test
    public void testAppropriateEndTagName() {
        Token.StartTag startTag = new Token.StartTag();
        startTag.tagName = "test";
        tokeniser.emit(startTag);
        assertEquals("test", tokeniser.appropriateEndTagName());
    }

    @Test
    public void testError() {
        tokeniser.error(TokeniserState.Data);
        verify(mockErrors, times(1)).add(any());
    }

    @Test
    public void testEofError() {
        tokeniser.eofError(TokeniserState.Data);
        verify(mockErrors, times(1)).add(any());
    }

    @Test
    public void testCharacterReferenceError() {
        tokeniser.characterReferenceError("test");
        verify(mockErrors, times(1)).add(any());
    }

    @Test
    public void testCurrentNodeInHtmlNS() {
        assertTrue(tokeniser.currentNodeInHtmlNS());
    }
}
```