Certainly! Below is a JUnit 4 test suite for the `Entities` class. This suite aims to comprehensively test the methods provided in the class.

```java
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Entities.EscapeMode;
import org.junit.BeforeClass;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Map;

import static org.junit.Assert.*;

public class EntitiesTest {

    private static CharsetEncoder encoder;

    @BeforeClass
    public static void setUp() {
        encoder = StandardCharsets.UTF_8.newEncoder();
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("nonexistent"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("nonexistent"));
    }

    @Test
    public void testEscapeXhtmlMode() {
        String input = "<&>";
        String expected = "&lt;&amp;&gt;";
        String result = Entities.escape(input, encoder, EscapeMode.xhtml);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeBaseMode() {
        String input = "<&>";
        String expected = "&lt;&amp;&gt;";
        String result = Entities.escape(input, encoder, EscapeMode.base);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeExtendedMode() {
        String input = "<&>";
        String expected = "&lt;&amp;&gt;";
        String result = Entities.escape(input, encoder, EscapeMode.extended);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescape() {
        String input = "&lt;&amp;&gt;";
        String expected = "<&>";
        String result = Entities.unescape(input);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescapeStrict() {
        String input = "&lt;&amp;&gt;";
        String expected = "<&>";
        String result = Entities.unescape(input, true);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescapeNonStrict() {
        String input = "&lt&amplt;";
        String expected = "<&<";
        String result = Entities.unescape(input, false);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeWithNonEncodableCharacter() {
        String input = "Hello \uD83D\uDE00"; // includes a smiley face emoji
        String expected = "Hello &#128512;";
        String result = Entities.escape(input, encoder, EscapeMode.extended);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeWithEncodableCharacter() {
        String input = "Hello World!";
        String expected = "Hello World!";
        String result = Entities.escape(input, encoder, EscapeMode.extended);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeModeMaps() {
        Map<Character, String> xhtmlMap = EscapeMode.xhtml.getMap();
        assertTrue(xhtmlMap.containsKey('<'));
        assertEquals("lt", xhtmlMap.get('<'));

        Map<Character, String> baseMap = EscapeMode.base.getMap();
        assertTrue(baseMap.containsKey('<'));
        assertEquals("lt", baseMap.get('<'));

        Map<Character, String> extendedMap = EscapeMode.extended.getMap();
        assertTrue(extendedMap.containsKey('<'));
        assertEquals("lt", extendedMap.get('<'));
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `CharsetEncoder` for UTF-8, which is used in the escape tests.
- **Test Methods**:
  - `testIsNamedEntity`: Tests the `isNamedEntity` method with known and unknown entities.
  - `testGetCharacterByName`: Tests the `getCharacterByName` method with known and unknown entities.
  - `testEscapeXhtmlMode`, `testEscapeBaseMode`, `testEscapeExtendedMode`: Test the `escape` method with different escape modes.
  - `testUnescape`, `testUnescapeStrict`, `testUnescapeNonStrict`: Test the `unescape` method with strict and non-strict modes.
  - `testEscapeWithNonEncodableCharacter`, `testEscapeWithEncodableCharacter`: Test the `escape` method with characters that are and aren't encodable.
  - `testEscapeModeMaps`: Verifies that the escape mode maps contain expected mappings.

This test suite should provide comprehensive coverage for the `Entities` class methods.