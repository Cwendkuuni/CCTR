To create a comprehensive JUnit 4 test suite for the `Entities` class, we need to test all public and static methods, as well as the behavior of the `EscapeMode` enum. Below is a test suite that covers these aspects:

```java
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Entities.EscapeMode;
import org.jsoup.nodes.Document;
import org.junit.BeforeClass;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Map;

import static org.junit.Assert.*;

public class EntitiesTest {

    private static CharsetEncoder asciiEncoder;

    @BeforeClass
    public static void setUp() {
        asciiEncoder = Charset.forName("US-ASCII").newEncoder();
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("nonexistent"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("nonexistent"));
    }

    @Test
    public void testEscapeXhtmlMode() {
        String input = "<&>";
        String expected = "&lt;&amp;&gt;";
        String result = Entities.escape(input, asciiEncoder, EscapeMode.xhtml);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeBaseMode() {
        String input = "<&>";
        String expected = "&lt;&amp;&gt;";
        String result = Entities.escape(input, asciiEncoder, EscapeMode.base);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeExtendedMode() {
        String input = "<&>";
        String expected = "&lt;&amp;&gt;";
        String result = Entities.escape(input, asciiEncoder, EscapeMode.extended);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescape() {
        String input = "&lt;&amp;&gt;";
        String expected = "<&>";
        String result = Entities.unescape(input);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescapeStrict() {
        String input = "&lt;&amp;&gt;";
        String expected = "<&>";
        String result = Entities.unescape(input, true);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescapeNonStrict() {
        String input = "&lt&amp&gt";
        String expected = "<&>";
        String result = Entities.unescape(input, false);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeModeGetMap() {
        Map<Character, String> xhtmlMap = EscapeMode.xhtml.getMap();
        assertNotNull(xhtmlMap);
        assertTrue(xhtmlMap.containsKey('<'));
        assertEquals("lt", xhtmlMap.get('<'));

        Map<Character, String> baseMap = EscapeMode.base.getMap();
        assertNotNull(baseMap);
        assertTrue(baseMap.containsKey('<'));
        assertEquals("lt", baseMap.get('<'));

        Map<Character, String> extendedMap = EscapeMode.extended.getMap();
        assertNotNull(extendedMap);
        assertTrue(extendedMap.containsKey('<'));
        assertEquals("lt", extendedMap.get('<'));
    }
}
```

### Explanation:
- **Setup**: We initialize a `CharsetEncoder` for ASCII encoding, which is used in the escape tests.
- **Test Methods**:
  - `testIsNamedEntity`: Verifies if known entities are correctly identified.
  - `testGetCharacterByName`: Checks if the correct character is returned for known entity names.
  - `testEscapeXhtmlMode`, `testEscapeBaseMode`, `testEscapeExtendedMode`: Test the `escape` method for different `EscapeMode` values.
  - `testUnescape`, `testUnescapeStrict`, `testUnescapeNonStrict`: Test the `unescape` method with both strict and non-strict modes.
  - `testEscapeModeGetMap`: Ensures that the `getMap` method of `EscapeMode` returns the correct mappings.

This test suite should provide comprehensive coverage for the `Entities` class.