Certainly! Below is a JUnit 4 test suite for the `Entities` class. This suite tests the public methods of the class, ensuring that they behave as expected.

```java
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Document;
import org.junit.Before;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Map;

import static org.junit.Assert.*;

public class EntitiesTest {

    private Document.OutputSettings outputSettings;

    @Before
    public void setUp() {
        outputSettings = new Document.OutputSettings();
        outputSettings.charset(Charset.forName("UTF-8"));
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("nonexistent"));
    }

    @Test
    public void testIsBaseNamedEntity() {
        assertTrue(Entities.isBaseNamedEntity("lt"));
        assertTrue(Entities.isBaseNamedEntity("amp"));
        assertFalse(Entities.isBaseNamedEntity("nonexistent"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("nonexistent"));
    }

    @Test
    public void testEscape() {
        String input = "<div>Sample & text</div>";
        String expected = "&lt;div&gt;Sample &amp; text&lt;/div&gt;";
        String result = Entities.escape(input, outputSettings);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescape() {
        String input = "&lt;div&gt;Sample &amp; text&lt;/div&gt;";
        String expected = "<div>Sample & text</div>";
        String result = Entities.unescape(input);
        assertEquals(expected, result);
    }

    @Test
    public void testUnescapeStrict() {
        String input = "&lt;div&gt;Sample &amp; text&lt;/div&gt;";
        String expected = "<div>Sample & text</div>";
        String result = Entities.unescape(input, true);
        assertEquals(expected, result);
    }

    @Test
    public void testEscapeModeGetMap() {
        Map<Character, String> xhtmlMap = Entities.EscapeMode.xhtml.getMap();
        assertNotNull(xhtmlMap);
        assertTrue(xhtmlMap.containsKey('<'));
        assertEquals("lt", xhtmlMap.get('<'));

        Map<Character, String> baseMap = Entities.EscapeMode.base.getMap();
        assertNotNull(baseMap);
        assertTrue(baseMap.containsKey('<'));
        assertEquals("lt", baseMap.get('<'));

        Map<Character, String> extendedMap = Entities.EscapeMode.extended.getMap();
        assertNotNull(extendedMap);
        assertTrue(extendedMap.containsKey('<'));
        assertEquals("lt", extendedMap.get('<'));
    }

    @Test
    public void testCanEncode() {
        CharsetEncoder encoder = outputSettings.encoder();
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, 'a', encoder));
        assertTrue(Entities.canEncode(Entities.CoreCharset.ascii, 'a', encoder));
        assertFalse(Entities.canEncode(Entities.CoreCharset.ascii, 'â‚¬', encoder));
    }
}
```

### Explanation:
- **Setup**: A `setUp` method initializes a `Document.OutputSettings` object with UTF-8 encoding, which is used in the tests.
- **Test Methods**:
  - `testIsNamedEntity`: Verifies if known entities are correctly identified.
  - `testIsBaseNamedEntity`: Checks if base entities are correctly identified.
  - `testGetCharacterByName`: Tests retrieval of characters by their entity names.
  - `testEscape`: Ensures that strings are correctly escaped.
  - `testUnescape`: Ensures that strings are correctly unescaped.
  - `testUnescapeStrict`: Tests strict unescaping behavior.
  - `testEscapeModeGetMap`: Verifies that the escape mode maps are correctly initialized and accessible.
  - `testCanEncode`: Tests the `canEncode` method for different character sets.

This test suite covers the main functionalities provided by the `Entities` class.