Certainly! Below is a JUnit 4 test suite that comprehensively tests the methods in the `Entities` class. This test suite assumes that the `entities-base.properties` and `entities-full.properties` files are correctly set up and accessible in the classpath.

```java
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Document;
import org.junit.BeforeClass;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Map;

import static org.junit.Assert.*;

public class EntitiesTest {

    private static Entities.EscapeMode xhtmlEscapeMode;
    private static Entities.EscapeMode baseEscapeMode;
    private static Entities.EscapeMode extendedEscapeMode;

    @BeforeClass
    public static void setUp() {
        xhtmlEscapeMode = Entities.EscapeMode.xhtml;
        baseEscapeMode = Entities.EscapeMode.base;
        extendedEscapeMode = Entities.EscapeMode.extended;
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("nonexistent"));
    }

    @Test
    public void testIsBaseNamedEntity() {
        assertTrue(Entities.isBaseNamedEntity("lt"));
        assertTrue(Entities.isBaseNamedEntity("amp"));
        assertFalse(Entities.isBaseNamedEntity("nonexistent"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("nonexistent"));
    }

    @Test
    public void testEscape() {
        Document.OutputSettings out = new Document.OutputSettings();
        out.escapeMode(Entities.EscapeMode.base);
        out.charset(Charset.forName("UTF-8"));

        String input = "<div>Sample & text</div>";
        String expected = "&lt;div&gt;Sample &amp; text&lt;/div&gt;";
        assertEquals(expected, Entities.escape(input, out));
    }

    @Test
    public void testUnescape() {
        String input = "&lt;div&gt;Sample &amp; text&lt;/div&gt;";
        String expected = "<div>Sample & text</div>";
        assertEquals(expected, Entities.unescape(input));
    }

    @Test
    public void testUnescapeStrict() {
        String input = "&lt;div&gt;Sample &amp; text&lt;/div&gt;";
        String expected = "<div>Sample & text</div>";
        assertEquals(expected, Entities.unescape(input, true));
    }

    @Test
    public void testEscapeModeGetMap() {
        Map<Character, String> xhtmlMap = xhtmlEscapeMode.getMap();
        assertNotNull(xhtmlMap);
        assertTrue(xhtmlMap.containsKey('<'));
        assertEquals("lt", xhtmlMap.get('<'));

        Map<Character, String> baseMap = baseEscapeMode.getMap();
        assertNotNull(baseMap);
        assertTrue(baseMap.containsKey('<'));
        assertEquals("lt", baseMap.get('<'));

        Map<Character, String> extendedMap = extendedEscapeMode.getMap();
        assertNotNull(extendedMap);
        assertTrue(extendedMap.containsKey('<'));
        assertEquals("lt", extendedMap.get('<'));
    }

    @Test
    public void testCanEncode() {
        CharsetEncoder encoder = Charset.forName("US-ASCII").newEncoder();
        assertTrue(Entities.canEncode(Entities.CoreCharset.ascii, 'A', encoder));
        assertFalse(Entities.canEncode(Entities.CoreCharset.ascii, 'é', encoder));

        encoder = Charset.forName("UTF-8").newEncoder();
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, 'A', encoder));
        assertTrue(Entities.canEncode(Entities.CoreCharset.utf, 'é', encoder));
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes the `EscapeMode` enums for use in the tests.
- **Test Methods**:
  - `testIsNamedEntity`: Verifies if known entities are correctly identified.
  - `testIsBaseNamedEntity`: Checks if base entities are correctly identified.
  - `testGetCharacterByName`: Tests retrieval of character values by entity name.
  - `testEscape`: Tests the `escape` method with a sample HTML string.
  - `testUnescape`: Tests the `unescape` method with a sample escaped string.
  - `testUnescapeStrict`: Tests the `unescape` method in strict mode.
  - `testEscapeModeGetMap`: Verifies that the escape mode maps are correctly initialized and accessible.
  - `testCanEncode`: Tests the `canEncode` method for different character sets.

This test suite should cover the main functionalities of the `Entities` class. Adjust the tests as necessary based on the actual content of the properties files and any additional context or requirements.