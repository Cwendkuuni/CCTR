Certainly! Below is a JUnit 4 test suite designed to comprehensively test the methods in the `Entities` class. This test suite includes tests for the `isNamedEntity`, `isBaseNamedEntity`, `getCharacterByName`, `escape`, and `unescape` methods.

```java
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Document;
import org.junit.Before;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;

import static org.junit.Assert.*;

public class EntitiesTest {

    private Document.OutputSettings outputSettings;

    @Before
    public void setUp() {
        outputSettings = new Document.OutputSettings();
        outputSettings.charset(Charset.forName("UTF-8"));
        outputSettings.escapeMode(Entities.EscapeMode.base);
    }

    @Test
    public void testIsNamedEntity() {
        assertTrue(Entities.isNamedEntity("lt"));
        assertTrue(Entities.isNamedEntity("amp"));
        assertFalse(Entities.isNamedEntity("nonexistent"));
    }

    @Test
    public void testIsBaseNamedEntity() {
        assertTrue(Entities.isBaseNamedEntity("lt"));
        assertTrue(Entities.isBaseNamedEntity("amp"));
        assertFalse(Entities.isBaseNamedEntity("nonexistent"));
    }

    @Test
    public void testGetCharacterByName() {
        assertEquals(Character.valueOf('<'), Entities.getCharacterByName("lt"));
        assertEquals(Character.valueOf('&'), Entities.getCharacterByName("amp"));
        assertNull(Entities.getCharacterByName("nonexistent"));
    }

    @Test
    public void testEscape() {
        String input = "This is a <test> & \"example\".";
        String expected = "This is a &lt;test&gt; &amp; &quot;example&quot;.";
        assertEquals(expected, Entities.escape(input, outputSettings));
    }

    @Test
    public void testEscapeWithXhtmlMode() {
        outputSettings.escapeMode(Entities.EscapeMode.xhtml);
        String input = "This is a <test> & \"example\".";
        String expected = "This is a &lt;test&gt; &amp; &quot;example&quot;.";
        assertEquals(expected, Entities.escape(input, outputSettings));
    }

    @Test
    public void testUnescape() {
        String input = "This is a &lt;test&gt; &amp; &quot;example&quot;.";
        String expected = "This is a <test> & \"example\".";
        assertEquals(expected, Entities.unescape(input));
    }

    @Test
    public void testUnescapeStrict() {
        String input = "This is a &lt;test&gt; &amp; &quot;example&quot;.";
        String expected = "This is a <test> & \"example\".";
        assertEquals(expected, Entities.unescape(input, true));
    }

    @Test
    public void testUnescapeNonStrict() {
        String input = "This is a &lt;test&gt &amp &quot;example&quot.";
        String expected = "This is a <test> & \"example\".";
        assertEquals(expected, Entities.unescape(input, false));
    }

    @Test
    public void testEscapeWithNonAsciiCharacters() {
        String input = "This is a test with non-ASCII: \u00A9.";
        String expected = "This is a test with non-ASCII: &copy;.";
        assertEquals(expected, Entities.escape(input, outputSettings));
    }

    @Test
    public void testEscapeWithSupplementaryCharacters() {
        String input = "This is a test with supplementary character: \uD83D\uDE00.";
        String expected = "This is a test with supplementary character: &#x1f600;.";
        assertEquals(expected, Entities.escape(input, outputSettings));
    }

    @Test
    public void testCanEncode() {
        CharsetEncoder encoder = Charset.forName("US-ASCII").newEncoder();
        assertTrue(Entities.canEncode(Entities.CoreCharset.ascii, 'A', encoder));
        assertFalse(Entities.canEncode(Entities.CoreCharset.ascii, '\u00A9', encoder));
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `Document.OutputSettings` object with UTF-8 encoding and the base escape mode.
- **Tests for `isNamedEntity` and `isBaseNamedEntity`**: These tests check if known entities like "lt" and "amp" are correctly identified.
- **Tests for `getCharacterByName`**: These tests verify that the correct character is returned for known entity names.
- **Tests for `escape` and `unescape`**: These tests ensure that strings are correctly escaped and unescaped, including handling of non-ASCII and supplementary characters.
- **Test for `canEncode`**: This test checks the `canEncode` method for ASCII characters.

This test suite should provide comprehensive coverage for the `Entities` class methods.