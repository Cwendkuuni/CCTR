```java
import org.jsoup.parser.Token;
import org.jsoup.parser.Token.*;
import org.jsoup.nodes.Attributes;
import org.junit.Test;
import static org.junit.Assert.*;

public class TokenTest {

    @Test
    public void testDoctypeReset() {
        Doctype doctype = new Doctype();
        doctype.name.append("html");
        doctype.pubSysKey = "public";
        doctype.publicIdentifier.append("publicId");
        doctype.systemIdentifier.append("systemId");
        doctype.forceQuirks = true;

        doctype.reset();

        assertEquals("", doctype.getName());
        assertNull(doctype.getPubSysKey());
        assertEquals("", doctype.getPublicIdentifier());
        assertEquals("", doctype.getSystemIdentifier());
        assertFalse(doctype.isForceQuirks());
    }

    @Test
    public void testStartTagReset() {
        StartTag startTag = new StartTag();
        startTag.name("div");
        startTag.selfClosing = true;
        startTag.attributes.put("class", "test");

        startTag.reset();

        assertNull(startTag.name());
        assertNull(startTag.getAttributes());
        assertFalse(startTag.isSelfClosing());
    }

    @Test
    public void testEndTagReset() {
        EndTag endTag = new EndTag();
        endTag.name("div");

        endTag.reset();

        assertNull(endTag.name());
    }

    @Test
    public void testCommentReset() {
        Comment comment = new Comment();
        comment.data.append("This is a comment");
        comment.bogus = true;

        comment.reset();

        assertEquals("", comment.getData());
        assertFalse(comment.bogus);
    }

    @Test
    public void testCharacterReset() {
        Character character = new Character();
        character.data("data");

        character.reset();

        assertNull(character.getData());
    }

    @Test
    public void testCDataToString() {
        CData cdata = new CData("cdata content");

        assertEquals("<![CDATA[cdata content]]>", cdata.toString());
    }

    @Test
    public void testEOFReset() {
        EOF eof = new EOF();

        assertSame(eof, eof.reset());
    }

    @Test
    public void testIsDoctype() {
        Doctype doctype = new Doctype();
        assertTrue(doctype.isDoctype());
    }

    @Test
    public void testAsDoctype() {
        Doctype doctype = new Doctype();
        assertSame(doctype, doctype.asDoctype());
    }

    @Test
    public void testIsStartTag() {
        StartTag startTag = new StartTag();
        assertTrue(startTag.isStartTag());
    }

    @Test
    public void testAsStartTag() {
        StartTag startTag = new StartTag();
        assertSame(startTag, startTag.asStartTag());
    }

    @Test
    public void testIsEndTag() {
        EndTag endTag = new EndTag();
        assertTrue(endTag.isEndTag());
    }

    @Test
    public void testAsEndTag() {
        EndTag endTag = new EndTag();
        assertSame(endTag, endTag.asEndTag());
    }

    @Test
    public void testIsComment() {
        Comment comment = new Comment();
        assertTrue(comment.isComment());
    }

    @Test
    public void testAsComment() {
        Comment comment = new Comment();
        assertSame(comment, comment.asComment());
    }

    @Test
    public void testIsCharacter() {
        Character character = new Character();
        assertTrue(character.isCharacter());
    }

    @Test
    public void testIsCData() {
        CData cdata = new CData("data");
        assertTrue(cdata.isCData());
    }

    @Test
    public void testAsCharacter() {
        Character character = new Character();
        assertSame(character, character.asCharacter());
    }

    @Test
    public void testIsEOF() {
        EOF eof = new EOF();
        assertTrue(eof.isEOF());
    }

    @Test
    public void testTokenType() {
        assertEquals(TokenType.Doctype, TokenType.valueOf("Doctype"));
        assertEquals(TokenType.StartTag, TokenType.valueOf("StartTag"));
        assertEquals(TokenType.EndTag, TokenType.valueOf("EndTag"));
        assertEquals(TokenType.Comment, TokenType.valueOf("Comment"));
        assertEquals(TokenType.Character, TokenType.valueOf("Character"));
        assertEquals(TokenType.EOF, TokenType.valueOf("EOF"));
    }
}
```