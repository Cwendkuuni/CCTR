```java
import org.jsoup.parser.Token;
import org.jsoup.parser.Token.*;
import org.jsoup.nodes.Attributes;
import org.junit.Test;
import static org.junit.Assert.*;

public class TokenTest {

    @Test
    public void testDoctypeReset() {
        Doctype doctype = new Doctype();
        doctype.name.append("html");
        doctype.pubSysKey = "public";
        doctype.publicIdentifier.append("publicId");
        doctype.systemIdentifier.append("systemId");
        doctype.forceQuirks = true;

        doctype.reset();

        assertEquals("", doctype.getName());
        assertNull(doctype.getPubSysKey());
        assertEquals("", doctype.getPublicIdentifier());
        assertEquals("", doctype.getSystemIdentifier());
        assertFalse(doctype.isForceQuirks());
    }

    @Test
    public void testTagReset() {
        StartTag startTag = new StartTag();
        startTag.name("div");
        startTag.appendAttributeName("class");
        startTag.appendAttributeValue("container");
        startTag.selfClosing = true;

        startTag.reset();

        assertNull(startTag.name());
        assertNull(startTag.normalName());
        assertNull(startTag.getAttributes());
        assertFalse(startTag.isSelfClosing());
    }

    @Test
    public void testNewAttribute() {
        StartTag startTag = new StartTag();
        startTag.appendAttributeName("class");
        startTag.appendAttributeValue("container");
        startTag.newAttribute();

        Attributes attributes = startTag.getAttributes();
        assertNotNull(attributes);
        assertEquals("container", attributes.get("class"));
    }

    @Test
    public void testFinaliseTag() {
        StartTag startTag = new StartTag();
        startTag.appendAttributeName("id");
        startTag.appendAttributeValue("header");
        startTag.finaliseTag();

        Attributes attributes = startTag.getAttributes();
        assertNotNull(attributes);
        assertEquals("header", attributes.get("id"));
    }

    @Test
    public void testStartTagNameAttr() {
        StartTag startTag = new StartTag();
        Attributes attributes = new Attributes();
        attributes.put("class", "container");

        startTag.nameAttr("div", attributes);

        assertEquals("div", startTag.name());
        assertEquals("container", startTag.getAttributes().get("class"));
    }

    @Test
    public void testStartTagToString() {
        StartTag startTag = new StartTag();
        startTag.nameAttr("div", new Attributes());

        assertEquals("<div>", startTag.toString());

        Attributes attributes = new Attributes();
        attributes.put("class", "container");
        startTag.nameAttr("div", attributes);

        assertEquals("<div class=\"container\">", startTag.toString());
    }

    @Test
    public void testEndTagToString() {
        EndTag endTag = new EndTag();
        endTag.name("div");

        assertEquals("</div>", endTag.toString());
    }

    @Test
    public void testCommentReset() {
        Comment comment = new Comment();
        comment.data.append("This is a comment");
        comment.bogus = true;

        comment.reset();

        assertEquals("", comment.getData());
        assertFalse(comment.bogus);
    }

    @Test
    public void testCommentToString() {
        Comment comment = new Comment();
        comment.data.append("This is a comment");

        assertEquals("<!--This is a comment-->", comment.toString());
    }

    @Test
    public void testCharacterReset() {
        Character character = new Character();
        character.data("text");

        character.reset();

        assertNull(character.getData());
    }

    @Test
    public void testCharacterToString() {
        Character character = new Character();
        character.data("text");

        assertEquals("text", character.toString());
    }

    @Test
    public void testCDataToString() {
        CData cdata = new CData("cdata content");

        assertEquals("<![CDATA[cdata content]]>", cdata.toString());
    }

    @Test
    public void testEOFReset() {
        EOF eof = new EOF();

        assertSame(eof, eof.reset());
    }

    @Test
    public void testTokenTypeMethods() {
        Doctype doctype = new Doctype();
        assertTrue(doctype.isDoctype());
        assertSame(doctype, doctype.asDoctype());

        StartTag startTag = new StartTag();
        assertTrue(startTag.isStartTag());
        assertSame(startTag, startTag.asStartTag());

        EndTag endTag = new EndTag();
        assertTrue(endTag.isEndTag());
        assertSame(endTag, endTag.asEndTag());

        Comment comment = new Comment();
        assertTrue(comment.isComment());
        assertSame(comment, comment.asComment());

        Character character = new Character();
        assertTrue(character.isCharacter());
        assertSame(character, character.asCharacter());

        CData cdata = new CData("data");
        assertTrue(cdata.isCData());

        EOF eof = new EOF();
        assertTrue(eof.isEOF());
    }
}
```