```java
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class CleanerTest {

    private Cleaner cleaner;
    private Whitelist whitelist;

    @Before
    public void setUp() {
        whitelist = Whitelist.basic();
        cleaner = new Cleaner(whitelist);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithNullWhitelist() {
        new Cleaner(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCleanWithNullDocument() {
        cleaner.clean(null);
    }

    @Test
    public void testCleanWithValidDocument() {
        String html = "<div><p>Hello <b>world</b></p></div>";
        Document dirtyDocument = Parser.parseBodyFragment(html, "");
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertNotNull(cleanDocument);
        assertEquals("<div>\n <p>Hello <b>world</b></p>\n</div>", cleanDocument.body().html());
    }

    @Test
    public void testCleanWithInvalidDocument() {
        String html = "<div><script>alert('XSS')</script><p>Hello</p></div>";
        Document dirtyDocument = Parser.parseBodyFragment(html, "");
        Document cleanDocument = cleaner.clean(dirtyDocument);

        assertNotNull(cleanDocument);
        assertEquals("<div>\n <p>Hello</p>\n</div>", cleanDocument.body().html());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testIsValidWithNullDocument() {
        cleaner.isValid(null);
    }

    @Test
    public void testIsValidWithValidDocument() {
        String html = "<div><p>Hello <b>world</b></p></div>";
        Document dirtyDocument = Parser.parseBodyFragment(html, "");
        boolean isValid = cleaner.isValid(dirtyDocument);

        assertTrue(isValid);
    }

    @Test
    public void testIsValidWithInvalidDocument() {
        String html = "<div><script>alert('XSS')</script><p>Hello</p></div>";
        Document dirtyDocument = Parser.parseBodyFragment(html, "");
        boolean isValid = cleaner.isValid(dirtyDocument);

        assertFalse(isValid);
    }

    @Test
    public void testCleanDocumentWithEnforcedAttributes() {
        Whitelist customWhitelist = new Whitelist()
                .addTags("a")
                .addAttributes("a", "href")
                .addEnforcedAttribute("a", "rel", "nofollow");
        Cleaner customCleaner = new Cleaner(customWhitelist);

        String html = "<a href='http://example.com'>Link</a>";
        Document dirtyDocument = Parser.parseBodyFragment(html, "");
        Document cleanDocument = customCleaner.clean(dirtyDocument);

        Element link = cleanDocument.selectFirst("a");
        assertNotNull(link);
        assertEquals("nofollow", link.attr("rel"));
    }
}
```

This test suite covers the following scenarios:

1. **Constructor Tests**: Ensures that the `Cleaner` constructor throws an exception when a null `Whitelist` is provided.
2. **Clean Method Tests**: 
   - Tests cleaning a valid document.
   - Tests cleaning a document with unsafe elements (e.g., `<script>` tags).
   - Ensures that the `clean` method throws an exception when a null document is provided.
3. **isValid Method Tests**:
   - Tests validation of a valid document.
   - Tests validation of a document with unsafe elements.
   - Ensures that the `isValid` method throws an exception when a null document is provided.
4. **Enforced Attributes Test**: Verifies that enforced attributes are correctly applied to elements during cleaning.