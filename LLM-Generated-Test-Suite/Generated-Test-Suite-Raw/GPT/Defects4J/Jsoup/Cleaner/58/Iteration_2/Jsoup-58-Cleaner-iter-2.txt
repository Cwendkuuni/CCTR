Certainly! Below is a JUnit 4 test suite for the `Cleaner` class. This test suite aims to cover the main functionalities of the class, including the `clean` and `isValid` methods, as well as the internal logic for copying safe nodes and creating safe elements.

```java
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class CleanerTest {

    private Cleaner cleaner;
    private Whitelist whitelist;

    @Before
    public void setUp() {
        whitelist = Whitelist.basic();
        cleaner = new Cleaner(whitelist);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithNullWhitelist() {
        new Cleaner(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCleanWithNullDocument() {
        cleaner.clean(null);
    }

    @Test
    public void testCleanWithValidDocument() {
        String html = "<div><p>Hello, <b>world</b>!</p></div>";
        Document dirty = Parser.parseBodyFragment(html, "");
        Document clean = cleaner.clean(dirty);

        assertEquals("<div><p>Hello, <b>world</b>!</p></div>", clean.body().html());
    }

    @Test
    public void testCleanWithInvalidDocument() {
        String html = "<div><script>alert('xss')</script><p>Hello, <b>world</b>!</p></div>";
        Document dirty = Parser.parseBodyFragment(html, "");
        Document clean = cleaner.clean(dirty);

        assertEquals("<div><p>Hello, <b>world</b>!</p></div>", clean.body().html());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testIsValidWithNullDocument() {
        cleaner.isValid(null);
    }

    @Test
    public void testIsValidWithValidDocument() {
        String html = "<div><p>Hello, <b>world</b>!</p></div>";
        Document dirty = Parser.parseBodyFragment(html, "");
        assertTrue(cleaner.isValid(dirty));
    }

    @Test
    public void testIsValidWithInvalidDocument() {
        String html = "<div><script>alert('xss')</script><p>Hello, <b>world</b>!</p></div>";
        Document dirty = Parser.parseBodyFragment(html, "");
        assertFalse(cleaner.isValid(dirty));
    }

    @Test
    public void testCopySafeNodes() {
        String html = "<div><p>Hello, <b>world</b>!</p></div>";
        Document dirty = Parser.parseBodyFragment(html, "");
        Document clean = Document.createShell("");

        int numDiscarded = cleaner.copySafeNodes(dirty.body(), clean.body());
        assertEquals(0, numDiscarded);
        assertEquals("<div><p>Hello, <b>world</b>!</p></div>", clean.body().html());
    }

    @Test
    public void testCopySafeNodesWithUnsafeNodes() {
        String html = "<div><script>alert('xss')</script><p>Hello, <b>world</b>!</p></div>";
        Document dirty = Parser.parseBodyFragment(html, "");
        Document clean = Document.createShell("");

        int numDiscarded = cleaner.copySafeNodes(dirty.body(), clean.body());
        assertEquals(1, numDiscarded);
        assertEquals("<div><p>Hello, <b>world</b>!</p></div>", clean.body().html());
    }

    @Test
    public void testCreateSafeElement() {
        Element sourceEl = new Element("p");
        sourceEl.attr("style", "color:red;");
        sourceEl.text("Hello, world!");

        Cleaner.ElementMeta meta = cleaner.createSafeElement(sourceEl);
        Element destEl = meta.el;

        assertEquals("p", destEl.tagName());
        assertEquals("Hello, world!", destEl.text());
        assertEquals(1, meta.numAttribsDiscarded); // Assuming "style" is not a safe attribute
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes a `Cleaner` instance with a basic `Whitelist`.
- **Constructor Tests**: Tests for the constructor to ensure it throws an exception when a null `Whitelist` is provided.
- **Clean Method Tests**: Tests for the `clean` method to ensure it correctly cleans valid and invalid documents.
- **IsValid Method Tests**: Tests for the `isValid` method to ensure it correctly identifies valid and invalid documents.
- **Internal Logic Tests**: Tests for the `copySafeNodes` and `createSafeElement` methods to ensure they function correctly.

This test suite provides a comprehensive coverage of the `Cleaner` class's functionality.