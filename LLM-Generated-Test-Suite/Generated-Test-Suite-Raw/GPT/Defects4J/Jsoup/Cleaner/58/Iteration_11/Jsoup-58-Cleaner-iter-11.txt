```java
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class CleanerTest {

    private Cleaner cleaner;
    private Whitelist whitelist;

    @Before
    public void setUp() {
        whitelist = Whitelist.basic();
        cleaner = new Cleaner(whitelist);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructorWithNullWhitelist() {
        new Cleaner(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCleanWithNullDocument() {
        cleaner.clean(null);
    }

    @Test
    public void testCleanWithEmptyDocument() {
        Document dirtyDoc = Parser.parse("", "");
        Document cleanDoc = cleaner.clean(dirtyDoc);

        assertNotNull(cleanDoc);
        assertEquals("", cleanDoc.body().html());
    }

    @Test
    public void testCleanWithValidDocument() {
        String html = "<p>Hello <b>world</b>!</p>";
        Document dirtyDoc = Parser.parse(html, "");
        Document cleanDoc = cleaner.clean(dirtyDoc);

        assertNotNull(cleanDoc);
        assertEquals("<p>Hello <b>world</b>!</p>", cleanDoc.body().html());
    }

    @Test
    public void testCleanWithInvalidDocument() {
        String html = "<p>Hello <script>alert('XSS')</script> world!</p>";
        Document dirtyDoc = Parser.parse(html, "");
        Document cleanDoc = cleaner.clean(dirtyDoc);

        assertNotNull(cleanDoc);
        assertEquals("<p>Hello  world!</p>", cleanDoc.body().html());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testIsValidWithNullDocument() {
        cleaner.isValid(null);
    }

    @Test
    public void testIsValidWithValidDocument() {
        String html = "<p>Hello <b>world</b>!</p>";
        Document dirtyDoc = Parser.parse(html, "");
        assertTrue(cleaner.isValid(dirtyDoc));
    }

    @Test
    public void testIsValidWithInvalidDocument() {
        String html = "<p>Hello <script>alert('XSS')</script> world!</p>";
        Document dirtyDoc = Parser.parse(html, "");
        assertFalse(cleaner.isValid(dirtyDoc));
    }

    @Test
    public void testIsValidWithHeadContent() {
        String html = "<head><title>Title</title></head><body><p>Hello world!</p></body>";
        Document dirtyDoc = Parser.parse(html, "");
        assertFalse(cleaner.isValid(dirtyDoc));
    }

    @Test
    public void testCopySafeNodes() {
        String html = "<p>Hello <b>world</b>!</p>";
        Document dirtyDoc = Parser.parse(html, "");
        Document cleanDoc = Document.createShell(dirtyDoc.baseUri());

        Element body = dirtyDoc.body();
        Element cleanBody = cleanDoc.body();

        int numDiscarded = cleaner.copySafeNodes(body, cleanBody);
        assertEquals(0, numDiscarded);
        assertEquals("<p>Hello <b>world</b>!</p>", cleanBody.html());
    }

    @Test
    public void testCopySafeNodesWithUnsafeTags() {
        String html = "<p>Hello <script>alert('XSS')</script> world!</p>";
        Document dirtyDoc = Parser.parse(html, "");
        Document cleanDoc = Document.createShell(dirtyDoc.baseUri());

        Element body = dirtyDoc.body();
        Element cleanBody = cleanDoc.body();

        int numDiscarded = cleaner.copySafeNodes(body, cleanBody);
        assertEquals(1, numDiscarded);
        assertEquals("<p>Hello  world!</p>", cleanBody.html());
    }
}
```
This test suite covers the main functionalities of the `Cleaner` class, including constructor validation, cleaning documents, and checking document validity. It uses JUnit 4 annotations and assertions to verify the expected behavior of the methods.