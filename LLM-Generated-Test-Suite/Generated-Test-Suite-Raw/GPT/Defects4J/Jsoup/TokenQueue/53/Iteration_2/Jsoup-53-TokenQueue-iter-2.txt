Certainly! Below is a comprehensive JUnit 4 test suite for the `TokenQueue` class. This suite aims to cover various scenarios for each method in the class.

```java
import org.junit.Before;
import org.junit.Test;
import org.jsoup.parser.TokenQueue;

import static org.junit.Assert.*;

public class TokenQueueTest {
    private TokenQueue tokenQueue;

    @Before
    public void setUp() {
        tokenQueue = new TokenQueue("Hello World");
    }

    @Test
    public void testIsEmpty() {
        assertFalse(tokenQueue.isEmpty());
        tokenQueue.consume("Hello World");
        assertTrue(tokenQueue.isEmpty());
    }

    @Test
    public void testPeek() {
        assertEquals('H', tokenQueue.peek());
        tokenQueue.consume();
        assertEquals('e', tokenQueue.peek());
    }

    @Test
    public void testAddFirstCharacter() {
        tokenQueue.addFirst('X');
        assertEquals('X', tokenQueue.peek());
    }

    @Test
    public void testAddFirstString() {
        tokenQueue.addFirst("Test");
        assertTrue(tokenQueue.matches("Test"));
    }

    @Test
    public void testMatches() {
        assertTrue(tokenQueue.matches("Hello"));
        assertFalse(tokenQueue.matches("World"));
    }

    @Test
    public void testMatchesCS() {
        assertTrue(tokenQueue.matchesCS("Hello"));
        assertFalse(tokenQueue.matchesCS("hello"));
    }

    @Test
    public void testMatchesAnyString() {
        assertTrue(tokenQueue.matchesAny("Hello", "World"));
        assertFalse(tokenQueue.matchesAny("Foo", "Bar"));
    }

    @Test
    public void testMatchesAnyChar() {
        assertTrue(tokenQueue.matchesAny('H', 'W'));
        assertFalse(tokenQueue.matchesAny('X', 'Y'));
    }

    @Test
    public void testMatchesStartTag() {
        TokenQueue tq = new TokenQueue("<html>");
        assertTrue(tq.matchesStartTag());
        tq.consume();
        assertFalse(tq.matchesStartTag());
    }

    @Test
    public void testMatchChomp() {
        assertTrue(tokenQueue.matchChomp("Hello"));
        assertFalse(tokenQueue.matchChomp("World"));
    }

    @Test
    public void testMatchesWhitespace() {
        tokenQueue.consume("Hello");
        assertTrue(tokenQueue.matchesWhitespace());
    }

    @Test
    public void testMatchesWord() {
        assertTrue(tokenQueue.matchesWord());
        tokenQueue.consume("Hello");
        assertFalse(tokenQueue.matchesWord());
    }

    @Test
    public void testAdvance() {
        tokenQueue.advance();
        assertEquals('e', tokenQueue.peek());
    }

    @Test
    public void testConsumeChar() {
        assertEquals('H', tokenQueue.consume());
        assertEquals('e', tokenQueue.peek());
    }

    @Test(expected = IllegalStateException.class)
    public void testConsumeString() {
        tokenQueue.consume("Hello");
        tokenQueue.consume("World"); // Should throw exception
    }

    @Test
    public void testConsumeTo() {
        assertEquals("Hello ", tokenQueue.consumeTo("World"));
    }

    @Test
    public void testConsumeToIgnoreCase() {
        assertEquals("Hello ", tokenQueue.consumeToIgnoreCase("world"));
    }

    @Test
    public void testConsumeToAny() {
        assertEquals("Hello ", tokenQueue.consumeToAny("World", "Foo"));
    }

    @Test
    public void testChompTo() {
        assertEquals("Hello ", tokenQueue.chompTo("World"));
        assertEquals("World", tokenQueue.remainder());
    }

    @Test
    public void testChompToIgnoreCase() {
        assertEquals("Hello ", tokenQueue.chompToIgnoreCase("world"));
        assertEquals("World", tokenQueue.remainder());
    }

    @Test
    public void testChompBalanced() {
        TokenQueue tq = new TokenQueue("(one (two) three) four");
        assertEquals("one (two) three", tq.chompBalanced('(', ')'));
    }

    @Test
    public void testUnescape() {
        assertEquals("Hello", TokenQueue.unescape("Hello"));
        assertEquals("He\\llo", TokenQueue.unescape("He\\\\llo"));
    }

    @Test
    public void testConsumeWhitespace() {
        tokenQueue.consume("Hello");
        assertTrue(tokenQueue.consumeWhitespace());
        assertEquals('W', tokenQueue.peek());
    }

    @Test
    public void testConsumeWord() {
        assertEquals("Hello", tokenQueue.consumeWord());
        assertEquals(' ', tokenQueue.peek());
    }

    @Test
    public void testConsumeTagName() {
        TokenQueue tq = new TokenQueue("tag-name");
        assertEquals("tag-name", tq.consumeTagName());
    }

    @Test
    public void testConsumeElementSelector() {
        TokenQueue tq = new TokenQueue("element|selector");
        assertEquals("element|selector", tq.consumeElementSelector());
    }

    @Test
    public void testConsumeCssIdentifier() {
        TokenQueue tq = new TokenQueue("css-identifier");
        assertEquals("css-identifier", tq.consumeCssIdentifier());
    }

    @Test
    public void testConsumeAttributeKey() {
        TokenQueue tq = new TokenQueue("attribute:key");
        assertEquals("attribute:key", tq.consumeAttributeKey());
    }

    @Test
    public void testRemainder() {
        tokenQueue.consume("Hello ");
        assertEquals("World", tokenQueue.remainder());
    }

    @Test
    public void testToString() {
        assertEquals("Hello World", tokenQueue.toString());
        tokenQueue.consume("Hello ");
        assertEquals("World", tokenQueue.toString());
    }
}
```

This test suite covers all the methods in the `TokenQueue` class, ensuring that each method behaves as expected under various conditions.